/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Landing = __webpack_require__(178);

	var _Landing2 = _interopRequireDefault(_Landing);

	var _LoginPage = __webpack_require__(239);

	var _LoginPage2 = _interopRequireDefault(_LoginPage);

	var _RegistrationPage = __webpack_require__(244);

	var _RegistrationPage2 = _interopRequireDefault(_RegistrationPage);

	var _Container = __webpack_require__(245);

	var _Container2 = _interopRequireDefault(_Container);

	var _MasterPage = __webpack_require__(247);

	var _MasterPage2 = _interopRequireDefault(_MasterPage);

	var _ProfilePage = __webpack_require__(274);

	var _ProfilePage2 = _interopRequireDefault(_ProfilePage);

	var _ForgotPage = __webpack_require__(275);

	var _ForgotPage2 = _interopRequireDefault(_ForgotPage);

	var _FindVocalRange = __webpack_require__(276);

	var _FindVocalRange2 = _interopRequireDefault(_FindVocalRange);

	var _Exercises = __webpack_require__(279);

	var _Exercises2 = _interopRequireDefault(_Exercises);

	var _reactRouter = __webpack_require__(179);

	var _reactStormpath = __webpack_require__(234);

	var _reactStormpath2 = _interopRequireDefault(_reactStormpath);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	_reactStormpath2.default.init();

	_reactDom2.default.render(_react2.default.createElement(
		_reactStormpath.Router,
		{ history: _reactRouter.browserHistory },
		_react2.default.createElement(_reactStormpath.HomeRoute, { path: '/landing', component: _Landing2.default }),
		_react2.default.createElement(_reactRouter.Route, { path: '/register', component: _RegistrationPage2.default }),
		_react2.default.createElement(_reactRouter.Route, { path: '/forgot', component: _ForgotPage2.default }),
		_react2.default.createElement(_reactStormpath.LoginRoute, { path: '/login', component: _LoginPage2.default }),
		_react2.default.createElement(
			_reactRouter.Route,
			{ path: '/', component: _Container2.default },
			_react2.default.createElement(
				_reactStormpath.AuthenticatedRoute,
				null,
				_react2.default.createElement(_reactStormpath.HomeRoute, { path: '/home', component: _MasterPage2.default })
			),
			_react2.default.createElement(
				_reactStormpath.AuthenticatedRoute,
				null,
				_react2.default.createElement(_reactRouter.IndexRoute, { component: _MasterPage2.default })
			),
			_react2.default.createElement(_reactStormpath.AuthenticatedRoute, { path: '/profile', component: _ProfilePage2.default }),
			_react2.default.createElement(_reactStormpath.AuthenticatedRoute, { path: '/exercises', component: _Exercises2.default }),
			_react2.default.createElement(_reactStormpath.AuthenticatedRoute, { path: '/range', component: _FindVocalRange2.default })
		)
	)
	// <FindVocalRange />


	, document.getElementById('app-container'));

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(2);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var ReactChildren = __webpack_require__(5);
	var ReactComponent = __webpack_require__(18);
	var ReactPureComponent = __webpack_require__(21);
	var ReactClass = __webpack_require__(22);
	var ReactDOMFactories = __webpack_require__(24);
	var ReactElement = __webpack_require__(9);
	var ReactPropTypes = __webpack_require__(29);
	var ReactVersion = __webpack_require__(30);

	var onlyChild = __webpack_require__(31);
	var warning = __webpack_require__(11);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(25);
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var __spread = _assign;

	if (process.env.NODE_ENV !== 'production') {
	  var warned = false;
	  __spread = function () {
	    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
	    warned = true;
	    return _assign.apply(null, arguments);
	  };
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,
	  PureComponent: ReactPureComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 3 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 4 */
/***/ function(module, exports) {

	'use strict';
	/* eslint-disable no-unused-vars */
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (e) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var PooledClass = __webpack_require__(6);
	var ReactElement = __webpack_require__(9);

	var emptyFunction = __webpack_require__(12);
	var traverseAllChildren = __webpack_require__(15);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;


	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var invariant = __webpack_require__(8);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 7 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var ReactCurrentOwner = __webpack_require__(10);

	var warning = __webpack_require__(11);
	var canDefineProperty = __webpack_require__(13);
	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var REACT_ELEMENT_TYPE = __webpack_require__(14);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	var specialPropKeyWarningShown, specialPropRefWarningShown;

	function hasValidRef(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};

	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = _assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 10 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyFunction = __webpack_require__(12);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };

	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }

	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }

	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }

	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 12 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    // $FlowFixMe https://github.com/facebook/flow/issues/285
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 14 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.

	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var ReactCurrentOwner = __webpack_require__(10);
	var REACT_ELEMENT_TYPE = __webpack_require__(14);

	var getIteratorFn = __webpack_require__(16);
	var invariant = __webpack_require__(8);
	var KeyEscapeUtils = __webpack_require__(17);
	var warning = __webpack_require__(11);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 16 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 17 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var ReactNoopUpdateQueue = __webpack_require__(19);

	var canDefineProperty = __webpack_require__(13);
	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var warning = __webpack_require__(11);

	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var ReactComponent = __webpack_require__(18);
	var ReactNoopUpdateQueue = __webpack_require__(19);

	var emptyObject = __webpack_require__(20);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;

	module.exports = ReactPureComponent;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7),
	    _assign = __webpack_require__(4);

	var ReactComponent = __webpack_require__(18);
	var ReactElement = __webpack_require__(9);
	var ReactPropTypeLocationNames = __webpack_require__(23);
	var ReactNoopUpdateQueue = __webpack_require__(19);

	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var MIXINS_KEY = 'mixins';

	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */


	var injectedMixins = [];

	/**
	 * Composite components are higher-level components that compose other composite
	 * or host components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: 'DEFINE_MANY',

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: 'DEFINE_MANY',

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: 'DEFINE_MANY',

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: 'DEFINE_MANY',

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: 'DEFINE_MANY',

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: 'DEFINE_MANY_MERGED',

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: 'DEFINE_MANY_MERGED',

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: 'DEFINE_MANY_MERGED',

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: 'DEFINE_ONCE',

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: 'DEFINE_MANY',

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: 'DEFINE_MANY',

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: 'DEFINE_MANY',

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: 'DEFINE_ONCE',

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: 'DEFINE_MANY',

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: 'DEFINE_MANY',

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: 'DEFINE_MANY',

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: 'OVERRIDE_BASE'

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, 'childContext');
	    }
	    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, 'context');
	    }
	    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, 'prop');
	    }
	    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but only in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
	    }
	  }
	}

	function validateMethodOverride(isAlreadyDefined, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === 'OVERRIDE_BASE') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (isAlreadyDefined) {
	    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classes.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    if (process.env.NODE_ENV !== 'production') {
	      var typeofSpec = typeof spec;
	      var isMixinValid = typeofSpec === 'object' && spec !== null;

	      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
	    }

	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;

	  var proto = Constructor.prototype;
	  var autoBindPairs = proto.__reactAutoBindPairs;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    var isAlreadyDefined = proto.hasOwnProperty(name);
	    validateMethodOverride(isAlreadyDefined, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        autoBindPairs.push(name, property);
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === 'DEFINE_MANY_MERGED') {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === 'DEFINE_MANY') {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;

	    var isInherited = name in Constructor;
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  var pairs = component.__reactAutoBindPairs;
	  for (var i = 0; i < pairs.length; i += 2) {
	    var autoBindKey = pairs[i];
	    var method = pairs[i + 1];
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback, 'replaceState');
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  }
	};

	var ReactClassComponent = function () {};
	_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function (props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (initialState === undefined && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;

	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactElement = __webpack_require__(9);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(25);
	  createDOMFactory = ReactElementValidator.createFactory;
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),

	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(10);
	var ReactComponentTreeHook = __webpack_require__(26);
	var ReactElement = __webpack_require__(9);

	var checkReactTypeSpec = __webpack_require__(27);

	var canDefineProperty = __webpack_require__(13);
	var getIteratorFn = __webpack_require__(16);
	var warning = __webpack_require__(11);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (memoizer[currentComponentErrorInfo]) {
	    return;
	  }
	  memoizer[currentComponentErrorInfo] = true;

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    if (!validType) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : void 0;
	    }

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var ReactCurrentOwner = __webpack_require__(10);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty)
	  // Strip regex characters so we can use it for regex
	  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  // Remove hasOwnProperty from the template to make it generic
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}

	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

	var setItem;
	var getItem;
	var removeItem;
	var getItemIDs;
	var addRoot;
	var removeRoot;
	var getRootIDs;

	if (canUseCollections) {
	  var itemMap = new Map();
	  var rootIDSet = new Set();

	  setItem = function (id, item) {
	    itemMap.set(id, item);
	  };
	  getItem = function (id) {
	    return itemMap.get(id);
	  };
	  removeItem = function (id) {
	    itemMap['delete'](id);
	  };
	  getItemIDs = function () {
	    return Array.from(itemMap.keys());
	  };

	  addRoot = function (id) {
	    rootIDSet.add(id);
	  };
	  removeRoot = function (id) {
	    rootIDSet['delete'](id);
	  };
	  getRootIDs = function () {
	    return Array.from(rootIDSet.keys());
	  };
	} else {
	  var itemByKey = {};
	  var rootByKey = {};

	  // Use non-numeric keys to prevent V8 performance issues:
	  // https://github.com/facebook/react/pull/7232
	  var getKeyFromID = function (id) {
	    return '.' + id;
	  };
	  var getIDFromKey = function (key) {
	    return parseInt(key.substr(1), 10);
	  };

	  setItem = function (id, item) {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  };
	  getItem = function (id) {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  };
	  removeItem = function (id) {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  };
	  getItemIDs = function () {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  };

	  addRoot = function (id) {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  };
	  removeRoot = function (id) {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  };
	  getRootIDs = function () {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  };
	}

	var unmountedIDs = [];

	function purgeDeep(id) {
	  var item = getItem(id);
	  if (item) {
	    var childIDs = item.childIDs;

	    removeItem(id);
	    childIDs.forEach(purgeDeep);
	  }
	}

	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}

	function getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}

	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}

	var ReactComponentTreeHook = {
	  onSetChildren: function (id, nextChildIDs) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.childIDs = nextChildIDs;

	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = getItem(nextChildID);
	      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent id is missing.
	      }
	      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function (id, element, parentID) {
	    var item = {
	      element: element,
	      parentID: parentID,
	      text: null,
	      childIDs: [],
	      isMounted: false,
	      updateCount: 0
	    };
	    setItem(id, item);
	  },
	  onBeforeUpdateComponent: function (id, element) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function (id) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function (id) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function (id) {
	    var item = getItem(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function () {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }

	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function (id) {
	    var item = getItem(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function (topElement) {
	    var info = '';
	    if (topElement) {
	      var name = getDisplayName(topElement);
	      var owner = topElement._owner;
	      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
	    }

	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;

	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function (id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function (id) {
	    var item = getItem(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return getDisplayName(element);
	  },
	  getElement: function (id) {
	    var item = getItem(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function (id) {
	    var item = getItem(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function (id) {
	    var item = getItem(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function (id) {
	    var item = getItem(id);
	    return item ? item.updateCount : 0;
	  },


	  getRootIDs: getRootIDs,
	  getRegisteredIDs: getItemIDs
	};

	module.exports = ReactComponentTreeHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var ReactPropTypeLocationNames = __webpack_require__(23);
	var ReactPropTypesSecret = __webpack_require__(28);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}

	var loggedTypeFailures = {};

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var componentStackInfo = '';

	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(26);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }

	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}

	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 28 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactElement = __webpack_require__(9);
	var ReactPropTypeLocationNames = __webpack_require__(23);
	var ReactPropTypesSecret = __webpack_require__(28);

	var emptyFunction = __webpack_require__(12);
	var getIteratorFn = __webpack_require__(16);
	var warning = __webpack_require__(11);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),
	  symbol: createPrimitiveTypeChecker('symbol'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	/*eslint-disable no-self-compare*/
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    return x !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	/*eslint-enable no-self-compare*/

	/**
	 * We use an Error-like object for backward compatibility as people may call
	 * PropTypes directly and inspect their output. However we don't use real
	 * Errors anymore. We don't inspect their stack anyway, and creating them
	 * is prohibitively expensive if they are created too often, such as what
	 * happens in oneOfType() for any type before the one that matched.
	 */
	function PropTypeError(message) {
	  this.message = message;
	  this.stack = '';
	}
	// Make `instanceof Error` still work for returned errors.
	PropTypeError.prototype = Error.prototype;

	function createChainableTypeChecker(validate) {
	  if (process.env.NODE_ENV !== 'production') {
	    var manualPropTypeCallCache = {};
	  }
	  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (process.env.NODE_ENV !== 'production') {
	      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {
	        var cacheKey = componentName + ':' + propName;
	        if (!manualPropTypeCallCache[cacheKey]) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in production with the next major version. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName) : void 0;
	          manualPropTypeCallCache[cacheKey] = true;
	        }
	      }
	    }
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        if (props[propName] === null) {
	          return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	        }
	        return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName, secret) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	    }
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!ReactElement.isValidElement(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (is(propValue, expectedValues[i])) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	    }
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	function isSymbol(propType, propValue) {
	  // Native Symbol.
	  if (propType === 'symbol') {
	    return true;
	  }

	  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	  if (propValue['@@toStringTag'] === 'Symbol') {
	    return true;
	  }

	  // Fallback for non-spec compliant Symbols which are polyfilled.
	  if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	    return true;
	  }

	  return false;
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  if (isSymbol(propType, propValue)) {
	    return 'symbol';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return ANONYMOUS;
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 30 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	module.exports = '15.4.1';

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	'use strict';

	var _prodInvariant = __webpack_require__(7);

	var ReactElement = __webpack_require__(9);

	var invariant = __webpack_require__(8);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(33);


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDefaultInjection = __webpack_require__(38);
	var ReactMount = __webpack_require__(166);
	var ReactReconciler = __webpack_require__(59);
	var ReactUpdates = __webpack_require__(56);
	var ReactVersion = __webpack_require__(171);

	var findDOMNode = __webpack_require__(172);
	var getHostComponentFromComposite = __webpack_require__(173);
	var renderSubtreeIntoContainer = __webpack_require__(174);
	var warning = __webpack_require__(11);

	ReactDefaultInjection.inject();

	var ReactDOM = {
	  findDOMNode: findDOMNode,
	  render: ReactMount.render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    ComponentTree: {
	      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
	      getNodeFromInstance: function (inst) {
	        // inst is an internal instance (but could be a composite)
	        if (inst._renderedComponent) {
	          inst = getHostComponentFromComposite(inst);
	        }
	        if (inst) {
	          return ReactDOMComponentTree.getNodeFromInstance(inst);
	        } else {
	          return null;
	        }
	      }
	    },
	    Mount: ReactMount,
	    Reconciler: ReactReconciler
	  });
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(48);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        // Firefox does not have the issue with devtools loaded over file://
	        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
	        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    var testFunc = function testFn() {};
	    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
	        break;
	      }
	    }
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ReactInstrumentation = __webpack_require__(62);
	  var ReactDOMUnknownPropertyHook = __webpack_require__(175);
	  var ReactDOMNullInputValuePropHook = __webpack_require__(176);
	  var ReactDOMInvalidARIAHook = __webpack_require__(177);

	  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
	}

	module.exports = ReactDOM;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var DOMProperty = __webpack_require__(36);
	var ReactDOMComponentFlags = __webpack_require__(37);

	var invariant = __webpack_require__(8);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var Flags = ReactDOMComponentFlags;

	var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

	/**
	 * Drill down (through composites and empty components) until we get a host or
	 * host text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	function getRenderedHostOrTextFromComponent(component) {
	  var rendered;
	  while (rendered = component._renderedComponent) {
	    component = rendered;
	  }
	  return component;
	}

	/**
	 * Populate `_hostNode` on the rendered host/text component with the given
	 * DOM node. The passed `inst` can be a composite.
	 */
	function precacheNode(inst, node) {
	  var hostInst = getRenderedHostOrTextFromComponent(inst);
	  hostInst._hostNode = node;
	  node[internalInstanceKey] = hostInst;
	}

	function uncacheNode(inst) {
	  var node = inst._hostNode;
	  if (node) {
	    delete node[internalInstanceKey];
	    inst._hostNode = null;
	  }
	}

	/**
	 * Populate `_hostNode` on each child of `inst`, assuming that the children
	 * match up with the DOM (element) children of `node`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a node sequentially and have to walk from the start to our target
	 * node every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the DOM nodes we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child nodes are always cached (until it unmounts).
	 */
	function precacheChildNodes(inst, node) {
	  if (inst._flags & Flags.hasCachedChildNodes) {
	    return;
	  }
	  var children = inst._renderedChildren;
	  var childNode = node.firstChild;
	  outer: for (var name in children) {
	    if (!children.hasOwnProperty(name)) {
	      continue;
	    }
	    var childInst = children[name];
	    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
	    if (childID === 0) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childNode !== null; childNode = childNode.nextSibling) {
	      if (childNode.nodeType === 1 && childNode.getAttribute(ATTR_NAME) === String(childID) || childNode.nodeType === 8 && childNode.nodeValue === ' react-text: ' + childID + ' ' || childNode.nodeType === 8 && childNode.nodeValue === ' react-empty: ' + childID + ' ') {
	        precacheNode(childInst, childNode);
	        continue outer;
	      }
	    }
	    // We reached the end of the DOM children without finding an ID match.
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
	  }
	  inst._flags |= Flags.hasCachedChildNodes;
	}

	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }

	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }

	  var closest;
	  var inst;
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	    if (parents.length) {
	      precacheChildNodes(inst, node);
	    }
	  }

	  return closest;
	}

	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode(node) {
	  var inst = getClosestInstanceFromNode(node);
	  if (inst != null && inst._hostNode === node) {
	    return inst;
	  } else {
	    return null;
	  }
	}

	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance(inst) {
	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  if (inst._hostNode) {
	    return inst._hostNode;
	  }

	  // Walk up the tree until we find an ancestor whose DOM node we have cached.
	  var parents = [];
	  while (!inst._hostNode) {
	    parents.push(inst);
	    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
	    inst = inst._hostParent;
	  }

	  // Now parents contains each ancestor that does *not* have a cached native
	  // node, and `inst` is the deepest ancestor that does.
	  for (; parents.length; inst = parents.pop()) {
	    precacheChildNodes(inst, inst._hostNode);
	  }

	  return inst._hostNode;
	}

	var ReactDOMComponentTree = {
	  getClosestInstanceFromNode: getClosestInstanceFromNode,
	  getInstanceFromNode: getInstanceFromNode,
	  getNodeFromInstance: getNodeFromInstance,
	  precacheChildNodes: precacheChildNodes,
	  precacheNode: precacheNode,
	  uncacheNode: uncacheNode
	};

	module.exports = ReactDOMComponentTree;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 35 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   *
	   * autofocus is predefined, because adding it to the property whitelist
	   * causes unintended side effects.
	   *
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 37 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMComponentFlags = {
	  hasCachedChildNodes: 1 << 0
	};

	module.exports = ReactDOMComponentFlags;

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ARIADOMPropertyConfig = __webpack_require__(39);
	var BeforeInputEventPlugin = __webpack_require__(40);
	var ChangeEventPlugin = __webpack_require__(55);
	var DefaultEventPluginOrder = __webpack_require__(72);
	var EnterLeaveEventPlugin = __webpack_require__(73);
	var HTMLDOMPropertyConfig = __webpack_require__(78);
	var ReactComponentBrowserEnvironment = __webpack_require__(79);
	var ReactDOMComponent = __webpack_require__(92);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMEmptyComponent = __webpack_require__(137);
	var ReactDOMTreeTraversal = __webpack_require__(138);
	var ReactDOMTextComponent = __webpack_require__(139);
	var ReactDefaultBatchingStrategy = __webpack_require__(140);
	var ReactEventListener = __webpack_require__(141);
	var ReactInjection = __webpack_require__(144);
	var ReactReconcileTransaction = __webpack_require__(145);
	var SVGDOMPropertyConfig = __webpack_require__(153);
	var SelectEventPlugin = __webpack_require__(154);
	var SimpleEventPlugin = __webpack_require__(155);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
	  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
	    return new ReactDOMEmptyComponent(instantiate);
	  });

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	}

	module.exports = {
	  inject: inject
	};

/***/ },
/* 39 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ARIADOMPropertyConfig = {
	  Properties: {
	    // Global States and Properties
	    'aria-current': 0, // state
	    'aria-details': 0,
	    'aria-disabled': 0, // state
	    'aria-hidden': 0, // state
	    'aria-invalid': 0, // state
	    'aria-keyshortcuts': 0,
	    'aria-label': 0,
	    'aria-roledescription': 0,
	    // Widget Attributes
	    'aria-autocomplete': 0,
	    'aria-checked': 0,
	    'aria-expanded': 0,
	    'aria-haspopup': 0,
	    'aria-level': 0,
	    'aria-modal': 0,
	    'aria-multiline': 0,
	    'aria-multiselectable': 0,
	    'aria-orientation': 0,
	    'aria-placeholder': 0,
	    'aria-pressed': 0,
	    'aria-readonly': 0,
	    'aria-required': 0,
	    'aria-selected': 0,
	    'aria-sort': 0,
	    'aria-valuemax': 0,
	    'aria-valuemin': 0,
	    'aria-valuenow': 0,
	    'aria-valuetext': 0,
	    // Live Region Attributes
	    'aria-atomic': 0,
	    'aria-busy': 0,
	    'aria-live': 0,
	    'aria-relevant': 0,
	    // Drag-and-Drop Attributes
	    'aria-dropeffect': 0,
	    'aria-grabbed': 0,
	    // Relationship Attributes
	    'aria-activedescendant': 0,
	    'aria-colcount': 0,
	    'aria-colindex': 0,
	    'aria-colspan': 0,
	    'aria-controls': 0,
	    'aria-describedby': 0,
	    'aria-errormessage': 0,
	    'aria-flowto': 0,
	    'aria-labelledby': 0,
	    'aria-owns': 0,
	    'aria-posinset': 0,
	    'aria-rowcount': 0,
	    'aria-rowindex': 0,
	    'aria-rowspan': 0,
	    'aria-setsize': 0
	  },
	  DOMAttributeNames: {},
	  DOMPropertyNames: {}
	};

	module.exports = ARIADOMPropertyConfig;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(41);
	var ExecutionEnvironment = __webpack_require__(48);
	var FallbackCompositionState = __webpack_require__(49);
	var SyntheticCompositionEvent = __webpack_require__(52);
	var SyntheticInputEvent = __webpack_require__(54);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case 'topCompositionStart':
	      return eventTypes.compositionStart;
	    case 'topCompositionEnd':
	      return eventTypes.compositionEnd;
	    case 'topCompositionUpdate':
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topKeyUp':
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case 'topKeyDown':
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case 'topKeyPress':
	    case 'topMouseDown':
	    case 'topBlur':
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topCompositionEnd':
	      return getDataFromCustomEvent(nativeEvent);
	    case 'topKeyPress':
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case 'topTextInput':
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (currentComposition) {
	    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case 'topPaste':
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case 'topKeyPress':
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case 'topCompositionEnd':
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(42);
	var EventPluginUtils = __webpack_require__(44);

	var accumulateInto = __webpack_require__(46);
	var forEachAccumulated = __webpack_require__(47);
	var warning = __webpack_require__(11);

	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, phase, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
	  }
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    var targetInst = event._targetInst;
	    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
	    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var EventPluginRegistry = __webpack_require__(43);
	var EventPluginUtils = __webpack_require__(44);
	var ReactErrorUtils = __webpack_require__(45);

	var accumulateInto = __webpack_require__(46);
	var forEachAccumulated = __webpack_require__(47);
	var invariant = __webpack_require__(8);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	var getDictionaryKey = function (inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	};

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));
	    default:
	      return false;
	  }
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  /**
	   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {function} listener The callback to store.
	   */
	  putListener: function (inst, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

	    var key = getDictionaryKey(inst);
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[key] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(inst, registrationName, listener);
	    }
	  },

	  /**
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (inst, registrationName) {
	    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	    // live here; needs to be moved to a better place soon
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
	      return null;
	    }
	    var key = getDictionaryKey(inst);
	    return bankForRegistrationName && bankForRegistrationName[key];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (inst, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(inst, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      var key = getDictionaryKey(inst);
	      delete bankForRegistrationName[key];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   */
	  deleteAllListeners: function (inst) {
	    var key = getDictionaryKey(inst);
	    for (var registrationName in listenerBank) {
	      if (!listenerBank.hasOwnProperty(registrationName)) {
	        continue;
	      }

	      if (!listenerBank[registrationName][key]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(inst, registrationName);
	      }

	      delete listenerBank[registrationName][key];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
	    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
	  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

	  if (process.env.NODE_ENV !== 'production') {
	    var lowerCasedName = registrationName.toLowerCase();
	    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Mapping from lowercase registration names to the properly cased version,
	   * used to warn in the case of missing event handlers. Available
	   * only in __DEV__.
	   * @type {Object}
	   */
	  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
	  // Trust the developer to only use possibleRegistrationNames in __DEV__

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (injectedEventPluginOrder) {
	    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
	    // Clone the ordering so it cannot be dynamically mutated.
	    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var pluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
	        namesToPlugins[pluginName] = pluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    if (dispatchConfig.phasedRegistrationNames !== undefined) {
	      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
	      // that it is not undefined.
	      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

	      for (var phase in phasedRegistrationNames) {
	        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
	          continue;
	        }
	        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
	        if (pluginModule) {
	          return pluginModule;
	        }
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    eventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
	      for (var lowerCasedName in possibleRegistrationNames) {
	        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
	          delete possibleRegistrationNames[lowerCasedName];
	        }
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var ReactErrorUtils = __webpack_require__(45);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `ComponentTree`: [required] Module that can convert between React instances
	 *   and actual node references.
	 */
	var ComponentTree;
	var TreeTraversal;
	var injection = {
	  injectComponentTree: function (Injected) {
	    ComponentTree = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	    }
	  },
	  injectTreeTraversal: function (Injected) {
	    TreeTraversal = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
	    }
	  }
	};

	function isEndish(topLevelType) {
	  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
	}

	function isMoveish(topLevelType) {
	  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
	}
	function isStartish(topLevelType) {
	  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchInstances[i])) {
	        return dispatchInstances[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchInstances)) {
	      return dispatchInstances;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchInstances = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchInstance = event._dispatchInstances;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
	  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
	  var res = dispatchListener ? dispatchListener(event) : null;
	  event.currentTarget = null;
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getInstanceFromNode: function (node) {
	    return ComponentTree.getInstanceFromNode(node);
	  },
	  getNodeFromInstance: function (node) {
	    return ComponentTree.getNodeFromInstance(node);
	  },
	  isAncestor: function (a, b) {
	    return TreeTraversal.isAncestor(a, b);
	  },
	  getLowestCommonAncestor: function (a, b) {
	    return TreeTraversal.getLowestCommonAncestor(a, b);
	  },
	  getParentInstance: function (inst) {
	    return TreeTraversal.getParentInstance(inst);
	  },
	  traverseTwoPhase: function (target, fn, arg) {
	    return TreeTraversal.traverseTwoPhase(target, fn, arg);
	  },
	  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
	    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a) {
	  try {
	    func(a);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
	      var boundFunc = func.bind(null, a);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      // $FlowFixMe https://github.com/facebook/flow/issues/2336
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }

	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 47 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */

	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}

	module.exports = forEachAccumulated;

/***/ },
/* 48 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var PooledClass = __webpack_require__(50);

	var getTextContentAccessor = __webpack_require__(51);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	_assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var PooledClass = __webpack_require__(50);

	var emptyFunction = __webpack_require__(12);
	var warning = __webpack_require__(11);

	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';

	var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  if (process.env.NODE_ENV !== 'production') {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }

	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}

	_assign(SyntheticEvent.prototype, {

	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else if (typeof event.returnValue !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }

	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      if (process.env.NODE_ENV !== 'production') {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      } else {
	        this[propName] = null;
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
	    }
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	if (process.env.NODE_ENV !== 'production') {
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function (target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function (constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function (target, prop, value) {
	            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
	              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();

	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;

	/**
	  * Helper to nullify syntheticEvent instance properties when destructing
	  *
	  * @param {object} SyntheticEvent
	  * @param {String} propName
	  * @return {object} defineProperty object
	  */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };

	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }

	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }

	  function warn(action, result) {
	    var warningCondition = false;
	    process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(42);
	var EventPropagators = __webpack_require__(41);
	var ExecutionEnvironment = __webpack_require__(48);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);
	var SyntheticEvent = __webpack_require__(53);

	var getEventTarget = __webpack_require__(69);
	var isEventSupported = __webpack_require__(70);
	var isTextInputElement = __webpack_require__(71);

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementInst = null;
	}

	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topChange') {
	    return targetInst;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  // IE10+ fire input events to often, such when a placeholder
	  // changes or when an input with a placeholder is focused.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);
	}

	/**
	 * (For IE <=11) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For IE <=11) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  if (activeElement.attachEvent) {
	    activeElement.attachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.addEventListener('propertychange', handlePropertyChange, false);
	  }
	}

	/**
	 * (For IE <=11) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;

	  if (activeElement.detachEvent) {
	    activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
	  }

	  activeElement = null;
	  activeElementInst = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For IE <=11) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetInstForInputEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topInput') {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return targetInst;
	  }
	}

	function handleEventsForInputEventIE(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9-11, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetInstForInputEventIE(topLevelType, targetInst) {
	  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementInst;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topClick') {
	    return targetInst;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    var getTargetInstFunc, handleEventFunc;
	    if (shouldUseChangeEvent(targetNode)) {
	      if (doesChangeEventBubble) {
	        getTargetInstFunc = getTargetInstForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }

	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);
	      if (inst) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var CallbackQueue = __webpack_require__(57);
	var PooledClass = __webpack_require__(50);
	var ReactFeatureFlags = __webpack_require__(58);
	var ReactReconciler = __webpack_require__(59);
	var Transaction = __webpack_require__(68);

	var invariant = __webpack_require__(8);

	var dirtyComponents = [];
	var updateBatchNumber = 0;
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */true);
	}

	_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  // Any updates enqueued while reconciling must be performed after this entire
	  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
	  // C, B could update twice in a single batch if C's render enqueues an update
	  // to B (since B would have already updated, we should skip it, and the only
	  // way we can know to do so is by checking the batch counter).
	  updateBatchNumber++;

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    var markerName;
	    if (ReactFeatureFlags.logTopLevelRenders) {
	      var namedComponent = component;
	      // Duck type TopLevelWrapper. This is probably always true.
	      if (component._currentElement.type.isReactTopLevelWrapper) {
	        namedComponent = component._renderedComponent;
	      }
	      markerName = 'React update: ' + namedComponent.getName();
	      console.time(markerName);
	    }

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

	    if (markerName) {
	      console.timeEnd(markerName);
	    }

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	  if (component._updateBatchNumber == null) {
	    component._updateBatchNumber = updateBatchNumber + 1;
	  }
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var PooledClass = __webpack_require__(50);

	var invariant = __webpack_require__(8);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */

	var CallbackQueue = function () {
	  function CallbackQueue(arg) {
	    _classCallCheck(this, CallbackQueue);

	    this._callbacks = null;
	    this._contexts = null;
	    this._arg = arg;
	  }

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */


	  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._callbacks.push(callback);
	    this._contexts = this._contexts || [];
	    this._contexts.push(context);
	  };

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */


	  CallbackQueue.prototype.notifyAll = function notifyAll() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    var arg = this._arg;
	    if (callbacks && contexts) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i], arg);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  };

	  CallbackQueue.prototype.checkpoint = function checkpoint() {
	    return this._callbacks ? this._callbacks.length : 0;
	  };

	  CallbackQueue.prototype.rollback = function rollback(len) {
	    if (this._callbacks && this._contexts) {
	      this._callbacks.length = len;
	      this._contexts.length = len;
	    }
	  };

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */


	  CallbackQueue.prototype.reset = function reset() {
	    this._callbacks = null;
	    this._contexts = null;
	  };

	  /**
	   * `PooledClass` looks for this.
	   */


	  CallbackQueue.prototype.destructor = function destructor() {
	    this.reset();
	  };

	  return CallbackQueue;
	}();

	module.exports = PooledClass.addPoolingTo(CallbackQueue);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 58 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactFeatureFlags = {
	  // When true, call console.time() before and .timeEnd() after each top-level
	  // render (both initial renders and updates). Useful when looking at prod-mode
	  // timeline profiles in Chrome, for example.
	  logTopLevelRenders: false
	};

	module.exports = ReactFeatureFlags;

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactRef = __webpack_require__(60);
	var ReactInstrumentation = __webpack_require__(62);

	var warning = __webpack_require__(11);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} the containing host component instance
	   * @param {?object} info about the host container
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
	  ) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
	      }
	    }
	    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
	      }
	    }
	    return markup;
	  },

	  /**
	   * Returns a value that can be passed to
	   * ReactComponentEnvironment.replaceNodeWithMarkup.
	   */
	  getHostNode: function (internalInstance) {
	    return internalInstance.getHostNode();
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance, safely) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
	      }
	    }
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent(safely);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
	      }
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
	    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
	      // The component's enqueued batch number should always be the current
	      // batch or the following one.
	      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
	      return;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
	      }
	    }
	    internalInstance.performUpdateIfNecessary(transaction);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  }

	};

	module.exports = ReactReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactOwner = __webpack_require__(61);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevRef = null;
	  var prevOwner = null;
	  if (prevElement !== null && typeof prevElement === 'object') {
	    prevRef = prevElement.ref;
	    prevOwner = prevElement._owner;
	  }

	  var nextRef = null;
	  var nextOwner = null;
	  if (nextElement !== null && typeof nextElement === 'object') {
	    nextRef = nextElement.ref;
	    nextOwner = nextElement._owner;
	  }

	  return prevRef !== nextRef ||
	  // If owner changes but we have an unchanged function ref, don't update refs
	  typeof nextRef === 'string' && nextOwner !== prevOwner;
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid owner.
	 * @final
	 */
	function isValidOwner(object) {
	  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	}

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
	    var ownerPublicInstance = owner.getPublicInstance();
	    // Check that `component`'s owner is still alive and that `component` is still the current ref
	    // because we do not want to detach the ref if another component stole it.
	    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// Trust the developer to only use ReactInstrumentation with a __DEV__ check

	var debugTool = null;

	if (process.env.NODE_ENV !== 'production') {
	  var ReactDebugTool = __webpack_require__(63);
	  debugTool = ReactDebugTool;
	}

	module.exports = { debugTool: debugTool };
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactInvalidSetStateWarningHook = __webpack_require__(64);
	var ReactHostOperationHistoryHook = __webpack_require__(65);
	var ReactComponentTreeHook = __webpack_require__(26);
	var ExecutionEnvironment = __webpack_require__(48);

	var performanceNow = __webpack_require__(66);
	var warning = __webpack_require__(11);

	var hooks = [];
	var didHookThrowForEvent = {};

	function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
	  try {
	    fn.call(context, arg1, arg2, arg3, arg4, arg5);
	  } catch (e) {
	    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
	    didHookThrowForEvent[event] = true;
	  }
	}

	function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
	  for (var i = 0; i < hooks.length; i++) {
	    var hook = hooks[i];
	    var fn = hook[event];
	    if (fn) {
	      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
	    }
	  }
	}

	var isProfiling = false;
	var flushHistory = [];
	var lifeCycleTimerStack = [];
	var currentFlushNesting = 0;
	var currentFlushMeasurements = [];
	var currentFlushStartTime = 0;
	var currentTimerDebugID = null;
	var currentTimerStartTime = 0;
	var currentTimerNestedFlushDuration = 0;
	var currentTimerType = null;

	var lifeCycleTimerHasWarned = false;

	function clearHistory() {
	  ReactComponentTreeHook.purgeUnmountedComponents();
	  ReactHostOperationHistoryHook.clearHistory();
	}

	function getTreeSnapshot(registeredIDs) {
	  return registeredIDs.reduce(function (tree, id) {
	    var ownerID = ReactComponentTreeHook.getOwnerID(id);
	    var parentID = ReactComponentTreeHook.getParentID(id);
	    tree[id] = {
	      displayName: ReactComponentTreeHook.getDisplayName(id),
	      text: ReactComponentTreeHook.getText(id),
	      updateCount: ReactComponentTreeHook.getUpdateCount(id),
	      childIDs: ReactComponentTreeHook.getChildIDs(id),
	      // Text nodes don't have owners but this is close enough.
	      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
	      parentID: parentID
	    };
	    return tree;
	  }, {});
	}

	function resetMeasurements() {
	  var previousStartTime = currentFlushStartTime;
	  var previousMeasurements = currentFlushMeasurements;
	  var previousOperations = ReactHostOperationHistoryHook.getHistory();

	  if (currentFlushNesting === 0) {
	    currentFlushStartTime = 0;
	    currentFlushMeasurements = [];
	    clearHistory();
	    return;
	  }

	  if (previousMeasurements.length || previousOperations.length) {
	    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
	    flushHistory.push({
	      duration: performanceNow() - previousStartTime,
	      measurements: previousMeasurements || [],
	      operations: previousOperations || [],
	      treeSnapshot: getTreeSnapshot(registeredIDs)
	    });
	  }

	  clearHistory();
	  currentFlushStartTime = performanceNow();
	  currentFlushMeasurements = [];
	}

	function checkDebugID(debugID) {
	  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	  if (allowRoot && debugID === 0) {
	    return;
	  }
	  if (!debugID) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
	  }
	}

	function beginLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  currentTimerStartTime = performanceNow();
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}

	function endLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  if (isProfiling) {
	    currentFlushMeasurements.push({
	      timerType: timerType,
	      instanceID: debugID,
	      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
	    });
	  }
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}

	function pauseCurrentLifeCycleTimer() {
	  var currentTimer = {
	    startTime: currentTimerStartTime,
	    nestedFlushStartTime: performanceNow(),
	    debugID: currentTimerDebugID,
	    timerType: currentTimerType
	  };
	  lifeCycleTimerStack.push(currentTimer);
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}

	function resumeCurrentLifeCycleTimer() {
	  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
	      startTime = _lifeCycleTimerStack$.startTime,
	      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
	      debugID = _lifeCycleTimerStack$.debugID,
	      timerType = _lifeCycleTimerStack$.timerType;

	  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
	  currentTimerStartTime = startTime;
	  currentTimerNestedFlushDuration += nestedFlushDuration;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}

	var lastMarkTimeStamp = 0;
	var canUsePerformanceMeasure =
	// $FlowFixMe https://github.com/facebook/flow/issues/2345
	typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

	function shouldMark(debugID) {
	  if (!isProfiling || !canUsePerformanceMeasure) {
	    return false;
	  }
	  var element = ReactComponentTreeHook.getElement(debugID);
	  if (element == null || typeof element !== 'object') {
	    return false;
	  }
	  var isHostElement = typeof element.type === 'string';
	  if (isHostElement) {
	    return false;
	  }
	  return true;
	}

	function markBegin(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }

	  var markName = debugID + '::' + markType;
	  lastMarkTimeStamp = performanceNow();
	  performance.mark(markName);
	}

	function markEnd(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }

	  var markName = debugID + '::' + markType;
	  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

	  // Chrome has an issue of dropping markers recorded too fast:
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
	  // To work around this, we will not report very small measurements.
	  // I determined the magic number by tweaking it back and forth.
	  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
	  // When the bug is fixed, we can `measure()` unconditionally if we want to.
	  var timeStamp = performanceNow();
	  if (timeStamp - lastMarkTimeStamp > 0.1) {
	    var measurementName = displayName + ' [' + markType + ']';
	    performance.measure(measurementName, markName);
	  }

	  performance.clearMarks(markName);
	  performance.clearMeasures(measurementName);
	}

	var ReactDebugTool = {
	  addHook: function (hook) {
	    hooks.push(hook);
	  },
	  removeHook: function (hook) {
	    for (var i = 0; i < hooks.length; i++) {
	      if (hooks[i] === hook) {
	        hooks.splice(i, 1);
	        i--;
	      }
	    }
	  },
	  isProfiling: function () {
	    return isProfiling;
	  },
	  beginProfiling: function () {
	    if (isProfiling) {
	      return;
	    }

	    isProfiling = true;
	    flushHistory.length = 0;
	    resetMeasurements();
	    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
	  },
	  endProfiling: function () {
	    if (!isProfiling) {
	      return;
	    }

	    isProfiling = false;
	    resetMeasurements();
	    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
	  },
	  getFlushHistory: function () {
	    return flushHistory;
	  },
	  onBeginFlush: function () {
	    currentFlushNesting++;
	    resetMeasurements();
	    pauseCurrentLifeCycleTimer();
	    emitEvent('onBeginFlush');
	  },
	  onEndFlush: function () {
	    resetMeasurements();
	    currentFlushNesting--;
	    resumeCurrentLifeCycleTimer();
	    emitEvent('onEndFlush');
	  },
	  onBeginLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
	    markBegin(debugID, timerType);
	    beginLifeCycleTimer(debugID, timerType);
	  },
	  onEndLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    endLifeCycleTimer(debugID, timerType);
	    markEnd(debugID, timerType);
	    emitEvent('onEndLifeCycleTimer', debugID, timerType);
	  },
	  onBeginProcessingChildContext: function () {
	    emitEvent('onBeginProcessingChildContext');
	  },
	  onEndProcessingChildContext: function () {
	    emitEvent('onEndProcessingChildContext');
	  },
	  onHostOperation: function (operation) {
	    checkDebugID(operation.instanceID);
	    emitEvent('onHostOperation', operation);
	  },
	  onSetState: function () {
	    emitEvent('onSetState');
	  },
	  onSetChildren: function (debugID, childDebugIDs) {
	    checkDebugID(debugID);
	    childDebugIDs.forEach(checkDebugID);
	    emitEvent('onSetChildren', debugID, childDebugIDs);
	  },
	  onBeforeMountComponent: function (debugID, element, parentDebugID) {
	    checkDebugID(debugID);
	    checkDebugID(parentDebugID, true);
	    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
	    markBegin(debugID, 'mount');
	  },
	  onMountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'mount');
	    emitEvent('onMountComponent', debugID);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUpdateComponent', debugID, element);
	    markBegin(debugID, 'update');
	  },
	  onUpdateComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'update');
	    emitEvent('onUpdateComponent', debugID);
	  },
	  onBeforeUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUnmountComponent', debugID);
	    markBegin(debugID, 'unmount');
	  },
	  onUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'unmount');
	    emitEvent('onUnmountComponent', debugID);
	  },
	  onTestEvent: function () {
	    emitEvent('onTestEvent');
	  }
	};

	// TODO remove these when RN/www gets updated
	ReactDebugTool.addDevtool = ReactDebugTool.addHook;
	ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

	ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
	ReactDebugTool.addHook(ReactComponentTreeHook);
	var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	if (/[?&]react_perf\b/.test(url)) {
	  ReactDebugTool.beginProfiling();
	}

	module.exports = ReactDebugTool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var warning = __webpack_require__(11);

	if (process.env.NODE_ENV !== 'production') {
	  var processingChildContext = false;

	  var warnInvalidSetState = function () {
	    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
	  };
	}

	var ReactInvalidSetStateWarningHook = {
	  onBeginProcessingChildContext: function () {
	    processingChildContext = true;
	  },
	  onEndProcessingChildContext: function () {
	    processingChildContext = false;
	  },
	  onSetState: function () {
	    warnInvalidSetState();
	  }
	};

	module.exports = ReactInvalidSetStateWarningHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 65 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var history = [];

	var ReactHostOperationHistoryHook = {
	  onHostOperation: function (operation) {
	    history.push(operation);
	  },
	  clearHistory: function () {
	    if (ReactHostOperationHistoryHook._preventClearing) {
	      // Should only be used for tests.
	      return;
	    }

	    history = [];
	  },
	  getHistory: function () {
	    return history;
	  }
	};

	module.exports = ReactHostOperationHistoryHook;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var performance = __webpack_require__(67);

	var performanceNow;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function performanceNow() {
	    return performance.now();
	  };
	} else {
	  performanceNow = function performanceNow() {
	    return Date.now();
	  };
	}

	module.exports = performanceNow;

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	var OBSERVED_ERROR = {};

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var TransactionImpl = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	module.exports = TransactionImpl;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 69 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */

	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;

	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }

	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ },
/* 71 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */

	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	module.exports = isTextInputElement;

/***/ },
/* 72 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */

	var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

	module.exports = DefaultEventPluginOrder;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(41);
	var ReactDOMComponentTree = __webpack_require__(34);
	var SyntheticMouseEvent = __webpack_require__(74);

	var eventTypes = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  }
	};

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    if (topLevelType === 'topMouseOut') {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
	    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

	    return [leave, enter];
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(75);
	var ViewportMetrics = __webpack_require__(76);

	var getEventModifierState = __webpack_require__(77);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	var getEventTarget = __webpack_require__(69);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ },
/* 76 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ },
/* 77 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(36);

	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: 0,
	    acceptCharset: 0,
	    accessKey: 0,
	    action: 0,
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    allowTransparency: 0,
	    alt: 0,
	    // specifies target context for links with `preload` type
	    as: 0,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: 0,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_BOOLEAN_VALUE,
	    cellPadding: 0,
	    cellSpacing: 0,
	    charSet: 0,
	    challenge: 0,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cite: 0,
	    classID: 0,
	    className: 0,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: 0,
	    content: 0,
	    contentEditable: 0,
	    contextMenu: 0,
	    controls: HAS_BOOLEAN_VALUE,
	    coords: 0,
	    crossOrigin: 0,
	    data: 0, // For `<object />` acts as `src`.
	    dateTime: 0,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: 0,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: 0,
	    encType: 0,
	    form: 0,
	    formAction: 0,
	    formEncType: 0,
	    formMethod: 0,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: 0,
	    frameBorder: 0,
	    headers: 0,
	    height: 0,
	    hidden: HAS_BOOLEAN_VALUE,
	    high: 0,
	    href: 0,
	    hrefLang: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    icon: 0,
	    id: 0,
	    inputMode: 0,
	    integrity: 0,
	    is: 0,
	    keyParams: 0,
	    keyType: 0,
	    kind: 0,
	    label: 0,
	    lang: 0,
	    list: 0,
	    loop: HAS_BOOLEAN_VALUE,
	    low: 0,
	    manifest: 0,
	    marginHeight: 0,
	    marginWidth: 0,
	    max: 0,
	    maxLength: 0,
	    media: 0,
	    mediaGroup: 0,
	    method: 0,
	    min: 0,
	    minLength: 0,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: 0,
	    nonce: 0,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: 0,
	    pattern: 0,
	    placeholder: 0,
	    playsInline: HAS_BOOLEAN_VALUE,
	    poster: 0,
	    preload: 0,
	    profile: 0,
	    radioGroup: 0,
	    readOnly: HAS_BOOLEAN_VALUE,
	    referrerPolicy: 0,
	    rel: 0,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: 0,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    sandbox: 0,
	    scope: 0,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: 0,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: 0,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: 0,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: 0,
	    src: 0,
	    srcDoc: 0,
	    srcLang: 0,
	    srcSet: 0,
	    start: HAS_NUMERIC_VALUE,
	    step: 0,
	    style: 0,
	    summary: 0,
	    tabIndex: 0,
	    target: 0,
	    title: 0,
	    // Setting .type throws on non-<input> tags
	    type: 0,
	    useMap: 0,
	    value: 0,
	    width: 0,
	    wmode: 0,
	    wrap: 0,

	    /**
	     * RDFa Properties
	     */
	    about: 0,
	    datatype: 0,
	    inlist: 0,
	    prefix: 0,
	    // property is also supported for OpenGraph in meta tags.
	    property: 0,
	    resource: 0,
	    'typeof': 0,
	    vocab: 0,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: 0,
	    autoCorrect: 0,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: 0,
	    // color is for Safari mask-icon link
	    color: 0,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: 0,
	    itemScope: HAS_BOOLEAN_VALUE,
	    itemType: 0,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: 0,
	    itemRef: 0,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: 0,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: 0,
	    // IE-only attribute that controls focus behavior
	    unselectable: 0
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {}
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(80);
	var ReactDOMIDOperations = __webpack_require__(91);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup

	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMLazyTree = __webpack_require__(81);
	var Danger = __webpack_require__(87);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInstrumentation = __webpack_require__(62);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(84);
	var setInnerHTML = __webpack_require__(83);
	var setTextContent = __webpack_require__(85);

	function getNodeAfter(parentNode, node) {
	  // Special case for text components, which return [open, close] comments
	  // from getHostNode.
	  if (Array.isArray(node)) {
	    node = node[1];
	  }
	  return node ? node.nextSibling : parentNode.firstChild;
	}

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
	  // We rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
	  // we are careful to use `null`.)
	  parentNode.insertBefore(childNode, referenceNode);
	});

	function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
	  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
	}

	function moveChild(parentNode, childNode, referenceNode) {
	  if (Array.isArray(childNode)) {
	    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
	  } else {
	    insertChildAt(parentNode, childNode, referenceNode);
	  }
	}

	function removeChild(parentNode, childNode) {
	  if (Array.isArray(childNode)) {
	    var closingComment = childNode[1];
	    childNode = childNode[0];
	    removeDelimitedText(parentNode, childNode, closingComment);
	    parentNode.removeChild(closingComment);
	  }
	  parentNode.removeChild(childNode);
	}

	function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
	  var node = openingComment;
	  while (true) {
	    var nextNode = node.nextSibling;
	    insertChildAt(parentNode, node, referenceNode);
	    if (node === closingComment) {
	      break;
	    }
	    node = nextNode;
	  }
	}

	function removeDelimitedText(parentNode, startNode, closingComment) {
	  while (true) {
	    var node = startNode.nextSibling;
	    if (node === closingComment) {
	      // The closing comment is removed by ReactMultiChild.
	      break;
	    } else {
	      parentNode.removeChild(node);
	    }
	  }
	}

	function replaceDelimitedText(openingComment, closingComment, stringText) {
	  var parentNode = openingComment.parentNode;
	  var nodeAfterComment = openingComment.nextSibling;
	  if (nodeAfterComment === closingComment) {
	    // There are no text nodes between the opening and closing comments; insert
	    // a new one if stringText isn't empty.
	    if (stringText) {
	      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
	    }
	  } else {
	    if (stringText) {
	      // Set the text content of the first node after the opening comment, and
	      // remove all following nodes up until the closing comment.
	      setTextContent(nodeAfterComment, stringText);
	      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
	    } else {
	      removeDelimitedText(parentNode, openingComment, closingComment);
	    }
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onHostOperation({
	      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
	      type: 'replace text',
	      payload: stringText
	    });
	  }
	}

	var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
	if (process.env.NODE_ENV !== 'production') {
	  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
	    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
	    if (prevInstance._debugID !== 0) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: prevInstance._debugID,
	        type: 'replace with',
	        payload: markup.toString()
	      });
	    } else {
	      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
	      if (nextInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: nextInstance._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  };
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

	  replaceDelimitedText: replaceDelimitedText,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  processUpdates: function (parentNode, updates) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
	    }

	    for (var k = 0; k < updates.length; k++) {
	      var update = updates[k];
	      switch (update.type) {
	        case 'INSERT_MARKUP':
	          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'insert child',
	              payload: { toIndex: update.toIndex, content: update.content.toString() }
	            });
	          }
	          break;
	        case 'MOVE_EXISTING':
	          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'move child',
	              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
	            });
	          }
	          break;
	        case 'SET_MARKUP':
	          setInnerHTML(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace children',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'TEXT_CONTENT':
	          setTextContent(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace text',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'REMOVE_NODE':
	          removeChild(parentNode, update.fromNode);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'remove child',
	              payload: { fromIndex: update.fromIndex }
	            });
	          }
	          break;
	      }
	    }
	  }

	};

	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMNamespaces = __webpack_require__(82);
	var setInnerHTML = __webpack_require__(83);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(84);
	var setTextContent = __webpack_require__(85);

	var ELEMENT_NODE_TYPE = 1;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * In IE (8-11) and Edge, appending nodes with no children is dramatically
	 * faster than appending a full subtree, so we essentially queue up the
	 * .appendChild calls here and apply them so each node is added to its parent
	 * before any children are added.
	 *
	 * In other browsers, doing so is slower or neutral compared to the other order
	 * (in Firefox, twice as slow) so we only do this inversion in IE.
	 *
	 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
	 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

	function insertTreeChildren(tree) {
	  if (!enableLazy) {
	    return;
	  }
	  var node = tree.node;
	  var children = tree.children;
	  if (children.length) {
	    for (var i = 0; i < children.length; i++) {
	      insertTreeBefore(node, children[i], null);
	    }
	  } else if (tree.html != null) {
	    setInnerHTML(node, tree.html);
	  } else if (tree.text != null) {
	    setTextContent(node, tree.text);
	  }
	}

	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
	  // DocumentFragments aren't actually part of the DOM after insertion so
	  // appending children won't update the DOM. We need to ensure the fragment
	  // is properly populated first, breaking out of our lazy approach for just
	  // this level. Also, some <object> plugins (like Flash Player) will read
	  // <param> nodes immediately upon insertion into the DOM, so <object>
	  // must also be populated prior to insertion into the DOM.
	  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
	    insertTreeChildren(tree);
	    parentNode.insertBefore(tree.node, referenceNode);
	  } else {
	    parentNode.insertBefore(tree.node, referenceNode);
	    insertTreeChildren(tree);
	  }
	});

	function replaceChildWithTree(oldNode, newTree) {
	  oldNode.parentNode.replaceChild(newTree.node, oldNode);
	  insertTreeChildren(newTree);
	}

	function queueChild(parentTree, childTree) {
	  if (enableLazy) {
	    parentTree.children.push(childTree);
	  } else {
	    parentTree.node.appendChild(childTree.node);
	  }
	}

	function queueHTML(tree, html) {
	  if (enableLazy) {
	    tree.html = html;
	  } else {
	    setInnerHTML(tree.node, html);
	  }
	}

	function queueText(tree, text) {
	  if (enableLazy) {
	    tree.text = text;
	  } else {
	    setTextContent(tree.node, text);
	  }
	}

	function toString() {
	  return this.node.nodeName;
	}

	function DOMLazyTree(node) {
	  return {
	    node: node,
	    children: [],
	    html: null,
	    text: null,
	    toString: toString
	  };
	}

	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;

	module.exports = DOMLazyTree;

/***/ },
/* 82 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg'
	};

	module.exports = DOMNamespaces;

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);
	var DOMNamespaces = __webpack_require__(82);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(84);

	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node
	  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var svgNode = reusableSVGContainer.firstChild;
	    while (svgNode.firstChild) {
	      node.appendChild(svgNode.firstChild);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	  testElement = null;
	}

	module.exports = setInnerHTML;

/***/ },
/* 84 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* globals MSApp */

	'use strict';

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */

	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	module.exports = createMicrosoftUnsafeLocalFunction;

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);
	var escapeTextContentForBrowser = __webpack_require__(86);
	var setInnerHTML = __webpack_require__(83);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      if (node.nodeType === 3) {
	        node.nodeValue = text;
	        return;
	      }
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ },
/* 86 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * Based on the escape-html library, which is used under the MIT License below:
	 *
	 * Copyright (c) 2012-2013 TJ Holowaychuk
	 * Copyright (c) 2015 Andreas Lubbe
	 * Copyright (c) 2015 Tiancheng "Timothy" Gu
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * 'Software'), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 *
	 */

	'use strict';

	// code copied and modified from escape-html
	/**
	 * Module variables.
	 * @private
	 */

	var matchHtmlRegExp = /["'&<>]/;

	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {string} string The string to escape for inserting into HTML
	 * @return {string}
	 * @public
	 */

	function escapeHtml(string) {
	  var str = '' + string;
	  var match = matchHtmlRegExp.exec(str);

	  if (!match) {
	    return str;
	  }

	  var escape;
	  var html = '';
	  var index = 0;
	  var lastIndex = 0;

	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34:
	        // "
	        escape = '&quot;';
	        break;
	      case 38:
	        // &
	        escape = '&amp;';
	        break;
	      case 39:
	        // '
	        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
	        break;
	      case 60:
	        // <
	        escape = '&lt;';
	        break;
	      case 62:
	        // >
	        escape = '&gt;';
	        break;
	      default:
	        continue;
	    }

	    if (lastIndex !== index) {
	      html += str.substring(lastIndex, index);
	    }

	    lastIndex = index + 1;
	    html += escape;
	  }

	  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
	}
	// end code copied and modified from escape-html


	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  if (typeof text === 'boolean' || typeof text === 'number') {
	    // this shortcircuit helps perf for types that we know will never have
	    // special characters, especially given that this function is used often
	    // for numeric dom ids.
	    return '' + text;
	  }
	  return escapeHtml(text);
	}

	module.exports = escapeTextContentForBrowser;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var DOMLazyTree = __webpack_require__(81);
	var ExecutionEnvironment = __webpack_require__(48);

	var createNodesFromMarkup = __webpack_require__(88);
	var emptyFunction = __webpack_require__(12);
	var invariant = __webpack_require__(8);

	var Danger = {

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
	    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

	    if (typeof markup === 'string') {
	      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	      oldChild.parentNode.replaceChild(newChild, oldChild);
	    } else {
	      DOMLazyTree.replaceChildWithTree(oldChild, markup);
	    }
	  }

	};

	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	var ExecutionEnvironment = __webpack_require__(48);

	var createArrayFromMixed = __webpack_require__(89);
	var getMarkupWrap = __webpack_require__(90);
	var invariant = __webpack_require__(8);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = Array.from(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var invariant = __webpack_require__(8);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

	  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/*eslint-disable fb-www/unsafe-html */

	var ExecutionEnvironment = __webpack_require__(48);

	var invariant = __webpack_require__(8);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(80);
	var ReactDOMComponentTree = __webpack_require__(34);

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
	    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
	    DOMChildrenOperations.processUpdates(node, updates);
	  }
	};

	module.exports = ReactDOMIDOperations;

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var AutoFocusUtils = __webpack_require__(93);
	var CSSPropertyOperations = __webpack_require__(95);
	var DOMLazyTree = __webpack_require__(81);
	var DOMNamespaces = __webpack_require__(82);
	var DOMProperty = __webpack_require__(36);
	var DOMPropertyOperations = __webpack_require__(103);
	var EventPluginHub = __webpack_require__(42);
	var EventPluginRegistry = __webpack_require__(43);
	var ReactBrowserEventEmitter = __webpack_require__(105);
	var ReactDOMComponentFlags = __webpack_require__(37);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMInput = __webpack_require__(108);
	var ReactDOMOption = __webpack_require__(111);
	var ReactDOMSelect = __webpack_require__(112);
	var ReactDOMTextarea = __webpack_require__(113);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactMultiChild = __webpack_require__(114);
	var ReactServerRenderingTransaction = __webpack_require__(133);

	var emptyFunction = __webpack_require__(12);
	var escapeTextContentForBrowser = __webpack_require__(86);
	var invariant = __webpack_require__(8);
	var isEventSupported = __webpack_require__(70);
	var shallowEqual = __webpack_require__(123);
	var validateDOMNesting = __webpack_require__(136);
	var warning = __webpack_require__(11);

	var Flags = ReactDOMComponentFlags;
	var deleteListener = EventPluginHub.deleteListener;
	var getNode = ReactDOMComponentTree.getNodeFromInstance;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = EventPluginRegistry.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var STYLE = 'style';
	var HTML = '__html';
	var RESERVED_PROPS = {
	  children: null,
	  dangerouslySetInnerHTML: null,
	  suppressContentEditableWarning: null
	};

	// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
	var DOC_FRAGMENT_TYPE = 11;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined because undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[component._tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
	}

	function enqueuePutListener(inst, registrationName, listener, transaction) {
	  if (transaction instanceof ReactServerRenderingTransaction) {
	    return;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
	  }
	  var containerInfo = inst._hostContainerInfo;
	  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
	  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
	  listenTo(registrationName, doc);
	  transaction.getReactMountReady().enqueue(putListener, {
	    inst: inst,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
	}

	function inputPostMount() {
	  var inst = this;
	  ReactDOMInput.postMountWrapper(inst);
	}

	function textareaPostMount() {
	  var inst = this;
	  ReactDOMTextarea.postMountWrapper(inst);
	}

	function optionPostMount() {
	  var inst = this;
	  ReactDOMOption.postMountWrapper(inst);
	}

	var setAndValidateContentChildDev = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  setAndValidateContentChildDev = function (content) {
	    var hasExistingContent = this._contentDebugID != null;
	    var debugID = this._debugID;
	    // This ID represents the inlined child that has no backing instance:
	    var contentDebugID = -debugID;

	    if (content == null) {
	      if (hasExistingContent) {
	        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
	      }
	      this._contentDebugID = null;
	      return;
	    }

	    validateDOMNesting(null, String(content), this, this._ancestorInfo);
	    this._contentDebugID = contentDebugID;
	    if (hasExistingContent) {
	      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
	      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
	    } else {
	      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
	      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
	      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
	    }
	  };
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
	  var node = getNode(inst);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

	  switch (inst._tag) {
	    case 'iframe':
	    case 'object':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
	        }
	      }
	      break;
	    case 'source':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
	      break;
	    case 'input':
	    case 'select':
	    case 'textarea':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
	      break;
	  }
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = _assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
	    validatedTagCache[tag] = true;
	  }
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	var globalIdCounter = 1;

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(element) {
	  var tag = element.type;
	  validateDangerousTag(tag);
	  this._currentElement = element;
	  this._tag = tag.toLowerCase();
	  this._namespaceURI = null;
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._hostNode = null;
	  this._hostParent = null;
	  this._rootNodeID = 0;
	  this._domID = 0;
	  this._hostContainerInfo = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._flags = 0;
	  if (process.env.NODE_ENV !== 'production') {
	    this._ancestorInfo = null;
	    setAndValidateContentChildDev.call(this, null);
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?ReactDOMComponent} the parent component instance
	   * @param {?object} info about the host container
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    this._rootNodeID = globalIdCounter++;
	    this._domID = hostContainerInfo._idCounter++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, hostParent);
	        props = ReactDOMInput.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, hostParent);
	        props = ReactDOMOption.getHostProps(this, props);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, hostParent);
	        props = ReactDOMSelect.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, hostParent);
	        props = ReactDOMTextarea.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	    }

	    assertValidProps(this, props);

	    // We create tags in the namespace of their parent container, except HTML
	    // tags get no namespace.
	    var namespaceURI;
	    var parentTag;
	    if (hostParent != null) {
	      namespaceURI = hostParent._namespaceURI;
	      parentTag = hostParent._tag;
	    } else if (hostContainerInfo._tag) {
	      namespaceURI = hostContainerInfo._namespaceURI;
	      parentTag = hostContainerInfo._tag;
	    }
	    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
	      namespaceURI = DOMNamespaces.html;
	    }
	    if (namespaceURI === DOMNamespaces.html) {
	      if (this._tag === 'svg') {
	        namespaceURI = DOMNamespaces.svg;
	      } else if (this._tag === 'math') {
	        namespaceURI = DOMNamespaces.mathml;
	      }
	    }
	    this._namespaceURI = namespaceURI;

	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo._tag) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(this._tag, null, this, parentInfo);
	      }
	      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var el;
	      if (namespaceURI === DOMNamespaces.html) {
	        if (this._tag === 'script') {
	          // Create the script via .innerHTML so its "parser-inserted" flag is
	          // set to true and it does not execute
	          var div = ownerDocument.createElement('div');
	          var type = this._currentElement.type;
	          div.innerHTML = '<' + type + '></' + type + '>';
	          el = div.removeChild(div.firstChild);
	        } else if (props.is) {
	          el = ownerDocument.createElement(this._currentElement.type, props.is);
	        } else {
	          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
	          // See discussion in https://github.com/facebook/react/pull/6896
	          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	          el = ownerDocument.createElement(this._currentElement.type);
	        }
	      } else {
	        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
	      }
	      ReactDOMComponentTree.precacheNode(this, el);
	      this._flags |= Flags.hasCachedChildNodes;
	      if (!this._hostParent) {
	        DOMPropertyOperations.setAttributeForRoot(el);
	      }
	      this._updateDOMProperties(null, props, transaction);
	      var lazyTree = DOMLazyTree(el);
	      this._createInitialChildren(transaction, props, context, lazyTree);
	      mountImage = lazyTree;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(inputPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'textarea':
	        transaction.getReactMountReady().enqueue(textareaPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'select':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'button':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'option':
	        transaction.getReactMountReady().enqueue(optionPostMount, this);
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = _assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    if (!this._hostParent) {
	      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
	    }
	    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
	    return ret;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, lazyTree) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	        DOMLazyTree.queueText(lazyTree, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'input':
	        lastProps = ReactDOMInput.getHostProps(this, lastProps);
	        nextProps = ReactDOMInput.getHostProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getHostProps(this, lastProps);
	        nextProps = ReactDOMOption.getHostProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
	        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
	        break;
	      case 'textarea':
	        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
	        break;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    switch (this._tag) {
	      case 'input':
	        // Update the wrapper around inputs *after* updating props. This has to
	        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
	        // raise warnings and prevent the new value from being assigned.
	        ReactDOMInput.updateWrapper(this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        break;
	      case 'select':
	        // <select> value update needs to occur after <option> children
	        // reconciliation
	        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	        break;
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, lastProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = _assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        var node = getNode(this);
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertently setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, nextContent);
	        }
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    } else if (nextChildren != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        setAndValidateContentChildDev.call(this, null);
	      }

	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  getHostNode: function () {
	    return getNode(this);
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
	        break;
	    }

	    this.unmountChildren(safely);
	    ReactDOMComponentTree.uncacheNode(this);
	    EventPluginHub.deleteAllListeners(this);
	    this._rootNodeID = 0;
	    this._domID = 0;
	    this._wrapperState = null;

	    if (process.env.NODE_ENV !== 'production') {
	      setAndValidateContentChildDev.call(this, null);
	    }
	  },

	  getPublicInstance: function () {
	    return getNode(this);
	  }

	};

	_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(34);

	var focusNode = __webpack_require__(94);

	var AutoFocusUtils = {
	  focusDOMComponent: function () {
	    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ },
/* 94 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */

	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var CSSProperty = __webpack_require__(96);
	var ExecutionEnvironment = __webpack_require__(48);
	var ReactInstrumentation = __webpack_require__(62);

	var camelizeStyleName = __webpack_require__(97);
	var dangerousStyleValue = __webpack_require__(99);
	var hyphenateStyleName = __webpack_require__(100);
	var memoizeStringOnly = __webpack_require__(102);
	var warning = __webpack_require__(11);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;

	  var warnHyphenatedStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
	  };

	  var warnBadVendoredStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
	  };

	  var warnStyleValueWithSemicolon = function (name, value, owner) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
	  };

	  var warnStyleValueIsNaN = function (name, value, owner) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
	  };

	  var checkRenderMessage = function (owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   * @param {ReactDOMComponent} component
	   */
	  var warnValidStyle = function (name, value, component) {
	    var owner;
	    if (component) {
	      owner = component._currentElement._owner;
	    }
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name, owner);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name, owner);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value, owner);
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      warnStyleValueIsNaN(name, value, owner);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles, component) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue, component);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   */
	  setValueForStyles: function (node, styles, component) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: component._debugID,
	        type: 'update styles',
	        payload: styles
	      });
	    }

	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName], component);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
	      if (styleName === 'float' || styleName === 'cssFloat') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 96 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */

	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridColumn: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(98);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 98 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var CSSProperty = __webpack_require__(96);
	var warning = __webpack_require__(11);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	var styleWarnings = {};

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @param {ReactDOMComponent} component
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, component) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    if (process.env.NODE_ENV !== 'production') {
	      // Allow '0' to pass through without warning. 0 is already special and
	      // doesn't require units, so we don't need to warn about it.
	      if (component && value !== '0') {
	        var owner = component._currentElement._owner;
	        var ownerName = owner ? owner.getName() : null;
	        if (ownerName && !styleWarnings[ownerName]) {
	          styleWarnings[ownerName] = {};
	        }
	        var warned = false;
	        if (ownerName) {
	          var warnings = styleWarnings[ownerName];
	          warned = warnings[name];
	          if (!warned) {
	            warnings[name] = true;
	          }
	        }
	        if (!warned) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
	        }
	      }
	    }
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(101);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 101 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 102 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 */

	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(36);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInstrumentation = __webpack_require__(62);

	var quoteAttributeValueForBrowser = __webpack_require__(104);
	var warning = __webpack_require__(11);

	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  createMarkupForRoot: function () {
	    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
	  },

	  setAttributeForRoot: function (node) {
	    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	        return;
	      } else if (propertyInfo.mustUseProperty) {
	        // Contrary to `setAttribute`, object properties are properly
	        // `toString`ed by IE8/9.
	        node[propertyInfo.propertyName] = value;
	      } else {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	      return;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },

	  /**
	   * Deletes an attributes from a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForAttribute: function (node, name) {
	    node.removeAttribute(name);
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        if (propertyInfo.hasBooleanValue) {
	          node[propName] = false;
	        } else {
	          node[propName] = '';
	        }
	      } else {
	        node.removeAttribute(propertyInfo.attributeName);
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  }

	};

	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(86);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var EventPluginRegistry = __webpack_require__(43);
	var ReactEventEmitterMixin = __webpack_require__(106);
	var ViewportMetrics = __webpack_require__(76);

	var getVendorPrefixedEventName = __webpack_require__(107);
	var isEventSupported = __webpack_require__(70);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === 'topWheel') {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === 'topScroll') {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === 'topFocus' || dependency === 'topBlur') {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening.topBlur = true;
	          isListening.topFocus = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Protect against document.createEvent() returning null
	   * Some popup blocker extensions appear to do this:
	   * https://github.com/facebook/react/issues/6887
	   */
	  supportsEventPageXY: function () {
	    if (!document.createEvent) {
	      return false;
	    }
	    var ev = document.createEvent('MouseEvent');
	    return ev != null && 'pageX' in ev;
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
	   * pageX/pageY isn't supported (legacy browsers).
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (hasEventPageXY === undefined) {
	      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
	    }
	    if (!hasEventPageXY && !isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  }

	});

	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(42);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   */
	  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};

	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

	  return prefixes;
	}

	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};

	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};

	/**
	 * Element to check for prefixes on.
	 */
	var style = {};

	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }

	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}

	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return '';
	}

	module.exports = getVendorPrefixedEventName;

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var DOMPropertyOperations = __webpack_require__(103);
	var LinkedValueUtils = __webpack_require__(109);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var didWarnValueLink = false;
	var didWarnCheckedLink = false;
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}

	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getHostProps: function (inst, props) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var hostProps = _assign({
	      // Make sure we set .type before any other properties (setting .value
	      // before .type means .value is lost in IE11 and below)
	      type: undefined,
	      // Make sure we set .step before .value (setting .value before .step
	      // means .value is rounded on mount, based upon step precision)
	      step: undefined,
	      // Make sure we set .min & .max before .value (to ensure proper order
	      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
	      min: undefined,
	      max: undefined
	    }, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

	      var owner = inst._currentElement._owner;

	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnCheckedLink = true;
	      }
	      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnCheckedDefaultChecked = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnValueDefaultValue = true;
	      }
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	      initialValue: props.value != null ? props.value : defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };

	    if (process.env.NODE_ENV !== 'production') {
	      inst._wrapperState.controlled = isControlled(props);
	    }
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    if (process.env.NODE_ENV !== 'production') {
	      var controlled = isControlled(props);
	      var owner = inst._currentElement._owner;

	      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnUncontrolledToControlled = true;
	      }
	      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnControlledToUncontrolled = true;
	      }
	    }

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
	    }

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {

	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;

	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	    } else {
	      if (props.value == null && props.defaultValue != null) {
	        node.defaultValue = '' + props.defaultValue;
	      }
	      if (props.checked == null && props.defaultChecked != null) {
	        node.defaultChecked = !!props.defaultChecked;
	      }
	    }
	  },

	  postMountWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

	    // Detach value from defaultValue. We won't do anything if we're working on
	    // submit or reset inputs as those values & defaultValues are linked. They
	    // are not resetable nodes so this operation doesn't matter and actually
	    // removes browser-default values (eg "Submit Query") when no value is
	    // provided.

	    switch (props.type) {
	      case 'submit':
	      case 'reset':
	        break;
	      case 'color':
	      case 'date':
	      case 'datetime':
	      case 'datetime-local':
	      case 'month':
	      case 'time':
	      case 'week':
	        // This fixes the no-show issue on iOS Safari and Android Chrome:
	        // https://github.com/facebook/react/issues/7233
	        node.value = '';
	        node.value = node.defaultValue;
	        break;
	      default:
	        node.value = node.value;
	        break;
	    }

	    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	    // this is needed to work around a chrome bug where setting defaultChecked
	    // will sometimes influence the value of checked (even after detachment).
	    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	    // We need to temporarily unset name to avoid disrupting radio button groups.
	    var name = node.name;
	    if (name !== '') {
	      node.name = '';
	    }
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !node.defaultChecked;
	    if (name !== '') {
	      node.name = name;
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var React = __webpack_require__(2);
	var ReactPropTypesSecret = __webpack_require__(110);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: React.PropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 110 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var React = __webpack_require__(2);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMSelect = __webpack_require__(112);

	var warning = __webpack_require__(11);
	var didWarnInvalidOptionChildren = false;

	function flattenChildren(children) {
	  var content = '';

	  // Flatten children and warn if they aren't strings or numbers;
	  // invalid types are ignored.
	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    if (typeof child === 'string' || typeof child === 'number') {
	      content += child;
	    } else if (!didWarnInvalidOptionChildren) {
	      didWarnInvalidOptionChildren = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
	    }
	  });

	  return content;
	}

	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, hostParent) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
	    }

	    // Look up whether this option is 'selected'
	    var selectValue = null;
	    if (hostParent != null) {
	      var selectParent = hostParent;

	      if (selectParent._tag === 'optgroup') {
	        selectParent = selectParent._hostParent;
	      }

	      if (selectParent != null && selectParent._tag === 'select') {
	        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
	      }
	    }

	    // If the value is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      var value;
	      if (props.value != null) {
	        value = props.value + '';
	      } else {
	        value = flattenChildren(props.children);
	      }
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  postMountWrapper: function (inst) {
	    // value="" should make a value attribute (#6219)
	    var props = inst._currentElement.props;
	    if (props.value != null) {
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      node.setAttribute('value', props.value);
	    }
	  },

	  getHostProps: function (inst, props) {
	    var hostProps = _assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      hostProps.selected = inst._wrapperState.selected;
	    }

	    var content = flattenChildren(props.children);

	    if (content) {
	      hostProps.children = content;
	    }

	    return hostProps;
	  }

	};

	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var LinkedValueUtils = __webpack_require__(109);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);

	var warning = __webpack_require__(11);

	var didWarnValueLink = false;
	var didWarnValueDefaultValue = false;

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  if (props.valueLink !== undefined && !didWarnValueLink) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
	    didWarnValueLink = true;
	  }

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    var isArray = Array.isArray(props[propName]);
	    if (props.multiple && !isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    } else if (!props.multiple && isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  getHostProps: function (inst, props) {
	    return _assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	      didWarnValueDefaultValue = true;
	    }
	  },

	  getSelectValueContext: function (inst) {
	    // ReactDOMOption looks at this initial value so the initial generated
	    // markup has correct `selected` attributes
	    return inst._wrapperState.initialValue;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // this value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  if (this._rootNodeID) {
	    this._wrapperState.pendingUpdate = true;
	  }
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var LinkedValueUtils = __webpack_require__(109);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var didWarnValueLink = false;
	var didWarnValDefaultVal = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getHostProps: function (inst, props) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.  We could add a check in setTextContent
	    // to only set the value if/when the value differs from the node value (which would
	    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
	    // The value can be a boolean or object so that's why it's forced to be a string.
	    var hostProps = _assign({}, props, {
	      value: undefined,
	      defaultValue: undefined,
	      children: '' + inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValDefaultVal = true;
	      }
	    }

	    var value = LinkedValueUtils.getValue(props);
	    var initialValue = value;

	    // Only bother fetching default value if we're going to use it
	    if (value == null) {
	      var defaultValue = props.defaultValue;
	      // TODO (yungsters): Remove support for children content in <textarea>.
	      var children = props.children;
	      if (children != null) {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
	        }
	        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
	        if (Array.isArray(children)) {
	          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
	          children = children[0];
	        }

	        defaultValue = '' + children;
	      }
	      if (defaultValue == null) {
	        defaultValue = '';
	      }
	      initialValue = defaultValue;
	    }

	    inst._wrapperState = {
	      initialValue: '' + initialValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;

	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	      if (props.defaultValue == null) {
	        node.defaultValue = newValue;
	      }
	    }
	    if (props.defaultValue != null) {
	      node.defaultValue = props.defaultValue;
	    }
	  },

	  postMountWrapper: function (inst) {
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

	    // Warning: node.value may be the empty string at this point (IE11) if placeholder is set.
	    node.value = node.textContent; // Detach value from defaultValue
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var ReactComponentEnvironment = __webpack_require__(115);
	var ReactInstanceMap = __webpack_require__(116);
	var ReactInstrumentation = __webpack_require__(62);

	var ReactCurrentOwner = __webpack_require__(10);
	var ReactReconciler = __webpack_require__(59);
	var ReactChildReconciler = __webpack_require__(117);

	var emptyFunction = __webpack_require__(12);
	var flattenChildren = __webpack_require__(132);
	var invariant = __webpack_require__(8);

	/**
	 * Make an update for markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function makeInsertMarkup(markup, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'INSERT_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for moving an existing element to another index.
	 *
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function makeMove(child, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'MOVE_EXISTING',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: ReactReconciler.getHostNode(child),
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for removing an element at an index.
	 *
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function makeRemove(child, node) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'REMOVE_NODE',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: node,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the markup of a node.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function makeSetMarkup(markup) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'SET_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the text content.
	 *
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function makeTextContent(textContent) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'TEXT_CONTENT',
	    content: textContent,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Push an update, if any, onto the queue. Creates a new queue if none is
	 * passed and always returns the queue. Mutative.
	 */
	function enqueue(queue, update) {
	  if (update) {
	    queue = queue || [];
	    queue.push(update);
	  }
	  return queue;
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue(inst, updateQueue) {
	  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
	}

	var setChildrenForInstrumentation = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  var getDebugID = function (inst) {
	    if (!inst._debugID) {
	      // Check for ART-like instances. TODO: This is silly/gross.
	      var internal;
	      if (internal = ReactInstanceMap.get(inst)) {
	        inst = internal;
	      }
	    }
	    return inst._debugID;
	  };
	  setChildrenForInstrumentation = function (children) {
	    var debugID = getDebugID(this);
	    // TODO: React Native empty components are also multichild.
	    // This means they still get into this method but don't have _debugID.
	    if (debugID !== 0) {
	      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
	        return children[key]._debugID;
	      }) : []);
	    }
	  };
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        var selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
	      var nextChildren;
	      var selfDebugID = 0;
	      if (process.env.NODE_ENV !== 'production') {
	        selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          return nextChildren;
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	      return nextChildren;
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;

	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          var selfDebugID = 0;
	          if (process.env.NODE_ENV !== 'production') {
	            selfDebugID = getDebugID(this);
	          }
	          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }

	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, children);
	      }

	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      // Set new text content.
	      var updates = [makeTextContent(nextContent)];
	      processQueue(this, updates);
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      var updates = [makeSetMarkup(nextMarkup)];
	      processQueue(this, updates);
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      // Hook used by React ART
	      this._updateChildren(nextNestedChildrenElements, transaction, context);
	    },

	    /**
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var removedNodes = {};
	      var mountImages = [];
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var updates = null;
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var nextIndex = 0;
	      var lastIndex = 0;
	      // `nextMountIndex` will increment for each newly mounted child.
	      var nextMountIndex = 0;
	      var lastPlacedNode = null;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            // The `removedNodes` loop below will actually remove the child.
	          }
	          // The child must be instantiated before it's mounted.
	          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
	          nextMountIndex++;
	        }
	        nextIndex++;
	        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
	      }
	      // Remove children that are no longer present.
	      for (name in removedNodes) {
	        if (removedNodes.hasOwnProperty(name)) {
	          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
	        }
	      }
	      if (updates) {
	        processQueue(this, updates);
	      }
	      this._renderedChildren = nextChildren;

	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, nextChildren);
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted. It does not actually perform any
	     * backend operations.
	     *
	     * @internal
	     */
	    unmountChildren: function (safely) {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren, safely);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, afterNode, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        return makeMove(child, afterNode, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, afterNode, mountImage) {
	      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child, node) {
	      return makeRemove(child, node);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
	      child._mountIndex = index;
	      return this.createChild(child, afterNode, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child, node) {
	      var update = this.removeChild(child, node);
	      child._mountIndex = null;
	      return update;
	    }

	  }

	};

	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkup: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
	      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 116 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(59);

	var instantiateReactComponent = __webpack_require__(118);
	var KeyEscapeUtils = __webpack_require__(128);
	var shouldUpdateReactComponent = __webpack_require__(124);
	var traverseAllChildren = __webpack_require__(129);
	var warning = __webpack_require__(11);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}

	function instantiateChild(childInstances, child, name, selfDebugID) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    if (!ReactComponentTreeHook) {
	      ReactComponentTreeHook = __webpack_require__(26);
	    }
	    if (!keyUnique) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	    }
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, true);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
	  ) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};

	    if (process.env.NODE_ENV !== 'production') {
	      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
	        return instantiateChild(childInsts, child, name, selfDebugID);
	      }, childInstances);
	    } else {
	      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    }
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
	  ) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return;
	    }
	    var name;
	    var prevChild;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	          ReactReconciler.unmountComponent(prevChild, false);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, true);
	        nextChildren[name] = nextChildInstance;
	        // Creating mount image now ensures refs are resolved in right order
	        // (see https://github.com/facebook/react/pull/7101 for explanation).
	        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
	        mountImages.push(nextChildMountImage);
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        prevChild = prevChildren[name];
	        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	        ReactReconciler.unmountComponent(prevChild, false);
	      }
	    }
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren, safely) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild, safely);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var ReactCompositeComponent = __webpack_require__(119);
	var ReactEmptyComponent = __webpack_require__(125);
	var ReactHostComponent = __webpack_require__(126);

	var getNextDebugID = __webpack_require__(127);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function (element) {
	  this.construct(element);
	};
	_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {boolean} shouldHaveDebugID
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, shouldHaveDebugID) {
	  var instance;

	  if (node === null || node === false) {
	    instance = ReactEmptyComponent.create(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : _prodInvariant('130', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : void 0;

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactHostComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);

	      // We renamed this. Allow the old name for compat. :(
	      if (!instance.getHostNode) {
	        instance.getHostNode = instance.getNativeNode;
	      }
	    } else {
	      instance = new ReactCompositeComponentWrapper(element);
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactHostComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
	  }

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var React = __webpack_require__(2);
	var ReactComponentEnvironment = __webpack_require__(115);
	var ReactCurrentOwner = __webpack_require__(10);
	var ReactErrorUtils = __webpack_require__(45);
	var ReactInstanceMap = __webpack_require__(116);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactNodeTypes = __webpack_require__(120);
	var ReactReconciler = __webpack_require__(59);

	if (process.env.NODE_ENV !== 'production') {
	  var checkReactTypeSpec = __webpack_require__(121);
	}

	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(8);
	var shallowEqual = __webpack_require__(123);
	var shouldUpdateReactComponent = __webpack_require__(124);
	var warning = __webpack_require__(11);

	var CompositeTypes = {
	  ImpureClass: 0,
	  PureClass: 1,
	  StatelessFunctional: 2
	};

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  var element = Component(this.props, this.context, this.updater);
	  warnIfInvalidElement(Component, element);
	  return element;
	};

	function warnIfInvalidElement(Component, element) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	}

	function shouldConstruct(Component) {
	  return !!(Component.prototype && Component.prototype.isReactComponent);
	}

	function isPureComponent(Component) {
	  return !!(Component.prototype && Component.prototype.isPureReactComponent);
	}

	// Separated into a function to contain deoptimizations caused by try/finally.
	function measureLifeCyclePerf(fn, debugID, timerType) {
	  if (debugID === 0) {
	    // Top-level wrappers (see ReactMount) and empty components (see
	    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
	    // Both are implementation details that should go away in the future.
	    return fn();
	  }

	  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
	  try {
	    return fn();
	  } finally {
	    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
	  }
	}

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponent = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = 0;
	    this._compositeType = null;
	    this._instance = null;
	    this._hostParent = null;
	    this._hostContainerInfo = null;

	    // See ReactUpdateQueue
	    this._updateBatchNumber = null;
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedNodeType = null;
	    this._renderedComponent = null;
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;

	    // ComponentWillUnmount shall only be called once
	    this._calledComponentWillUnmount = false;

	    if (process.env.NODE_ENV !== 'production') {
	      this._warnedAboutRefsInRender = false;
	    }
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} hostParent
	   * @param {?object} hostContainerInfo
	   * @param {?object} context
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var _this = this;

	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var publicProps = this._currentElement.props;
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    var updateQueue = transaction.getUpdateQueue();

	    // Initialize the public class
	    var doConstruct = shouldConstruct(Component);
	    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
	    var renderedElement;

	    // Support functional components
	    if (!doConstruct && (inst == null || inst.render == null)) {
	      renderedElement = inst;
	      warnIfInvalidElement(Component, renderedElement);
	      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
	      inst = new StatelessComponent(Component);
	      this._compositeType = CompositeTypes.StatelessFunctional;
	    } else {
	      if (isPureComponent(Component)) {
	        this._compositeType = CompositeTypes.PureClass;
	      } else {
	        this._compositeType = CompositeTypes.ImpureClass;
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
	      }

	      var propsMutated = inst.props !== publicProps;
	      var componentName = Component.displayName || Component.name || 'Component';

	      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = updateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    var markup;
	    if (inst.unstable_handleError) {
	      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } else {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }

	    if (inst.componentDidMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(function () {
	            return inst.componentDidMount();
	          }, _this._debugID, 'componentDidMount');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	      }
	    }

	    return markup;
	  },

	  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactCurrentOwner.current = this;
	      try {
	        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	    }
	  },

	  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
	    var Component = this._currentElement.type;

	    if (doConstruct) {
	      if (process.env.NODE_ENV !== 'production') {
	        return measureLifeCyclePerf(function () {
	          return new Component(publicProps, publicContext, updateQueue);
	        }, this._debugID, 'ctor');
	      } else {
	        return new Component(publicProps, publicContext, updateQueue);
	      }
	    }

	    // This can still be an instance in case of factory components
	    // but we'll count this as time spent rendering as the more common case.
	    if (process.env.NODE_ENV !== 'production') {
	      return measureLifeCyclePerf(function () {
	        return Component(publicProps, publicContext, updateQueue);
	      }, this._debugID, 'render');
	    } else {
	      return Component(publicProps, publicContext, updateQueue);
	    }
	  },

	  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var markup;
	    var checkpoint = transaction.checkpoint();
	    try {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } catch (e) {
	      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
	      transaction.rollback(checkpoint);
	      this._instance.unstable_handleError(e);
	      if (this._pendingStateQueue) {
	        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
	      }
	      checkpoint = transaction.checkpoint();

	      this._renderedComponent.unmountComponent(true);
	      transaction.rollback(checkpoint);

	      // Try again - we've informed the component about the error, so they can render an error message this time.
	      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	    return markup;
	  },

	  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var inst = this._instance;

	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }

	    if (inst.componentWillMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillMount();
	        }, debugID, 'componentWillMount');
	      } else {
	        inst.componentWillMount();
	      }
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    var nodeType = ReactNodeTypes.getType(renderedElement);
	    this._renderedNodeType = nodeType;
	    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	    );
	    this._renderedComponent = child;

	    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

	    if (process.env.NODE_ENV !== 'production') {
	      if (debugID !== 0) {
	        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	      }
	    }

	    return markup;
	  },

	  getHostNode: function () {
	    return ReactReconciler.getHostNode(this._renderedComponent);
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    if (!this._renderedComponent) {
	      return;
	    }

	    var inst = this._instance;

	    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
	      inst._calledComponentWillUnmount = true;

	      if (safely) {
	        var name = this.getName() + '.componentWillUnmount()';
	        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          measureLifeCyclePerf(function () {
	            return inst.componentWillUnmount();
	          }, this._debugID, 'componentWillUnmount');
	        } else {
	          inst.componentWillUnmount();
	        }
	      }
	    }

	    if (this._renderedComponent) {
	      ReactReconciler.unmountComponent(this._renderedComponent, safely);
	      this._renderedNodeType = null;
	      this._renderedComponent = null;
	      this._instance = null;
	    }

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = 0;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    var maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext;

	    if (inst.getChildContext) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
	        try {
	          childContext = inst.getChildContext();
	        } finally {
	          ReactInstrumentation.debugTool.onEndProcessingChildContext();
	        }
	      } else {
	        childContext = inst.getChildContext();
	      }
	    }

	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkContextTypes(Component.childContextTypes, childContext, 'childContext');
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
	      }
	      return _assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Assert that the context types are valid
	   *
	   * @param {object} typeSpecs Map of context field to a ReactPropType
	   * @param {object} values Runtime values that need to be type-checked
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkContextTypes: function (typeSpecs, values, location) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
	    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    } else {
	      this._updateBatchNumber = null;
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

	    var willReceive = false;
	    var nextContext;

	    // Determine if the context has changed or not
	    if (this._context === nextUnmaskedContext) {
	      nextContext = inst.context;
	    } else {
	      nextContext = this._processContext(nextUnmaskedContext);
	      willReceive = true;
	    }

	    var prevProps = prevParentElement.props;
	    var nextProps = nextParentElement.props;

	    // Not a simple state update but a props update
	    if (prevParentElement !== nextParentElement) {
	      willReceive = true;
	    }

	    // An update here will schedule an update but immediately set
	    // _pendingStateQueue which will ensure that any state updates gets
	    // immediately reconciled instead of waiting for the next batch.
	    if (willReceive && inst.componentWillReceiveProps) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillReceiveProps(nextProps, nextContext);
	        }, this._debugID, 'componentWillReceiveProps');
	      } else {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);
	    var shouldUpdate = true;

	    if (!this._pendingForceUpdate) {
	      if (inst.shouldComponentUpdate) {
	        if (process.env.NODE_ENV !== 'production') {
	          shouldUpdate = measureLifeCyclePerf(function () {
	            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	          }, this._debugID, 'shouldComponentUpdate');
	        } else {
	          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	        }
	      } else {
	        if (this._compositeType === CompositeTypes.PureClass) {
	          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
	        }
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
	    }

	    this._updateBatchNumber = null;
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = _assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var _this2 = this;

	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillUpdate(nextProps, nextState, nextContext);
	        }, this._debugID, 'componentWillUpdate');
	      } else {
	        inst.componentWillUpdate(nextProps, nextState, nextContext);
	      }
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	      }
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();

	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }

	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
	      ReactReconciler.unmountComponent(prevComponentInstance, false);

	      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
	      this._renderedNodeType = nodeType;
	      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	      );
	      this._renderedComponent = child;

	      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

	      if (process.env.NODE_ENV !== 'production') {
	        if (debugID !== 0) {
	          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	        }
	      }

	      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
	    }
	  },

	  /**
	   * Overridden in shallow rendering.
	   *
	   * @protected
	   */
	  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
	    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedElement;

	    if (process.env.NODE_ENV !== 'production') {
	      renderedElement = measureLifeCyclePerf(function () {
	        return inst.render();
	      }, this._debugID, 'render');
	    } else {
	      renderedElement = inst.render();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (renderedElement === undefined && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedElement = null;
	      }
	    }

	    return renderedElement;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedElement;
	    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
	      ReactCurrentOwner.current = this;
	      try {
	        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

	    return renderedElement;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (this._compositeType === CompositeTypes.StatelessFunctional) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var React = __webpack_require__(2);

	var invariant = __webpack_require__(8);

	var ReactNodeTypes = {
	  HOST: 0,
	  COMPOSITE: 1,
	  EMPTY: 2,

	  getType: function (node) {
	    if (node === null || node === false) {
	      return ReactNodeTypes.EMPTY;
	    } else if (React.isValidElement(node)) {
	      if (typeof node.type === 'function') {
	        return ReactNodeTypes.COMPOSITE;
	      } else {
	        return ReactNodeTypes.HOST;
	      }
	    }
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
	  }
	};

	module.exports = ReactNodeTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var ReactPropTypeLocationNames = __webpack_require__(122);
	var ReactPropTypesSecret = __webpack_require__(110);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}

	var loggedTypeFailures = {};

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var componentStackInfo = '';

	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(26);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }

	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}

	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 123 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */

	/*eslint-disable no-self-compare */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 124 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */

	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	}

	module.exports = shouldUpdateReactComponent;

/***/ },
/* 125 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyComponentFactory;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponentFactory: function (factory) {
	    emptyComponentFactory = factory;
	  }
	};

	var ReactEmptyComponent = {
	  create: function (instantiate) {
	    return emptyComponentFactory(instantiate);
	  }
	};

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var invariant = __webpack_require__(8);

	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around host tags.
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactHostComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    _assign(tagToComponentClass, componentClasses);
	  }
	};

	/**
	 * Get a host internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
	  return new genericComponentClass(element);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactHostComponent = {
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactHostComponentInjection
	};

	module.exports = ReactHostComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 127 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var nextDebugID = 1;

	function getNextDebugID() {
	  return nextDebugID++;
	}

	module.exports = getNextDebugID;

/***/ },
/* 128 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var ReactCurrentOwner = __webpack_require__(10);
	var REACT_ELEMENT_TYPE = __webpack_require__(130);

	var getIteratorFn = __webpack_require__(131);
	var invariant = __webpack_require__(8);
	var KeyEscapeUtils = __webpack_require__(128);
	var warning = __webpack_require__(11);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 130 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.

	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 131 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var KeyEscapeUtils = __webpack_require__(128);
	var traverseAllChildren = __webpack_require__(129);
	var warning = __webpack_require__(11);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 * @param {number=} selfDebugID Optional debugID of the current internal instance.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
	  // We found a component instance.
	  if (traverseContext && typeof traverseContext === 'object') {
	    var result = traverseContext;
	    var keyUnique = result[name] === undefined;
	    if (process.env.NODE_ENV !== 'production') {
	      if (!ReactComponentTreeHook) {
	        ReactComponentTreeHook = __webpack_require__(26);
	      }
	      if (!keyUnique) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	      }
	    }
	    if (keyUnique && child != null) {
	      result[name] = child;
	    }
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children, selfDebugID) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};

	  if (process.env.NODE_ENV !== 'production') {
	    traverseAllChildren(children, function (traverseContext, child, name) {
	      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
	    }, result);
	  } else {
	    traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  }
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var PooledClass = __webpack_require__(50);
	var Transaction = __webpack_require__(68);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactServerUpdateQueue = __webpack_require__(134);

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [];

	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	var noopCallbackQueue = {
	  enqueue: function () {}
	};

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.useCreateElement = false;
	  this.updateQueue = new ReactServerUpdateQueue(this);
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return noopCallbackQueue;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return this.updateQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {},

	  checkpoint: function () {},

	  rollback: function () {}
	};

	_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ReactUpdateQueue = __webpack_require__(135);

	var warning = __webpack_require__(11);

	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the update queue used for server rendering.
	 * It delegates to ReactUpdateQueue while server rendering is in progress and
	 * switches to ReactNoopUpdateQueue after the transaction has completed.
	 * @class ReactServerUpdateQueue
	 * @param {Transaction} transaction
	 */

	var ReactServerUpdateQueue = function () {
	  function ReactServerUpdateQueue(transaction) {
	    _classCallCheck(this, ReactServerUpdateQueue);

	    this.transaction = transaction;
	  }

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */


	  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
	    return false;
	  };

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
	    }
	  };

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
	    } else {
	      warnNoop(publicInstance, 'forceUpdate');
	    }
	  };

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} completeState Next state.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
	    } else {
	      warnNoop(publicInstance, 'replaceState');
	    }
	  };

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} partialState Next partial state to be merged with state.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
	    } else {
	      warnNoop(publicInstance, 'setState');
	    }
	  };

	  return ReactServerUpdateQueue;
	}();

	module.exports = ReactServerUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var ReactCurrentOwner = __webpack_require__(10);
	var ReactInstanceMap = __webpack_require__(116);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactUpdates = __webpack_require__(56);

	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function formatUnexpectedArgument(arg) {
	  var type = typeof arg;
	  if (type !== 'object') {
	    return type;
	  }
	  var displayName = arg.constructor && arg.constructor.name || type;
	  var keys = Object.keys(arg);
	  if (keys.length > 0 && keys.length < 20) {
	    return displayName + ' (keys: ' + keys.join(', ') + ')';
	  }
	  return displayName;
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var ctor = publicInstance.constructor;
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @param {string} callerName Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback, callerName) {
	    ReactUpdateQueue.validateCallback(callback, callerName);
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onSetState();
	      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
	    }

	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
	    internalInstance._pendingElement = nextElement;
	    // TODO: introduce _pendingContext instead of setting it directly.
	    internalInstance._context = nextContext;
	    enqueueUpdate(internalInstance);
	  },

	  validateCallback: function (callback, callerName) {
	    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
	  }

	};

	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var emptyFunction = __webpack_require__(12);
	var warning = __webpack_require__(11);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    current: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    do {
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    if (childText != null) {
	      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
	      childTag = '#text';
	    }

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      var tagDisplayName = childTag;
	      var whitespaceInfo = '';
	      if (childTag === '#text') {
	        if (/\S/.test(childText)) {
	          tagDisplayName = 'Text nodes';
	        } else {
	          tagDisplayName = 'Whitespace text nodes';
	          whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
	        }
	      } else {
	        tagDisplayName = '<' + childTag + '>';
	      }

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
	      }
	    }
	  };

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var DOMLazyTree = __webpack_require__(81);
	var ReactDOMComponentTree = __webpack_require__(34);

	var ReactDOMEmptyComponent = function (instantiate) {
	  // ReactCompositeComponent uses this:
	  this._currentElement = null;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	  this._hostContainerInfo = null;
	  this._domID = 0;
	};
	_assign(ReactDOMEmptyComponent.prototype, {
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var domID = hostContainerInfo._idCounter++;
	    this._domID = domID;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var nodeValue = ' react-empty: ' + this._domID + ' ';
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var node = ownerDocument.createComment(nodeValue);
	      ReactDOMComponentTree.precacheNode(this, node);
	      return DOMLazyTree(node);
	    } else {
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd insert a comment node, but since this is a situation
	        // where React won't take over (static pages), we can simply return
	        // nothing.
	        return '';
	      }
	      return '<!--' + nodeValue + '-->';
	    }
	  },
	  receiveComponent: function () {},
	  getHostNode: function () {
	    return ReactDOMComponentTree.getNodeFromInstance(this);
	  },
	  unmountComponent: function () {
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});

	module.exports = ReactDOMEmptyComponent;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var invariant = __webpack_require__(8);

	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
	    depthB++;
	  }

	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = instA._hostParent;
	    depthA--;
	  }

	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = instB._hostParent;
	    depthB--;
	  }

	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB) {
	      return instA;
	    }
	    instA = instA._hostParent;
	    instB = instB._hostParent;
	  }
	  return null;
	}

	/**
	 * Return if A is an ancestor of B.
	 */
	function isAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

	  while (instB) {
	    if (instB === instA) {
	      return true;
	    }
	    instB = instB._hostParent;
	  }
	  return false;
	}

	/**
	 * Return the parent instance of the passed-in instance.
	 */
	function getParentInstance(inst) {
	  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

	  return inst._hostParent;
	}

	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = inst._hostParent;
	  }
	  var i;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}

	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (from && from !== common) {
	    pathFrom.push(from);
	    from = from._hostParent;
	  }
	  var pathTo = [];
	  while (to && to !== common) {
	    pathTo.push(to);
	    to = to._hostParent;
	  }
	  var i;
	  for (i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }
	  for (i = pathTo.length; i-- > 0;) {
	    fn(pathTo[i], 'captured', argTo);
	  }
	}

	module.exports = {
	  isAncestor: isAncestor,
	  getLowestCommonAncestor: getLowestCommonAncestor,
	  getParentInstance: getParentInstance,
	  traverseTwoPhase: traverseTwoPhase,
	  traverseEnterLeave: traverseEnterLeave
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);

	var DOMChildrenOperations = __webpack_require__(80);
	var DOMLazyTree = __webpack_require__(81);
	var ReactDOMComponentTree = __webpack_require__(34);

	var escapeTextContentForBrowser = __webpack_require__(86);
	var invariant = __webpack_require__(8);
	var validateDOMNesting = __webpack_require__(136);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings between comment nodes so that they
	 * can undergo the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (text) {
	  // TODO: This is really a ReactText (ReactNode), not a ReactElement
	  this._currentElement = text;
	  this._stringText = '' + text;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;

	  // Properties
	  this._domID = 0;
	  this._mountIndex = 0;
	  this._closingComment = null;
	  this._commentNodes = null;
	};

	_assign(ReactDOMTextComponent.prototype, {

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo != null) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(null, this._stringText, this, parentInfo);
	      }
	    }

	    var domID = hostContainerInfo._idCounter++;
	    var openingValue = ' react-text: ' + domID + ' ';
	    var closingValue = ' /react-text ';
	    this._domID = domID;
	    this._hostParent = hostParent;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var openingComment = ownerDocument.createComment(openingValue);
	      var closingComment = ownerDocument.createComment(closingValue);
	      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
	      if (this._stringText) {
	        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
	      }
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
	      ReactDOMComponentTree.precacheNode(this, openingComment);
	      this._closingComment = closingComment;
	      return lazyTree;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this between comment nodes for the reasons stated
	        // above, but since this is a situation where React won't take over
	        // (static pages), we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var commentNodes = this.getHostNode();
	        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
	      }
	    }
	  },

	  getHostNode: function () {
	    var hostNode = this._commentNodes;
	    if (hostNode) {
	      return hostNode;
	    }
	    if (!this._closingComment) {
	      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
	      var node = openingComment.nextSibling;
	      while (true) {
	        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
	        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
	          this._closingComment = node;
	          break;
	        }
	        node = node.nextSibling;
	      }
	    }
	    hostNode = [this._hostNode, this._closingComment];
	    this._commentNodes = hostNode;
	    return hostNode;
	  },

	  unmountComponent: function () {
	    this._closingComment = null;
	    this._commentNodes = null;
	    ReactDOMComponentTree.uncacheNode(this);
	  }

	});

	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var ReactUpdates = __webpack_require__(56);
	var Transaction = __webpack_require__(68);

	var emptyFunction = __webpack_require__(12);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      return callback(a, b, c, d, e);
	    } else {
	      return transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var EventListener = __webpack_require__(142);
	var ExecutionEnvironment = __webpack_require__(48);
	var PooledClass = __webpack_require__(50);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);

	var getEventTarget = __webpack_require__(69);
	var getUnboundedScrollPosition = __webpack_require__(143);

	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findParent(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst._hostParent) {
	    inst = inst._hostParent;
	  }
	  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
	  var container = rootNode.parentNode;
	  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	_assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
	  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = ancestor && findParent(ancestor);
	  } while (ancestor);

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(12);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function registerDefault() {}
	};

	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 143 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */

	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(36);
	var EventPluginHub = __webpack_require__(42);
	var EventPluginUtils = __webpack_require__(44);
	var ReactComponentEnvironment = __webpack_require__(115);
	var ReactEmptyComponent = __webpack_require__(125);
	var ReactBrowserEventEmitter = __webpack_require__(105);
	var ReactHostComponent = __webpack_require__(126);
	var ReactUpdates = __webpack_require__(56);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventPluginUtils: EventPluginUtils.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  HostComponent: ReactHostComponent.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var CallbackQueue = __webpack_require__(57);
	var PooledClass = __webpack_require__(50);
	var ReactBrowserEventEmitter = __webpack_require__(105);
	var ReactInputSelection = __webpack_require__(146);
	var ReactInstrumentation = __webpack_require__(62);
	var Transaction = __webpack_require__(68);
	var ReactUpdateQueue = __webpack_require__(135);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(useCreateElement) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactDOMTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return ReactUpdateQueue;
	  },

	  /**
	   * Save current transaction state -- if the return value from this method is
	   * passed to `rollback`, the transaction will be reset to that state.
	   */
	  checkpoint: function () {
	    // reactMountReady is the our only stateful wrapper
	    return this.reactMountReady.checkpoint();
	  },

	  rollback: function (checkpoint) {
	    this.reactMountReady.rollback(checkpoint);
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(147);

	var containsNode = __webpack_require__(149);
	var focusNode = __webpack_require__(94);
	var getActiveElement = __webpack_require__(152);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (end === undefined) {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(48);

	var getNodeForCharacterOffset = __webpack_require__(148);
	var getTextContentAccessor = __webpack_require__(51);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (offsets.end === undefined) {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ },
/* 148 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */

	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	var isTextNode = __webpack_require__(150);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var isNode = __webpack_require__(151);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 151 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 152 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 153 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
	  accentHeight: 'accent-height',
	  accumulate: 0,
	  additive: 0,
	  alignmentBaseline: 'alignment-baseline',
	  allowReorder: 'allowReorder',
	  alphabetic: 0,
	  amplitude: 0,
	  arabicForm: 'arabic-form',
	  ascent: 0,
	  attributeName: 'attributeName',
	  attributeType: 'attributeType',
	  autoReverse: 'autoReverse',
	  azimuth: 0,
	  baseFrequency: 'baseFrequency',
	  baseProfile: 'baseProfile',
	  baselineShift: 'baseline-shift',
	  bbox: 0,
	  begin: 0,
	  bias: 0,
	  by: 0,
	  calcMode: 'calcMode',
	  capHeight: 'cap-height',
	  clip: 0,
	  clipPath: 'clip-path',
	  clipRule: 'clip-rule',
	  clipPathUnits: 'clipPathUnits',
	  colorInterpolation: 'color-interpolation',
	  colorInterpolationFilters: 'color-interpolation-filters',
	  colorProfile: 'color-profile',
	  colorRendering: 'color-rendering',
	  contentScriptType: 'contentScriptType',
	  contentStyleType: 'contentStyleType',
	  cursor: 0,
	  cx: 0,
	  cy: 0,
	  d: 0,
	  decelerate: 0,
	  descent: 0,
	  diffuseConstant: 'diffuseConstant',
	  direction: 0,
	  display: 0,
	  divisor: 0,
	  dominantBaseline: 'dominant-baseline',
	  dur: 0,
	  dx: 0,
	  dy: 0,
	  edgeMode: 'edgeMode',
	  elevation: 0,
	  enableBackground: 'enable-background',
	  end: 0,
	  exponent: 0,
	  externalResourcesRequired: 'externalResourcesRequired',
	  fill: 0,
	  fillOpacity: 'fill-opacity',
	  fillRule: 'fill-rule',
	  filter: 0,
	  filterRes: 'filterRes',
	  filterUnits: 'filterUnits',
	  floodColor: 'flood-color',
	  floodOpacity: 'flood-opacity',
	  focusable: 0,
	  fontFamily: 'font-family',
	  fontSize: 'font-size',
	  fontSizeAdjust: 'font-size-adjust',
	  fontStretch: 'font-stretch',
	  fontStyle: 'font-style',
	  fontVariant: 'font-variant',
	  fontWeight: 'font-weight',
	  format: 0,
	  from: 0,
	  fx: 0,
	  fy: 0,
	  g1: 0,
	  g2: 0,
	  glyphName: 'glyph-name',
	  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	  glyphOrientationVertical: 'glyph-orientation-vertical',
	  glyphRef: 'glyphRef',
	  gradientTransform: 'gradientTransform',
	  gradientUnits: 'gradientUnits',
	  hanging: 0,
	  horizAdvX: 'horiz-adv-x',
	  horizOriginX: 'horiz-origin-x',
	  ideographic: 0,
	  imageRendering: 'image-rendering',
	  'in': 0,
	  in2: 0,
	  intercept: 0,
	  k: 0,
	  k1: 0,
	  k2: 0,
	  k3: 0,
	  k4: 0,
	  kernelMatrix: 'kernelMatrix',
	  kernelUnitLength: 'kernelUnitLength',
	  kerning: 0,
	  keyPoints: 'keyPoints',
	  keySplines: 'keySplines',
	  keyTimes: 'keyTimes',
	  lengthAdjust: 'lengthAdjust',
	  letterSpacing: 'letter-spacing',
	  lightingColor: 'lighting-color',
	  limitingConeAngle: 'limitingConeAngle',
	  local: 0,
	  markerEnd: 'marker-end',
	  markerMid: 'marker-mid',
	  markerStart: 'marker-start',
	  markerHeight: 'markerHeight',
	  markerUnits: 'markerUnits',
	  markerWidth: 'markerWidth',
	  mask: 0,
	  maskContentUnits: 'maskContentUnits',
	  maskUnits: 'maskUnits',
	  mathematical: 0,
	  mode: 0,
	  numOctaves: 'numOctaves',
	  offset: 0,
	  opacity: 0,
	  operator: 0,
	  order: 0,
	  orient: 0,
	  orientation: 0,
	  origin: 0,
	  overflow: 0,
	  overlinePosition: 'overline-position',
	  overlineThickness: 'overline-thickness',
	  paintOrder: 'paint-order',
	  panose1: 'panose-1',
	  pathLength: 'pathLength',
	  patternContentUnits: 'patternContentUnits',
	  patternTransform: 'patternTransform',
	  patternUnits: 'patternUnits',
	  pointerEvents: 'pointer-events',
	  points: 0,
	  pointsAtX: 'pointsAtX',
	  pointsAtY: 'pointsAtY',
	  pointsAtZ: 'pointsAtZ',
	  preserveAlpha: 'preserveAlpha',
	  preserveAspectRatio: 'preserveAspectRatio',
	  primitiveUnits: 'primitiveUnits',
	  r: 0,
	  radius: 0,
	  refX: 'refX',
	  refY: 'refY',
	  renderingIntent: 'rendering-intent',
	  repeatCount: 'repeatCount',
	  repeatDur: 'repeatDur',
	  requiredExtensions: 'requiredExtensions',
	  requiredFeatures: 'requiredFeatures',
	  restart: 0,
	  result: 0,
	  rotate: 0,
	  rx: 0,
	  ry: 0,
	  scale: 0,
	  seed: 0,
	  shapeRendering: 'shape-rendering',
	  slope: 0,
	  spacing: 0,
	  specularConstant: 'specularConstant',
	  specularExponent: 'specularExponent',
	  speed: 0,
	  spreadMethod: 'spreadMethod',
	  startOffset: 'startOffset',
	  stdDeviation: 'stdDeviation',
	  stemh: 0,
	  stemv: 0,
	  stitchTiles: 'stitchTiles',
	  stopColor: 'stop-color',
	  stopOpacity: 'stop-opacity',
	  strikethroughPosition: 'strikethrough-position',
	  strikethroughThickness: 'strikethrough-thickness',
	  string: 0,
	  stroke: 0,
	  strokeDasharray: 'stroke-dasharray',
	  strokeDashoffset: 'stroke-dashoffset',
	  strokeLinecap: 'stroke-linecap',
	  strokeLinejoin: 'stroke-linejoin',
	  strokeMiterlimit: 'stroke-miterlimit',
	  strokeOpacity: 'stroke-opacity',
	  strokeWidth: 'stroke-width',
	  surfaceScale: 'surfaceScale',
	  systemLanguage: 'systemLanguage',
	  tableValues: 'tableValues',
	  targetX: 'targetX',
	  targetY: 'targetY',
	  textAnchor: 'text-anchor',
	  textDecoration: 'text-decoration',
	  textRendering: 'text-rendering',
	  textLength: 'textLength',
	  to: 0,
	  transform: 0,
	  u1: 0,
	  u2: 0,
	  underlinePosition: 'underline-position',
	  underlineThickness: 'underline-thickness',
	  unicode: 0,
	  unicodeBidi: 'unicode-bidi',
	  unicodeRange: 'unicode-range',
	  unitsPerEm: 'units-per-em',
	  vAlphabetic: 'v-alphabetic',
	  vHanging: 'v-hanging',
	  vIdeographic: 'v-ideographic',
	  vMathematical: 'v-mathematical',
	  values: 0,
	  vectorEffect: 'vector-effect',
	  version: 0,
	  vertAdvY: 'vert-adv-y',
	  vertOriginX: 'vert-origin-x',
	  vertOriginY: 'vert-origin-y',
	  viewBox: 'viewBox',
	  viewTarget: 'viewTarget',
	  visibility: 0,
	  widths: 0,
	  wordSpacing: 'word-spacing',
	  writingMode: 'writing-mode',
	  x: 0,
	  xHeight: 'x-height',
	  x1: 0,
	  x2: 0,
	  xChannelSelector: 'xChannelSelector',
	  xlinkActuate: 'xlink:actuate',
	  xlinkArcrole: 'xlink:arcrole',
	  xlinkHref: 'xlink:href',
	  xlinkRole: 'xlink:role',
	  xlinkShow: 'xlink:show',
	  xlinkTitle: 'xlink:title',
	  xlinkType: 'xlink:type',
	  xmlBase: 'xml:base',
	  xmlns: 0,
	  xmlnsXlink: 'xmlns:xlink',
	  xmlLang: 'xml:lang',
	  xmlSpace: 'xml:space',
	  y: 0,
	  y1: 0,
	  y2: 0,
	  yChannelSelector: 'yChannelSelector',
	  z: 0,
	  zoomAndPan: 'zoomAndPan'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {},
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {}
	};

	Object.keys(ATTRS).forEach(function (key) {
	  SVGDOMPropertyConfig.Properties[key] = 0;
	  if (ATTRS[key]) {
	    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
	  }
	});

	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(41);
	var ExecutionEnvironment = __webpack_require__(48);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInputSelection = __webpack_require__(146);
	var SyntheticEvent = __webpack_require__(53);

	var getActiveElement = __webpack_require__(152);
	var isTextInputElement = __webpack_require__(71);
	var shallowEqual = __webpack_require__(123);

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
	  }
	};

	var activeElement = null;
	var activeElementInst = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events. See #3639.
	var hasListener = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case 'topFocus':
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement = targetNode;
	          activeElementInst = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case 'topBlur':
	        activeElement = null;
	        activeElementInst = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case 'topMouseDown':
	        mouseDown = true;
	        break;
	      case 'topContextMenu':
	      case 'topMouseUp':
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case 'topSelectionChange':
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case 'topKeyDown':
	      case 'topKeyUp':
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    if (registrationName === 'onSelect') {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var EventListener = __webpack_require__(142);
	var EventPropagators = __webpack_require__(41);
	var ReactDOMComponentTree = __webpack_require__(34);
	var SyntheticAnimationEvent = __webpack_require__(156);
	var SyntheticClipboardEvent = __webpack_require__(157);
	var SyntheticEvent = __webpack_require__(53);
	var SyntheticFocusEvent = __webpack_require__(158);
	var SyntheticKeyboardEvent = __webpack_require__(159);
	var SyntheticMouseEvent = __webpack_require__(74);
	var SyntheticDragEvent = __webpack_require__(162);
	var SyntheticTouchEvent = __webpack_require__(163);
	var SyntheticTransitionEvent = __webpack_require__(164);
	var SyntheticUIEvent = __webpack_require__(75);
	var SyntheticWheelEvent = __webpack_require__(165);

	var emptyFunction = __webpack_require__(12);
	var getEventCharCode = __webpack_require__(160);
	var invariant = __webpack_require__(8);

	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: ['topAbort'],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = {
	 *   'topAbort': { sameConfig }
	 * };
	 */
	var eventTypes = {};
	var topLevelEventsToDispatchConfig = {};
	['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
	  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	  var onEvent = 'on' + capitalizedEvent;
	  var topEvent = 'top' + capitalizedEvent;

	  var type = {
	    phasedRegistrationNames: {
	      bubbled: onEvent,
	      captured: onEvent + 'Capture'
	    },
	    dependencies: [topEvent]
	  };
	  eventTypes[event] = type;
	  topLevelEventsToDispatchConfig[topEvent] = type;
	});

	var onClickListeners = {};

	function getDictionaryKey(inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	}

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case 'topAbort':
	      case 'topCanPlay':
	      case 'topCanPlayThrough':
	      case 'topDurationChange':
	      case 'topEmptied':
	      case 'topEncrypted':
	      case 'topEnded':
	      case 'topError':
	      case 'topInput':
	      case 'topInvalid':
	      case 'topLoad':
	      case 'topLoadedData':
	      case 'topLoadedMetadata':
	      case 'topLoadStart':
	      case 'topPause':
	      case 'topPlay':
	      case 'topPlaying':
	      case 'topProgress':
	      case 'topRateChange':
	      case 'topReset':
	      case 'topSeeked':
	      case 'topSeeking':
	      case 'topStalled':
	      case 'topSubmit':
	      case 'topSuspend':
	      case 'topTimeUpdate':
	      case 'topVolumeChange':
	      case 'topWaiting':
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case 'topKeyPress':
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case 'topKeyDown':
	      case 'topKeyUp':
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case 'topBlur':
	      case 'topFocus':
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case 'topClick':
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case 'topDoubleClick':
	      case 'topMouseDown':
	      case 'topMouseMove':
	      case 'topMouseUp':
	      // TODO: Disabled elements should not respond to mouse events
	      /* falls through */
	      case 'topMouseOut':
	      case 'topMouseOver':
	      case 'topContextMenu':
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case 'topDrag':
	      case 'topDragEnd':
	      case 'topDragEnter':
	      case 'topDragExit':
	      case 'topDragLeave':
	      case 'topDragOver':
	      case 'topDragStart':
	      case 'topDrop':
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case 'topTouchCancel':
	      case 'topTouchEnd':
	      case 'topTouchMove':
	      case 'topTouchStart':
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case 'topAnimationEnd':
	      case 'topAnimationIteration':
	      case 'topAnimationStart':
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case 'topTransitionEnd':
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case 'topScroll':
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case 'topWheel':
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case 'topCopy':
	      case 'topCut':
	      case 'topPaste':
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      if (!onClickListeners[key]) {
	        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (inst, registrationName) {
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      onClickListeners[key].remove();
	      delete onClickListeners[key];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var AnimationEventInterface = {
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

	module.exports = SyntheticAnimationEvent;

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(75);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(75);

	var getEventCharCode = __webpack_require__(160);
	var getEventKey = __webpack_require__(161);
	var getEventModifierState = __webpack_require__(77);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 160 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */

	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(160);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(74);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(75);

	var getEventModifierState = __webpack_require__(77);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(53);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var TransitionEventInterface = {
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

	module.exports = SyntheticTransitionEvent;

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(74);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var DOMLazyTree = __webpack_require__(81);
	var DOMProperty = __webpack_require__(36);
	var React = __webpack_require__(2);
	var ReactBrowserEventEmitter = __webpack_require__(105);
	var ReactCurrentOwner = __webpack_require__(10);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMContainerInfo = __webpack_require__(167);
	var ReactDOMFeatureFlags = __webpack_require__(168);
	var ReactFeatureFlags = __webpack_require__(58);
	var ReactInstanceMap = __webpack_require__(116);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactMarkupChecksum = __webpack_require__(169);
	var ReactReconciler = __webpack_require__(59);
	var ReactUpdateQueue = __webpack_require__(135);
	var ReactUpdates = __webpack_require__(56);

	var emptyObject = __webpack_require__(20);
	var instantiateReactComponent = __webpack_require__(118);
	var invariant = __webpack_require__(8);
	var setInnerHTML = __webpack_require__(83);
	var shouldUpdateReactComponent = __webpack_require__(124);
	var warning = __webpack_require__(11);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var instancesByReactRootID = {};

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	  var markerName;
	  if (ReactFeatureFlags.logTopLevelRenders) {
	    var wrappedElement = wrapperInstance._currentElement.props.child;
	    var type = wrappedElement.type;
	    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
	    console.time(markerName);
	  }

	  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
	  );

	  if (markerName) {
	    console.timeEnd(markerName);
	  }

	  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */
	  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onBeginFlush();
	  }
	  ReactReconciler.unmountComponent(instance, safely);
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onEndFlush();
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  if (rootEl) {
	    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
	    return !!(inst && inst._hostParent);
	  }
	}

	/**
	 * True if the supplied DOM node is a React DOM element and
	 * it has been rendered by another copy of React.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM has been rendered by another copy of React
	 * @internal
	 */
	function nodeIsRenderedByOtherInstance(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
	}

	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
	}

	/**
	 * True if the supplied DOM node is a valid React node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid React DOM node.
	 * @internal
	 */
	function isReactNode(node) {
	  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
	}

	function getHostRootInstanceInContainer(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
	  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
	}

	function getTopLevelWrapperInContainer(container) {
	  var root = getHostRootInstanceInContainer(container);
	  return root ? root._hostContainerInfo._topLevelWrapper : null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var topLevelRootCounter = 1;
	var TopLevelWrapper = function () {
	  this.rootID = topLevelRootCounter++;
	};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  return this.props.child;
	};
	TopLevelWrapper.isReactTopLevelWrapper = true;

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /**
	   * Used by devtools. The keys are not important.
	   */
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    return prevComponent;
	  },

	  /**
	   * Render a new component into the DOM. Hooked by hooks!
	   *
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	    var componentInstance = instantiateReactComponent(nextElement, false);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

	    var wrapperID = componentInstance._instance.rootID;
	    instancesByReactRootID[wrapperID] = componentInstance;

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
	    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

	    var nextWrappedElement = React.createElement(TopLevelWrapper, { child: nextElement });

	    var nextContext;
	    if (parentComponent) {
	      var parentInst = ReactInstanceMap.get(parentComponent);
	      nextContext = parentInst._processChildContext(parentInst._context);
	    } else {
	      nextContext = emptyObject;
	    }

	    var prevComponent = getTopLevelWrapperInContainer(container);

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props.child;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;
	    }

	    var prevComponent = getTopLevelWrapperInContainer(container);
	    if (!prevComponent) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }

	      return false;
	    }
	    delete instancesByReactRootID[prevComponent._instance.rootID];
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
	    return true;
	  },

	  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        ReactDOMComponentTree.precacheNode(instance, rootElement);
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      DOMLazyTree.insertTreeBefore(container, markup, null);
	    } else {
	      setInnerHTML(container, markup);
	      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
	      if (hostNode._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: hostNode._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  }
	};

	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var validateDOMNesting = __webpack_require__(136);

	var DOC_NODE_TYPE = 9;

	function ReactDOMContainerInfo(topLevelWrapper, node) {
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1,
	    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
	    _node: node,
	    _tag: node ? node.nodeName.toLowerCase() : null,
	    _namespaceURI: node ? node.namespaceURI : null
	  };
	  if (process.env.NODE_ENV !== 'production') {
	    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
	  }
	  return info;
	}

	module.exports = ReactDOMContainerInfo;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 168 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: true,
	  useFiber: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var adler32 = __webpack_require__(170);

	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags, comments and self-closing tags)
	    if (COMMENT_START.test(markup)) {
	      return markup;
	    } else {
	      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	    }
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ },
/* 170 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    var n = Math.min(i + 4096, m);
	    for (; i < n; i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ },
/* 171 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	module.exports = '15.4.1';

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(35);

	var ReactCurrentOwner = __webpack_require__(10);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInstanceMap = __webpack_require__(116);

	var getHostComponentFromComposite = __webpack_require__(173);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }

	  var inst = ReactInstanceMap.get(componentOrElement);
	  if (inst) {
	    inst = getHostComponentFromComposite(inst);
	    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
	  }

	  if (typeof componentOrElement.render === 'function') {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
	  }
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactNodeTypes = __webpack_require__(120);

	function getHostComponentFromComposite(inst) {
	  var type;

	  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
	    inst = inst._renderedComponent;
	  }

	  if (type === ReactNodeTypes.HOST) {
	    return inst._renderedComponent;
	  } else if (type === ReactNodeTypes.EMPTY) {
	    return null;
	  }
	}

	module.exports = getHostComponentFromComposite;

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactMount = __webpack_require__(166);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(36);
	var EventPluginRegistry = __webpack_require__(43);
	var ReactComponentTreeHook = __webpack_require__(26);

	var warning = __webpack_require__(11);

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true,

	    autoFocus: true,
	    defaultValue: true,
	    valueLink: true,
	    defaultChecked: true,
	    checkedLink: true,
	    innerHTML: true,
	    suppressContentEditableWarning: true,
	    onFocusIn: true,
	    onFocusOut: true
	  };
	  var warnedProperties = {};

	  var validateProperty = function (tagName, name, debugID) {
	    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
	      return true;
	    }
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return true;
	    }
	    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
	      return true;
	    }
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

	    if (standardName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else if (registrationName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else {
	      // We were unable to guess which prop the user intended.
	      // It is likely that the user was just blindly spreading/forwarding props
	      // Components should be careful to only render valid props/attributes.
	      // Warning will be invoked in warnUnknownProperties to allow grouping.
	      return false;
	    }
	  };
	}

	var warnUnknownProperties = function (debugID, element) {
	  var unknownProps = [];
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      unknownProps.push(key);
	    }
	  }

	  var unknownPropString = unknownProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (unknownProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (unknownProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	};

	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	  warnUnknownProperties(debugID, element);
	}

	var ReactDOMUnknownPropertyHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};

	module.exports = ReactDOMUnknownPropertyHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactComponentTreeHook = __webpack_require__(26);

	var warning = __webpack_require__(11);

	var didWarnValueNull = false;

	function handleElement(debugID, element) {
	  if (element == null) {
	    return;
	  }
	  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
	    return;
	  }
	  if (element.props != null && element.props.value === null && !didWarnValueNull) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;

	    didWarnValueNull = true;
	  }
	}

	var ReactDOMNullInputValuePropHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};

	module.exports = ReactDOMNullInputValuePropHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(36);
	var ReactComponentTreeHook = __webpack_require__(26);

	var warning = __webpack_require__(11);

	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');

	function validateProperty(tagName, name, debugID) {
	  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	    return true;
	  }

	  if (rARIA.test(name)) {
	    var lowerCasedName = name.toLowerCase();
	    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.
	    if (standardName == null) {
	      warnedProperties[name] = true;
	      return false;
	    }
	    // aria-* attributes should be lowercase; suggest the lowercase version.
	    if (name !== standardName) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      warnedProperties[name] = true;
	      return true;
	    }
	  }

	  return true;
	}

	function warnInvalidARIAProps(debugID, element) {
	  var invalidProps = [];

	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      invalidProps.push(key);
	    }
	  }

	  var unknownPropString = invalidProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (invalidProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (invalidProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	}

	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }

	  warnInvalidARIAProps(debugID, element);
	}

	var ReactDOMInvalidARIAHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  }
	};

	module.exports = ReactDOMInvalidARIAHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactRouter = __webpack_require__(179);

	var _reactStormpath = __webpack_require__(234);

	var _style = __webpack_require__(235);

	var _style2 = _interopRequireDefault(_style);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Landing = function (_Component) {
	  _inherits(Landing, _Component);

	  function Landing() {
	    _classCallCheck(this, Landing);

	    return _possibleConstructorReturn(this, (Landing.__proto__ || Object.getPrototypeOf(Landing)).apply(this, arguments));
	  }

	  _createClass(Landing, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        { className: 'App', style: { textAlign: 'center' } },
	        _react2.default.createElement(
	          'div',
	          { className: 'App-header', style: {
	              backgroundColor: '#222',
	              height: '100px',
	              padding: '20px',
	              color: 'white'
	            } },
	          _react2.default.createElement(
	            'h2',
	            null,
	            'Voicercise'
	          ),
	          _react2.default.createElement('img', { src: '/images/' + 'github.png' })
	        ),
	        _react2.default.createElement(
	          'div',
	          { style: { paddingTop: '100px' } },
	          _react2.default.createElement('iframe', { width: '560', height: '315',
	            src: 'https://www.youtube.com/embed/watch?v=zGxlamMQ5XI&list=RDMMzGxlamMQ5XI',
	            frameBorder: '0', allowFullScreen: true, className: 'video' })
	        ),
	        _react2.default.createElement(
	          'div',
	          null,
	          _react2.default.createElement(
	            'span',
	            { className: 'signIn', style: { marginRight: '10px', textDecoration: 'none' } },
	            _react2.default.createElement(
	              _reactStormpath.LoginLink,
	              null,
	              'Sign In'
	            )
	          ),
	          _react2.default.createElement(
	            'span',
	            { className: 'signUp', style: { textDecoration: 'none' } },
	            _react2.default.createElement(
	              _reactRouter.Link,
	              { to: '/register' },
	              'Sign Up'
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return Landing;
	}(_react.Component);

	exports.default = Landing;

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.createMemoryHistory = exports.hashHistory = exports.browserHistory = exports.applyRouterMiddleware = exports.formatPattern = exports.useRouterHistory = exports.match = exports.routerShape = exports.locationShape = exports.RouterContext = exports.createRoutes = exports.Route = exports.Redirect = exports.IndexRoute = exports.IndexRedirect = exports.withRouter = exports.IndexLink = exports.Link = exports.Router = undefined;

	var _RouteUtils = __webpack_require__(180);

	Object.defineProperty(exports, 'createRoutes', {
	  enumerable: true,
	  get: function get() {
	    return _RouteUtils.createRoutes;
	  }
	});

	var _PropTypes = __webpack_require__(181);

	Object.defineProperty(exports, 'locationShape', {
	  enumerable: true,
	  get: function get() {
	    return _PropTypes.locationShape;
	  }
	});
	Object.defineProperty(exports, 'routerShape', {
	  enumerable: true,
	  get: function get() {
	    return _PropTypes.routerShape;
	  }
	});

	var _PatternUtils = __webpack_require__(182);

	Object.defineProperty(exports, 'formatPattern', {
	  enumerable: true,
	  get: function get() {
	    return _PatternUtils.formatPattern;
	  }
	});

	var _Router2 = __webpack_require__(184);

	var _Router3 = _interopRequireDefault(_Router2);

	var _Link2 = __webpack_require__(200);

	var _Link3 = _interopRequireDefault(_Link2);

	var _IndexLink2 = __webpack_require__(201);

	var _IndexLink3 = _interopRequireDefault(_IndexLink2);

	var _withRouter2 = __webpack_require__(202);

	var _withRouter3 = _interopRequireDefault(_withRouter2);

	var _IndexRedirect2 = __webpack_require__(204);

	var _IndexRedirect3 = _interopRequireDefault(_IndexRedirect2);

	var _IndexRoute2 = __webpack_require__(206);

	var _IndexRoute3 = _interopRequireDefault(_IndexRoute2);

	var _Redirect2 = __webpack_require__(205);

	var _Redirect3 = _interopRequireDefault(_Redirect2);

	var _Route2 = __webpack_require__(207);

	var _Route3 = _interopRequireDefault(_Route2);

	var _RouterContext2 = __webpack_require__(196);

	var _RouterContext3 = _interopRequireDefault(_RouterContext2);

	var _match2 = __webpack_require__(208);

	var _match3 = _interopRequireDefault(_match2);

	var _useRouterHistory2 = __webpack_require__(221);

	var _useRouterHistory3 = _interopRequireDefault(_useRouterHistory2);

	var _applyRouterMiddleware2 = __webpack_require__(222);

	var _applyRouterMiddleware3 = _interopRequireDefault(_applyRouterMiddleware2);

	var _browserHistory2 = __webpack_require__(223);

	var _browserHistory3 = _interopRequireDefault(_browserHistory2);

	var _hashHistory2 = __webpack_require__(231);

	var _hashHistory3 = _interopRequireDefault(_hashHistory2);

	var _createMemoryHistory2 = __webpack_require__(210);

	var _createMemoryHistory3 = _interopRequireDefault(_createMemoryHistory2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.Router = _Router3.default; /* components */

	exports.Link = _Link3.default;
	exports.IndexLink = _IndexLink3.default;
	exports.withRouter = _withRouter3.default;

	/* components (configuration) */

	exports.IndexRedirect = _IndexRedirect3.default;
	exports.IndexRoute = _IndexRoute3.default;
	exports.Redirect = _Redirect3.default;
	exports.Route = _Route3.default;

	/* utils */

	exports.RouterContext = _RouterContext3.default;
	exports.match = _match3.default;
	exports.useRouterHistory = _useRouterHistory3.default;
	exports.applyRouterMiddleware = _applyRouterMiddleware3.default;

	/* histories */

	exports.browserHistory = _browserHistory3.default;
	exports.hashHistory = _hashHistory3.default;
	exports.createMemoryHistory = _createMemoryHistory3.default;

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.isReactChildren = isReactChildren;
	exports.createRouteFromReactElement = createRouteFromReactElement;
	exports.createRoutesFromReactChildren = createRoutesFromReactChildren;
	exports.createRoutes = createRoutes;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isValidChild(object) {
	  return object == null || _react2.default.isValidElement(object);
	}

	function isReactChildren(object) {
	  return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
	}

	function createRoute(defaultProps, props) {
	  return _extends({}, defaultProps, props);
	}

	function createRouteFromReactElement(element) {
	  var type = element.type;
	  var route = createRoute(type.defaultProps, element.props);

	  if (route.children) {
	    var childRoutes = createRoutesFromReactChildren(route.children, route);

	    if (childRoutes.length) route.childRoutes = childRoutes;

	    delete route.children;
	  }

	  return route;
	}

	/**
	 * Creates and returns a routes object from the given ReactChildren. JSX
	 * provides a convenient way to visualize how routes in the hierarchy are
	 * nested.
	 *
	 *   import { Route, createRoutesFromReactChildren } from 'react-router'
	 *
	 *   const routes = createRoutesFromReactChildren(
	 *     <Route component={App}>
	 *       <Route path="home" component={Dashboard}/>
	 *       <Route path="news" component={NewsFeed}/>
	 *     </Route>
	 *   )
	 *
	 * Note: This method is automatically used when you provide <Route> children
	 * to a <Router> component.
	 */
	function createRoutesFromReactChildren(children, parentRoute) {
	  var routes = [];

	  _react2.default.Children.forEach(children, function (element) {
	    if (_react2.default.isValidElement(element)) {
	      // Component classes may have a static create* method.
	      if (element.type.createRouteFromReactElement) {
	        var route = element.type.createRouteFromReactElement(element, parentRoute);

	        if (route) routes.push(route);
	      } else {
	        routes.push(createRouteFromReactElement(element));
	      }
	    }
	  });

	  return routes;
	}

	/**
	 * Creates and returns an array of routes from the given object which
	 * may be a JSX route, a plain object route, or an array of either.
	 */
	function createRoutes(routes) {
	  if (isReactChildren(routes)) {
	    routes = createRoutesFromReactChildren(routes);
	  } else if (routes && !Array.isArray(routes)) {
	    routes = [routes];
	  }

	  return routes;
	}

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.locationShape = exports.routerShape = undefined;

	var _react = __webpack_require__(1);

	var func = _react.PropTypes.func,
	    object = _react.PropTypes.object,
	    shape = _react.PropTypes.shape,
	    string = _react.PropTypes.string;
	var routerShape = exports.routerShape = shape({
	  push: func.isRequired,
	  replace: func.isRequired,
	  go: func.isRequired,
	  goBack: func.isRequired,
	  goForward: func.isRequired,
	  setRouteLeaveHook: func.isRequired,
	  isActive: func.isRequired
	});

	var locationShape = exports.locationShape = shape({
	  pathname: string.isRequired,
	  search: string.isRequired,
	  state: object,
	  action: string.isRequired,
	  key: string
	});

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.compilePattern = compilePattern;
	exports.matchPattern = matchPattern;
	exports.getParamNames = getParamNames;
	exports.getParams = getParams;
	exports.formatPattern = formatPattern;

	var _invariant = __webpack_require__(183);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function escapeRegExp(string) {
	  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}

	function _compilePattern(pattern) {
	  var regexpSource = '';
	  var paramNames = [];
	  var tokens = [];

	  var match = void 0,
	      lastIndex = 0,
	      matcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|\*\*|\*|\(|\)/g;
	  while (match = matcher.exec(pattern)) {
	    if (match.index !== lastIndex) {
	      tokens.push(pattern.slice(lastIndex, match.index));
	      regexpSource += escapeRegExp(pattern.slice(lastIndex, match.index));
	    }

	    if (match[1]) {
	      regexpSource += '([^/]+)';
	      paramNames.push(match[1]);
	    } else if (match[0] === '**') {
	      regexpSource += '(.*)';
	      paramNames.push('splat');
	    } else if (match[0] === '*') {
	      regexpSource += '(.*?)';
	      paramNames.push('splat');
	    } else if (match[0] === '(') {
	      regexpSource += '(?:';
	    } else if (match[0] === ')') {
	      regexpSource += ')?';
	    }

	    tokens.push(match[0]);

	    lastIndex = matcher.lastIndex;
	  }

	  if (lastIndex !== pattern.length) {
	    tokens.push(pattern.slice(lastIndex, pattern.length));
	    regexpSource += escapeRegExp(pattern.slice(lastIndex, pattern.length));
	  }

	  return {
	    pattern: pattern,
	    regexpSource: regexpSource,
	    paramNames: paramNames,
	    tokens: tokens
	  };
	}

	var CompiledPatternsCache = Object.create(null);

	function compilePattern(pattern) {
	  if (!CompiledPatternsCache[pattern]) CompiledPatternsCache[pattern] = _compilePattern(pattern);

	  return CompiledPatternsCache[pattern];
	}

	/**
	 * Attempts to match a pattern on the given pathname. Patterns may use
	 * the following special characters:
	 *
	 * - :paramName     Matches a URL segment up to the next /, ?, or #. The
	 *                  captured string is considered a "param"
	 * - ()             Wraps a segment of the URL that is optional
	 * - *              Consumes (non-greedy) all characters up to the next
	 *                  character in the pattern, or to the end of the URL if
	 *                  there is none
	 * - **             Consumes (greedy) all characters up to the next character
	 *                  in the pattern, or to the end of the URL if there is none
	 *
	 *  The function calls callback(error, matched) when finished.
	 * The return value is an object with the following properties:
	 *
	 * - remainingPathname
	 * - paramNames
	 * - paramValues
	 */
	function matchPattern(pattern, pathname) {
	  // Ensure pattern starts with leading slash for consistency with pathname.
	  if (pattern.charAt(0) !== '/') {
	    pattern = '/' + pattern;
	  }

	  var _compilePattern2 = compilePattern(pattern),
	      regexpSource = _compilePattern2.regexpSource,
	      paramNames = _compilePattern2.paramNames,
	      tokens = _compilePattern2.tokens;

	  if (pattern.charAt(pattern.length - 1) !== '/') {
	    regexpSource += '/?'; // Allow optional path separator at end.
	  }

	  // Special-case patterns like '*' for catch-all routes.
	  if (tokens[tokens.length - 1] === '*') {
	    regexpSource += '$';
	  }

	  var match = pathname.match(new RegExp('^' + regexpSource, 'i'));
	  if (match == null) {
	    return null;
	  }

	  var matchedPath = match[0];
	  var remainingPathname = pathname.substr(matchedPath.length);

	  if (remainingPathname) {
	    // Require that the match ends at a path separator, if we didn't match
	    // the full path, so any remaining pathname is a new path segment.
	    if (matchedPath.charAt(matchedPath.length - 1) !== '/') {
	      return null;
	    }

	    // If there is a remaining pathname, treat the path separator as part of
	    // the remaining pathname for properly continuing the match.
	    remainingPathname = '/' + remainingPathname;
	  }

	  return {
	    remainingPathname: remainingPathname,
	    paramNames: paramNames,
	    paramValues: match.slice(1).map(function (v) {
	      return v && decodeURIComponent(v);
	    })
	  };
	}

	function getParamNames(pattern) {
	  return compilePattern(pattern).paramNames;
	}

	function getParams(pattern, pathname) {
	  var match = matchPattern(pattern, pathname);
	  if (!match) {
	    return null;
	  }

	  var paramNames = match.paramNames,
	      paramValues = match.paramValues;

	  var params = {};

	  paramNames.forEach(function (paramName, index) {
	    params[paramName] = paramValues[index];
	  });

	  return params;
	}

	/**
	 * Returns a version of the given pattern with params interpolated. Throws
	 * if there is a dynamic segment of the pattern for which there is no param.
	 */
	function formatPattern(pattern, params) {
	  params = params || {};

	  var _compilePattern3 = compilePattern(pattern),
	      tokens = _compilePattern3.tokens;

	  var parenCount = 0,
	      pathname = '',
	      splatIndex = 0,
	      parenHistory = [];

	  var token = void 0,
	      paramName = void 0,
	      paramValue = void 0;
	  for (var i = 0, len = tokens.length; i < len; ++i) {
	    token = tokens[i];

	    if (token === '*' || token === '**') {
	      paramValue = Array.isArray(params.splat) ? params.splat[splatIndex++] : params.splat;

	      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Missing splat #%s for path "%s"', splatIndex, pattern) : (0, _invariant2.default)(false) : void 0;

	      if (paramValue != null) pathname += encodeURI(paramValue);
	    } else if (token === '(') {
	      parenHistory[parenCount] = '';
	      parenCount += 1;
	    } else if (token === ')') {
	      var parenText = parenHistory.pop();
	      parenCount -= 1;

	      if (parenCount) parenHistory[parenCount - 1] += parenText;else pathname += parenText;
	    } else if (token.charAt(0) === ':') {
	      paramName = token.substring(1);
	      paramValue = params[paramName];

	      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Missing "%s" parameter for path "%s"', paramName, pattern) : (0, _invariant2.default)(false) : void 0;

	      if (paramValue == null) {
	        if (parenCount) {
	          parenHistory[parenCount - 1] = '';

	          var curTokenIdx = tokens.indexOf(token);
	          var tokensSubset = tokens.slice(curTokenIdx, tokens.length);
	          var nextParenIdx = -1;

	          for (var _i = 0; _i < tokensSubset.length; _i++) {
	            if (tokensSubset[_i] == ')') {
	              nextParenIdx = _i;
	              break;
	            }
	          }

	          !(nextParenIdx > 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Path "%s" is missing end paren at segment "%s"', pattern, tokensSubset.join('')) : (0, _invariant2.default)(false) : void 0;

	          // jump to ending paren
	          i = curTokenIdx + nextParenIdx - 1;
	        }
	      } else if (parenCount) parenHistory[parenCount - 1] += encodeURIComponent(paramValue);else pathname += encodeURIComponent(paramValue);
	    } else {
	      if (parenCount) parenHistory[parenCount - 1] += token;else pathname += token;
	    }
	  }

	  !(parenCount <= 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Path "%s" is missing end paren', pattern) : (0, _invariant2.default)(false) : void 0;

	  return pathname.replace(/\/+/g, '/');
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _invariant = __webpack_require__(183);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _createTransitionManager2 = __webpack_require__(185);

	var _createTransitionManager3 = _interopRequireDefault(_createTransitionManager2);

	var _InternalPropTypes = __webpack_require__(195);

	var _RouterContext = __webpack_require__(196);

	var _RouterContext2 = _interopRequireDefault(_RouterContext);

	var _RouteUtils = __webpack_require__(180);

	var _RouterUtils = __webpack_require__(199);

	var _routerWarning = __webpack_require__(186);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var _React$PropTypes = _react2.default.PropTypes,
	    func = _React$PropTypes.func,
	    object = _React$PropTypes.object;

	/**
	 * A <Router> is a high-level API for automatically setting up
	 * a router that renders a <RouterContext> with all the props
	 * it needs each time the URL changes.
	 */

	var Router = _react2.default.createClass({
	  displayName: 'Router',


	  propTypes: {
	    history: object,
	    children: _InternalPropTypes.routes,
	    routes: _InternalPropTypes.routes, // alias for children
	    render: func,
	    createElement: func,
	    onError: func,
	    onUpdate: func,

	    // PRIVATE: For client-side rehydration of server match.
	    matchContext: object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      render: function render(props) {
	        return _react2.default.createElement(_RouterContext2.default, props);
	      }
	    };
	  },
	  getInitialState: function getInitialState() {
	    return {
	      location: null,
	      routes: null,
	      params: null,
	      components: null
	    };
	  },
	  handleError: function handleError(error) {
	    if (this.props.onError) {
	      this.props.onError.call(this, error);
	    } else {
	      // Throw errors by default so we don't silently swallow them!
	      throw error; // This error probably occurred in getChildRoutes or getComponents.
	    }
	  },
	  createRouterObject: function createRouterObject(state) {
	    var matchContext = this.props.matchContext;

	    if (matchContext) {
	      return matchContext.router;
	    }

	    var history = this.props.history;

	    return (0, _RouterUtils.createRouterObject)(history, this.transitionManager, state);
	  },
	  createTransitionManager: function createTransitionManager() {
	    var matchContext = this.props.matchContext;

	    if (matchContext) {
	      return matchContext.transitionManager;
	    }

	    var history = this.props.history;
	    var _props = this.props,
	        routes = _props.routes,
	        children = _props.children;


	    !history.getCurrentLocation ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'You have provided a history object created with history v2.x or ' + 'earlier. This version of React Router is only compatible with v3 ' + 'history objects. Please upgrade to history v3.x.') : (0, _invariant2.default)(false) : void 0;

	    return (0, _createTransitionManager3.default)(history, (0, _RouteUtils.createRoutes)(routes || children));
	  },
	  componentWillMount: function componentWillMount() {
	    var _this = this;

	    this.transitionManager = this.createTransitionManager();
	    this.router = this.createRouterObject(this.state);

	    this._unlisten = this.transitionManager.listen(function (error, state) {
	      if (error) {
	        _this.handleError(error);
	      } else {
	        // Keep the identity of this.router because of a caveat in ContextUtils:
	        // they only work if the object identity is preserved.
	        (0, _RouterUtils.assignRouterState)(_this.router, state);
	        _this.setState(state, _this.props.onUpdate);
	      }
	    });
	  },


	  /* istanbul ignore next: sanity check */
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(nextProps.history === this.props.history, 'You cannot change <Router history>; it will be ignored') : void 0;

	    process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)((nextProps.routes || nextProps.children) === (this.props.routes || this.props.children), 'You cannot change <Router routes>; it will be ignored') : void 0;
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    if (this._unlisten) this._unlisten();
	  },
	  render: function render() {
	    var _state = this.state,
	        location = _state.location,
	        routes = _state.routes,
	        params = _state.params,
	        components = _state.components;

	    var _props2 = this.props,
	        createElement = _props2.createElement,
	        render = _props2.render,
	        props = _objectWithoutProperties(_props2, ['createElement', 'render']);

	    if (location == null) return null; // Async match

	    // Only forward non-Router-specific props to routing context, as those are
	    // the only ones that might be custom routing context props.
	    Object.keys(Router.propTypes).forEach(function (propType) {
	      return delete props[propType];
	    });

	    return render(_extends({}, props, {
	      router: this.router,
	      location: location,
	      routes: routes,
	      params: params,
	      components: components,
	      createElement: createElement
	    }));
	  }
	});

	exports.default = Router;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = createTransitionManager;

	var _routerWarning = __webpack_require__(186);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _computeChangedRoutes2 = __webpack_require__(188);

	var _computeChangedRoutes3 = _interopRequireDefault(_computeChangedRoutes2);

	var _TransitionUtils = __webpack_require__(189);

	var _isActive2 = __webpack_require__(191);

	var _isActive3 = _interopRequireDefault(_isActive2);

	var _getComponents = __webpack_require__(192);

	var _getComponents2 = _interopRequireDefault(_getComponents);

	var _matchRoutes = __webpack_require__(194);

	var _matchRoutes2 = _interopRequireDefault(_matchRoutes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function hasAnyProperties(object) {
	  for (var p in object) {
	    if (Object.prototype.hasOwnProperty.call(object, p)) return true;
	  }return false;
	}

	function createTransitionManager(history, routes) {
	  var state = {};

	  // Signature should be (location, indexOnly), but needs to support (path,
	  // query, indexOnly)
	  function isActive(location, indexOnly) {
	    location = history.createLocation(location);

	    return (0, _isActive3.default)(location, indexOnly, state.location, state.routes, state.params);
	  }

	  var partialNextState = void 0;

	  function match(location, callback) {
	    if (partialNextState && partialNextState.location === location) {
	      // Continue from where we left off.
	      finishMatch(partialNextState, callback);
	    } else {
	      (0, _matchRoutes2.default)(routes, location, function (error, nextState) {
	        if (error) {
	          callback(error);
	        } else if (nextState) {
	          finishMatch(_extends({}, nextState, { location: location }), callback);
	        } else {
	          callback();
	        }
	      });
	    }
	  }

	  function finishMatch(nextState, callback) {
	    var _computeChangedRoutes = (0, _computeChangedRoutes3.default)(state, nextState),
	        leaveRoutes = _computeChangedRoutes.leaveRoutes,
	        changeRoutes = _computeChangedRoutes.changeRoutes,
	        enterRoutes = _computeChangedRoutes.enterRoutes;

	    (0, _TransitionUtils.runLeaveHooks)(leaveRoutes, state);

	    // Tear down confirmation hooks for left routes
	    leaveRoutes.filter(function (route) {
	      return enterRoutes.indexOf(route) === -1;
	    }).forEach(removeListenBeforeHooksForRoute);

	    // change and enter hooks are run in series
	    (0, _TransitionUtils.runChangeHooks)(changeRoutes, state, nextState, function (error, redirectInfo) {
	      if (error || redirectInfo) return handleErrorOrRedirect(error, redirectInfo);

	      (0, _TransitionUtils.runEnterHooks)(enterRoutes, nextState, finishEnterHooks);
	    });

	    function finishEnterHooks(error, redirectInfo) {
	      if (error || redirectInfo) return handleErrorOrRedirect(error, redirectInfo);

	      // TODO: Fetch components after state is updated.
	      (0, _getComponents2.default)(nextState, function (error, components) {
	        if (error) {
	          callback(error);
	        } else {
	          // TODO: Make match a pure function and have some other API
	          // for "match and update state".
	          callback(null, null, state = _extends({}, nextState, { components: components }));
	        }
	      });
	    }

	    function handleErrorOrRedirect(error, redirectInfo) {
	      if (error) callback(error);else callback(null, redirectInfo);
	    }
	  }

	  var RouteGuid = 1;

	  function getRouteID(route) {
	    var create = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	    return route.__id__ || create && (route.__id__ = RouteGuid++);
	  }

	  var RouteHooks = Object.create(null);

	  function getRouteHooksForRoutes(routes) {
	    return routes.map(function (route) {
	      return RouteHooks[getRouteID(route)];
	    }).filter(function (hook) {
	      return hook;
	    });
	  }

	  function transitionHook(location, callback) {
	    (0, _matchRoutes2.default)(routes, location, function (error, nextState) {
	      if (nextState == null) {
	        // TODO: We didn't actually match anything, but hang
	        // onto error/nextState so we don't have to matchRoutes
	        // again in the listen callback.
	        callback();
	        return;
	      }

	      // Cache some state here so we don't have to
	      // matchRoutes() again in the listen callback.
	      partialNextState = _extends({}, nextState, { location: location });

	      var hooks = getRouteHooksForRoutes((0, _computeChangedRoutes3.default)(state, partialNextState).leaveRoutes);

	      var result = void 0;
	      for (var i = 0, len = hooks.length; result == null && i < len; ++i) {
	        // Passing the location arg here indicates to
	        // the user that this is a transition hook.
	        result = hooks[i](location);
	      }

	      callback(result);
	    });
	  }

	  /* istanbul ignore next: untestable with Karma */
	  function beforeUnloadHook() {
	    // Synchronously check to see if any route hooks want
	    // to prevent the current window/tab from closing.
	    if (state.routes) {
	      var hooks = getRouteHooksForRoutes(state.routes);

	      var message = void 0;
	      for (var i = 0, len = hooks.length; typeof message !== 'string' && i < len; ++i) {
	        // Passing no args indicates to the user that this is a
	        // beforeunload hook. We don't know the next location.
	        message = hooks[i]();
	      }

	      return message;
	    }
	  }

	  var unlistenBefore = void 0,
	      unlistenBeforeUnload = void 0;

	  function removeListenBeforeHooksForRoute(route) {
	    var routeID = getRouteID(route);
	    if (!routeID) {
	      return;
	    }

	    delete RouteHooks[routeID];

	    if (!hasAnyProperties(RouteHooks)) {
	      // teardown transition & beforeunload hooks
	      if (unlistenBefore) {
	        unlistenBefore();
	        unlistenBefore = null;
	      }

	      if (unlistenBeforeUnload) {
	        unlistenBeforeUnload();
	        unlistenBeforeUnload = null;
	      }
	    }
	  }

	  /**
	   * Registers the given hook function to run before leaving the given route.
	   *
	   * During a normal transition, the hook function receives the next location
	   * as its only argument and can return either a prompt message (string) to show the user,
	   * to make sure they want to leave the page; or `false`, to prevent the transition.
	   * Any other return value will have no effect.
	   *
	   * During the beforeunload event (in browsers) the hook receives no arguments.
	   * In this case it must return a prompt message to prevent the transition.
	   *
	   * Returns a function that may be used to unbind the listener.
	   */
	  function listenBeforeLeavingRoute(route, hook) {
	    var thereWereNoRouteHooks = !hasAnyProperties(RouteHooks);
	    var routeID = getRouteID(route, true);

	    RouteHooks[routeID] = hook;

	    if (thereWereNoRouteHooks) {
	      // setup transition & beforeunload hooks
	      unlistenBefore = history.listenBefore(transitionHook);

	      if (history.listenBeforeUnload) unlistenBeforeUnload = history.listenBeforeUnload(beforeUnloadHook);
	    }

	    return function () {
	      removeListenBeforeHooksForRoute(route);
	    };
	  }

	  /**
	   * This is the API for stateful environments. As the location
	   * changes, we update state and call the listener. We can also
	   * gracefully handle errors and redirects.
	   */
	  function listen(listener) {
	    function historyListener(location) {
	      if (state.location === location) {
	        listener(null, state);
	      } else {
	        match(location, function (error, redirectLocation, nextState) {
	          if (error) {
	            listener(error);
	          } else if (redirectLocation) {
	            history.replace(redirectLocation);
	          } else if (nextState) {
	            listener(null, nextState);
	          } else {
	            process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'Location "%s" did not match any routes', location.pathname + location.search + location.hash) : void 0;
	          }
	        });
	      }
	    }

	    // TODO: Only use a single history listener. Otherwise we'll end up with
	    // multiple concurrent calls to match.

	    // Set up the history listener first in case the initial match redirects.
	    var unsubscribe = history.listen(historyListener);

	    if (state.location) {
	      // Picking up on a matchContext.
	      listener(null, state);
	    } else {
	      historyListener(history.getCurrentLocation());
	    }

	    return unsubscribe;
	  }

	  return {
	    isActive: isActive,
	    match: match,
	    listenBeforeLeavingRoute: listenBeforeLeavingRoute,
	    listen: listen
	  };
	}
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = routerWarning;
	exports._resetWarned = _resetWarned;

	var _warning = __webpack_require__(187);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var warned = {};

	function routerWarning(falseToWarn, message) {
	  // Only issue deprecation warnings once.
	  if (message.indexOf('deprecated') !== -1) {
	    if (warned[message]) {
	      return;
	    }

	    warned[message] = true;
	  }

	  message = '[react-router] ' + message;

	  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	    args[_key - 2] = arguments[_key];
	  }

	  _warning2.default.apply(undefined, [falseToWarn, message].concat(args));
	}

	function _resetWarned() {
	  warned = {};
	}

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _PatternUtils = __webpack_require__(182);

	function routeParamsChanged(route, prevState, nextState) {
	  if (!route.path) return false;

	  var paramNames = (0, _PatternUtils.getParamNames)(route.path);

	  return paramNames.some(function (paramName) {
	    return prevState.params[paramName] !== nextState.params[paramName];
	  });
	}

	/**
	 * Returns an object of { leaveRoutes, changeRoutes, enterRoutes } determined by
	 * the change from prevState to nextState. We leave routes if either
	 * 1) they are not in the next state or 2) they are in the next state
	 * but their params have changed (i.e. /users/123 => /users/456).
	 *
	 * leaveRoutes are ordered starting at the leaf route of the tree
	 * we're leaving up to the common parent route. enterRoutes are ordered
	 * from the top of the tree we're entering down to the leaf route.
	 *
	 * changeRoutes are any routes that didn't leave or enter during
	 * the transition.
	 */
	function computeChangedRoutes(prevState, nextState) {
	  var prevRoutes = prevState && prevState.routes;
	  var nextRoutes = nextState.routes;

	  var leaveRoutes = void 0,
	      changeRoutes = void 0,
	      enterRoutes = void 0;
	  if (prevRoutes) {
	    (function () {
	      var parentIsLeaving = false;
	      leaveRoutes = prevRoutes.filter(function (route) {
	        if (parentIsLeaving) {
	          return true;
	        } else {
	          var isLeaving = nextRoutes.indexOf(route) === -1 || routeParamsChanged(route, prevState, nextState);
	          if (isLeaving) parentIsLeaving = true;
	          return isLeaving;
	        }
	      });

	      // onLeave hooks start at the leaf route.
	      leaveRoutes.reverse();

	      enterRoutes = [];
	      changeRoutes = [];

	      nextRoutes.forEach(function (route) {
	        var isNew = prevRoutes.indexOf(route) === -1;
	        var paramsChanged = leaveRoutes.indexOf(route) !== -1;

	        if (isNew || paramsChanged) enterRoutes.push(route);else changeRoutes.push(route);
	      });
	    })();
	  } else {
	    leaveRoutes = [];
	    changeRoutes = [];
	    enterRoutes = nextRoutes;
	  }

	  return {
	    leaveRoutes: leaveRoutes,
	    changeRoutes: changeRoutes,
	    enterRoutes: enterRoutes
	  };
	}

	exports.default = computeChangedRoutes;
	module.exports = exports['default'];

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.runEnterHooks = runEnterHooks;
	exports.runChangeHooks = runChangeHooks;
	exports.runLeaveHooks = runLeaveHooks;

	var _AsyncUtils = __webpack_require__(190);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var PendingHooks = function PendingHooks() {
	  var _this = this;

	  _classCallCheck(this, PendingHooks);

	  this.hooks = [];

	  this.add = function (hook) {
	    return _this.hooks.push(hook);
	  };

	  this.remove = function (hook) {
	    return _this.hooks = _this.hooks.filter(function (h) {
	      return h !== hook;
	    });
	  };

	  this.has = function (hook) {
	    return _this.hooks.indexOf(hook) !== -1;
	  };

	  this.clear = function () {
	    return _this.hooks = [];
	  };
	};

	var enterHooks = new PendingHooks();
	var changeHooks = new PendingHooks();

	function createTransitionHook(hook, route, asyncArity, pendingHooks) {
	  var isSync = hook.length < asyncArity;

	  var transitionHook = function transitionHook() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    hook.apply(route, args);

	    if (isSync) {
	      var callback = args[args.length - 1];
	      // Assume hook executes synchronously and
	      // automatically call the callback.
	      callback();
	    }
	  };

	  pendingHooks.add(transitionHook);

	  return transitionHook;
	}

	function getEnterHooks(routes) {
	  return routes.reduce(function (hooks, route) {
	    if (route.onEnter) hooks.push(createTransitionHook(route.onEnter, route, 3, enterHooks));
	    return hooks;
	  }, []);
	}

	function getChangeHooks(routes) {
	  return routes.reduce(function (hooks, route) {
	    if (route.onChange) hooks.push(createTransitionHook(route.onChange, route, 4, changeHooks));
	    return hooks;
	  }, []);
	}

	function runTransitionHooks(length, iter, callback) {
	  if (!length) {
	    callback();
	    return;
	  }

	  var redirectInfo = void 0;
	  function replace(location) {
	    redirectInfo = location;
	  }

	  (0, _AsyncUtils.loopAsync)(length, function (index, next, done) {
	    iter(index, replace, function (error) {
	      if (error || redirectInfo) {
	        done(error, redirectInfo); // No need to continue.
	      } else {
	        next();
	      }
	    });
	  }, callback);
	}

	/**
	 * Runs all onEnter hooks in the given array of routes in order
	 * with onEnter(nextState, replace, callback) and calls
	 * callback(error, redirectInfo) when finished. The first hook
	 * to use replace short-circuits the loop.
	 *
	 * If a hook needs to run asynchronously, it may use the callback
	 * function. However, doing so will cause the transition to pause,
	 * which could lead to a non-responsive UI if the hook is slow.
	 */
	function runEnterHooks(routes, nextState, callback) {
	  enterHooks.clear();
	  var hooks = getEnterHooks(routes);
	  return runTransitionHooks(hooks.length, function (index, replace, next) {
	    var wrappedNext = function wrappedNext() {
	      if (enterHooks.has(hooks[index])) {
	        next();
	        enterHooks.remove(hooks[index]);
	      }
	    };
	    hooks[index](nextState, replace, wrappedNext);
	  }, callback);
	}

	/**
	 * Runs all onChange hooks in the given array of routes in order
	 * with onChange(prevState, nextState, replace, callback) and calls
	 * callback(error, redirectInfo) when finished. The first hook
	 * to use replace short-circuits the loop.
	 *
	 * If a hook needs to run asynchronously, it may use the callback
	 * function. However, doing so will cause the transition to pause,
	 * which could lead to a non-responsive UI if the hook is slow.
	 */
	function runChangeHooks(routes, state, nextState, callback) {
	  changeHooks.clear();
	  var hooks = getChangeHooks(routes);
	  return runTransitionHooks(hooks.length, function (index, replace, next) {
	    var wrappedNext = function wrappedNext() {
	      if (changeHooks.has(hooks[index])) {
	        next();
	        changeHooks.remove(hooks[index]);
	      }
	    };
	    hooks[index](state, nextState, replace, wrappedNext);
	  }, callback);
	}

	/**
	 * Runs all onLeave hooks in the given array of routes in order.
	 */
	function runLeaveHooks(routes, prevState) {
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    if (routes[i].onLeave) routes[i].onLeave.call(routes[i], prevState);
	  }
	}

/***/ },
/* 190 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports.loopAsync = loopAsync;
	exports.mapAsync = mapAsync;
	function loopAsync(turns, work, callback) {
	  var currentTurn = 0,
	      isDone = false;
	  var sync = false,
	      hasNext = false,
	      doneArgs = void 0;

	  function done() {
	    isDone = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      doneArgs = [].concat(Array.prototype.slice.call(arguments));
	      return;
	    }

	    callback.apply(this, arguments);
	  }

	  function next() {
	    if (isDone) {
	      return;
	    }

	    hasNext = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      return;
	    }

	    sync = true;

	    while (!isDone && currentTurn < turns && hasNext) {
	      hasNext = false;
	      work.call(this, currentTurn++, next, done);
	    }

	    sync = false;

	    if (isDone) {
	      // This means the loop finished synchronously.
	      callback.apply(this, doneArgs);
	      return;
	    }

	    if (currentTurn >= turns && hasNext) {
	      isDone = true;
	      callback();
	    }
	  }

	  next();
	}

	function mapAsync(array, work, callback) {
	  var length = array.length;
	  var values = [];

	  if (length === 0) return callback(null, values);

	  var isDone = false,
	      doneCount = 0;

	  function done(index, error, value) {
	    if (isDone) return;

	    if (error) {
	      isDone = true;
	      callback(error);
	    } else {
	      values[index] = value;

	      isDone = ++doneCount === length;

	      if (isDone) callback(null, values);
	    }
	  }

	  array.forEach(function (item, index) {
	    work(item, index, function (error, value) {
	      done(index, error, value);
	    });
	  });
	}

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.default = isActive;

	var _PatternUtils = __webpack_require__(182);

	function deepEqual(a, b) {
	  if (a == b) return true;

	  if (a == null || b == null) return false;

	  if (Array.isArray(a)) {
	    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
	      return deepEqual(item, b[index]);
	    });
	  }

	  if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object') {
	    for (var p in a) {
	      if (!Object.prototype.hasOwnProperty.call(a, p)) {
	        continue;
	      }

	      if (a[p] === undefined) {
	        if (b[p] !== undefined) {
	          return false;
	        }
	      } else if (!Object.prototype.hasOwnProperty.call(b, p)) {
	        return false;
	      } else if (!deepEqual(a[p], b[p])) {
	        return false;
	      }
	    }

	    return true;
	  }

	  return String(a) === String(b);
	}

	/**
	 * Returns true if the current pathname matches the supplied one, net of
	 * leading and trailing slash normalization. This is sufficient for an
	 * indexOnly route match.
	 */
	function pathIsActive(pathname, currentPathname) {
	  // Normalize leading slash for consistency. Leading slash on pathname has
	  // already been normalized in isActive. See caveat there.
	  if (currentPathname.charAt(0) !== '/') {
	    currentPathname = '/' + currentPathname;
	  }

	  // Normalize the end of both path names too. Maybe `/foo/` shouldn't show
	  // `/foo` as active, but in this case, we would already have failed the
	  // match.
	  if (pathname.charAt(pathname.length - 1) !== '/') {
	    pathname += '/';
	  }
	  if (currentPathname.charAt(currentPathname.length - 1) !== '/') {
	    currentPathname += '/';
	  }

	  return currentPathname === pathname;
	}

	/**
	 * Returns true if the given pathname matches the active routes and params.
	 */
	function routeIsActive(pathname, routes, params) {
	  var remainingPathname = pathname,
	      paramNames = [],
	      paramValues = [];

	  // for...of would work here but it's probably slower post-transpilation.
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    var route = routes[i];
	    var pattern = route.path || '';

	    if (pattern.charAt(0) === '/') {
	      remainingPathname = pathname;
	      paramNames = [];
	      paramValues = [];
	    }

	    if (remainingPathname !== null && pattern) {
	      var matched = (0, _PatternUtils.matchPattern)(pattern, remainingPathname);
	      if (matched) {
	        remainingPathname = matched.remainingPathname;
	        paramNames = [].concat(paramNames, matched.paramNames);
	        paramValues = [].concat(paramValues, matched.paramValues);
	      } else {
	        remainingPathname = null;
	      }

	      if (remainingPathname === '') {
	        // We have an exact match on the route. Just check that all the params
	        // match.
	        // FIXME: This doesn't work on repeated params.
	        return paramNames.every(function (paramName, index) {
	          return String(paramValues[index]) === String(params[paramName]);
	        });
	      }
	    }
	  }

	  return false;
	}

	/**
	 * Returns true if all key/value pairs in the given query are
	 * currently active.
	 */
	function queryIsActive(query, activeQuery) {
	  if (activeQuery == null) return query == null;

	  if (query == null) return true;

	  return deepEqual(query, activeQuery);
	}

	/**
	 * Returns true if a <Link> to the given pathname/query combination is
	 * currently active.
	 */
	function isActive(_ref, indexOnly, currentLocation, routes, params) {
	  var pathname = _ref.pathname,
	      query = _ref.query;

	  if (currentLocation == null) return false;

	  // TODO: This is a bit ugly. It keeps around support for treating pathnames
	  // without preceding slashes as absolute paths, but possibly also works
	  // around the same quirks with basenames as in matchRoutes.
	  if (pathname.charAt(0) !== '/') {
	    pathname = '/' + pathname;
	  }

	  if (!pathIsActive(pathname, currentLocation.pathname)) {
	    // The path check is necessary and sufficient for indexOnly, but otherwise
	    // we still need to check the routes.
	    if (indexOnly || !routeIsActive(pathname, routes, params)) {
	      return false;
	    }
	  }

	  return queryIsActive(query, currentLocation.query);
	}
	module.exports = exports['default'];

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _AsyncUtils = __webpack_require__(190);

	var _PromiseUtils = __webpack_require__(193);

	function getComponentsForRoute(nextState, route, callback) {
	  if (route.component || route.components) {
	    callback(null, route.component || route.components);
	    return;
	  }

	  var getComponent = route.getComponent || route.getComponents;
	  if (getComponent) {
	    var componentReturn = getComponent.call(route, nextState, callback);
	    if ((0, _PromiseUtils.isPromise)(componentReturn)) componentReturn.then(function (component) {
	      return callback(null, component);
	    }, callback);
	  } else {
	    callback();
	  }
	}

	/**
	 * Asynchronously fetches all components needed for the given router
	 * state and calls callback(error, components) when finished.
	 *
	 * Note: This operation may finish synchronously if no routes have an
	 * asynchronous getComponents method.
	 */
	function getComponents(nextState, callback) {
	  (0, _AsyncUtils.mapAsync)(nextState.routes, function (route, index, callback) {
	    getComponentsForRoute(nextState, route, callback);
	  }, callback);
	}

	exports.default = getComponents;
	module.exports = exports['default'];

/***/ },
/* 193 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.isPromise = isPromise;
	function isPromise(obj) {
	  return obj && typeof obj.then === 'function';
	}

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.default = matchRoutes;

	var _AsyncUtils = __webpack_require__(190);

	var _PromiseUtils = __webpack_require__(193);

	var _PatternUtils = __webpack_require__(182);

	var _routerWarning = __webpack_require__(186);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _RouteUtils = __webpack_require__(180);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getChildRoutes(route, location, paramNames, paramValues, callback) {
	  if (route.childRoutes) {
	    return [null, route.childRoutes];
	  }
	  if (!route.getChildRoutes) {
	    return [];
	  }

	  var sync = true,
	      result = void 0;

	  var partialNextState = {
	    location: location,
	    params: createParams(paramNames, paramValues)
	  };

	  var childRoutesReturn = route.getChildRoutes(partialNextState, function (error, childRoutes) {
	    childRoutes = !error && (0, _RouteUtils.createRoutes)(childRoutes);
	    if (sync) {
	      result = [error, childRoutes];
	      return;
	    }

	    callback(error, childRoutes);
	  });

	  if ((0, _PromiseUtils.isPromise)(childRoutesReturn)) childRoutesReturn.then(function (childRoutes) {
	    return callback(null, (0, _RouteUtils.createRoutes)(childRoutes));
	  }, callback);

	  sync = false;
	  return result; // Might be undefined.
	}

	function getIndexRoute(route, location, paramNames, paramValues, callback) {
	  if (route.indexRoute) {
	    callback(null, route.indexRoute);
	  } else if (route.getIndexRoute) {
	    var partialNextState = {
	      location: location,
	      params: createParams(paramNames, paramValues)
	    };

	    var indexRoutesReturn = route.getIndexRoute(partialNextState, function (error, indexRoute) {
	      callback(error, !error && (0, _RouteUtils.createRoutes)(indexRoute)[0]);
	    });

	    if ((0, _PromiseUtils.isPromise)(indexRoutesReturn)) indexRoutesReturn.then(function (indexRoute) {
	      return callback(null, (0, _RouteUtils.createRoutes)(indexRoute)[0]);
	    }, callback);
	  } else if (route.childRoutes) {
	    (function () {
	      var pathless = route.childRoutes.filter(function (childRoute) {
	        return !childRoute.path;
	      });

	      (0, _AsyncUtils.loopAsync)(pathless.length, function (index, next, done) {
	        getIndexRoute(pathless[index], location, paramNames, paramValues, function (error, indexRoute) {
	          if (error || indexRoute) {
	            var routes = [pathless[index]].concat(Array.isArray(indexRoute) ? indexRoute : [indexRoute]);
	            done(error, routes);
	          } else {
	            next();
	          }
	        });
	      }, function (err, routes) {
	        callback(null, routes);
	      });
	    })();
	  } else {
	    callback();
	  }
	}

	function assignParams(params, paramNames, paramValues) {
	  return paramNames.reduce(function (params, paramName, index) {
	    var paramValue = paramValues && paramValues[index];

	    if (Array.isArray(params[paramName])) {
	      params[paramName].push(paramValue);
	    } else if (paramName in params) {
	      params[paramName] = [params[paramName], paramValue];
	    } else {
	      params[paramName] = paramValue;
	    }

	    return params;
	  }, params);
	}

	function createParams(paramNames, paramValues) {
	  return assignParams({}, paramNames, paramValues);
	}

	function matchRouteDeep(route, location, remainingPathname, paramNames, paramValues, callback) {
	  var pattern = route.path || '';

	  if (pattern.charAt(0) === '/') {
	    remainingPathname = location.pathname;
	    paramNames = [];
	    paramValues = [];
	  }

	  // Only try to match the path if the route actually has a pattern, and if
	  // we're not just searching for potential nested absolute paths.
	  if (remainingPathname !== null && pattern) {
	    try {
	      var matched = (0, _PatternUtils.matchPattern)(pattern, remainingPathname);
	      if (matched) {
	        remainingPathname = matched.remainingPathname;
	        paramNames = [].concat(paramNames, matched.paramNames);
	        paramValues = [].concat(paramValues, matched.paramValues);
	      } else {
	        remainingPathname = null;
	      }
	    } catch (error) {
	      callback(error);
	    }

	    // By assumption, pattern is non-empty here, which is the prerequisite for
	    // actually terminating a match.
	    if (remainingPathname === '') {
	      var _ret2 = function () {
	        var match = {
	          routes: [route],
	          params: createParams(paramNames, paramValues)
	        };

	        getIndexRoute(route, location, paramNames, paramValues, function (error, indexRoute) {
	          if (error) {
	            callback(error);
	          } else {
	            if (Array.isArray(indexRoute)) {
	              var _match$routes;

	              process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(indexRoute.every(function (route) {
	                return !route.path;
	              }), 'Index routes should not have paths') : void 0;
	              (_match$routes = match.routes).push.apply(_match$routes, indexRoute);
	            } else if (indexRoute) {
	              process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(!indexRoute.path, 'Index routes should not have paths') : void 0;
	              match.routes.push(indexRoute);
	            }

	            callback(null, match);
	          }
	        });

	        return {
	          v: void 0
	        };
	      }();

	      if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
	    }
	  }

	  if (remainingPathname != null || route.childRoutes) {
	    // Either a) this route matched at least some of the path or b)
	    // we don't have to load this route's children asynchronously. In
	    // either case continue checking for matches in the subtree.
	    var onChildRoutes = function onChildRoutes(error, childRoutes) {
	      if (error) {
	        callback(error);
	      } else if (childRoutes) {
	        // Check the child routes to see if any of them match.
	        matchRoutes(childRoutes, location, function (error, match) {
	          if (error) {
	            callback(error);
	          } else if (match) {
	            // A child route matched! Augment the match and pass it up the stack.
	            match.routes.unshift(route);
	            callback(null, match);
	          } else {
	            callback();
	          }
	        }, remainingPathname, paramNames, paramValues);
	      } else {
	        callback();
	      }
	    };

	    var result = getChildRoutes(route, location, paramNames, paramValues, onChildRoutes);
	    if (result) {
	      onChildRoutes.apply(undefined, result);
	    }
	  } else {
	    callback();
	  }
	}

	/**
	 * Asynchronously matches the given location to a set of routes and calls
	 * callback(error, state) when finished. The state object will have the
	 * following properties:
	 *
	 * - routes       An array of routes that matched, in hierarchical order
	 * - params       An object of URL parameters
	 *
	 * Note: This operation may finish synchronously if no routes have an
	 * asynchronous getChildRoutes method.
	 */
	function matchRoutes(routes, location, callback, remainingPathname) {
	  var paramNames = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
	  var paramValues = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];

	  if (remainingPathname === undefined) {
	    // TODO: This is a little bit ugly, but it works around a quirk in history
	    // that strips the leading slash from pathnames when using basenames with
	    // trailing slashes.
	    if (location.pathname.charAt(0) !== '/') {
	      location = _extends({}, location, {
	        pathname: '/' + location.pathname
	      });
	    }
	    remainingPathname = location.pathname;
	  }

	  (0, _AsyncUtils.loopAsync)(routes.length, function (index, next, done) {
	    matchRouteDeep(routes[index], location, remainingPathname, paramNames, paramValues, function (error, match) {
	      if (error || match) {
	        done(error, match);
	      } else {
	        next();
	      }
	    });
	  }, callback);
	}
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.routes = exports.route = exports.components = exports.component = exports.history = undefined;
	exports.falsy = falsy;

	var _react = __webpack_require__(1);

	var func = _react.PropTypes.func,
	    object = _react.PropTypes.object,
	    arrayOf = _react.PropTypes.arrayOf,
	    oneOfType = _react.PropTypes.oneOfType,
	    element = _react.PropTypes.element,
	    shape = _react.PropTypes.shape,
	    string = _react.PropTypes.string;
	function falsy(props, propName, componentName) {
	  if (props[propName]) return new Error('<' + componentName + '> should not have a "' + propName + '" prop');
	}

	var history = exports.history = shape({
	  listen: func.isRequired,
	  push: func.isRequired,
	  replace: func.isRequired,
	  go: func.isRequired,
	  goBack: func.isRequired,
	  goForward: func.isRequired
	});

	var component = exports.component = oneOfType([func, string]);
	var components = exports.components = oneOfType([component, object]);
	var route = exports.route = oneOfType([object, element]);
	var routes = exports.routes = oneOfType([route, arrayOf(route)]);

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _invariant = __webpack_require__(183);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _getRouteParams = __webpack_require__(197);

	var _getRouteParams2 = _interopRequireDefault(_getRouteParams);

	var _ContextUtils = __webpack_require__(198);

	var _RouteUtils = __webpack_require__(180);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _React$PropTypes = _react2.default.PropTypes,
	    array = _React$PropTypes.array,
	    func = _React$PropTypes.func,
	    object = _React$PropTypes.object;

	/**
	 * A <RouterContext> renders the component tree for a given router state
	 * and sets the history object and the current location in context.
	 */

	var RouterContext = _react2.default.createClass({
	  displayName: 'RouterContext',


	  mixins: [(0, _ContextUtils.ContextProvider)('router')],

	  propTypes: {
	    router: object.isRequired,
	    location: object.isRequired,
	    routes: array.isRequired,
	    params: object.isRequired,
	    components: array.isRequired,
	    createElement: func.isRequired
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      createElement: _react2.default.createElement
	    };
	  },


	  childContextTypes: {
	    router: object.isRequired
	  },

	  getChildContext: function getChildContext() {
	    return {
	      router: this.props.router
	    };
	  },
	  createElement: function createElement(component, props) {
	    return component == null ? null : this.props.createElement(component, props);
	  },
	  render: function render() {
	    var _this = this;

	    var _props = this.props,
	        location = _props.location,
	        routes = _props.routes,
	        params = _props.params,
	        components = _props.components,
	        router = _props.router;

	    var element = null;

	    if (components) {
	      element = components.reduceRight(function (element, components, index) {
	        if (components == null) return element; // Don't create new children; use the grandchildren.

	        var route = routes[index];
	        var routeParams = (0, _getRouteParams2.default)(route, params);
	        var props = {
	          location: location,
	          params: params,
	          route: route,
	          router: router,
	          routeParams: routeParams,
	          routes: routes
	        };

	        if ((0, _RouteUtils.isReactChildren)(element)) {
	          props.children = element;
	        } else if (element) {
	          for (var prop in element) {
	            if (Object.prototype.hasOwnProperty.call(element, prop)) props[prop] = element[prop];
	          }
	        }

	        if ((typeof components === 'undefined' ? 'undefined' : _typeof(components)) === 'object') {
	          var elements = {};

	          for (var key in components) {
	            if (Object.prototype.hasOwnProperty.call(components, key)) {
	              // Pass through the key as a prop to createElement to allow
	              // custom createElement functions to know which named component
	              // they're rendering, for e.g. matching up to fetched data.
	              elements[key] = _this.createElement(components[key], _extends({
	                key: key }, props));
	            }
	          }

	          return elements;
	        }

	        return _this.createElement(components, props);
	      }, element);
	    }

	    !(element === null || element === false || _react2.default.isValidElement(element)) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'The root route must render a single element') : (0, _invariant2.default)(false) : void 0;

	    return element;
	  }
	});

	exports.default = RouterContext;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _PatternUtils = __webpack_require__(182);

	/**
	 * Extracts an object of params the given route cares about from
	 * the given params object.
	 */
	function getRouteParams(route, params) {
	  var routeParams = {};

	  if (!route.path) return routeParams;

	  (0, _PatternUtils.getParamNames)(route.path).forEach(function (p) {
	    if (Object.prototype.hasOwnProperty.call(params, p)) {
	      routeParams[p] = params[p];
	    }
	  });

	  return routeParams;
	}

	exports.default = getRouteParams;
	module.exports = exports['default'];

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.ContextProvider = ContextProvider;
	exports.ContextSubscriber = ContextSubscriber;

	var _react = __webpack_require__(1);

	// Works around issues with context updates failing to propagate.
	// Caveat: the context value is expected to never change its identity.
	// https://github.com/facebook/react/issues/2517
	// https://github.com/reactjs/react-router/issues/470

	var contextProviderShape = _react.PropTypes.shape({
	  subscribe: _react.PropTypes.func.isRequired,
	  eventIndex: _react.PropTypes.number.isRequired
	});

	function makeContextName(name) {
	  return '@@contextSubscriber/' + name;
	}

	function ContextProvider(name) {
	  var _childContextTypes, _ref2;

	  var contextName = makeContextName(name);
	  var listenersKey = contextName + '/listeners';
	  var eventIndexKey = contextName + '/eventIndex';
	  var subscribeKey = contextName + '/subscribe';

	  return _ref2 = {
	    childContextTypes: (_childContextTypes = {}, _childContextTypes[contextName] = contextProviderShape.isRequired, _childContextTypes),

	    getChildContext: function getChildContext() {
	      var _ref;

	      return _ref = {}, _ref[contextName] = {
	        eventIndex: this[eventIndexKey],
	        subscribe: this[subscribeKey]
	      }, _ref;
	    },
	    componentWillMount: function componentWillMount() {
	      this[listenersKey] = [];
	      this[eventIndexKey] = 0;
	    },
	    componentWillReceiveProps: function componentWillReceiveProps() {
	      this[eventIndexKey]++;
	    },
	    componentDidUpdate: function componentDidUpdate() {
	      var _this = this;

	      this[listenersKey].forEach(function (listener) {
	        return listener(_this[eventIndexKey]);
	      });
	    }
	  }, _ref2[subscribeKey] = function (listener) {
	    var _this2 = this;

	    // No need to immediately call listener here.
	    this[listenersKey].push(listener);

	    return function () {
	      _this2[listenersKey] = _this2[listenersKey].filter(function (item) {
	        return item !== listener;
	      });
	    };
	  }, _ref2;
	}

	function ContextSubscriber(name) {
	  var _contextTypes, _ref4;

	  var contextName = makeContextName(name);
	  var lastRenderedEventIndexKey = contextName + '/lastRenderedEventIndex';
	  var handleContextUpdateKey = contextName + '/handleContextUpdate';
	  var unsubscribeKey = contextName + '/unsubscribe';

	  return _ref4 = {
	    contextTypes: (_contextTypes = {}, _contextTypes[contextName] = contextProviderShape, _contextTypes),

	    getInitialState: function getInitialState() {
	      var _ref3;

	      if (!this.context[contextName]) {
	        return {};
	      }

	      return _ref3 = {}, _ref3[lastRenderedEventIndexKey] = this.context[contextName].eventIndex, _ref3;
	    },
	    componentDidMount: function componentDidMount() {
	      if (!this.context[contextName]) {
	        return;
	      }

	      this[unsubscribeKey] = this.context[contextName].subscribe(this[handleContextUpdateKey]);
	    },
	    componentWillReceiveProps: function componentWillReceiveProps() {
	      var _setState;

	      if (!this.context[contextName]) {
	        return;
	      }

	      this.setState((_setState = {}, _setState[lastRenderedEventIndexKey] = this.context[contextName].eventIndex, _setState));
	    },
	    componentWillUnmount: function componentWillUnmount() {
	      if (!this[unsubscribeKey]) {
	        return;
	      }

	      this[unsubscribeKey]();
	      this[unsubscribeKey] = null;
	    }
	  }, _ref4[handleContextUpdateKey] = function (eventIndex) {
	    if (eventIndex !== this.state[lastRenderedEventIndexKey]) {
	      var _setState2;

	      this.setState((_setState2 = {}, _setState2[lastRenderedEventIndexKey] = eventIndex, _setState2));
	    }
	  }, _ref4;
	}

/***/ },
/* 199 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.createRouterObject = createRouterObject;
	exports.assignRouterState = assignRouterState;
	function createRouterObject(history, transitionManager, state) {
	  var router = _extends({}, history, {
	    setRouteLeaveHook: transitionManager.listenBeforeLeavingRoute,
	    isActive: transitionManager.isActive
	  });

	  return assignRouterState(router, state);
	}

	function assignRouterState(router, _ref) {
	  var location = _ref.location,
	      params = _ref.params,
	      routes = _ref.routes;

	  router.location = location;
	  router.params = params;
	  router.routes = routes;

	  return router;
	}

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(183);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _PropTypes = __webpack_require__(181);

	var _ContextUtils = __webpack_require__(198);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var _React$PropTypes = _react2.default.PropTypes,
	    bool = _React$PropTypes.bool,
	    object = _React$PropTypes.object,
	    string = _React$PropTypes.string,
	    func = _React$PropTypes.func,
	    oneOfType = _React$PropTypes.oneOfType;


	function isLeftClickEvent(event) {
	  return event.button === 0;
	}

	function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	}

	// TODO: De-duplicate against hasAnyProperties in createTransitionManager.
	function isEmptyObject(object) {
	  for (var p in object) {
	    if (Object.prototype.hasOwnProperty.call(object, p)) return false;
	  }return true;
	}

	function resolveToLocation(to, router) {
	  return typeof to === 'function' ? to(router.location) : to;
	}

	/**
	 * A <Link> is used to create an <a> element that links to a route.
	 * When that route is active, the link gets the value of its
	 * activeClassName prop.
	 *
	 * For example, assuming you have the following route:
	 *
	 *   <Route path="/posts/:postID" component={Post} />
	 *
	 * You could use the following component to link to that route:
	 *
	 *   <Link to={`/posts/${post.id}`} />
	 *
	 * Links may pass along location state and/or query string parameters
	 * in the state/query props, respectively.
	 *
	 *   <Link ... query={{ show: true }} state={{ the: 'state' }} />
	 */
	var Link = _react2.default.createClass({
	  displayName: 'Link',


	  mixins: [(0, _ContextUtils.ContextSubscriber)('router')],

	  contextTypes: {
	    router: _PropTypes.routerShape
	  },

	  propTypes: {
	    to: oneOfType([string, object, func]),
	    query: object,
	    hash: string,
	    state: object,
	    activeStyle: object,
	    activeClassName: string,
	    onlyActiveOnIndex: bool.isRequired,
	    onClick: func,
	    target: string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onlyActiveOnIndex: false,
	      style: {}
	    };
	  },
	  handleClick: function handleClick(event) {
	    if (this.props.onClick) this.props.onClick(event);

	    if (event.defaultPrevented) return;

	    var router = this.context.router;

	    !router ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<Link>s rendered outside of a router context cannot navigate.') : (0, _invariant2.default)(false) : void 0;

	    if (isModifiedEvent(event) || !isLeftClickEvent(event)) return;

	    // If target prop is set (e.g. to "_blank"), let browser handle link.
	    /* istanbul ignore if: untestable with Karma */
	    if (this.props.target) return;

	    event.preventDefault();

	    router.push(resolveToLocation(this.props.to, router));
	  },
	  render: function render() {
	    var _props = this.props,
	        to = _props.to,
	        activeClassName = _props.activeClassName,
	        activeStyle = _props.activeStyle,
	        onlyActiveOnIndex = _props.onlyActiveOnIndex,
	        props = _objectWithoutProperties(_props, ['to', 'activeClassName', 'activeStyle', 'onlyActiveOnIndex']);

	    // Ignore if rendered outside the context of router to simplify unit testing.


	    var router = this.context.router;


	    if (router) {
	      // If user does not specify a `to` prop, return an empty anchor tag.
	      if (to == null) {
	        return _react2.default.createElement('a', props);
	      }

	      var toLocation = resolveToLocation(to, router);
	      props.href = router.createHref(toLocation);

	      if (activeClassName || activeStyle != null && !isEmptyObject(activeStyle)) {
	        if (router.isActive(toLocation, onlyActiveOnIndex)) {
	          if (activeClassName) {
	            if (props.className) {
	              props.className += ' ' + activeClassName;
	            } else {
	              props.className = activeClassName;
	            }
	          }

	          if (activeStyle) props.style = _extends({}, props.style, activeStyle);
	        }
	      }
	    }

	    return _react2.default.createElement('a', _extends({}, props, { onClick: this.handleClick }));
	  }
	});

	exports.default = Link;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Link = __webpack_require__(200);

	var _Link2 = _interopRequireDefault(_Link);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * An <IndexLink> is used to link to an <IndexRoute>.
	 */
	var IndexLink = _react2.default.createClass({
	  displayName: 'IndexLink',
	  render: function render() {
	    return _react2.default.createElement(_Link2.default, _extends({}, this.props, { onlyActiveOnIndex: true }));
	  }
	});

	exports.default = IndexLink;
	module.exports = exports['default'];

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = withRouter;

	var _invariant = __webpack_require__(183);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _hoistNonReactStatics = __webpack_require__(203);

	var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

	var _ContextUtils = __webpack_require__(198);

	var _PropTypes = __webpack_require__(181);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getDisplayName(WrappedComponent) {
	  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
	}

	function withRouter(WrappedComponent, options) {
	  var withRef = options && options.withRef;

	  var WithRouter = _react2.default.createClass({
	    displayName: 'WithRouter',

	    mixins: [(0, _ContextUtils.ContextSubscriber)('router')],

	    contextTypes: { router: _PropTypes.routerShape },
	    propTypes: { router: _PropTypes.routerShape },

	    getWrappedInstance: function getWrappedInstance() {
	      !withRef ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'To access the wrapped instance, you need to specify ' + '`{ withRef: true }` as the second argument of the withRouter() call.') : (0, _invariant2.default)(false) : void 0;

	      return this.wrappedInstance;
	    },
	    render: function render() {
	      var _this = this;

	      var router = this.props.router || this.context.router;
	      var params = router.params,
	          location = router.location,
	          routes = router.routes;

	      var props = _extends({}, this.props, { router: router, params: params, location: location, routes: routes });

	      if (withRef) {
	        props.ref = function (c) {
	          _this.wrappedInstance = c;
	        };
	      }

	      return _react2.default.createElement(WrappedComponent, props);
	    }
	  });

	  WithRouter.displayName = 'withRouter(' + getDisplayName(WrappedComponent) + ')';
	  WithRouter.WrappedComponent = WrappedComponent;

	  return (0, _hoistNonReactStatics2.default)(WithRouter, WrappedComponent);
	}
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 203 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	'use strict';

	var REACT_STATICS = {
	    childContextTypes: true,
	    contextTypes: true,
	    defaultProps: true,
	    displayName: true,
	    getDefaultProps: true,
	    mixins: true,
	    propTypes: true,
	    type: true
	};

	var KNOWN_STATICS = {
	    name: true,
	    length: true,
	    prototype: true,
	    caller: true,
	    arguments: true,
	    arity: true
	};

	var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';

	module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
	    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components
	        var keys = Object.getOwnPropertyNames(sourceComponent);

	        /* istanbul ignore else */
	        if (isGetOwnPropertySymbolsAvailable) {
	            keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
	        }

	        for (var i = 0; i < keys.length; ++i) {
	            if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
	                try {
	                    targetComponent[keys[i]] = sourceComponent[keys[i]];
	                } catch (error) {

	                }
	            }
	        }
	    }

	    return targetComponent;
	};


/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(186);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _invariant = __webpack_require__(183);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Redirect = __webpack_require__(205);

	var _Redirect2 = _interopRequireDefault(_Redirect);

	var _InternalPropTypes = __webpack_require__(195);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _React$PropTypes = _react2.default.PropTypes,
	    string = _React$PropTypes.string,
	    object = _React$PropTypes.object;

	/**
	 * An <IndexRedirect> is used to redirect from an indexRoute.
	 */
	/* eslint-disable react/require-render-return */

	var IndexRedirect = _react2.default.createClass({
	  displayName: 'IndexRedirect',


	  statics: {
	    createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
	      /* istanbul ignore else: sanity check */
	      if (parentRoute) {
	        parentRoute.indexRoute = _Redirect2.default.createRouteFromReactElement(element);
	      } else {
	        process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'An <IndexRedirect> does not make sense at the root of your route config') : void 0;
	      }
	    }
	  },

	  propTypes: {
	    to: string.isRequired,
	    query: object,
	    state: object,
	    onEnter: _InternalPropTypes.falsy,
	    children: _InternalPropTypes.falsy
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<IndexRedirect> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = IndexRedirect;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(183);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(180);

	var _PatternUtils = __webpack_require__(182);

	var _InternalPropTypes = __webpack_require__(195);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _React$PropTypes = _react2.default.PropTypes,
	    string = _React$PropTypes.string,
	    object = _React$PropTypes.object;

	/**
	 * A <Redirect> is used to declare another URL path a client should
	 * be sent to when they request a given URL.
	 *
	 * Redirects are placed alongside routes in the route configuration
	 * and are traversed in the same manner.
	 */
	/* eslint-disable react/require-render-return */

	var Redirect = _react2.default.createClass({
	  displayName: 'Redirect',


	  statics: {
	    createRouteFromReactElement: function createRouteFromReactElement(element) {
	      var route = (0, _RouteUtils.createRouteFromReactElement)(element);

	      if (route.from) route.path = route.from;

	      route.onEnter = function (nextState, replace) {
	        var location = nextState.location,
	            params = nextState.params;


	        var pathname = void 0;
	        if (route.to.charAt(0) === '/') {
	          pathname = (0, _PatternUtils.formatPattern)(route.to, params);
	        } else if (!route.to) {
	          pathname = location.pathname;
	        } else {
	          var routeIndex = nextState.routes.indexOf(route);
	          var parentPattern = Redirect.getRoutePattern(nextState.routes, routeIndex - 1);
	          var pattern = parentPattern.replace(/\/*$/, '/') + route.to;
	          pathname = (0, _PatternUtils.formatPattern)(pattern, params);
	        }

	        replace({
	          pathname: pathname,
	          query: route.query || location.query,
	          state: route.state || location.state
	        });
	      };

	      return route;
	    },
	    getRoutePattern: function getRoutePattern(routes, routeIndex) {
	      var parentPattern = '';

	      for (var i = routeIndex; i >= 0; i--) {
	        var route = routes[i];
	        var pattern = route.path || '';

	        parentPattern = pattern.replace(/\/*$/, '/') + parentPattern;

	        if (pattern.indexOf('/') === 0) break;
	      }

	      return '/' + parentPattern;
	    }
	  },

	  propTypes: {
	    path: string,
	    from: string, // Alias for path
	    to: string.isRequired,
	    query: object,
	    state: object,
	    onEnter: _InternalPropTypes.falsy,
	    children: _InternalPropTypes.falsy
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<Redirect> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = Redirect;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(186);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _invariant = __webpack_require__(183);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(180);

	var _InternalPropTypes = __webpack_require__(195);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var func = _react2.default.PropTypes.func;

	/**
	 * An <IndexRoute> is used to specify its parent's <Route indexRoute> in
	 * a JSX route config.
	 */
	/* eslint-disable react/require-render-return */

	var IndexRoute = _react2.default.createClass({
	  displayName: 'IndexRoute',


	  statics: {
	    createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
	      /* istanbul ignore else: sanity check */
	      if (parentRoute) {
	        parentRoute.indexRoute = (0, _RouteUtils.createRouteFromReactElement)(element);
	      } else {
	        process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'An <IndexRoute> does not make sense at the root of your route config') : void 0;
	      }
	    }
	  },

	  propTypes: {
	    path: _InternalPropTypes.falsy,
	    component: _InternalPropTypes.component,
	    components: _InternalPropTypes.components,
	    getComponent: func,
	    getComponents: func
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<IndexRoute> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = IndexRoute;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(183);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(180);

	var _InternalPropTypes = __webpack_require__(195);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _React$PropTypes = _react2.default.PropTypes,
	    string = _React$PropTypes.string,
	    func = _React$PropTypes.func;

	/**
	 * A <Route> is used to declare which components are rendered to the
	 * page when the URL matches a given pattern.
	 *
	 * Routes are arranged in a nested tree structure. When a new URL is
	 * requested, the tree is searched depth-first to find a route whose
	 * path matches the URL.  When one is found, all routes in the tree
	 * that lead to it are considered "active" and their components are
	 * rendered into the DOM, nested in the same order as in the tree.
	 */
	/* eslint-disable react/require-render-return */

	var Route = _react2.default.createClass({
	  displayName: 'Route',


	  statics: {
	    createRouteFromReactElement: _RouteUtils.createRouteFromReactElement
	  },

	  propTypes: {
	    path: string,
	    component: _InternalPropTypes.component,
	    components: _InternalPropTypes.components,
	    getComponent: func,
	    getComponents: func
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<Route> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = Route;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _Actions = __webpack_require__(209);

	var _invariant = __webpack_require__(183);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _createMemoryHistory = __webpack_require__(210);

	var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);

	var _createTransitionManager = __webpack_require__(185);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _RouteUtils = __webpack_require__(180);

	var _RouterUtils = __webpack_require__(199);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	/**
	 * A high-level API to be used for server-side rendering.
	 *
	 * This function matches a location to a set of routes and calls
	 * callback(error, redirectLocation, renderProps) when finished.
	 *
	 * Note: You probably don't want to use this in a browser unless you're using
	 * server-side rendering with async routes.
	 */
	function match(_ref, callback) {
	  var history = _ref.history,
	      routes = _ref.routes,
	      location = _ref.location,
	      options = _objectWithoutProperties(_ref, ['history', 'routes', 'location']);

	  !(history || location) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'match needs a history or a location') : (0, _invariant2.default)(false) : void 0;

	  history = history ? history : (0, _createMemoryHistory2.default)(options);
	  var transitionManager = (0, _createTransitionManager2.default)(history, (0, _RouteUtils.createRoutes)(routes));

	  if (location) {
	    // Allow match({ location: '/the/path', ... })
	    location = history.createLocation(location);
	  } else {
	    location = history.getCurrentLocation();
	  }

	  transitionManager.match(location, function (error, redirectLocation, nextState) {
	    var renderProps = void 0;

	    if (nextState) {
	      var router = (0, _RouterUtils.createRouterObject)(history, transitionManager, nextState);
	      renderProps = _extends({}, nextState, {
	        router: router,
	        matchContext: { transitionManager: transitionManager, router: router }
	      });
	    }

	    callback(error, redirectLocation && history.createLocation(redirectLocation, _Actions.REPLACE), renderProps);
	  });
	}

	exports.default = match;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 209 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	/**
	 * Indicates that navigation was caused by a call to history.push.
	 */
	var PUSH = exports.PUSH = 'PUSH';

	/**
	 * Indicates that navigation was caused by a call to history.replace.
	 */
	var REPLACE = exports.REPLACE = 'REPLACE';

	/**
	 * Indicates that navigation was caused by some other action such
	 * as using a browser's back/forward buttons and/or manually manipulating
	 * the URL in a browser's location bar. This is the default.
	 *
	 * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
	 * for more information.
	 */
	var POP = exports.POP = 'POP';

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = createMemoryHistory;

	var _useQueries = __webpack_require__(211);

	var _useQueries2 = _interopRequireDefault(_useQueries);

	var _useBasename = __webpack_require__(217);

	var _useBasename2 = _interopRequireDefault(_useBasename);

	var _createMemoryHistory = __webpack_require__(218);

	var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function createMemoryHistory(options) {
	  // signatures and type checking differ between `useQueries` and
	  // `createMemoryHistory`, have to create `memoryHistory` first because
	  // `useQueries` doesn't understand the signature
	  var memoryHistory = (0, _createMemoryHistory2.default)(options);
	  var createHistory = function createHistory() {
	    return memoryHistory;
	  };
	  var history = (0, _useQueries2.default)((0, _useBasename2.default)(createHistory))(options);
	  return history;
	}
	module.exports = exports['default'];

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _queryString = __webpack_require__(212);

	var _runTransitionHook = __webpack_require__(214);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _LocationUtils = __webpack_require__(215);

	var _PathUtils = __webpack_require__(216);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var defaultStringifyQuery = function defaultStringifyQuery(query) {
	  return (0, _queryString.stringify)(query).replace(/%20/g, '+');
	};

	var defaultParseQueryString = _queryString.parse;

	/**
	 * Returns a new createHistory function that may be used to create
	 * history objects that know how to handle URL queries.
	 */
	var useQueries = function useQueries(createHistory) {
	  return function () {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var history = createHistory(options);
	    var stringifyQuery = options.stringifyQuery;
	    var parseQueryString = options.parseQueryString;


	    if (typeof stringifyQuery !== 'function') stringifyQuery = defaultStringifyQuery;

	    if (typeof parseQueryString !== 'function') parseQueryString = defaultParseQueryString;

	    var decodeQuery = function decodeQuery(location) {
	      if (!location) return location;

	      if (location.query == null) location.query = parseQueryString(location.search.substring(1));

	      return location;
	    };

	    var encodeQuery = function encodeQuery(location, query) {
	      if (query == null) return location;

	      var object = typeof location === 'string' ? (0, _PathUtils.parsePath)(location) : location;
	      var queryString = stringifyQuery(query);
	      var search = queryString ? '?' + queryString : '';

	      return _extends({}, object, {
	        search: search
	      });
	    };

	    // Override all read methods with query-aware versions.
	    var getCurrentLocation = function getCurrentLocation() {
	      return decodeQuery(history.getCurrentLocation());
	    };

	    var listenBefore = function listenBefore(hook) {
	      return history.listenBefore(function (location, callback) {
	        return (0, _runTransitionHook2.default)(hook, decodeQuery(location), callback);
	      });
	    };

	    var listen = function listen(listener) {
	      return history.listen(function (location) {
	        return listener(decodeQuery(location));
	      });
	    };

	    // Override all write methods with query-aware versions.
	    var push = function push(location) {
	      return history.push(encodeQuery(location, location.query));
	    };

	    var replace = function replace(location) {
	      return history.replace(encodeQuery(location, location.query));
	    };

	    var createPath = function createPath(location) {
	      return history.createPath(encodeQuery(location, location.query));
	    };

	    var createHref = function createHref(location) {
	      return history.createHref(encodeQuery(location, location.query));
	    };

	    var createLocation = function createLocation(location) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      var newLocation = history.createLocation.apply(history, [encodeQuery(location, location.query)].concat(args));

	      if (location.query) newLocation.query = (0, _LocationUtils.createQuery)(location.query);

	      return decodeQuery(newLocation);
	    };

	    return _extends({}, history, {
	      getCurrentLocation: getCurrentLocation,
	      listenBefore: listenBefore,
	      listen: listen,
	      push: push,
	      replace: replace,
	      createPath: createPath,
	      createHref: createHref,
	      createLocation: createLocation
	    });
	  };
	};

	exports.default = useQueries;

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strictUriEncode = __webpack_require__(213);
	var objectAssign = __webpack_require__(4);

	function encode(value, opts) {
		if (opts.encode) {
			return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
		}

		return value;
	}

	exports.extract = function (str) {
		return str.split('?')[1] || '';
	};

	exports.parse = function (str) {
		// Create an object with no prototype
		// https://github.com/sindresorhus/query-string/issues/47
		var ret = Object.create(null);

		if (typeof str !== 'string') {
			return ret;
		}

		str = str.trim().replace(/^(\?|#|&)/, '');

		if (!str) {
			return ret;
		}

		str.split('&').forEach(function (param) {
			var parts = param.replace(/\+/g, ' ').split('=');
			// Firefox (pre 40) decodes `%3D` to `=`
			// https://github.com/sindresorhus/query-string/pull/37
			var key = parts.shift();
			var val = parts.length > 0 ? parts.join('=') : undefined;

			key = decodeURIComponent(key);

			// missing `=` should be `null`:
			// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
			val = val === undefined ? null : decodeURIComponent(val);

			if (ret[key] === undefined) {
				ret[key] = val;
			} else if (Array.isArray(ret[key])) {
				ret[key].push(val);
			} else {
				ret[key] = [ret[key], val];
			}
		});

		return ret;
	};

	exports.stringify = function (obj, opts) {
		var defaults = {
			encode: true,
			strict: true
		};

		opts = objectAssign(defaults, opts);

		return obj ? Object.keys(obj).sort().map(function (key) {
			var val = obj[key];

			if (val === undefined) {
				return '';
			}

			if (val === null) {
				return encode(key, opts);
			}

			if (Array.isArray(val)) {
				var result = [];

				val.slice().forEach(function (val2) {
					if (val2 === undefined) {
						return;
					}

					if (val2 === null) {
						result.push(encode(key, opts));
					} else {
						result.push(encode(key, opts) + '=' + encode(val2, opts));
					}
				});

				return result.join('&');
			}

			return encode(key, opts) + '=' + encode(val, opts);
		}).filter(function (x) {
			return x.length > 0;
		}).join('&') : '';
	};


/***/ },
/* 213 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function (str) {
		return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
			return '%' + c.charCodeAt(0).toString(16).toUpperCase();
		});
	};


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _warning = __webpack_require__(187);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var runTransitionHook = function runTransitionHook(hook, location, callback) {
	  var result = hook(location, callback);

	  if (hook.length < 2) {
	    // Assume the hook runs synchronously and automatically
	    // call the callback with the return value.
	    callback(result);
	  } else {
	    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(result === undefined, 'You should not "return" in a transition hook with a callback argument; ' + 'call the callback instead') : void 0;
	  }
	};

	exports.default = runTransitionHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.locationsAreEqual = exports.statesAreEqual = exports.createLocation = exports.createQuery = undefined;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _invariant = __webpack_require__(183);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _warning = __webpack_require__(187);

	var _warning2 = _interopRequireDefault(_warning);

	var _PathUtils = __webpack_require__(216);

	var _Actions = __webpack_require__(209);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var createQuery = exports.createQuery = function createQuery(props) {
	  return _extends(Object.create(null), props);
	};

	var createLocation = exports.createLocation = function createLocation() {
	  var input = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];
	  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];
	  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

	  var object = typeof input === 'string' ? (0, _PathUtils.parsePath)(input) : input;

	  process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(!object.path, 'Location descriptor objects should have a `pathname`, not a `path`.') : void 0;

	  var pathname = object.pathname || '/';
	  var search = object.search || '';
	  var hash = object.hash || '';
	  var state = object.state;

	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash,
	    state: state,
	    action: action,
	    key: key
	  };
	};

	var isDate = function isDate(object) {
	  return Object.prototype.toString.call(object) === '[object Date]';
	};

	var statesAreEqual = exports.statesAreEqual = function statesAreEqual(a, b) {
	  if (a === b) return true;

	  var typeofA = typeof a === 'undefined' ? 'undefined' : _typeof(a);
	  var typeofB = typeof b === 'undefined' ? 'undefined' : _typeof(b);

	  if (typeofA !== typeofB) return false;

	  !(typeofA !== 'function') ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'You must not store functions in location state') : (0, _invariant2.default)(false) : void 0;

	  // Not the same object, but same type.
	  if (typeofA === 'object') {
	    !!(isDate(a) && isDate(b)) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'You must not store Date objects in location state') : (0, _invariant2.default)(false) : void 0;

	    if (!Array.isArray(a)) {
	      var keysofA = Object.keys(a);
	      var keysofB = Object.keys(b);
	      return keysofA.length === keysofB.length && keysofA.every(function (key) {
	        return statesAreEqual(a[key], b[key]);
	      });
	    }

	    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
	      return statesAreEqual(item, b[index]);
	    });
	  }

	  // All other serializable types (string, number, boolean)
	  // should be strict equal.
	  return false;
	};

	var locationsAreEqual = exports.locationsAreEqual = function locationsAreEqual(a, b) {
	  return a.key === b.key &&
	  // a.action === b.action && // Different action !== location change.
	  a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && statesAreEqual(a.state, b.state);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.createPath = exports.parsePath = exports.getQueryStringValueFromPath = exports.stripQueryStringValueFromPath = exports.addQueryStringValueToPath = undefined;

	var _warning = __webpack_require__(187);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var addQueryStringValueToPath = exports.addQueryStringValueToPath = function addQueryStringValueToPath(path, key, value) {
	  var _parsePath = parsePath(path);

	  var pathname = _parsePath.pathname;
	  var search = _parsePath.search;
	  var hash = _parsePath.hash;


	  return createPath({
	    pathname: pathname,
	    search: search + (search.indexOf('?') === -1 ? '?' : '&') + key + '=' + value,
	    hash: hash
	  });
	};

	var stripQueryStringValueFromPath = exports.stripQueryStringValueFromPath = function stripQueryStringValueFromPath(path, key) {
	  var _parsePath2 = parsePath(path);

	  var pathname = _parsePath2.pathname;
	  var search = _parsePath2.search;
	  var hash = _parsePath2.hash;


	  return createPath({
	    pathname: pathname,
	    search: search.replace(new RegExp('([?&])' + key + '=[a-zA-Z0-9]+(&?)'), function (match, prefix, suffix) {
	      return prefix === '?' ? prefix : suffix;
	    }),
	    hash: hash
	  });
	};

	var getQueryStringValueFromPath = exports.getQueryStringValueFromPath = function getQueryStringValueFromPath(path, key) {
	  var _parsePath3 = parsePath(path);

	  var search = _parsePath3.search;

	  var match = search.match(new RegExp('[?&]' + key + '=([a-zA-Z0-9]+)'));
	  return match && match[1];
	};

	var extractPath = function extractPath(string) {
	  var match = string.match(/^(https?:)?\/\/[^\/]*/);
	  return match == null ? string : string.substring(match[0].length);
	};

	var parsePath = exports.parsePath = function parsePath(path) {
	  var pathname = extractPath(path);
	  var search = '';
	  var hash = '';

	  process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(path === pathname, 'A path must be pathname + search + hash only, not a full URL like "%s"', path) : void 0;

	  var hashIndex = pathname.indexOf('#');
	  if (hashIndex !== -1) {
	    hash = pathname.substring(hashIndex);
	    pathname = pathname.substring(0, hashIndex);
	  }

	  var searchIndex = pathname.indexOf('?');
	  if (searchIndex !== -1) {
	    search = pathname.substring(searchIndex);
	    pathname = pathname.substring(0, searchIndex);
	  }

	  if (pathname === '') pathname = '/';

	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash
	  };
	};

	var createPath = exports.createPath = function createPath(location) {
	  if (location == null || typeof location === 'string') return location;

	  var basename = location.basename;
	  var pathname = location.pathname;
	  var search = location.search;
	  var hash = location.hash;

	  var path = (basename || '') + pathname;

	  if (search && search !== '?') path += search;

	  if (hash) path += hash;

	  return path;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _runTransitionHook = __webpack_require__(214);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _PathUtils = __webpack_require__(216);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var useBasename = function useBasename(createHistory) {
	  return function () {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var history = createHistory(options);
	    var basename = options.basename;


	    var addBasename = function addBasename(location) {
	      if (!location) return location;

	      if (basename && location.basename == null) {
	        if (location.pathname.indexOf(basename) === 0) {
	          location.pathname = location.pathname.substring(basename.length);
	          location.basename = basename;

	          if (location.pathname === '') location.pathname = '/';
	        } else {
	          location.basename = '';
	        }
	      }

	      return location;
	    };

	    var prependBasename = function prependBasename(location) {
	      if (!basename) return location;

	      var object = typeof location === 'string' ? (0, _PathUtils.parsePath)(location) : location;
	      var pname = object.pathname;
	      var normalizedBasename = basename.slice(-1) === '/' ? basename : basename + '/';
	      var normalizedPathname = pname.charAt(0) === '/' ? pname.slice(1) : pname;
	      var pathname = normalizedBasename + normalizedPathname;

	      return _extends({}, object, {
	        pathname: pathname
	      });
	    };

	    // Override all read methods with basename-aware versions.
	    var getCurrentLocation = function getCurrentLocation() {
	      return addBasename(history.getCurrentLocation());
	    };

	    var listenBefore = function listenBefore(hook) {
	      return history.listenBefore(function (location, callback) {
	        return (0, _runTransitionHook2.default)(hook, addBasename(location), callback);
	      });
	    };

	    var listen = function listen(listener) {
	      return history.listen(function (location) {
	        return listener(addBasename(location));
	      });
	    };

	    // Override all write methods with basename-aware versions.
	    var push = function push(location) {
	      return history.push(prependBasename(location));
	    };

	    var replace = function replace(location) {
	      return history.replace(prependBasename(location));
	    };

	    var createPath = function createPath(location) {
	      return history.createPath(prependBasename(location));
	    };

	    var createHref = function createHref(location) {
	      return history.createHref(prependBasename(location));
	    };

	    var createLocation = function createLocation(location) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      return addBasename(history.createLocation.apply(history, [prependBasename(location)].concat(args)));
	    };

	    return _extends({}, history, {
	      getCurrentLocation: getCurrentLocation,
	      listenBefore: listenBefore,
	      listen: listen,
	      push: push,
	      replace: replace,
	      createPath: createPath,
	      createHref: createHref,
	      createLocation: createLocation
	    });
	  };
	};

	exports.default = useBasename;

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(187);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(183);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _LocationUtils = __webpack_require__(215);

	var _PathUtils = __webpack_require__(216);

	var _createHistory = __webpack_require__(219);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	var _Actions = __webpack_require__(209);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var createStateStorage = function createStateStorage(entries) {
	  return entries.filter(function (entry) {
	    return entry.state;
	  }).reduce(function (memo, entry) {
	    memo[entry.key] = entry.state;
	    return memo;
	  }, {});
	};

	var createMemoryHistory = function createMemoryHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  if (Array.isArray(options)) {
	    options = { entries: options };
	  } else if (typeof options === 'string') {
	    options = { entries: [options] };
	  }

	  var getCurrentLocation = function getCurrentLocation() {
	    var entry = entries[current];
	    var path = (0, _PathUtils.createPath)(entry);

	    var key = void 0,
	        state = void 0;
	    if (entry.key) {
	      key = entry.key;
	      state = readState(key);
	    }

	    var init = (0, _PathUtils.parsePath)(path);

	    return (0, _LocationUtils.createLocation)(_extends({}, init, { state: state }), undefined, key);
	  };

	  var canGo = function canGo(n) {
	    var index = current + n;
	    return index >= 0 && index < entries.length;
	  };

	  var go = function go(n) {
	    if (!n) return;

	    if (!canGo(n)) {
	      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'Cannot go(%s) there is not enough history', n) : void 0;

	      return;
	    }

	    current += n;
	    var currentLocation = getCurrentLocation();

	    // Change action to POP
	    history.transitionTo(_extends({}, currentLocation, { action: _Actions.POP }));
	  };

	  var pushLocation = function pushLocation(location) {
	    current += 1;

	    if (current < entries.length) entries.splice(current);

	    entries.push(location);

	    saveState(location.key, location.state);
	  };

	  var replaceLocation = function replaceLocation(location) {
	    entries[current] = location;
	    saveState(location.key, location.state);
	  };

	  var history = (0, _createHistory2.default)(_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    pushLocation: pushLocation,
	    replaceLocation: replaceLocation,
	    go: go
	  }));

	  var _options = options;
	  var entries = _options.entries;
	  var current = _options.current;


	  if (typeof entries === 'string') {
	    entries = [entries];
	  } else if (!Array.isArray(entries)) {
	    entries = ['/'];
	  }

	  entries = entries.map(function (entry) {
	    return (0, _LocationUtils.createLocation)(entry);
	  });

	  if (current == null) {
	    current = entries.length - 1;
	  } else {
	    !(current >= 0 && current < entries.length) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Current index must be >= 0 and < %s, was %s', entries.length, current) : (0, _invariant2.default)(false) : void 0;
	  }

	  var storage = createStateStorage(entries);

	  var saveState = function saveState(key, state) {
	    return storage[key] = state;
	  };

	  var readState = function readState(key) {
	    return storage[key];
	  };

	  return _extends({}, history, {
	    canGo: canGo
	  });
	};

	exports.default = createMemoryHistory;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _AsyncUtils = __webpack_require__(220);

	var _PathUtils = __webpack_require__(216);

	var _runTransitionHook = __webpack_require__(214);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _Actions = __webpack_require__(209);

	var _LocationUtils = __webpack_require__(215);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var createHistory = function createHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	  var getCurrentLocation = options.getCurrentLocation;
	  var getUserConfirmation = options.getUserConfirmation;
	  var pushLocation = options.pushLocation;
	  var replaceLocation = options.replaceLocation;
	  var go = options.go;
	  var keyLength = options.keyLength;


	  var currentLocation = void 0;
	  var pendingLocation = void 0;
	  var beforeListeners = [];
	  var listeners = [];
	  var allKeys = [];

	  var getCurrentIndex = function getCurrentIndex() {
	    if (pendingLocation && pendingLocation.action === _Actions.POP) return allKeys.indexOf(pendingLocation.key);

	    if (currentLocation) return allKeys.indexOf(currentLocation.key);

	    return -1;
	  };

	  var updateLocation = function updateLocation(nextLocation) {
	    var currentIndex = getCurrentIndex();

	    currentLocation = nextLocation;

	    if (currentLocation.action === _Actions.PUSH) {
	      allKeys = [].concat(allKeys.slice(0, currentIndex + 1), [currentLocation.key]);
	    } else if (currentLocation.action === _Actions.REPLACE) {
	      allKeys[currentIndex] = currentLocation.key;
	    }

	    listeners.forEach(function (listener) {
	      return listener(currentLocation);
	    });
	  };

	  var listenBefore = function listenBefore(listener) {
	    beforeListeners.push(listener);

	    return function () {
	      return beforeListeners = beforeListeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  };

	  var listen = function listen(listener) {
	    listeners.push(listener);

	    return function () {
	      return listeners = listeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  };

	  var confirmTransitionTo = function confirmTransitionTo(location, callback) {
	    (0, _AsyncUtils.loopAsync)(beforeListeners.length, function (index, next, done) {
	      (0, _runTransitionHook2.default)(beforeListeners[index], location, function (result) {
	        return result != null ? done(result) : next();
	      });
	    }, function (message) {
	      if (getUserConfirmation && typeof message === 'string') {
	        getUserConfirmation(message, function (ok) {
	          return callback(ok !== false);
	        });
	      } else {
	        callback(message !== false);
	      }
	    });
	  };

	  var transitionTo = function transitionTo(nextLocation) {
	    if (currentLocation && (0, _LocationUtils.locationsAreEqual)(currentLocation, nextLocation) || pendingLocation && (0, _LocationUtils.locationsAreEqual)(pendingLocation, nextLocation)) return; // Nothing to do

	    pendingLocation = nextLocation;

	    confirmTransitionTo(nextLocation, function (ok) {
	      if (pendingLocation !== nextLocation) return; // Transition was interrupted during confirmation

	      pendingLocation = null;

	      if (ok) {
	        // Treat PUSH to same path like REPLACE to be consistent with browsers
	        if (nextLocation.action === _Actions.PUSH) {
	          var prevPath = (0, _PathUtils.createPath)(currentLocation);
	          var nextPath = (0, _PathUtils.createPath)(nextLocation);

	          if (nextPath === prevPath && (0, _LocationUtils.statesAreEqual)(currentLocation.state, nextLocation.state)) nextLocation.action = _Actions.REPLACE;
	        }

	        if (nextLocation.action === _Actions.POP) {
	          updateLocation(nextLocation);
	        } else if (nextLocation.action === _Actions.PUSH) {
	          if (pushLocation(nextLocation) !== false) updateLocation(nextLocation);
	        } else if (nextLocation.action === _Actions.REPLACE) {
	          if (replaceLocation(nextLocation) !== false) updateLocation(nextLocation);
	        }
	      } else if (currentLocation && nextLocation.action === _Actions.POP) {
	        var prevIndex = allKeys.indexOf(currentLocation.key);
	        var nextIndex = allKeys.indexOf(nextLocation.key);

	        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL
	      }
	    });
	  };

	  var push = function push(input) {
	    return transitionTo(createLocation(input, _Actions.PUSH));
	  };

	  var replace = function replace(input) {
	    return transitionTo(createLocation(input, _Actions.REPLACE));
	  };

	  var goBack = function goBack() {
	    return go(-1);
	  };

	  var goForward = function goForward() {
	    return go(1);
	  };

	  var createKey = function createKey() {
	    return Math.random().toString(36).substr(2, keyLength || 6);
	  };

	  var createHref = function createHref(location) {
	    return (0, _PathUtils.createPath)(location);
	  };

	  var createLocation = function createLocation(location, action) {
	    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];
	    return (0, _LocationUtils.createLocation)(location, action, key);
	  };

	  return {
	    getCurrentLocation: getCurrentLocation,
	    listenBefore: listenBefore,
	    listen: listen,
	    transitionTo: transitionTo,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    createKey: createKey,
	    createPath: _PathUtils.createPath,
	    createHref: createHref,
	    createLocation: createLocation
	  };
	};

	exports.default = createHistory;

/***/ },
/* 220 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	var loopAsync = exports.loopAsync = function loopAsync(turns, work, callback) {
	  var currentTurn = 0,
	      isDone = false;
	  var isSync = false,
	      hasNext = false,
	      doneArgs = void 0;

	  var done = function done() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    isDone = true;

	    if (isSync) {
	      // Iterate instead of recursing if possible.
	      doneArgs = args;
	      return;
	    }

	    callback.apply(undefined, args);
	  };

	  var next = function next() {
	    if (isDone) return;

	    hasNext = true;

	    if (isSync) return; // Iterate instead of recursing if possible.

	    isSync = true;

	    while (!isDone && currentTurn < turns && hasNext) {
	      hasNext = false;
	      work(currentTurn++, next, done);
	    }

	    isSync = false;

	    if (isDone) {
	      // This means the loop finished synchronously.
	      callback.apply(undefined, doneArgs);
	      return;
	    }

	    if (currentTurn >= turns && hasNext) {
	      isDone = true;
	      callback();
	    }
	  };

	  next();
	};

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = useRouterHistory;

	var _useQueries = __webpack_require__(211);

	var _useQueries2 = _interopRequireDefault(_useQueries);

	var _useBasename = __webpack_require__(217);

	var _useBasename2 = _interopRequireDefault(_useBasename);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function useRouterHistory(createHistory) {
	  return function (options) {
	    var history = (0, _useQueries2.default)((0, _useBasename2.default)(createHistory))(options);
	    return history;
	  };
	}
	module.exports = exports['default'];

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _RouterContext = __webpack_require__(196);

	var _RouterContext2 = _interopRequireDefault(_RouterContext);

	var _routerWarning = __webpack_require__(186);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function () {
	  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    middlewares.forEach(function (middleware, index) {
	      process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(middleware.renderRouterContext || middleware.renderRouteComponent, 'The middleware specified at index ' + index + ' does not appear to be ' + 'a valid React Router middleware.') : void 0;
	    });
	  }

	  var withContext = middlewares.map(function (middleware) {
	    return middleware.renderRouterContext;
	  }).filter(Boolean);
	  var withComponent = middlewares.map(function (middleware) {
	    return middleware.renderRouteComponent;
	  }).filter(Boolean);

	  var makeCreateElement = function makeCreateElement() {
	    var baseCreateElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _react.createElement;
	    return function (Component, props) {
	      return withComponent.reduceRight(function (previous, renderRouteComponent) {
	        return renderRouteComponent(previous, props);
	      }, baseCreateElement(Component, props));
	    };
	  };

	  return function (renderProps) {
	    return withContext.reduceRight(function (previous, renderRouterContext) {
	      return renderRouterContext(previous, renderProps);
	    }, _react2.default.createElement(_RouterContext2.default, _extends({}, renderProps, {
	      createElement: makeCreateElement(renderProps.createElement)
	    })));
	  };
	};

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _createBrowserHistory = __webpack_require__(224);

	var _createBrowserHistory2 = _interopRequireDefault(_createBrowserHistory);

	var _createRouterHistory = __webpack_require__(230);

	var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = (0, _createRouterHistory2.default)(_createBrowserHistory2.default);
	module.exports = exports['default'];

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _invariant = __webpack_require__(183);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _ExecutionEnvironment = __webpack_require__(225);

	var _BrowserProtocol = __webpack_require__(226);

	var BrowserProtocol = _interopRequireWildcard(_BrowserProtocol);

	var _RefreshProtocol = __webpack_require__(229);

	var RefreshProtocol = _interopRequireWildcard(_RefreshProtocol);

	var _DOMUtils = __webpack_require__(227);

	var _createHistory = __webpack_require__(219);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Creates and returns a history object that uses HTML5's history API
	 * (pushState, replaceState, and the popstate event) to manage history.
	 * This is the recommended method of managing history in browsers because
	 * it provides the cleanest URLs.
	 *
	 * Note: In browsers that do not support the HTML5 history API full
	 * page reloads will be used to preserve clean URLs. You can force this
	 * behavior using { forceRefresh: true } in options.
	 */
	var createBrowserHistory = function createBrowserHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Browser history needs a DOM') : (0, _invariant2.default)(false) : void 0;

	  var useRefresh = options.forceRefresh || !(0, _DOMUtils.supportsHistory)();
	  var Protocol = useRefresh ? RefreshProtocol : BrowserProtocol;

	  var getUserConfirmation = Protocol.getUserConfirmation;
	  var getCurrentLocation = Protocol.getCurrentLocation;
	  var pushLocation = Protocol.pushLocation;
	  var replaceLocation = Protocol.replaceLocation;
	  var go = Protocol.go;


	  var history = (0, _createHistory2.default)(_extends({
	    getUserConfirmation: getUserConfirmation }, options, {
	    getCurrentLocation: getCurrentLocation,
	    pushLocation: pushLocation,
	    replaceLocation: replaceLocation,
	    go: go
	  }));

	  var listenerCount = 0,
	      stopListener = void 0;

	  var startListener = function startListener(listener, before) {
	    if (++listenerCount === 1) stopListener = BrowserProtocol.startListener(history.transitionTo);

	    var unlisten = before ? history.listenBefore(listener) : history.listen(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopListener();
	    };
	  };

	  var listenBefore = function listenBefore(listener) {
	    return startListener(listener, true);
	  };

	  var listen = function listen(listener) {
	    return startListener(listener, false);
	  };

	  return _extends({}, history, {
	    listenBefore: listenBefore,
	    listen: listen
	  });
	};

	exports.default = createBrowserHistory;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 225 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var canUseDOM = exports.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.go = exports.replaceLocation = exports.pushLocation = exports.startListener = exports.getUserConfirmation = exports.getCurrentLocation = undefined;

	var _LocationUtils = __webpack_require__(215);

	var _DOMUtils = __webpack_require__(227);

	var _DOMStateStorage = __webpack_require__(228);

	var _PathUtils = __webpack_require__(216);

	var _ExecutionEnvironment = __webpack_require__(225);

	var PopStateEvent = 'popstate';
	var HashChangeEvent = 'hashchange';

	var needsHashchangeListener = _ExecutionEnvironment.canUseDOM && !(0, _DOMUtils.supportsPopstateOnHashchange)();

	var _createLocation = function _createLocation(historyState) {
	  var key = historyState && historyState.key;

	  return (0, _LocationUtils.createLocation)({
	    pathname: window.location.pathname,
	    search: window.location.search,
	    hash: window.location.hash,
	    state: key ? (0, _DOMStateStorage.readState)(key) : undefined
	  }, undefined, key);
	};

	var getCurrentLocation = exports.getCurrentLocation = function getCurrentLocation() {
	  var historyState = void 0;
	  try {
	    historyState = window.history.state || {};
	  } catch (error) {
	    // IE 11 sometimes throws when accessing window.history.state
	    // See https://github.com/ReactTraining/history/pull/289
	    historyState = {};
	  }

	  return _createLocation(historyState);
	};

	var getUserConfirmation = exports.getUserConfirmation = function getUserConfirmation(message, callback) {
	  return callback(window.confirm(message));
	}; // eslint-disable-line no-alert

	var startListener = exports.startListener = function startListener(listener) {
	  var handlePopState = function handlePopState(event) {
	    if (event.state !== undefined) // Ignore extraneous popstate events in WebKit
	      listener(_createLocation(event.state));
	  };

	  (0, _DOMUtils.addEventListener)(window, PopStateEvent, handlePopState);

	  var handleUnpoppedHashChange = function handleUnpoppedHashChange() {
	    return listener(getCurrentLocation());
	  };

	  if (needsHashchangeListener) {
	    (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleUnpoppedHashChange);
	  }

	  return function () {
	    (0, _DOMUtils.removeEventListener)(window, PopStateEvent, handlePopState);

	    if (needsHashchangeListener) {
	      (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleUnpoppedHashChange);
	    }
	  };
	};

	var updateLocation = function updateLocation(location, updateState) {
	  var state = location.state;
	  var key = location.key;


	  if (state !== undefined) (0, _DOMStateStorage.saveState)(key, state);

	  updateState({ key: key }, (0, _PathUtils.createPath)(location));
	};

	var pushLocation = exports.pushLocation = function pushLocation(location) {
	  return updateLocation(location, function (state, path) {
	    return window.history.pushState(state, null, path);
	  });
	};

	var replaceLocation = exports.replaceLocation = function replaceLocation(location) {
	  return updateLocation(location, function (state, path) {
	    return window.history.replaceState(state, null, path);
	  });
	};

	var go = exports.go = function go(n) {
	  if (n) window.history.go(n);
	};

/***/ },
/* 227 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var addEventListener = exports.addEventListener = function addEventListener(node, event, listener) {
	  return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);
	};

	var removeEventListener = exports.removeEventListener = function removeEventListener(node, event, listener) {
	  return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);
	};

	/**
	 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
	 *
	 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
	 */
	var supportsHistory = exports.supportsHistory = function supportsHistory() {
	  var ua = window.navigator.userAgent;

	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;

	  return window.history && 'pushState' in window.history;
	};

	/**
	 * Returns false if using go(n) with hash history causes a full page reload.
	 */
	var supportsGoWithoutReloadUsingHash = exports.supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
	  return window.navigator.userAgent.indexOf('Firefox') === -1;
	};

	/**
	 * Returns true if browser fires popstate on hash change.
	 * IE10 and IE11 do not.
	 */
	var supportsPopstateOnHashchange = exports.supportsPopstateOnHashchange = function supportsPopstateOnHashchange() {
	  return window.navigator.userAgent.indexOf('Trident') === -1;
	};

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.readState = exports.saveState = undefined;

	var _warning = __webpack_require__(187);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var QuotaExceededErrors = {
	  QuotaExceededError: true,
	  QUOTA_EXCEEDED_ERR: true
	};

	var SecurityErrors = {
	  SecurityError: true
	};

	var KeyPrefix = '@@History/';

	var createKey = function createKey(key) {
	  return KeyPrefix + key;
	};

	var saveState = exports.saveState = function saveState(key, state) {
	  if (!window.sessionStorage) {
	    // Session storage is not available or hidden.
	    // sessionStorage is undefined in Internet Explorer when served via file protocol.
	    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to save state; sessionStorage is not available') : void 0;

	    return;
	  }

	  try {
	    if (state == null) {
	      window.sessionStorage.removeItem(createKey(key));
	    } else {
	      window.sessionStorage.setItem(createKey(key), JSON.stringify(state));
	    }
	  } catch (error) {
	    if (SecurityErrors[error.name]) {
	      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
	      // attempt to access window.sessionStorage.
	      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to save state; sessionStorage is not available due to security settings') : void 0;

	      return;
	    }

	    if (QuotaExceededErrors[error.name] && window.sessionStorage.length === 0) {
	      // Safari "private mode" throws QuotaExceededError.
	      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : void 0;

	      return;
	    }

	    throw error;
	  }
	};

	var readState = exports.readState = function readState(key) {
	  var json = void 0;
	  try {
	    json = window.sessionStorage.getItem(createKey(key));
	  } catch (error) {
	    if (SecurityErrors[error.name]) {
	      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
	      // attempt to access window.sessionStorage.
	      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to read state; sessionStorage is not available due to security settings') : void 0;

	      return undefined;
	    }
	  }

	  if (json) {
	    try {
	      return JSON.parse(json);
	    } catch (error) {
	      // Ignore invalid JSON.
	    }
	  }

	  return undefined;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.replaceLocation = exports.pushLocation = exports.getCurrentLocation = exports.go = exports.getUserConfirmation = undefined;

	var _BrowserProtocol = __webpack_require__(226);

	Object.defineProperty(exports, 'getUserConfirmation', {
	  enumerable: true,
	  get: function get() {
	    return _BrowserProtocol.getUserConfirmation;
	  }
	});
	Object.defineProperty(exports, 'go', {
	  enumerable: true,
	  get: function get() {
	    return _BrowserProtocol.go;
	  }
	});

	var _LocationUtils = __webpack_require__(215);

	var _PathUtils = __webpack_require__(216);

	var getCurrentLocation = exports.getCurrentLocation = function getCurrentLocation() {
	  return (0, _LocationUtils.createLocation)(window.location);
	};

	var pushLocation = exports.pushLocation = function pushLocation(location) {
	  window.location.href = (0, _PathUtils.createPath)(location);
	  return false; // Don't update location
	};

	var replaceLocation = exports.replaceLocation = function replaceLocation(location) {
	  window.location.replace((0, _PathUtils.createPath)(location));
	  return false; // Don't update location
	};

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	exports.default = function (createHistory) {
	  var history = void 0;
	  if (canUseDOM) history = (0, _useRouterHistory2.default)(createHistory)();
	  return history;
	};

	var _useRouterHistory = __webpack_require__(221);

	var _useRouterHistory2 = _interopRequireDefault(_useRouterHistory);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	module.exports = exports['default'];

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _createHashHistory = __webpack_require__(232);

	var _createHashHistory2 = _interopRequireDefault(_createHashHistory);

	var _createRouterHistory = __webpack_require__(230);

	var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = (0, _createRouterHistory2.default)(_createHashHistory2.default);
	module.exports = exports['default'];

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(187);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(183);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _ExecutionEnvironment = __webpack_require__(225);

	var _DOMUtils = __webpack_require__(227);

	var _HashProtocol = __webpack_require__(233);

	var HashProtocol = _interopRequireWildcard(_HashProtocol);

	var _createHistory = __webpack_require__(219);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var DefaultQueryKey = '_k';

	var addLeadingSlash = function addLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path : '/' + path;
	};

	var HashPathCoders = {
	  hashbang: {
	    encodePath: function encodePath(path) {
	      return path.charAt(0) === '!' ? path : '!' + path;
	    },
	    decodePath: function decodePath(path) {
	      return path.charAt(0) === '!' ? path.substring(1) : path;
	    }
	  },
	  noslash: {
	    encodePath: function encodePath(path) {
	      return path.charAt(0) === '/' ? path.substring(1) : path;
	    },
	    decodePath: addLeadingSlash
	  },
	  slash: {
	    encodePath: addLeadingSlash,
	    decodePath: addLeadingSlash
	  }
	};

	var createHashHistory = function createHashHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Hash history needs a DOM') : (0, _invariant2.default)(false) : void 0;

	  var queryKey = options.queryKey;
	  var hashType = options.hashType;


	  process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(queryKey !== false, 'Using { queryKey: false } no longer works. Instead, just don\'t ' + 'use location state if you don\'t want a key in your URL query string') : void 0;

	  if (typeof queryKey !== 'string') queryKey = DefaultQueryKey;

	  if (hashType == null) hashType = 'slash';

	  if (!(hashType in HashPathCoders)) {
	    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'Invalid hash type: %s', hashType) : void 0;

	    hashType = 'slash';
	  }

	  var pathCoder = HashPathCoders[hashType];

	  var getUserConfirmation = HashProtocol.getUserConfirmation;


	  var getCurrentLocation = function getCurrentLocation() {
	    return HashProtocol.getCurrentLocation(pathCoder, queryKey);
	  };

	  var pushLocation = function pushLocation(location) {
	    return HashProtocol.pushLocation(location, pathCoder, queryKey);
	  };

	  var replaceLocation = function replaceLocation(location) {
	    return HashProtocol.replaceLocation(location, pathCoder, queryKey);
	  };

	  var history = (0, _createHistory2.default)(_extends({
	    getUserConfirmation: getUserConfirmation }, options, {
	    getCurrentLocation: getCurrentLocation,
	    pushLocation: pushLocation,
	    replaceLocation: replaceLocation,
	    go: HashProtocol.go
	  }));

	  var listenerCount = 0,
	      stopListener = void 0;

	  var startListener = function startListener(listener, before) {
	    if (++listenerCount === 1) stopListener = HashProtocol.startListener(history.transitionTo, pathCoder, queryKey);

	    var unlisten = before ? history.listenBefore(listener) : history.listen(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopListener();
	    };
	  };

	  var listenBefore = function listenBefore(listener) {
	    return startListener(listener, true);
	  };

	  var listen = function listen(listener) {
	    return startListener(listener, false);
	  };

	  var goIsSupportedWithoutReload = (0, _DOMUtils.supportsGoWithoutReloadUsingHash)();

	  var go = function go(n) {
	    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(goIsSupportedWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : void 0;

	    history.go(n);
	  };

	  var createHref = function createHref(path) {
	    return '#' + pathCoder.encodePath(history.createHref(path));
	  };

	  return _extends({}, history, {
	    listenBefore: listenBefore,
	    listen: listen,
	    go: go,
	    createHref: createHref
	  });
	};

	exports.default = createHashHistory;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.replaceLocation = exports.pushLocation = exports.startListener = exports.getCurrentLocation = exports.go = exports.getUserConfirmation = undefined;

	var _BrowserProtocol = __webpack_require__(226);

	Object.defineProperty(exports, 'getUserConfirmation', {
	  enumerable: true,
	  get: function get() {
	    return _BrowserProtocol.getUserConfirmation;
	  }
	});
	Object.defineProperty(exports, 'go', {
	  enumerable: true,
	  get: function get() {
	    return _BrowserProtocol.go;
	  }
	});

	var _warning = __webpack_require__(187);

	var _warning2 = _interopRequireDefault(_warning);

	var _LocationUtils = __webpack_require__(215);

	var _DOMUtils = __webpack_require__(227);

	var _DOMStateStorage = __webpack_require__(228);

	var _PathUtils = __webpack_require__(216);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var HashChangeEvent = 'hashchange';

	var getHashPath = function getHashPath() {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  var href = window.location.href;
	  var hashIndex = href.indexOf('#');
	  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
	};

	var pushHashPath = function pushHashPath(path) {
	  return window.location.hash = path;
	};

	var replaceHashPath = function replaceHashPath(path) {
	  var hashIndex = window.location.href.indexOf('#');

	  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
	};

	var getCurrentLocation = exports.getCurrentLocation = function getCurrentLocation(pathCoder, queryKey) {
	  var path = pathCoder.decodePath(getHashPath());
	  var key = (0, _PathUtils.getQueryStringValueFromPath)(path, queryKey);

	  var state = void 0;
	  if (key) {
	    path = (0, _PathUtils.stripQueryStringValueFromPath)(path, queryKey);
	    state = (0, _DOMStateStorage.readState)(key);
	  }

	  var init = (0, _PathUtils.parsePath)(path);
	  init.state = state;

	  return (0, _LocationUtils.createLocation)(init, undefined, key);
	};

	var prevLocation = void 0;

	var startListener = exports.startListener = function startListener(listener, pathCoder, queryKey) {
	  var handleHashChange = function handleHashChange() {
	    var path = getHashPath();
	    var encodedPath = pathCoder.encodePath(path);

	    if (path !== encodedPath) {
	      // Always be sure we have a properly-encoded hash.
	      replaceHashPath(encodedPath);
	    } else {
	      var currentLocation = getCurrentLocation(pathCoder, queryKey);

	      if (prevLocation && currentLocation.key && prevLocation.key === currentLocation.key) return; // Ignore extraneous hashchange events

	      prevLocation = currentLocation;

	      listener(currentLocation);
	    }
	  };

	  // Ensure the hash is encoded properly.
	  var path = getHashPath();
	  var encodedPath = pathCoder.encodePath(path);

	  if (path !== encodedPath) replaceHashPath(encodedPath);

	  (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);

	  return function () {
	    return (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
	  };
	};

	var updateLocation = function updateLocation(location, pathCoder, queryKey, updateHash) {
	  var state = location.state;
	  var key = location.key;


	  var path = pathCoder.encodePath((0, _PathUtils.createPath)(location));

	  if (state !== undefined) {
	    path = (0, _PathUtils.addQueryStringValueToPath)(path, queryKey, key);
	    (0, _DOMStateStorage.saveState)(key, state);
	  }

	  prevLocation = location;

	  updateHash(path);
	};

	var pushLocation = exports.pushLocation = function pushLocation(location, pathCoder, queryKey) {
	  return updateLocation(location, pathCoder, queryKey, function (path) {
	    if (getHashPath() !== path) {
	      pushHashPath(path);
	    } else {
	      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'You cannot PUSH the same path using hash history') : void 0;
	    }
	  });
	};

	var replaceLocation = exports.replaceLocation = function replaceLocation(location, pathCoder, queryKey) {
	  return updateLocation(location, pathCoder, queryKey, function (path) {
	    if (getHashPath() !== path) replaceHashPath(path);
	  });
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.UserComponent = exports.UserField = exports.SocialLoginButton = exports.SocialLoginLink = exports.VerifyEmailView = exports.ChangePasswordForm = exports.ResetPasswordForm = exports.RegistrationForm = exports.UserProfileForm = exports.LoginForm = exports.LogoutLink = exports.LoginLink = exports.NotAuthenticated = exports.Authenticated = exports.AuthenticatedRoute = exports.LogoutRoute = exports.LoginRoute = exports.HomeRoute = exports.constants = exports.actions = exports.Router = exports.context = undefined;
		exports.init = init;

		var _app = __webpack_require__(1);

		var _app2 = _interopRequireDefault(_app);

		var _context2 = __webpack_require__(22);

		var _context3 = _interopRequireDefault(_context2);

		var _Router2 = __webpack_require__(31);

		var _Router3 = _interopRequireDefault(_Router2);

		var _UserActions = __webpack_require__(21);

		var _UserActions2 = _interopRequireDefault(_UserActions);

		var _UserConstants = __webpack_require__(16);

		var _UserConstants2 = _interopRequireDefault(_UserConstants);

		var _HomeRoute2 = __webpack_require__(88);

		var _HomeRoute3 = _interopRequireDefault(_HomeRoute2);

		var _LoginRoute2 = __webpack_require__(89);

		var _LoginRoute3 = _interopRequireDefault(_LoginRoute2);

		var _LogoutRoute2 = __webpack_require__(90);

		var _LogoutRoute3 = _interopRequireDefault(_LogoutRoute2);

		var _AuthenticatedRoute2 = __webpack_require__(91);

		var _AuthenticatedRoute3 = _interopRequireDefault(_AuthenticatedRoute2);

		var _Authenticated2 = __webpack_require__(92);

		var _Authenticated3 = _interopRequireDefault(_Authenticated2);

		var _NotAuthenticated2 = __webpack_require__(93);

		var _NotAuthenticated3 = _interopRequireDefault(_NotAuthenticated2);

		var _LoginLink2 = __webpack_require__(94);

		var _LoginLink3 = _interopRequireDefault(_LoginLink2);

		var _LogoutLink2 = __webpack_require__(95);

		var _LogoutLink3 = _interopRequireDefault(_LogoutLink2);

		var _LoginForm2 = __webpack_require__(96);

		var _LoginForm3 = _interopRequireDefault(_LoginForm2);

		var _UserProfileForm2 = __webpack_require__(100);

		var _UserProfileForm3 = _interopRequireDefault(_UserProfileForm2);

		var _RegistrationForm2 = __webpack_require__(101);

		var _RegistrationForm3 = _interopRequireDefault(_RegistrationForm2);

		var _ResetPasswordForm2 = __webpack_require__(102);

		var _ResetPasswordForm3 = _interopRequireDefault(_ResetPasswordForm2);

		var _ChangePasswordForm2 = __webpack_require__(103);

		var _ChangePasswordForm3 = _interopRequireDefault(_ChangePasswordForm2);

		var _VerifyEmailView2 = __webpack_require__(104);

		var _VerifyEmailView3 = _interopRequireDefault(_VerifyEmailView2);

		var _SocialLoginLink2 = __webpack_require__(99);

		var _SocialLoginLink3 = _interopRequireDefault(_SocialLoginLink2);

		var _SocialLoginButton2 = __webpack_require__(98);

		var _SocialLoginButton3 = _interopRequireDefault(_SocialLoginButton2);

		var _UserField2 = __webpack_require__(105);

		var _UserField3 = _interopRequireDefault(_UserField2);

		var _UserComponent2 = __webpack_require__(106);

		var _UserComponent3 = _interopRequireDefault(_UserComponent2);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		exports.context = _context3.default;
		exports.Router = _Router3.default;
		exports.actions = _UserActions2.default;
		exports.constants = _UserConstants2.default;
		exports.HomeRoute = _HomeRoute3.default;
		exports.LoginRoute = _LoginRoute3.default;
		exports.LogoutRoute = _LogoutRoute3.default;
		exports.AuthenticatedRoute = _AuthenticatedRoute3.default;
		exports.Authenticated = _Authenticated3.default;
		exports.NotAuthenticated = _NotAuthenticated3.default;
		exports.LoginLink = _LoginLink3.default;
		exports.LogoutLink = _LogoutLink3.default;
		exports.LoginForm = _LoginForm3.default;
		exports.UserProfileForm = _UserProfileForm3.default;
		exports.RegistrationForm = _RegistrationForm3.default;
		exports.ResetPasswordForm = _ResetPasswordForm3.default;
		exports.ChangePasswordForm = _ChangePasswordForm3.default;
		exports.VerifyEmailView = _VerifyEmailView3.default;
		exports.SocialLoginLink = _SocialLoginLink3.default;
		exports.SocialLoginButton = _SocialLoginButton3.default;
		exports.UserField = _UserField3.default;
		exports.UserComponent = _UserComponent3.default;

		// When not using ES6, enable people to use ReactStormpath.init()
		// instead of ReactStormpath.default.init().

		function init() {
		  _app2.default.init.apply(_app2.default, arguments);
		};

		exports.default = _app2.default;

	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _events = __webpack_require__(2);

		var _services = __webpack_require__(3);

		var _constants = __webpack_require__(15);

		var _stores = __webpack_require__(18);

		var _dispatchers = __webpack_require__(24);

		var _utils = __webpack_require__(5);

		var _utils2 = _interopRequireDefault(_utils);

		var _context = __webpack_require__(22);

		var _context2 = _interopRequireDefault(_context);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var App = function (_EventEmitter) {
		  _inherits(App, _EventEmitter);

		  function App() {
		    _classCallCheck(this, App);

		    var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this));

		    _this.initialized = false;
		    return _this;
		  }

		  _createClass(App, [{
		    key: 'isInitialized',
		    value: function isInitialized() {
		      return this.initialized;
		    }
		  }, {
		    key: 'init',
		    value: function init(options) {
		      options = options || {};

		      if (this.isInitialized()) {
		        throw new Error('React Stormpath already initialized.');
		      }

		      this.initialized = true;

		      var sessionStore = new _stores.SessionStore();
		      var userService = new _services.UserService(options.endpoints);
		      var userStore = new _stores.UserStore(userService, sessionStore);

		      _context2.default.setSessionStore(sessionStore);
		      _context2.default.setUserStore(userStore);

		      // If there's no specified dispatcher, then default to flux.
		      var dispatcher = options.dispatcher || { type: 'flux' };

		      var userReducer = function userReducer(payload) {
		        switch (payload.type) {
		          case _constants.UserConstants.USER_LOGIN:
		            userStore.login(payload.options, payload.callback);
		            break;
		          case _constants.UserConstants.USER_LOGOUT:
		            userStore.logout(payload.callback);
		            break;
		          case _constants.UserConstants.USER_REGISTER:
		            userStore.register(payload.options, payload.callback);
		            break;
		          case _constants.UserConstants.USER_FORGOT_PASSWORD:
		            userStore.forgotPassword(payload.options, payload.callback);
		            break;
		          case _constants.UserConstants.USER_CHANGE_PASSWORD:
		            userStore.changePassword(payload.options, payload.callback);
		            break;
		          case _constants.UserConstants.USER_UPDATE_PROFILE:
		            userStore.updateProfile(payload.options.data, payload.callback);
		            break;
		          case _constants.UserConstants.USER_VERIFY_EMAIL:
		            userStore.verifyEmail(payload.options.spToken, payload.callback);
		            break;
		        }
		        return true;
		      };

		      switch (dispatcher.type) {
		        case 'flux':
		          dispatcher = new _dispatchers.FluxDispatcher(userReducer);
		          break;
		        case 'redux':
		          dispatcher = new _dispatchers.ReduxDispatcher(userReducer, dispatcher.store);
		          break;
		        default:
		          throw new Error('Stormpath SDK: Invalid dispatcher type ' + dispatcher.type);
		      }

		      _context2.default.setDispatcher(dispatcher);
		    }
		  }]);

		  return App;
		}(_events.EventEmitter);

		exports.default = new App();

	/***/ },
	/* 2 */
	/***/ function(module, exports) {

		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		function EventEmitter() {
		  this._events = this._events || {};
		  this._maxListeners = this._maxListeners || undefined;
		}
		module.exports = EventEmitter;

		// Backwards-compat with node 0.10.x
		EventEmitter.EventEmitter = EventEmitter;

		EventEmitter.prototype._events = undefined;
		EventEmitter.prototype._maxListeners = undefined;

		// By default EventEmitters will print a warning if more than 10 listeners are
		// added to it. This is a useful default which helps finding memory leaks.
		EventEmitter.defaultMaxListeners = 10;

		// Obviously not all Emitters should be limited to 10. This function allows
		// that to be increased. Set to zero for unlimited.
		EventEmitter.prototype.setMaxListeners = function(n) {
		  if (!isNumber(n) || n < 0 || isNaN(n))
		    throw TypeError('n must be a positive number');
		  this._maxListeners = n;
		  return this;
		};

		EventEmitter.prototype.emit = function(type) {
		  var er, handler, len, args, i, listeners;

		  if (!this._events)
		    this._events = {};

		  // If there is no 'error' event listener then throw.
		  if (type === 'error') {
		    if (!this._events.error ||
		        (isObject(this._events.error) && !this._events.error.length)) {
		      er = arguments[1];
		      if (er instanceof Error) {
		        throw er; // Unhandled 'error' event
		      } else {
		        // At least give some kind of context to the user
		        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
		        err.context = er;
		        throw err;
		      }
		    }
		  }

		  handler = this._events[type];

		  if (isUndefined(handler))
		    return false;

		  if (isFunction(handler)) {
		    switch (arguments.length) {
		      // fast cases
		      case 1:
		        handler.call(this);
		        break;
		      case 2:
		        handler.call(this, arguments[1]);
		        break;
		      case 3:
		        handler.call(this, arguments[1], arguments[2]);
		        break;
		      // slower
		      default:
		        args = Array.prototype.slice.call(arguments, 1);
		        handler.apply(this, args);
		    }
		  } else if (isObject(handler)) {
		    args = Array.prototype.slice.call(arguments, 1);
		    listeners = handler.slice();
		    len = listeners.length;
		    for (i = 0; i < len; i++)
		      listeners[i].apply(this, args);
		  }

		  return true;
		};

		EventEmitter.prototype.addListener = function(type, listener) {
		  var m;

		  if (!isFunction(listener))
		    throw TypeError('listener must be a function');

		  if (!this._events)
		    this._events = {};

		  // To avoid recursion in the case that type === "newListener"! Before
		  // adding it to the listeners, first emit "newListener".
		  if (this._events.newListener)
		    this.emit('newListener', type,
		              isFunction(listener.listener) ?
		              listener.listener : listener);

		  if (!this._events[type])
		    // Optimize the case of one listener. Don't need the extra array object.
		    this._events[type] = listener;
		  else if (isObject(this._events[type]))
		    // If we've already got an array, just append.
		    this._events[type].push(listener);
		  else
		    // Adding the second element, need to change to array.
		    this._events[type] = [this._events[type], listener];

		  // Check for listener leak
		  if (isObject(this._events[type]) && !this._events[type].warned) {
		    if (!isUndefined(this._maxListeners)) {
		      m = this._maxListeners;
		    } else {
		      m = EventEmitter.defaultMaxListeners;
		    }

		    if (m && m > 0 && this._events[type].length > m) {
		      this._events[type].warned = true;
		      console.error('(node) warning: possible EventEmitter memory ' +
		                    'leak detected. %d listeners added. ' +
		                    'Use emitter.setMaxListeners() to increase limit.',
		                    this._events[type].length);
		      if (typeof console.trace === 'function') {
		        // not supported in IE 10
		        console.trace();
		      }
		    }
		  }

		  return this;
		};

		EventEmitter.prototype.on = EventEmitter.prototype.addListener;

		EventEmitter.prototype.once = function(type, listener) {
		  if (!isFunction(listener))
		    throw TypeError('listener must be a function');

		  var fired = false;

		  function g() {
		    this.removeListener(type, g);

		    if (!fired) {
		      fired = true;
		      listener.apply(this, arguments);
		    }
		  }

		  g.listener = listener;
		  this.on(type, g);

		  return this;
		};

		// emits a 'removeListener' event iff the listener was removed
		EventEmitter.prototype.removeListener = function(type, listener) {
		  var list, position, length, i;

		  if (!isFunction(listener))
		    throw TypeError('listener must be a function');

		  if (!this._events || !this._events[type])
		    return this;

		  list = this._events[type];
		  length = list.length;
		  position = -1;

		  if (list === listener ||
		      (isFunction(list.listener) && list.listener === listener)) {
		    delete this._events[type];
		    if (this._events.removeListener)
		      this.emit('removeListener', type, listener);

		  } else if (isObject(list)) {
		    for (i = length; i-- > 0;) {
		      if (list[i] === listener ||
		          (list[i].listener && list[i].listener === listener)) {
		        position = i;
		        break;
		      }
		    }

		    if (position < 0)
		      return this;

		    if (list.length === 1) {
		      list.length = 0;
		      delete this._events[type];
		    } else {
		      list.splice(position, 1);
		    }

		    if (this._events.removeListener)
		      this.emit('removeListener', type, listener);
		  }

		  return this;
		};

		EventEmitter.prototype.removeAllListeners = function(type) {
		  var key, listeners;

		  if (!this._events)
		    return this;

		  // not listening for removeListener, no need to emit
		  if (!this._events.removeListener) {
		    if (arguments.length === 0)
		      this._events = {};
		    else if (this._events[type])
		      delete this._events[type];
		    return this;
		  }

		  // emit removeListener for all listeners on all events
		  if (arguments.length === 0) {
		    for (key in this._events) {
		      if (key === 'removeListener') continue;
		      this.removeAllListeners(key);
		    }
		    this.removeAllListeners('removeListener');
		    this._events = {};
		    return this;
		  }

		  listeners = this._events[type];

		  if (isFunction(listeners)) {
		    this.removeListener(type, listeners);
		  } else if (listeners) {
		    // LIFO order
		    while (listeners.length)
		      this.removeListener(type, listeners[listeners.length - 1]);
		  }
		  delete this._events[type];

		  return this;
		};

		EventEmitter.prototype.listeners = function(type) {
		  var ret;
		  if (!this._events || !this._events[type])
		    ret = [];
		  else if (isFunction(this._events[type]))
		    ret = [this._events[type]];
		  else
		    ret = this._events[type].slice();
		  return ret;
		};

		EventEmitter.prototype.listenerCount = function(type) {
		  if (this._events) {
		    var evlistener = this._events[type];

		    if (isFunction(evlistener))
		      return 1;
		    else if (evlistener)
		      return evlistener.length;
		  }
		  return 0;
		};

		EventEmitter.listenerCount = function(emitter, type) {
		  return emitter.listenerCount(type);
		};

		function isFunction(arg) {
		  return typeof arg === 'function';
		}

		function isNumber(arg) {
		  return typeof arg === 'number';
		}

		function isObject(arg) {
		  return typeof arg === 'object' && arg !== null;
		}

		function isUndefined(arg) {
		  return arg === void 0;
		}


	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.RequestPool = exports.BaseService = exports.UserService = undefined;

		var _UserService2 = __webpack_require__(4);

		var _UserService3 = _interopRequireDefault(_UserService2);

		var _BaseService2 = __webpack_require__(13);

		var _BaseService3 = _interopRequireDefault(_BaseService2);

		var _RequestPool2 = __webpack_require__(14);

		var _RequestPool3 = _interopRequireDefault(_RequestPool2);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		exports.UserService = _UserService3.default;
		exports.BaseService = _BaseService3.default;
		exports.RequestPool = _RequestPool3.default;

	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _utils = __webpack_require__(5);

		var _utils2 = _interopRequireDefault(_utils);

		var _BaseService2 = __webpack_require__(13);

		var _BaseService3 = _interopRequireDefault(_BaseService2);

		var _RequestPool = __webpack_require__(14);

		var _RequestPool2 = _interopRequireDefault(_RequestPool);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var UserService = function (_BaseService) {
		  _inherits(UserService, _BaseService);

		  function UserService(endpoints) {
		    _classCallCheck(this, UserService);

		    var defaultEndpoints = {
		      me: '/me',
		      login: '/login',
		      register: '/register',
		      verifyEmail: '/verify',
		      forgotPassword: '/forgot',
		      changePassword: '/change',
		      logout: '/logout'
		    };

		    var _this = _possibleConstructorReturn(this, (UserService.__proto__ || Object.getPrototypeOf(UserService)).call(this, _utils2.default.mergeObjects(defaultEndpoints, endpoints)));

		    _this.meRequestPool = new _RequestPool2.default();
		    return _this;
		  }

		  _createClass(UserService, [{
		    key: '_unwrapAccountResult',
		    value: function _unwrapAccountResult(callback) {
		      return function (err, result) {
		        if (err) {
		          return callback(err);
		        }

		        callback(null, result.account || result || {});
		      };
		    }
		  }, {
		    key: 'me',
		    value: function me(callback) {
		      var _this2 = this;

		      this.meRequestPool.request(function (resultCallback) {
		        _this2._makeRequest('get', _this2.endpoints.me, null, _this2._unwrapAccountResult(resultCallback));
		      }, callback);
		    }
		  }, {
		    key: 'updateProfile',
		    value: function updateProfile(data, callback) {
		      this._makeRequest('post', this.endpoints.me, data, callback);
		    }
		  }, {
		    key: 'getLoginViewData',
		    value: function getLoginViewData(callback) {
		      this._makeRequest('get', this.endpoints.login, null, callback);
		    }
		  }, {
		    key: 'login',
		    value: function login(options, callback) {
		      this._makeRequest('post', this.endpoints.login, options, this._unwrapAccountResult(callback));
		    }
		  }, {
		    key: 'register',
		    value: function register(options, callback) {
		      this._makeRequest('post', this.endpoints.register, options, this._unwrapAccountResult(callback));
		    }
		  }, {
		    key: 'getRegisterViewData',
		    value: function getRegisterViewData(callback) {
		      this._makeRequest('get', this.endpoints.register, null, callback);
		    }
		  }, {
		    key: 'verifyEmail',
		    value: function verifyEmail(spToken, callback) {
		      this._makeRequest('get', this.endpoints.verifyEmail + '?sptoken=' + encodeURIComponent(spToken), null, callback);
		    }
		  }, {
		    key: 'forgotPassword',
		    value: function forgotPassword(options, callback) {
		      this._makeRequest('post', this.endpoints.forgotPassword, options, callback);
		    }
		  }, {
		    key: 'changePassword',
		    value: function changePassword(options, callback) {
		      this._makeRequest('post', this.endpoints.changePassword, options, callback);
		    }
		  }, {
		    key: 'logout',
		    value: function logout(callback) {
		      this._makeRequest('post', this.endpoints.logout, null, callback);
		    }
		  }]);

		  return UserService;
		}(_BaseService3.default);

		exports.default = UserService;

	/***/ },
	/* 5 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _url = __webpack_require__(6);

		var _url2 = _interopRequireDefault(_url);

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		var Utils = function () {
		  function Utils() {
		    _classCallCheck(this, Utils);

		    this.nopElement = _react2.default.createElement('span', null);
		  }

		  _createClass(Utils, [{
		    key: 'uuid',
		    value: function uuid() {
		      var s4 = function s4() {
		        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
		      };

		      return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
		    }
		  }, {
		    key: 'containsWord',
		    value: function containsWord(testWord, words) {
		      testWord = testWord.toLowerCase();

		      for (var i = 0; i < words.length; i++) {
		        var word = words[i].toLowerCase();
		        if (testWord.indexOf(word) > -1) {
		          return true;
		        }
		      }

		      return false;
		    }
		  }, {
		    key: 'takeProp',
		    value: function takeProp(source) {
		      for (var _len = arguments.length, fields = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		        fields[_key - 1] = arguments[_key];
		      }

		      for (var i = 0; i < fields.length; i++) {
		        var fieldName = fields[i];
		        if (fieldName in source) {
		          return source[fieldName];
		        }
		      }

		      return undefined;
		    }
		  }, {
		    key: 'excludeProps',
		    value: function excludeProps(exclude, source) {
		      var result = {};

		      if (source) {
		        for (var key in source) {
		          if (exclude.indexOf(key) === -1) {
		            result[key] = source[key];
		          }
		        }
		      }

		      return result;
		    }
		  }, {
		    key: 'translateProviderIdToName',
		    value: function translateProviderIdToName(providerId) {
		      var providerNames = {
		        github: 'GitHub',
		        linkedin: 'LinkedIn'
		      };

		      var newName = providerNames[providerId];

		      if (!newName) {
		        newName = providerId[0].toUpperCase() + providerId.slice(1);
		      }

		      return newName;
		    }
		  }, {
		    key: 'encodeQueryString',
		    value: function encodeQueryString(query) {
		      var result = '';

		      for (var key in query) {
		        if (result !== '') {
		          result += '&';
		        }
		        result += key + '=' + encodeURIComponent(query[key]);
		      }

		      return result;
		    }
		  }, {
		    key: 'deepForEach',
		    value: function deepForEach(node, handler) {
		      handler(node);
		      if (node.props.children) {
		        this.forEachChild(node.props.children, handler, node);
		      }
		    }
		  }, {
		    key: 'forEachChild',
		    value: function forEachChild(children, handler, parent) {
		      var _this = this;

		      _react2.default.Children.forEach(children, function (child) {
		        handler(child, parent);

		        if (child.props && child.props.children) {
		          _this.forEachChild(child.props.children, handler, child);
		        }
		      });
		    }
		  }, {
		    key: 'buildElementTree',
		    value: function buildElementTree(element, optionsFactory, elementFactory, parent) {
		      var _this2 = this;

		      var newChildren = undefined;

		      var newElement = elementFactory && elementFactory(element, parent) || element;
		      var newOptions = optionsFactory && optionsFactory(element, parent) || {};

		      if (newElement !== this.nopElement && newElement.props && newElement.props.children) {
		        newChildren = _react2.default.Children.map(newElement.props.children, function (childElement) {
		          if (!_react2.default.isValidElement(childElement)) {
		            return elementFactory(childElement, parent);
		          }
		          return _this2.buildElementTree(childElement, optionsFactory, elementFactory, newElement);
		        });
		      }

		      return _react2.default.cloneElement(newElement, newOptions, newChildren);
		    }
		  }, {
		    key: 'getFormFieldMap',
		    value: function getFormFieldMap(root, handler) {
		      var fields = {};

		      var tryMapField = function tryMapField(field, name, defaultValue) {
		        if (field.props.ignore) {
		          return;
		        }

		        if (field.props.fieldName) {
		          name = elements.props.fieldName;
		        }

		        if (!('name' in fields)) {
		          fields[name] = {
		            element: field,
		            defaultValue: defaultValue
		          };
		        }
		      };

		      this.forEachChild(root, function (child) {
		        if (!child.props) {
		          return;
		        }

		        handler(child, tryMapField.bind(null, child));
		      });

		      var inverseMap = {};
		      var defaultValues = {};

		      for (var key in fields) {
		        var field = fields[key];
		        var element = field.element;
		        var elementType = typeof element.type === 'function' ? element.type.name : element.type;

		        if (!(elementType in inverseMap)) {
		          inverseMap[elementType] = {};
		        }

		        defaultValues[key] = field.defaultValue !== undefined ? field.defaultValue : element.props.value || '';

		        inverseMap[elementType][element.props.name] = {
		          fieldName: key,
		          field: element
		        };
		      }

		      return {
		        defaultValues: defaultValues,
		        inverse: inverseMap
		      };
		    }
		  }, {
		    key: 'getFieldValue',
		    value: function getFieldValue(source, name) {
		      var cursor = source;
		      var segments = name.split('.');

		      for (var i = 0; i < segments.length; i++) {
		        var key = segments[i];

		        if (!(key in cursor)) {
		          return undefined;
		        }

		        cursor = cursor[key];
		      }

		      return cursor;
		    }
		  }, {
		    key: 'setFieldValue',
		    value: function setFieldValue(source, name, value, force) {
		      var ref = source;
		      var segments = name.split('.');

		      for (var i = 0; i < segments.length; i++) {
		        var key = segments[i];

		        if (i === segments.length - 1) {
		          if (!force && key in ref) {
		            return;
		          }

		          ref[key] = value;

		          return;
		        }

		        if (!(key in ref)) {
		          ref[key] = {};
		        }

		        ref = ref[key];
		      }
		    }
		  }, {
		    key: 'makeForm',
		    value: function makeForm(source, fieldMapFn, spIfFn, spBindFn) {
		      var _this3 = this;

		      var root = _react2.default.cloneElement(_react2.default.createElement('div', null), {}, source.props.children);
		      var fieldMap = this.getFormFieldMap(root, fieldMapFn);

		      source.state.fields = source.state.fields || {};

		      for (var key in fieldMap.defaultValues) {
		        this.setFieldValue(source.state.fields, key, fieldMap.defaultValues[key]);
		      }

		      var elementFactory = function elementFactory(element, parent) {
		        if (element.props) {
		          var spIf = _this3.takeProp(element.props, 'spIf', 'data-spIf');

		          if (spIf) {
		            var test = null;
		            var inverted = false;

		            if (spIf[0] === '!') {
		              inverted = true;
		              spIf = spIf.substr(1);
		            }

		            test = spIfFn(spIf, element);

		            if (test !== null) {
		              if (inverted) {
		                test = !test;
		              }

		              if (!test) {
		                return _this3.nopElement;
		              }
		            }
		          }

		          var spBind = _this3.takeProp(element.props, 'spBind', 'data-spBind');

		          if (spBind) {
		            var newElement = spBindFn(spBind, element);
		            if (newElement !== false || newElement) {
		              element = newElement;
		            }
		          }
		        }
		        return element;
		      };

		      var optionsFactory = function optionsFactory(element, parent) {
		        var options = {};

		        if (element.props) {
		          var elementType = typeof element.type === 'function' ? element.type.name : element.type;
		          var elementAttributeName = element.props.name;

		          if (elementType in fieldMap.inverse && elementAttributeName in fieldMap.inverse[elementType]) {
		            var mappedField = fieldMap.inverse[elementType][elementAttributeName];

		            if (elementAttributeName in fieldMap.defaultValues) {
		              options.defaultValue = fieldMap.defaultValues[elementAttributeName];
		            }

		            var originalOnChange = element.props.onChange;
		            options.onChange = function (e) {
		              for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
		                args[_key2 - 1] = arguments[_key2];
		              }

		              options.disabled = source.state.isFormProcessing;
		              _this3.setFieldValue(source.state.fields, mappedField.fieldName, e.target.value, true);

		              // Honor the original onChange event.
		              if (originalOnChange) {
		                originalOnChange.apply(undefined, [e].concat(args));
		              }
		            };
		          }

		          var elementAttributeType = element.props.type;

		          if ((elementType === 'input' || elementType === 'button') && elementAttributeType === 'submit') {
		            options.disabled = source.state.isFormProcessing;
		          }
		        }

		        return options;
		      };

		      return this.buildElementTree(root, optionsFactory, elementFactory);
		    }
		  }, {
		    key: 'clone',
		    value: function clone(value) {
		      return JSON.parse(JSON.stringify(value));
		    }
		  }, {
		    key: 'mergeObjects',
		    value: function mergeObjects(obj1, obj2) {
		      var obj3 = {};

		      if (obj1) {
		        for (var attrname in obj1) {
		          obj3[attrname] = obj1[attrname];
		        }
		      }

		      if (obj2) {
		        for (var attrname in obj2) {
		          obj3[attrname] = obj2[attrname];
		        }
		      }

		      return obj3;
		    }
		  }, {
		    key: 'isRelativeUri',
		    value: function isRelativeUri(uri) {
		      return uri && uri[0] === '/';
		    }
		  }, {
		    key: 'isSameHost',
		    value: function isSameHost(a, b) {
		      var urlA = _url2.default.parse(a);

		      if (!urlA) {
		        return false;
		      }

		      var urlB = _url2.default.parse(b);

		      if (!urlB) {
		        return false;
		      }

		      return urlA.host === urlB.host;
		    }
		  }, {
		    key: 'logWarning',
		    value: function logWarning(group, message) {
		      if (message === undefined) {
		        message = group;
		        group = undefined;
		      }

		      var result = '[Stormpath SDK]';

		      if (group) {
		        result += ' ' + group;
		      }

		      result += ': ' + message;

		      console.warn(result);
		    }
		  }, {
		    key: 'getEnabledGroups',
		    value: function getEnabledGroups(groups) {
		      var enabledGroups = {};

		      if (groups && groups.items) {
		        groups.items.forEach(function (item) {
		          if (item.status === 'ENABLED') {
		            var name = item.name;

		            if (name.indexOf(' ') !== -1) {
		              name = name.replace(/ /g, '_');
		            }

		            enabledGroups[name] = true;
		          }
		        });
		      }

		      return enabledGroups;
		    }
		  }, {
		    key: 'makePredicateFunction',
		    value: function makePredicateFunction(statement) {
		      return new Function('\n      var scope = arguments[0];\n\n      var maskingScope = {};\n\n      for (var key in window) {\n        maskingScope[key] = undefined;\n      }\n\n      for (var key in scope) {\n        maskingScope[key] = scope[key];\n      }\n\n      with (maskingScope) {\n        return (' + statement + ');\n      }\n    ');
		    }
		  }, {
		    key: 'groupsMatchExpression',
		    value: function groupsMatchExpression(groups, expression) {
		      if (!groups) {
		        return false;
		      }

		      var scope = JSON.parse(JSON.stringify(groups));
		      var expressionFn = this.makePredicateFunction(expression);

		      expression.match(/(\w+)/gmi).forEach(function (wordMatch) {
		        if (!(wordMatch in scope)) {
		          scope[wordMatch] = false;
		        }
		      });

		      return expressionFn(scope);
		    }
		  }, {
		    key: 'isArray',
		    value: function isArray(object) {
		      var nativeIsArray = Array.isArray;
		      var toString = Object.prototype.toString;
		      return nativeIsArray(object) || toString.call(object) === '[object Array]';
		    }
		  }, {
		    key: 'enforceRootElement',
		    value: function enforceRootElement(object, props) {
		      var newObject = undefined;

		      if (typeof object === 'string' || this.isArray(object)) {
		        if (!props) {
		          props = {};
		        }

		        if (!props.style) {
		          props.style = {};
		        }

		        props.style.display = 'inline-block';

		        newObject = _react2.default.createElement(
		          'div',
		          props,
		          object
		        );
		      } else {
		        var newProps = props;
		        var newChildren = [];

		        if (object.props) {
		          for (var key in object.props) {
		            var value = object.props[key];;
		            if (key === 'children') {
		              newChildren = value;
		            } else {
		              newProps[key] = value;
		            }
		          }
		        }

		        newObject = _react2.default.cloneElement(object, newProps, newChildren);
		      }

		      return newObject;
		    }
		  }]);

		  return Utils;
		}();

		exports.default = new Utils();

	/***/ },
	/* 6 */
	/***/ function(module, exports, __webpack_require__) {

		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		var punycode = __webpack_require__(7);

		exports.parse = urlParse;
		exports.resolve = urlResolve;
		exports.resolveObject = urlResolveObject;
		exports.format = urlFormat;

		exports.Url = Url;

		function Url() {
		  this.protocol = null;
		  this.slashes = null;
		  this.auth = null;
		  this.host = null;
		  this.port = null;
		  this.hostname = null;
		  this.hash = null;
		  this.search = null;
		  this.query = null;
		  this.pathname = null;
		  this.path = null;
		  this.href = null;
		}

		// Reference: RFC 3986, RFC 1808, RFC 2396

		// define these here so at least they only have to be
		// compiled once on the first module load.
		var protocolPattern = /^([a-z0-9.+-]+:)/i,
		    portPattern = /:[0-9]*$/,

		    // RFC 2396: characters reserved for delimiting URLs.
		    // We actually just auto-escape these.
		    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

		    // RFC 2396: characters not allowed for various reasons.
		    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

		    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
		    autoEscape = ['\''].concat(unwise),
		    // Characters that are never ever allowed in a hostname.
		    // Note that any invalid chars are also handled, but these
		    // are the ones that are *expected* to be seen, so we fast-path
		    // them.
		    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
		    hostEndingChars = ['/', '?', '#'],
		    hostnameMaxLen = 255,
		    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
		    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
		    // protocols that can allow "unsafe" and "unwise" chars.
		    unsafeProtocol = {
		      'javascript': true,
		      'javascript:': true
		    },
		    // protocols that never have a hostname.
		    hostlessProtocol = {
		      'javascript': true,
		      'javascript:': true
		    },
		    // protocols that always contain a // bit.
		    slashedProtocol = {
		      'http': true,
		      'https': true,
		      'ftp': true,
		      'gopher': true,
		      'file': true,
		      'http:': true,
		      'https:': true,
		      'ftp:': true,
		      'gopher:': true,
		      'file:': true
		    },
		    querystring = __webpack_require__(9);

		function urlParse(url, parseQueryString, slashesDenoteHost) {
		  if (url && isObject(url) && url instanceof Url) return url;

		  var u = new Url;
		  u.parse(url, parseQueryString, slashesDenoteHost);
		  return u;
		}

		Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
		  if (!isString(url)) {
		    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
		  }

		  var rest = url;

		  // trim before proceeding.
		  // This is to support parse stuff like "  http://foo.com  \n"
		  rest = rest.trim();

		  var proto = protocolPattern.exec(rest);
		  if (proto) {
		    proto = proto[0];
		    var lowerProto = proto.toLowerCase();
		    this.protocol = lowerProto;
		    rest = rest.substr(proto.length);
		  }

		  // figure out if it's got a host
		  // user@server is *always* interpreted as a hostname, and url
		  // resolution will treat //foo/bar as host=foo,path=bar because that's
		  // how the browser resolves relative URLs.
		  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
		    var slashes = rest.substr(0, 2) === '//';
		    if (slashes && !(proto && hostlessProtocol[proto])) {
		      rest = rest.substr(2);
		      this.slashes = true;
		    }
		  }

		  if (!hostlessProtocol[proto] &&
		      (slashes || (proto && !slashedProtocol[proto]))) {

		    // there's a hostname.
		    // the first instance of /, ?, ;, or # ends the host.
		    //
		    // If there is an @ in the hostname, then non-host chars *are* allowed
		    // to the left of the last @ sign, unless some host-ending character
		    // comes *before* the @-sign.
		    // URLs are obnoxious.
		    //
		    // ex:
		    // http://a@b@c/ => user:a@b host:c
		    // http://a@b?@c => user:a host:c path:/?@c

		    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
		    // Review our test case against browsers more comprehensively.

		    // find the first instance of any hostEndingChars
		    var hostEnd = -1;
		    for (var i = 0; i < hostEndingChars.length; i++) {
		      var hec = rest.indexOf(hostEndingChars[i]);
		      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
		        hostEnd = hec;
		    }

		    // at this point, either we have an explicit point where the
		    // auth portion cannot go past, or the last @ char is the decider.
		    var auth, atSign;
		    if (hostEnd === -1) {
		      // atSign can be anywhere.
		      atSign = rest.lastIndexOf('@');
		    } else {
		      // atSign must be in auth portion.
		      // http://a@b/c@d => host:b auth:a path:/c@d
		      atSign = rest.lastIndexOf('@', hostEnd);
		    }

		    // Now we have a portion which is definitely the auth.
		    // Pull that off.
		    if (atSign !== -1) {
		      auth = rest.slice(0, atSign);
		      rest = rest.slice(atSign + 1);
		      this.auth = decodeURIComponent(auth);
		    }

		    // the host is the remaining to the left of the first non-host char
		    hostEnd = -1;
		    for (var i = 0; i < nonHostChars.length; i++) {
		      var hec = rest.indexOf(nonHostChars[i]);
		      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
		        hostEnd = hec;
		    }
		    // if we still have not hit it, then the entire thing is a host.
		    if (hostEnd === -1)
		      hostEnd = rest.length;

		    this.host = rest.slice(0, hostEnd);
		    rest = rest.slice(hostEnd);

		    // pull out port.
		    this.parseHost();

		    // we've indicated that there is a hostname,
		    // so even if it's empty, it has to be present.
		    this.hostname = this.hostname || '';

		    // if hostname begins with [ and ends with ]
		    // assume that it's an IPv6 address.
		    var ipv6Hostname = this.hostname[0] === '[' &&
		        this.hostname[this.hostname.length - 1] === ']';

		    // validate a little.
		    if (!ipv6Hostname) {
		      var hostparts = this.hostname.split(/\./);
		      for (var i = 0, l = hostparts.length; i < l; i++) {
		        var part = hostparts[i];
		        if (!part) continue;
		        if (!part.match(hostnamePartPattern)) {
		          var newpart = '';
		          for (var j = 0, k = part.length; j < k; j++) {
		            if (part.charCodeAt(j) > 127) {
		              // we replace non-ASCII char with a temporary placeholder
		              // we need this to make sure size of hostname is not
		              // broken by replacing non-ASCII by nothing
		              newpart += 'x';
		            } else {
		              newpart += part[j];
		            }
		          }
		          // we test again with ASCII char only
		          if (!newpart.match(hostnamePartPattern)) {
		            var validParts = hostparts.slice(0, i);
		            var notHost = hostparts.slice(i + 1);
		            var bit = part.match(hostnamePartStart);
		            if (bit) {
		              validParts.push(bit[1]);
		              notHost.unshift(bit[2]);
		            }
		            if (notHost.length) {
		              rest = '/' + notHost.join('.') + rest;
		            }
		            this.hostname = validParts.join('.');
		            break;
		          }
		        }
		      }
		    }

		    if (this.hostname.length > hostnameMaxLen) {
		      this.hostname = '';
		    } else {
		      // hostnames are always lower case.
		      this.hostname = this.hostname.toLowerCase();
		    }

		    if (!ipv6Hostname) {
		      // IDNA Support: Returns a puny coded representation of "domain".
		      // It only converts the part of the domain name that
		      // has non ASCII characters. I.e. it dosent matter if
		      // you call it with a domain that already is in ASCII.
		      var domainArray = this.hostname.split('.');
		      var newOut = [];
		      for (var i = 0; i < domainArray.length; ++i) {
		        var s = domainArray[i];
		        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
		            'xn--' + punycode.encode(s) : s);
		      }
		      this.hostname = newOut.join('.');
		    }

		    var p = this.port ? ':' + this.port : '';
		    var h = this.hostname || '';
		    this.host = h + p;
		    this.href += this.host;

		    // strip [ and ] from the hostname
		    // the host field still retains them, though
		    if (ipv6Hostname) {
		      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
		      if (rest[0] !== '/') {
		        rest = '/' + rest;
		      }
		    }
		  }

		  // now rest is set to the post-host stuff.
		  // chop off any delim chars.
		  if (!unsafeProtocol[lowerProto]) {

		    // First, make 100% sure that any "autoEscape" chars get
		    // escaped, even if encodeURIComponent doesn't think they
		    // need to be.
		    for (var i = 0, l = autoEscape.length; i < l; i++) {
		      var ae = autoEscape[i];
		      var esc = encodeURIComponent(ae);
		      if (esc === ae) {
		        esc = escape(ae);
		      }
		      rest = rest.split(ae).join(esc);
		    }
		  }


		  // chop off from the tail first.
		  var hash = rest.indexOf('#');
		  if (hash !== -1) {
		    // got a fragment string.
		    this.hash = rest.substr(hash);
		    rest = rest.slice(0, hash);
		  }
		  var qm = rest.indexOf('?');
		  if (qm !== -1) {
		    this.search = rest.substr(qm);
		    this.query = rest.substr(qm + 1);
		    if (parseQueryString) {
		      this.query = querystring.parse(this.query);
		    }
		    rest = rest.slice(0, qm);
		  } else if (parseQueryString) {
		    // no query string, but parseQueryString still requested
		    this.search = '';
		    this.query = {};
		  }
		  if (rest) this.pathname = rest;
		  if (slashedProtocol[lowerProto] &&
		      this.hostname && !this.pathname) {
		    this.pathname = '/';
		  }

		  //to support http.request
		  if (this.pathname || this.search) {
		    var p = this.pathname || '';
		    var s = this.search || '';
		    this.path = p + s;
		  }

		  // finally, reconstruct the href based on what has been validated.
		  this.href = this.format();
		  return this;
		};

		// format a parsed object into a url string
		function urlFormat(obj) {
		  // ensure it's an object, and not a string url.
		  // If it's an obj, this is a no-op.
		  // this way, you can call url_format() on strings
		  // to clean up potentially wonky urls.
		  if (isString(obj)) obj = urlParse(obj);
		  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
		  return obj.format();
		}

		Url.prototype.format = function() {
		  var auth = this.auth || '';
		  if (auth) {
		    auth = encodeURIComponent(auth);
		    auth = auth.replace(/%3A/i, ':');
		    auth += '@';
		  }

		  var protocol = this.protocol || '',
		      pathname = this.pathname || '',
		      hash = this.hash || '',
		      host = false,
		      query = '';

		  if (this.host) {
		    host = auth + this.host;
		  } else if (this.hostname) {
		    host = auth + (this.hostname.indexOf(':') === -1 ?
		        this.hostname :
		        '[' + this.hostname + ']');
		    if (this.port) {
		      host += ':' + this.port;
		    }
		  }

		  if (this.query &&
		      isObject(this.query) &&
		      Object.keys(this.query).length) {
		    query = querystring.stringify(this.query);
		  }

		  var search = this.search || (query && ('?' + query)) || '';

		  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

		  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
		  // unless they had them to begin with.
		  if (this.slashes ||
		      (!protocol || slashedProtocol[protocol]) && host !== false) {
		    host = '//' + (host || '');
		    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
		  } else if (!host) {
		    host = '';
		  }

		  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
		  if (search && search.charAt(0) !== '?') search = '?' + search;

		  pathname = pathname.replace(/[?#]/g, function(match) {
		    return encodeURIComponent(match);
		  });
		  search = search.replace('#', '%23');

		  return protocol + host + pathname + search + hash;
		};

		function urlResolve(source, relative) {
		  return urlParse(source, false, true).resolve(relative);
		}

		Url.prototype.resolve = function(relative) {
		  return this.resolveObject(urlParse(relative, false, true)).format();
		};

		function urlResolveObject(source, relative) {
		  if (!source) return relative;
		  return urlParse(source, false, true).resolveObject(relative);
		}

		Url.prototype.resolveObject = function(relative) {
		  if (isString(relative)) {
		    var rel = new Url();
		    rel.parse(relative, false, true);
		    relative = rel;
		  }

		  var result = new Url();
		  Object.keys(this).forEach(function(k) {
		    result[k] = this[k];
		  }, this);

		  // hash is always overridden, no matter what.
		  // even href="" will remove it.
		  result.hash = relative.hash;

		  // if the relative url is empty, then there's nothing left to do here.
		  if (relative.href === '') {
		    result.href = result.format();
		    return result;
		  }

		  // hrefs like //foo/bar always cut to the protocol.
		  if (relative.slashes && !relative.protocol) {
		    // take everything except the protocol from relative
		    Object.keys(relative).forEach(function(k) {
		      if (k !== 'protocol')
		        result[k] = relative[k];
		    });

		    //urlParse appends trailing / to urls like http://www.example.com
		    if (slashedProtocol[result.protocol] &&
		        result.hostname && !result.pathname) {
		      result.path = result.pathname = '/';
		    }

		    result.href = result.format();
		    return result;
		  }

		  if (relative.protocol && relative.protocol !== result.protocol) {
		    // if it's a known url protocol, then changing
		    // the protocol does weird things
		    // first, if it's not file:, then we MUST have a host,
		    // and if there was a path
		    // to begin with, then we MUST have a path.
		    // if it is file:, then the host is dropped,
		    // because that's known to be hostless.
		    // anything else is assumed to be absolute.
		    if (!slashedProtocol[relative.protocol]) {
		      Object.keys(relative).forEach(function(k) {
		        result[k] = relative[k];
		      });
		      result.href = result.format();
		      return result;
		    }

		    result.protocol = relative.protocol;
		    if (!relative.host && !hostlessProtocol[relative.protocol]) {
		      var relPath = (relative.pathname || '').split('/');
		      while (relPath.length && !(relative.host = relPath.shift()));
		      if (!relative.host) relative.host = '';
		      if (!relative.hostname) relative.hostname = '';
		      if (relPath[0] !== '') relPath.unshift('');
		      if (relPath.length < 2) relPath.unshift('');
		      result.pathname = relPath.join('/');
		    } else {
		      result.pathname = relative.pathname;
		    }
		    result.search = relative.search;
		    result.query = relative.query;
		    result.host = relative.host || '';
		    result.auth = relative.auth;
		    result.hostname = relative.hostname || relative.host;
		    result.port = relative.port;
		    // to support http.request
		    if (result.pathname || result.search) {
		      var p = result.pathname || '';
		      var s = result.search || '';
		      result.path = p + s;
		    }
		    result.slashes = result.slashes || relative.slashes;
		    result.href = result.format();
		    return result;
		  }

		  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
		      isRelAbs = (
		          relative.host ||
		          relative.pathname && relative.pathname.charAt(0) === '/'
		      ),
		      mustEndAbs = (isRelAbs || isSourceAbs ||
		                    (result.host && relative.pathname)),
		      removeAllDots = mustEndAbs,
		      srcPath = result.pathname && result.pathname.split('/') || [],
		      relPath = relative.pathname && relative.pathname.split('/') || [],
		      psychotic = result.protocol && !slashedProtocol[result.protocol];

		  // if the url is a non-slashed url, then relative
		  // links like ../.. should be able
		  // to crawl up to the hostname, as well.  This is strange.
		  // result.protocol has already been set by now.
		  // Later on, put the first path part into the host field.
		  if (psychotic) {
		    result.hostname = '';
		    result.port = null;
		    if (result.host) {
		      if (srcPath[0] === '') srcPath[0] = result.host;
		      else srcPath.unshift(result.host);
		    }
		    result.host = '';
		    if (relative.protocol) {
		      relative.hostname = null;
		      relative.port = null;
		      if (relative.host) {
		        if (relPath[0] === '') relPath[0] = relative.host;
		        else relPath.unshift(relative.host);
		      }
		      relative.host = null;
		    }
		    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
		  }

		  if (isRelAbs) {
		    // it's absolute.
		    result.host = (relative.host || relative.host === '') ?
		                  relative.host : result.host;
		    result.hostname = (relative.hostname || relative.hostname === '') ?
		                      relative.hostname : result.hostname;
		    result.search = relative.search;
		    result.query = relative.query;
		    srcPath = relPath;
		    // fall through to the dot-handling below.
		  } else if (relPath.length) {
		    // it's relative
		    // throw away the existing file, and take the new path instead.
		    if (!srcPath) srcPath = [];
		    srcPath.pop();
		    srcPath = srcPath.concat(relPath);
		    result.search = relative.search;
		    result.query = relative.query;
		  } else if (!isNullOrUndefined(relative.search)) {
		    // just pull out the search.
		    // like href='?foo'.
		    // Put this after the other two cases because it simplifies the booleans
		    if (psychotic) {
		      result.hostname = result.host = srcPath.shift();
		      //occationaly the auth can get stuck only in host
		      //this especialy happens in cases like
		      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
		      var authInHost = result.host && result.host.indexOf('@') > 0 ?
		                       result.host.split('@') : false;
		      if (authInHost) {
		        result.auth = authInHost.shift();
		        result.host = result.hostname = authInHost.shift();
		      }
		    }
		    result.search = relative.search;
		    result.query = relative.query;
		    //to support http.request
		    if (!isNull(result.pathname) || !isNull(result.search)) {
		      result.path = (result.pathname ? result.pathname : '') +
		                    (result.search ? result.search : '');
		    }
		    result.href = result.format();
		    return result;
		  }

		  if (!srcPath.length) {
		    // no path at all.  easy.
		    // we've already handled the other stuff above.
		    result.pathname = null;
		    //to support http.request
		    if (result.search) {
		      result.path = '/' + result.search;
		    } else {
		      result.path = null;
		    }
		    result.href = result.format();
		    return result;
		  }

		  // if a url ENDs in . or .., then it must get a trailing slash.
		  // however, if it ends in anything else non-slashy,
		  // then it must NOT get a trailing slash.
		  var last = srcPath.slice(-1)[0];
		  var hasTrailingSlash = (
		      (result.host || relative.host) && (last === '.' || last === '..') ||
		      last === '');

		  // strip single dots, resolve double dots to parent dir
		  // if the path tries to go above the root, `up` ends up > 0
		  var up = 0;
		  for (var i = srcPath.length; i >= 0; i--) {
		    last = srcPath[i];
		    if (last == '.') {
		      srcPath.splice(i, 1);
		    } else if (last === '..') {
		      srcPath.splice(i, 1);
		      up++;
		    } else if (up) {
		      srcPath.splice(i, 1);
		      up--;
		    }
		  }

		  // if the path is allowed to go above the root, restore leading ..s
		  if (!mustEndAbs && !removeAllDots) {
		    for (; up--; up) {
		      srcPath.unshift('..');
		    }
		  }

		  if (mustEndAbs && srcPath[0] !== '' &&
		      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
		    srcPath.unshift('');
		  }

		  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
		    srcPath.push('');
		  }

		  var isAbsolute = srcPath[0] === '' ||
		      (srcPath[0] && srcPath[0].charAt(0) === '/');

		  // put the host back
		  if (psychotic) {
		    result.hostname = result.host = isAbsolute ? '' :
		                                    srcPath.length ? srcPath.shift() : '';
		    //occationaly the auth can get stuck only in host
		    //this especialy happens in cases like
		    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
		    var authInHost = result.host && result.host.indexOf('@') > 0 ?
		                     result.host.split('@') : false;
		    if (authInHost) {
		      result.auth = authInHost.shift();
		      result.host = result.hostname = authInHost.shift();
		    }
		  }

		  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

		  if (mustEndAbs && !isAbsolute) {
		    srcPath.unshift('');
		  }

		  if (!srcPath.length) {
		    result.pathname = null;
		    result.path = null;
		  } else {
		    result.pathname = srcPath.join('/');
		  }

		  //to support request.http
		  if (!isNull(result.pathname) || !isNull(result.search)) {
		    result.path = (result.pathname ? result.pathname : '') +
		                  (result.search ? result.search : '');
		  }
		  result.auth = relative.auth || result.auth;
		  result.slashes = result.slashes || relative.slashes;
		  result.href = result.format();
		  return result;
		};

		Url.prototype.parseHost = function() {
		  var host = this.host;
		  var port = portPattern.exec(host);
		  if (port) {
		    port = port[0];
		    if (port !== ':') {
		      this.port = port.substr(1);
		    }
		    host = host.substr(0, host.length - port.length);
		  }
		  if (host) this.hostname = host;
		};

		function isString(arg) {
		  return typeof arg === "string";
		}

		function isObject(arg) {
		  return typeof arg === 'object' && arg !== null;
		}

		function isNull(arg) {
		  return arg === null;
		}
		function isNullOrUndefined(arg) {
		  return  arg == null;
		}


	/***/ },
	/* 7 */
	/***/ function(module, exports, __webpack_require__) {

		var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
		;(function(root) {

			/** Detect free variables */
			var freeExports = typeof exports == 'object' && exports &&
				!exports.nodeType && exports;
			var freeModule = typeof module == 'object' && module &&
				!module.nodeType && module;
			var freeGlobal = typeof global == 'object' && global;
			if (
				freeGlobal.global === freeGlobal ||
				freeGlobal.window === freeGlobal ||
				freeGlobal.self === freeGlobal
			) {
				root = freeGlobal;
			}

			/**
			 * The `punycode` object.
			 * @name punycode
			 * @type Object
			 */
			var punycode,

			/** Highest positive signed 32-bit float value */
			maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

			/** Bootstring parameters */
			base = 36,
			tMin = 1,
			tMax = 26,
			skew = 38,
			damp = 700,
			initialBias = 72,
			initialN = 128, // 0x80
			delimiter = '-', // '\x2D'

			/** Regular expressions */
			regexPunycode = /^xn--/,
			regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
			regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

			/** Error messages */
			errors = {
				'overflow': 'Overflow: input needs wider integers to process',
				'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
				'invalid-input': 'Invalid input'
			},

			/** Convenience shortcuts */
			baseMinusTMin = base - tMin,
			floor = Math.floor,
			stringFromCharCode = String.fromCharCode,

			/** Temporary variable */
			key;

			/*--------------------------------------------------------------------------*/

			/**
			 * A generic error utility function.
			 * @private
			 * @param {String} type The error type.
			 * @returns {Error} Throws a `RangeError` with the applicable error message.
			 */
			function error(type) {
				throw RangeError(errors[type]);
			}

			/**
			 * A generic `Array#map` utility function.
			 * @private
			 * @param {Array} array The array to iterate over.
			 * @param {Function} callback The function that gets called for every array
			 * item.
			 * @returns {Array} A new array of values returned by the callback function.
			 */
			function map(array, fn) {
				var length = array.length;
				var result = [];
				while (length--) {
					result[length] = fn(array[length]);
				}
				return result;
			}

			/**
			 * A simple `Array#map`-like wrapper to work with domain name strings or email
			 * addresses.
			 * @private
			 * @param {String} domain The domain name or email address.
			 * @param {Function} callback The function that gets called for every
			 * character.
			 * @returns {Array} A new string of characters returned by the callback
			 * function.
			 */
			function mapDomain(string, fn) {
				var parts = string.split('@');
				var result = '';
				if (parts.length > 1) {
					// In email addresses, only the domain name should be punycoded. Leave
					// the local part (i.e. everything up to `@`) intact.
					result = parts[0] + '@';
					string = parts[1];
				}
				// Avoid `split(regex)` for IE8 compatibility. See #17.
				string = string.replace(regexSeparators, '\x2E');
				var labels = string.split('.');
				var encoded = map(labels, fn).join('.');
				return result + encoded;
			}

			/**
			 * Creates an array containing the numeric code points of each Unicode
			 * character in the string. While JavaScript uses UCS-2 internally,
			 * this function will convert a pair of surrogate halves (each of which
			 * UCS-2 exposes as separate characters) into a single code point,
			 * matching UTF-16.
			 * @see `punycode.ucs2.encode`
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode.ucs2
			 * @name decode
			 * @param {String} string The Unicode input string (UCS-2).
			 * @returns {Array} The new array of code points.
			 */
			function ucs2decode(string) {
				var output = [],
				    counter = 0,
				    length = string.length,
				    value,
				    extra;
				while (counter < length) {
					value = string.charCodeAt(counter++);
					if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
						// high surrogate, and there is a next character
						extra = string.charCodeAt(counter++);
						if ((extra & 0xFC00) == 0xDC00) { // low surrogate
							output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
						} else {
							// unmatched surrogate; only append this code unit, in case the next
							// code unit is the high surrogate of a surrogate pair
							output.push(value);
							counter--;
						}
					} else {
						output.push(value);
					}
				}
				return output;
			}

			/**
			 * Creates a string based on an array of numeric code points.
			 * @see `punycode.ucs2.decode`
			 * @memberOf punycode.ucs2
			 * @name encode
			 * @param {Array} codePoints The array of numeric code points.
			 * @returns {String} The new Unicode string (UCS-2).
			 */
			function ucs2encode(array) {
				return map(array, function(value) {
					var output = '';
					if (value > 0xFFFF) {
						value -= 0x10000;
						output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
						value = 0xDC00 | value & 0x3FF;
					}
					output += stringFromCharCode(value);
					return output;
				}).join('');
			}

			/**
			 * Converts a basic code point into a digit/integer.
			 * @see `digitToBasic()`
			 * @private
			 * @param {Number} codePoint The basic numeric code point value.
			 * @returns {Number} The numeric value of a basic code point (for use in
			 * representing integers) in the range `0` to `base - 1`, or `base` if
			 * the code point does not represent a value.
			 */
			function basicToDigit(codePoint) {
				if (codePoint - 48 < 10) {
					return codePoint - 22;
				}
				if (codePoint - 65 < 26) {
					return codePoint - 65;
				}
				if (codePoint - 97 < 26) {
					return codePoint - 97;
				}
				return base;
			}

			/**
			 * Converts a digit/integer into a basic code point.
			 * @see `basicToDigit()`
			 * @private
			 * @param {Number} digit The numeric value of a basic code point.
			 * @returns {Number} The basic code point whose value (when used for
			 * representing integers) is `digit`, which needs to be in the range
			 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
			 * used; else, the lowercase form is used. The behavior is undefined
			 * if `flag` is non-zero and `digit` has no uppercase form.
			 */
			function digitToBasic(digit, flag) {
				//  0..25 map to ASCII a..z or A..Z
				// 26..35 map to ASCII 0..9
				return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
			}

			/**
			 * Bias adaptation function as per section 3.4 of RFC 3492.
			 * http://tools.ietf.org/html/rfc3492#section-3.4
			 * @private
			 */
			function adapt(delta, numPoints, firstTime) {
				var k = 0;
				delta = firstTime ? floor(delta / damp) : delta >> 1;
				delta += floor(delta / numPoints);
				for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
					delta = floor(delta / baseMinusTMin);
				}
				return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
			}

			/**
			 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
			 * symbols.
			 * @memberOf punycode
			 * @param {String} input The Punycode string of ASCII-only symbols.
			 * @returns {String} The resulting string of Unicode symbols.
			 */
			function decode(input) {
				// Don't use UCS-2
				var output = [],
				    inputLength = input.length,
				    out,
				    i = 0,
				    n = initialN,
				    bias = initialBias,
				    basic,
				    j,
				    index,
				    oldi,
				    w,
				    k,
				    digit,
				    t,
				    /** Cached calculation results */
				    baseMinusT;

				// Handle the basic code points: let `basic` be the number of input code
				// points before the last delimiter, or `0` if there is none, then copy
				// the first basic code points to the output.

				basic = input.lastIndexOf(delimiter);
				if (basic < 0) {
					basic = 0;
				}

				for (j = 0; j < basic; ++j) {
					// if it's not a basic code point
					if (input.charCodeAt(j) >= 0x80) {
						error('not-basic');
					}
					output.push(input.charCodeAt(j));
				}

				// Main decoding loop: start just after the last delimiter if any basic code
				// points were copied; start at the beginning otherwise.

				for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

					// `index` is the index of the next character to be consumed.
					// Decode a generalized variable-length integer into `delta`,
					// which gets added to `i`. The overflow checking is easier
					// if we increase `i` as we go, then subtract off its starting
					// value at the end to obtain `delta`.
					for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

						if (index >= inputLength) {
							error('invalid-input');
						}

						digit = basicToDigit(input.charCodeAt(index++));

						if (digit >= base || digit > floor((maxInt - i) / w)) {
							error('overflow');
						}

						i += digit * w;
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

						if (digit < t) {
							break;
						}

						baseMinusT = base - t;
						if (w > floor(maxInt / baseMinusT)) {
							error('overflow');
						}

						w *= baseMinusT;

					}

					out = output.length + 1;
					bias = adapt(i - oldi, out, oldi == 0);

					// `i` was supposed to wrap around from `out` to `0`,
					// incrementing `n` each time, so we'll fix that now:
					if (floor(i / out) > maxInt - n) {
						error('overflow');
					}

					n += floor(i / out);
					i %= out;

					// Insert `n` at position `i` of the output
					output.splice(i++, 0, n);

				}

				return ucs2encode(output);
			}

			/**
			 * Converts a string of Unicode symbols (e.g. a domain name label) to a
			 * Punycode string of ASCII-only symbols.
			 * @memberOf punycode
			 * @param {String} input The string of Unicode symbols.
			 * @returns {String} The resulting Punycode string of ASCII-only symbols.
			 */
			function encode(input) {
				var n,
				    delta,
				    handledCPCount,
				    basicLength,
				    bias,
				    j,
				    m,
				    q,
				    k,
				    t,
				    currentValue,
				    output = [],
				    /** `inputLength` will hold the number of code points in `input`. */
				    inputLength,
				    /** Cached calculation results */
				    handledCPCountPlusOne,
				    baseMinusT,
				    qMinusT;

				// Convert the input in UCS-2 to Unicode
				input = ucs2decode(input);

				// Cache the length
				inputLength = input.length;

				// Initialize the state
				n = initialN;
				delta = 0;
				bias = initialBias;

				// Handle the basic code points
				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue < 0x80) {
						output.push(stringFromCharCode(currentValue));
					}
				}

				handledCPCount = basicLength = output.length;

				// `handledCPCount` is the number of code points that have been handled;
				// `basicLength` is the number of basic code points.

				// Finish the basic string - if it is not empty - with a delimiter
				if (basicLength) {
					output.push(delimiter);
				}

				// Main encoding loop:
				while (handledCPCount < inputLength) {

					// All non-basic code points < n have been handled already. Find the next
					// larger one:
					for (m = maxInt, j = 0; j < inputLength; ++j) {
						currentValue = input[j];
						if (currentValue >= n && currentValue < m) {
							m = currentValue;
						}
					}

					// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
					// but guard against overflow
					handledCPCountPlusOne = handledCPCount + 1;
					if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
						error('overflow');
					}

					delta += (m - n) * handledCPCountPlusOne;
					n = m;

					for (j = 0; j < inputLength; ++j) {
						currentValue = input[j];

						if (currentValue < n && ++delta > maxInt) {
							error('overflow');
						}

						if (currentValue == n) {
							// Represent delta as a generalized variable-length integer
							for (q = delta, k = base; /* no condition */; k += base) {
								t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
								if (q < t) {
									break;
								}
								qMinusT = q - t;
								baseMinusT = base - t;
								output.push(
									stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
								);
								q = floor(qMinusT / baseMinusT);
							}

							output.push(stringFromCharCode(digitToBasic(q, 0)));
							bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
							delta = 0;
							++handledCPCount;
						}
					}

					++delta;
					++n;

				}
				return output.join('');
			}

			/**
			 * Converts a Punycode string representing a domain name or an email address
			 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
			 * it doesn't matter if you call it on a string that has already been
			 * converted to Unicode.
			 * @memberOf punycode
			 * @param {String} input The Punycoded domain name or email address to
			 * convert to Unicode.
			 * @returns {String} The Unicode representation of the given Punycode
			 * string.
			 */
			function toUnicode(input) {
				return mapDomain(input, function(string) {
					return regexPunycode.test(string)
						? decode(string.slice(4).toLowerCase())
						: string;
				});
			}

			/**
			 * Converts a Unicode string representing a domain name or an email address to
			 * Punycode. Only the non-ASCII parts of the domain name will be converted,
			 * i.e. it doesn't matter if you call it with a domain that's already in
			 * ASCII.
			 * @memberOf punycode
			 * @param {String} input The domain name or email address to convert, as a
			 * Unicode string.
			 * @returns {String} The Punycode representation of the given domain name or
			 * email address.
			 */
			function toASCII(input) {
				return mapDomain(input, function(string) {
					return regexNonASCII.test(string)
						? 'xn--' + encode(string)
						: string;
				});
			}

			/*--------------------------------------------------------------------------*/

			/** Define the public API */
			punycode = {
				/**
				 * A string representing the current Punycode.js version number.
				 * @memberOf punycode
				 * @type String
				 */
				'version': '1.3.2',
				/**
				 * An object of methods to convert from JavaScript's internal character
				 * representation (UCS-2) to Unicode code points, and back.
				 * @see <https://mathiasbynens.be/notes/javascript-encoding>
				 * @memberOf punycode
				 * @type Object
				 */
				'ucs2': {
					'decode': ucs2decode,
					'encode': ucs2encode
				},
				'decode': decode,
				'encode': encode,
				'toASCII': toASCII,
				'toUnicode': toUnicode
			};

			/** Expose `punycode` */
			// Some AMD build optimizers, like r.js, check for specific condition patterns
			// like the following:
			if (
				true
			) {
				!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
					return punycode;
				}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
			} else if (freeExports && freeModule) {
				if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
					freeModule.exports = punycode;
				} else { // in Narwhal or RingoJS v0.7.0-
					for (key in punycode) {
						punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
					}
				}
			} else { // in Rhino or a web browser
				root.punycode = punycode;
			}

		}(this));

		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)(module), (function() { return this; }())))

	/***/ },
	/* 8 */
	/***/ function(module, exports) {

		module.exports = function(module) {
			if(!module.webpackPolyfill) {
				module.deprecate = function() {};
				module.paths = [];
				// module.parent = undefined by default
				module.children = [];
				module.webpackPolyfill = 1;
			}
			return module;
		}


	/***/ },
	/* 9 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.decode = exports.parse = __webpack_require__(10);
		exports.encode = exports.stringify = __webpack_require__(11);


	/***/ },
	/* 10 */
	/***/ function(module, exports) {

		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		'use strict';

		// If obj.hasOwnProperty has been overridden, then calling
		// obj.hasOwnProperty(prop) will break.
		// See: https://github.com/joyent/node/issues/1707
		function hasOwnProperty(obj, prop) {
		  return Object.prototype.hasOwnProperty.call(obj, prop);
		}

		module.exports = function(qs, sep, eq, options) {
		  sep = sep || '&';
		  eq = eq || '=';
		  var obj = {};

		  if (typeof qs !== 'string' || qs.length === 0) {
		    return obj;
		  }

		  var regexp = /\+/g;
		  qs = qs.split(sep);

		  var maxKeys = 1000;
		  if (options && typeof options.maxKeys === 'number') {
		    maxKeys = options.maxKeys;
		  }

		  var len = qs.length;
		  // maxKeys <= 0 means that we should not limit keys count
		  if (maxKeys > 0 && len > maxKeys) {
		    len = maxKeys;
		  }

		  for (var i = 0; i < len; ++i) {
		    var x = qs[i].replace(regexp, '%20'),
		        idx = x.indexOf(eq),
		        kstr, vstr, k, v;

		    if (idx >= 0) {
		      kstr = x.substr(0, idx);
		      vstr = x.substr(idx + 1);
		    } else {
		      kstr = x;
		      vstr = '';
		    }

		    k = decodeURIComponent(kstr);
		    v = decodeURIComponent(vstr);

		    if (!hasOwnProperty(obj, k)) {
		      obj[k] = v;
		    } else if (Array.isArray(obj[k])) {
		      obj[k].push(v);
		    } else {
		      obj[k] = [obj[k], v];
		    }
		  }

		  return obj;
		};


	/***/ },
	/* 11 */
	/***/ function(module, exports) {

		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		'use strict';

		var stringifyPrimitive = function(v) {
		  switch (typeof v) {
		    case 'string':
		      return v;

		    case 'boolean':
		      return v ? 'true' : 'false';

		    case 'number':
		      return isFinite(v) ? v : '';

		    default:
		      return '';
		  }
		};

		module.exports = function(obj, sep, eq, name) {
		  sep = sep || '&';
		  eq = eq || '=';
		  if (obj === null) {
		    obj = undefined;
		  }

		  if (typeof obj === 'object') {
		    return Object.keys(obj).map(function(k) {
		      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
		      if (Array.isArray(obj[k])) {
		        return obj[k].map(function(v) {
		          return ks + encodeURIComponent(stringifyPrimitive(v));
		        }).join(sep);
		      } else {
		        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
		      }
		    }).join(sep);

		  }

		  if (!name) return '';
		  return encodeURIComponent(stringifyPrimitive(name)) + eq +
		         encodeURIComponent(stringifyPrimitive(obj));
		};


	/***/ },
	/* 12 */
	/***/ function(module, exports) {

		module.exports = __webpack_require__(1);

	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _utils = __webpack_require__(5);

		var _utils2 = _interopRequireDefault(_utils);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function makeHttpRequest(method, uri, body, headers, callback) {
		  var request = new XMLHttpRequest();

		  request.open(method.toUpperCase(), uri, true);

		  if (headers) {
		    for (var name in headers) {
		      var value = headers[name];
		      request.setRequestHeader(name, value);
		    }
		  }

		  // If the URI is different than the URI of the domain we're on,
		  // then set withCredentials to true so that we enable CORS.
		  if (!_utils2.default.isRelativeUri(uri) && !_utils2.default.isSameHost(uri, window.location.href)) {
		    request.withCredentials = true;
		  }

		  request.onreadystatechange = function () {
		    // 4 = Request finished and response is ready.
		    // Ignore everything else.
		    if (request.readyState !== 4) {
		      return;
		    }

		    var result = {
		      status: request.status,
		      responseJSON: null
		    };

		    try {
		      if (request.responseText) {
		        result.responseJSON = JSON.parse(request.responseText);
		      }
		      callback(null, result);
		    } catch (e) {
		      callback(e);
		    }
		  };

		  if (body && (typeof body === 'undefined' ? 'undefined' : _typeof(body)) === 'object') {
		    request.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
		    request.send(JSON.stringify(body));
		  } else {
		    request.send();
		  }
		}

		var BaseService = function () {
		  function BaseService(endpoints) {
		    _classCallCheck(this, BaseService);

		    var defaultEndpoints = {
		      baseUri: null
		    };

		    this.endpoints = _utils2.default.mergeObjects(defaultEndpoints, endpoints);
		  }

		  _createClass(BaseService, [{
		    key: '_makeRequest',
		    value: function _makeRequest(method, path, body, callback) {
		      var uri = this._buildEndpoint(path);
		      var headers = {
		        'Accept': 'application/json'
		      };

		      // Only set the X-Stormpath-Agent header if we're on the same domain as the requested URI.
		      // This because we want to avoid CORS requests that require you to have to whitelist the X-Stormpath-Agent header.
		      if (_utils2.default.isRelativeUri(uri) || _utils2.default.isSameHost(uri, window.location.href)) {
		        headers['X-Stormpath-Agent'] = 'stormpath-sdk-react/' + ("1.3.3") + ' react/' + _react2.default.version;
		      }

		      makeHttpRequest(method, uri, body, headers, function (err, result) {
		        if (err) {
		          return callback(err);
		        }

		        var data = result.responseJSON || {};

		        if (result.status === 200) {
		          callback(null, data);
		        } else {
		          var error = new Error(data.message || data.error || 'A request to the API failed.');
		          error.status = result.status;
		          callback(error);
		        }
		      });
		    }
		  }, {
		    key: '_buildEndpoint',
		    value: function _buildEndpoint(endpoint) {
		      return (this.endpoints.baseUri || '') + endpoint;
		    }
		  }]);

		  return BaseService;
		}();

		exports.default = BaseService;

	/***/ },
	/* 14 */
	/***/ function(module, exports) {

		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		var RequestPool = function () {
		  function RequestPool() {
		    _classCallCheck(this, RequestPool);

		    this.waiting = [];
		  }

		  _createClass(RequestPool, [{
		    key: "request",
		    value: function request(resolver, callback) {
		      var waiting = this.waiting;

		      waiting.push(callback);

		      if (waiting.length === 1) {
		        resolver(function () {
		          while (waiting.length) {
		            waiting.shift().apply(null, arguments);
		          }
		        });
		      }

		      return false;
		    }
		  }]);

		  return RequestPool;
		}();

		exports.default = RequestPool;

	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.UserConstants = undefined;

		var _UserConstants2 = __webpack_require__(16);

		var _UserConstants3 = _interopRequireDefault(_UserConstants2);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		exports.UserConstants = _UserConstants3.default;

	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});

		var _keymirror = __webpack_require__(17);

		var _keymirror2 = _interopRequireDefault(_keymirror);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		exports.default = (0, _keymirror2.default)({
		  USER_LOGIN: null,
		  USER_SET: null,
		  USER_REGISTER: null,
		  USER_FORGOT_PASSWORD: null,
		  USER_CHANGE_PASSWORD: null,
		  USER_UPDATE_PROFILE: null,
		  USER_VERIFY_EMAIL: null,
		  USER_LOGOUT: null
		});

	/***/ },
	/* 17 */
	/***/ function(module, exports) {

		/**
		 * Copyright 2013-2014 Facebook, Inc.
		 *
		 * Licensed under the Apache License, Version 2.0 (the "License");
		 * you may not use this file except in compliance with the License.
		 * You may obtain a copy of the License at
		 *
		 * http://www.apache.org/licenses/LICENSE-2.0
		 *
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS,
		 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 * See the License for the specific language governing permissions and
		 * limitations under the License.
		 *
		 */

		"use strict";

		/**
		 * Constructs an enumeration with keys equal to their value.
		 *
		 * For example:
		 *
		 *   var COLORS = keyMirror({blue: null, red: null});
		 *   var myColor = COLORS.blue;
		 *   var isColorValid = !!COLORS[myColor];
		 *
		 * The last line could not be performed if the values of the generated enum were
		 * not equal to their keys.
		 *
		 *   Input:  {key1: val1, key2: val2}
		 *   Output: {key1: key1, key2: key2}
		 *
		 * @param {object} obj
		 * @return {object}
		 */
		var keyMirror = function(obj) {
		  var ret = {};
		  var key;
		  if (!(obj instanceof Object && !Array.isArray(obj))) {
		    throw new Error('keyMirror(...): Argument must be an object.');
		  }
		  for (key in obj) {
		    if (!obj.hasOwnProperty(key)) {
		      continue;
		    }
		    ret[key] = key;
		  }
		  return ret;
		};

		module.exports = keyMirror;


	/***/ },
	/* 18 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.SessionStore = exports.UserStore = undefined;

		var _UserStore2 = __webpack_require__(19);

		var _UserStore3 = _interopRequireDefault(_UserStore2);

		var _SessionStore2 = __webpack_require__(23);

		var _SessionStore3 = _interopRequireDefault(_SessionStore2);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		exports.UserStore = _UserStore3.default;
		exports.SessionStore = _SessionStore3.default;

	/***/ },
	/* 19 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _utils = __webpack_require__(5);

		var _utils2 = _interopRequireDefault(_utils);

		var _BaseStore2 = __webpack_require__(20);

		var _BaseStore3 = _interopRequireDefault(_BaseStore2);

		var _UserActions = __webpack_require__(21);

		var _UserActions2 = _interopRequireDefault(_UserActions);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var UserStore = function (_BaseStore) {
		  _inherits(UserStore, _BaseStore);

		  function UserStore(userService, sessionStore) {
		    _classCallCheck(this, UserStore);

		    var _this = _possibleConstructorReturn(this, (UserStore.__proto__ || Object.getPrototypeOf(UserStore)).call(this));

		    _this.service = userService;
		    _this.sessionError = null;
		    _this.sessionStore = sessionStore;
		    _this.resolveSession();
		    return _this;
		  }

		  _createClass(UserStore, [{
		    key: 'isAuthenticated',
		    value: function isAuthenticated(options, callback) {
		      var _this2 = this;

		      if (typeof options === 'function') {
		        callback = options;
		        options = {};
		      }

		      this.resolveSession(function (err, user) {
		        var authenticated = !err && !_this2.sessionStore.empty();

		        if (authenticated && options.inGroup) {
		          if (user.groups) {
		            authenticated = _utils2.default.groupsMatchExpression(user.groups, options.inGroup);
		          } else {
		            _utils2.default.logWarning('<AuthenticatedRoute> In order to use the inGroup option, you must expand the groups resource for the /me endpoint.');
		          }
		        }

		        callback(err, authenticated);
		      });
		    }
		  }, {
		    key: 'getLoginViewData',
		    value: function getLoginViewData(callback) {
		      this.service.getLoginViewData(callback);
		    }
		  }, {
		    key: 'login',
		    value: function login(options, callback) {
		      var _this3 = this;

		      this.reset();

		      this.service.login(options, function (err) {
		        if (err) {
		          return callback(err);
		        }

		        _this3.resolveSession(callback, true);
		      });
		    }
		  }, {
		    key: 'register',
		    value: function register(options, callback) {
		      this.service.register(options, callback);
		    }
		  }, {
		    key: 'getRegisterViewData',
		    value: function getRegisterViewData(callback) {
		      this.service.getRegisterViewData(callback);
		    }
		  }, {
		    key: 'forgotPassword',
		    value: function forgotPassword(options, callback) {
		      this.service.forgotPassword(options, callback);
		    }
		  }, {
		    key: 'changePassword',
		    value: function changePassword(options, callback) {
		      this.service.changePassword(options, callback);
		    }
		  }, {
		    key: 'updateProfile',
		    value: function updateProfile(data, callback) {
		      this.service.updateProfile(data, callback);
		    }
		  }, {
		    key: 'verifyEmail',
		    value: function verifyEmail(spToken, callback) {
		      this.service.verifyEmail(spToken, callback);
		    }
		  }, {
		    key: 'logout',
		    value: function logout(callback) {
		      var _this4 = this;

		      this.service.logout(function (err) {
		        if (err) {
		          return callback(err);
		        }

		        _this4.reset();
		        _this4.emitChange();

		        callback();
		      });
		    }
		  }, {
		    key: 'resolveSession',
		    value: function resolveSession(callback, force) {
		      var _this5 = this;

		      if (!force && (this.sessionError || !this.sessionStore.empty())) {
		        return callback && callback(this.sessionError, this.sessionStore.get());
		      }

		      this.service.me(function (err, result) {
		        if (err) {
		          _this5.sessionError = err;
		          _this5.sessionStore.reset();
		          _UserActions2.default.set(null);
		        } else {
		          _this5.sessionError = null;
		          _this5.sessionStore.set(result);
		          _UserActions2.default.set(result);
		        }

		        if (callback) {
		          callback(_this5.sessionError, _this5.sessionStore.get());
		        }

		        _this5.emitChange();
		      });
		    }
		  }, {
		    key: 'reset',
		    value: function reset() {
		      this.sessionError = null;
		      this.sessionStore.reset();
		      _UserActions2.default.set(null);
		    }
		  }]);

		  return UserStore;
		}(_BaseStore3.default);

		exports.default = UserStore;

	/***/ },
	/* 20 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var EventEmitter = __webpack_require__(2).EventEmitter;

		var BaseStore = function (_EventEmitter) {
		  _inherits(BaseStore, _EventEmitter);

		  function BaseStore() {
		    _classCallCheck(this, BaseStore);

		    return _possibleConstructorReturn(this, (BaseStore.__proto__ || Object.getPrototypeOf(BaseStore)).apply(this, arguments));
		  }

		  _createClass(BaseStore, [{
		    key: 'emitChange',
		    value: function emitChange(value) {
		      this.emit('changed', value);
		    }
		  }, {
		    key: 'addChangeListener',
		    value: function addChangeListener(callback) {
		      return this.on('changed', callback);
		    }
		  }, {
		    key: 'removeChangeListener',
		    value: function removeChangeListener(callback) {
		      this.removeListener('changed', callback);
		    }
		  }]);

		  return BaseStore;
		}(EventEmitter);

		exports.default = BaseStore;

	/***/ },
	/* 21 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _context = __webpack_require__(22);

		var _context2 = _interopRequireDefault(_context);

		var _UserConstants = __webpack_require__(16);

		var _UserConstants2 = _interopRequireDefault(_UserConstants);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function dispatch(event) {
		  setTimeout(function () {
		    _context2.default.getDispatcher().dispatch(event);
		  }, 0);
		}

		var UserActions = function () {
		  function UserActions() {
		    _classCallCheck(this, UserActions);
		  }

		  _createClass(UserActions, [{
		    key: 'login',
		    value: function login(options, callback) {
		      dispatch({
		        type: _UserConstants2.default.USER_LOGIN,
		        options: options,
		        callback: callback
		      });
		    }
		  }, {
		    key: 'register',
		    value: function register(options, callback) {
		      dispatch({
		        type: _UserConstants2.default.USER_REGISTER,
		        options: options,
		        callback: callback
		      });
		    }
		  }, {
		    key: 'forgotPassword',
		    value: function forgotPassword(options, callback) {
		      dispatch({
		        type: _UserConstants2.default.USER_FORGOT_PASSWORD,
		        options: options,
		        callback: callback
		      });
		    }
		  }, {
		    key: 'verifyEmail',
		    value: function verifyEmail(spToken, callback) {
		      dispatch({
		        type: _UserConstants2.default.USER_VERIFY_EMAIL,
		        options: {
		          spToken: spToken
		        },
		        callback: callback
		      });
		    }
		  }, {
		    key: 'changePassword',
		    value: function changePassword(options, callback) {
		      dispatch({
		        type: _UserConstants2.default.USER_CHANGE_PASSWORD,
		        options: options,
		        callback: callback
		      });
		    }
		  }, {
		    key: 'updateProfile',
		    value: function updateProfile(data, callback) {
		      dispatch({
		        type: _UserConstants2.default.USER_UPDATE_PROFILE,
		        options: {
		          data: data
		        },
		        callback: callback
		      });
		    }
		  }, {
		    key: 'set',
		    value: function set(data) {
		      dispatch({
		        type: _UserConstants2.default.USER_SET,
		        options: {
		          data: data
		        }
		      });
		    }
		  }, {
		    key: 'logout',
		    value: function logout(callback) {
		      dispatch({
		        type: _UserConstants2.default.USER_LOGOUT,
		        callback: callback
		      });
		    }
		  }]);

		  return UserActions;
		}();

		exports.default = new UserActions();

	/***/ },
	/* 22 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _SessionStore = __webpack_require__(23);

		var _SessionStore2 = _interopRequireDefault(_SessionStore);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		var Context = function () {
		  function Context() {
		    _classCallCheck(this, Context);

		    this.router = null;
		    this.dispatcher = null;
		    this.sessionStore = null;
		    this.userStore = null;
		  }

		  _createClass(Context, [{
		    key: 'setRouter',
		    value: function setRouter(router) {
		      this.router = router;
		    }
		  }, {
		    key: 'getRouter',
		    value: function getRouter() {
		      return this.router;
		    }
		  }, {
		    key: 'setDispatcher',
		    value: function setDispatcher(dispatcher) {
		      this.dispatcher = dispatcher;
		    }
		  }, {
		    key: 'getDispatcher',
		    value: function getDispatcher() {
		      return this.dispatcher;
		    }
		  }, {
		    key: 'setSessionStore',
		    value: function setSessionStore(sessionStore) {
		      this.sessionStore = sessionStore;
		    }
		  }, {
		    key: 'getSessionStore',
		    value: function getSessionStore() {
		      return this.sessionStore;
		    }
		  }, {
		    key: 'setUserStore',
		    value: function setUserStore(userStore) {
		      this.userStore = userStore;
		    }
		  }, {
		    key: 'getUserStore',
		    value: function getUserStore() {
		      return this.userStore;
		    }
		  }]);

		  return Context;
		}();

		exports.default = new Context();

	/***/ },
	/* 23 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _BaseStore2 = __webpack_require__(20);

		var _BaseStore3 = _interopRequireDefault(_BaseStore2);

		var _utils = __webpack_require__(5);

		var _utils2 = _interopRequireDefault(_utils);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var SessionStore = function (_BaseStore) {
		  _inherits(SessionStore, _BaseStore);

		  function SessionStore() {
		    var _ref;

		    var _temp, _this, _ret;

		    _classCallCheck(this, SessionStore);

		    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SessionStore.__proto__ || Object.getPrototypeOf(SessionStore)).call.apply(_ref, [this].concat(args))), _this), _this.session = undefined, _temp), _possibleConstructorReturn(_this, _ret);
		  }

		  _createClass(SessionStore, [{
		    key: 'get',
		    value: function get() {
		      return this.session;
		    }
		  }, {
		    key: 'set',
		    value: function set(session) {
		      if (session && session.groups && session.groups.href) {
		        session.groups = _utils2.default.getEnabledGroups(session.groups);
		      }

		      if (JSON.stringify(this.session) !== JSON.stringify(session)) {
		        this.session = session;
		        this.emitChange(session);
		      }
		    }
		  }, {
		    key: 'empty',
		    value: function empty() {
		      return this.session === undefined;
		    }
		  }, {
		    key: 'reset',
		    value: function reset() {
		      if (this.session !== undefined) {
		        this.session = undefined;
		        this.emitChange(undefined);
		      }
		    }
		  }]);

		  return SessionStore;
		}(_BaseStore3.default);

		exports.default = SessionStore;

	/***/ },
	/* 24 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.ReduxDispatcher = exports.FluxDispatcher = undefined;

		var _FluxDispatcher2 = __webpack_require__(25);

		var _FluxDispatcher3 = _interopRequireDefault(_FluxDispatcher2);

		var _ReduxDispatcher2 = __webpack_require__(30);

		var _ReduxDispatcher3 = _interopRequireDefault(_ReduxDispatcher2);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		exports.FluxDispatcher = _FluxDispatcher3.default;
		exports.ReduxDispatcher = _ReduxDispatcher3.default;

	/***/ },
	/* 25 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _flux = __webpack_require__(26);

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		var FluxDispatcher = function () {
		  function FluxDispatcher(reducer) {
		    _classCallCheck(this, FluxDispatcher);

		    this.dispatcher = new _flux.Dispatcher();
		    this.register(reducer);
		  }

		  _createClass(FluxDispatcher, [{
		    key: 'register',
		    value: function register(listener) {
		      this.dispatcher.register(function (data) {
		        if (data && 'actionType' in data) {
		          data.type = data.actionType;
		          delete data['actionType'];
		        }

		        listener(data);
		      });
		    }
		  }, {
		    key: 'dispatch',
		    value: function dispatch(event) {
		      this.dispatcher.dispatch({
		        actionType: event.type,
		        options: event.options,
		        callback: event.callback
		      });
		    }
		  }]);

		  return FluxDispatcher;
		}();

		exports.default = FluxDispatcher;

	/***/ },
	/* 26 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * Copyright (c) 2014-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 */

		module.exports.Dispatcher = __webpack_require__(27);


	/***/ },
	/* 27 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {/**
		 * Copyright (c) 2014-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 * @providesModule Dispatcher
		 * 
		 * @preventMunge
		 */

		'use strict';

		exports.__esModule = true;

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

		var invariant = __webpack_require__(29);

		var _prefix = 'ID_';

		/**
		 * Dispatcher is used to broadcast payloads to registered callbacks. This is
		 * different from generic pub-sub systems in two ways:
		 *
		 *   1) Callbacks are not subscribed to particular events. Every payload is
		 *      dispatched to every registered callback.
		 *   2) Callbacks can be deferred in whole or part until other callbacks have
		 *      been executed.
		 *
		 * For example, consider this hypothetical flight destination form, which
		 * selects a default city when a country is selected:
		 *
		 *   var flightDispatcher = new Dispatcher();
		 *
		 *   // Keeps track of which country is selected
		 *   var CountryStore = {country: null};
		 *
		 *   // Keeps track of which city is selected
		 *   var CityStore = {city: null};
		 *
		 *   // Keeps track of the base flight price of the selected city
		 *   var FlightPriceStore = {price: null}
		 *
		 * When a user changes the selected city, we dispatch the payload:
		 *
		 *   flightDispatcher.dispatch({
		 *     actionType: 'city-update',
		 *     selectedCity: 'paris'
		 *   });
		 *
		 * This payload is digested by `CityStore`:
		 *
		 *   flightDispatcher.register(function(payload) {
		 *     if (payload.actionType === 'city-update') {
		 *       CityStore.city = payload.selectedCity;
		 *     }
		 *   });
		 *
		 * When the user selects a country, we dispatch the payload:
		 *
		 *   flightDispatcher.dispatch({
		 *     actionType: 'country-update',
		 *     selectedCountry: 'australia'
		 *   });
		 *
		 * This payload is digested by both stores:
		 *
		 *   CountryStore.dispatchToken = flightDispatcher.register(function(payload) {
		 *     if (payload.actionType === 'country-update') {
		 *       CountryStore.country = payload.selectedCountry;
		 *     }
		 *   });
		 *
		 * When the callback to update `CountryStore` is registered, we save a reference
		 * to the returned token. Using this token with `waitFor()`, we can guarantee
		 * that `CountryStore` is updated before the callback that updates `CityStore`
		 * needs to query its data.
		 *
		 *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {
		 *     if (payload.actionType === 'country-update') {
		 *       // `CountryStore.country` may not be updated.
		 *       flightDispatcher.waitFor([CountryStore.dispatchToken]);
		 *       // `CountryStore.country` is now guaranteed to be updated.
		 *
		 *       // Select the default city for the new country
		 *       CityStore.city = getDefaultCityForCountry(CountryStore.country);
		 *     }
		 *   });
		 *
		 * The usage of `waitFor()` can be chained, for example:
		 *
		 *   FlightPriceStore.dispatchToken =
		 *     flightDispatcher.register(function(payload) {
		 *       switch (payload.actionType) {
		 *         case 'country-update':
		 *         case 'city-update':
		 *           flightDispatcher.waitFor([CityStore.dispatchToken]);
		 *           FlightPriceStore.price =
		 *             getFlightPriceStore(CountryStore.country, CityStore.city);
		 *           break;
		 *     }
		 *   });
		 *
		 * The `country-update` payload will be guaranteed to invoke the stores'
		 * registered callbacks in order: `CountryStore`, `CityStore`, then
		 * `FlightPriceStore`.
		 */

		var Dispatcher = (function () {
		  function Dispatcher() {
		    _classCallCheck(this, Dispatcher);

		    this._callbacks = {};
		    this._isDispatching = false;
		    this._isHandled = {};
		    this._isPending = {};
		    this._lastID = 1;
		  }

		  /**
		   * Registers a callback to be invoked with every dispatched payload. Returns
		   * a token that can be used with `waitFor()`.
		   */

		  Dispatcher.prototype.register = function register(callback) {
		    var id = _prefix + this._lastID++;
		    this._callbacks[id] = callback;
		    return id;
		  };

		  /**
		   * Removes a callback based on its token.
		   */

		  Dispatcher.prototype.unregister = function unregister(id) {
		    !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.unregister(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;
		    delete this._callbacks[id];
		  };

		  /**
		   * Waits for the callbacks specified to be invoked before continuing execution
		   * of the current callback. This method should only be used by a callback in
		   * response to a dispatched payload.
		   */

		  Dispatcher.prototype.waitFor = function waitFor(ids) {
		    !this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Must be invoked while dispatching.') : invariant(false) : undefined;
		    for (var ii = 0; ii < ids.length; ii++) {
		      var id = ids[ii];
		      if (this._isPending[id]) {
		        !this._isHandled[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Circular dependency detected while ' + 'waiting for `%s`.', id) : invariant(false) : undefined;
		        continue;
		      }
		      !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;
		      this._invokeCallback(id);
		    }
		  };

		  /**
		   * Dispatches a payload to all registered callbacks.
		   */

		  Dispatcher.prototype.dispatch = function dispatch(payload) {
		    !!this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.') : invariant(false) : undefined;
		    this._startDispatching(payload);
		    try {
		      for (var id in this._callbacks) {
		        if (this._isPending[id]) {
		          continue;
		        }
		        this._invokeCallback(id);
		      }
		    } finally {
		      this._stopDispatching();
		    }
		  };

		  /**
		   * Is this Dispatcher currently dispatching.
		   */

		  Dispatcher.prototype.isDispatching = function isDispatching() {
		    return this._isDispatching;
		  };

		  /**
		   * Call the callback stored with the given id. Also do some internal
		   * bookkeeping.
		   *
		   * @internal
		   */

		  Dispatcher.prototype._invokeCallback = function _invokeCallback(id) {
		    this._isPending[id] = true;
		    this._callbacks[id](this._pendingPayload);
		    this._isHandled[id] = true;
		  };

		  /**
		   * Set up bookkeeping needed when dispatching.
		   *
		   * @internal
		   */

		  Dispatcher.prototype._startDispatching = function _startDispatching(payload) {
		    for (var id in this._callbacks) {
		      this._isPending[id] = false;
		      this._isHandled[id] = false;
		    }
		    this._pendingPayload = payload;
		    this._isDispatching = true;
		  };

		  /**
		   * Clear bookkeeping used for dispatching.
		   *
		   * @internal
		   */

		  Dispatcher.prototype._stopDispatching = function _stopDispatching() {
		    delete this._pendingPayload;
		    this._isDispatching = false;
		  };

		  return Dispatcher;
		})();

		module.exports = Dispatcher;
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 28 */
	/***/ function(module, exports) {

		// shim for using process in browser
		var process = module.exports = {};

		// cached from whatever global is present so that test runners that stub it
		// don't break things.  But we need to wrap it in a try catch in case it is
		// wrapped in strict mode code which doesn't define any globals.  It's inside a
		// function because try/catches deoptimize in certain engines.

		var cachedSetTimeout;
		var cachedClearTimeout;

		function defaultSetTimout() {
		    throw new Error('setTimeout has not been defined');
		}
		function defaultClearTimeout () {
		    throw new Error('clearTimeout has not been defined');
		}
		(function () {
		    try {
		        if (typeof setTimeout === 'function') {
		            cachedSetTimeout = setTimeout;
		        } else {
		            cachedSetTimeout = defaultSetTimout;
		        }
		    } catch (e) {
		        cachedSetTimeout = defaultSetTimout;
		    }
		    try {
		        if (typeof clearTimeout === 'function') {
		            cachedClearTimeout = clearTimeout;
		        } else {
		            cachedClearTimeout = defaultClearTimeout;
		        }
		    } catch (e) {
		        cachedClearTimeout = defaultClearTimeout;
		    }
		} ())
		function runTimeout(fun) {
		    if (cachedSetTimeout === setTimeout) {
		        //normal enviroments in sane situations
		        return setTimeout(fun, 0);
		    }
		    // if setTimeout wasn't available but was latter defined
		    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
		        cachedSetTimeout = setTimeout;
		        return setTimeout(fun, 0);
		    }
		    try {
		        // when when somebody has screwed with setTimeout but no I.E. maddness
		        return cachedSetTimeout(fun, 0);
		    } catch(e){
		        try {
		            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
		            return cachedSetTimeout.call(null, fun, 0);
		        } catch(e){
		            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
		            return cachedSetTimeout.call(this, fun, 0);
		        }
		    }


		}
		function runClearTimeout(marker) {
		    if (cachedClearTimeout === clearTimeout) {
		        //normal enviroments in sane situations
		        return clearTimeout(marker);
		    }
		    // if clearTimeout wasn't available but was latter defined
		    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
		        cachedClearTimeout = clearTimeout;
		        return clearTimeout(marker);
		    }
		    try {
		        // when when somebody has screwed with setTimeout but no I.E. maddness
		        return cachedClearTimeout(marker);
		    } catch (e){
		        try {
		            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
		            return cachedClearTimeout.call(null, marker);
		        } catch (e){
		            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
		            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
		            return cachedClearTimeout.call(this, marker);
		        }
		    }



		}
		var queue = [];
		var draining = false;
		var currentQueue;
		var queueIndex = -1;

		function cleanUpNextTick() {
		    if (!draining || !currentQueue) {
		        return;
		    }
		    draining = false;
		    if (currentQueue.length) {
		        queue = currentQueue.concat(queue);
		    } else {
		        queueIndex = -1;
		    }
		    if (queue.length) {
		        drainQueue();
		    }
		}

		function drainQueue() {
		    if (draining) {
		        return;
		    }
		    var timeout = runTimeout(cleanUpNextTick);
		    draining = true;

		    var len = queue.length;
		    while(len) {
		        currentQueue = queue;
		        queue = [];
		        while (++queueIndex < len) {
		            if (currentQueue) {
		                currentQueue[queueIndex].run();
		            }
		        }
		        queueIndex = -1;
		        len = queue.length;
		    }
		    currentQueue = null;
		    draining = false;
		    runClearTimeout(timeout);
		}

		process.nextTick = function (fun) {
		    var args = new Array(arguments.length - 1);
		    if (arguments.length > 1) {
		        for (var i = 1; i < arguments.length; i++) {
		            args[i - 1] = arguments[i];
		        }
		    }
		    queue.push(new Item(fun, args));
		    if (queue.length === 1 && !draining) {
		        runTimeout(drainQueue);
		    }
		};

		// v8 likes predictible objects
		function Item(fun, array) {
		    this.fun = fun;
		    this.array = array;
		}
		Item.prototype.run = function () {
		    this.fun.apply(null, this.array);
		};
		process.title = 'browser';
		process.browser = true;
		process.env = {};
		process.argv = [];
		process.version = ''; // empty string to avoid regexp issues
		process.versions = {};

		function noop() {}

		process.on = noop;
		process.addListener = noop;
		process.once = noop;
		process.off = noop;
		process.removeListener = noop;
		process.removeAllListeners = noop;
		process.emit = noop;

		process.binding = function (name) {
		    throw new Error('process.binding is not supported');
		};

		process.cwd = function () { return '/' };
		process.chdir = function (dir) {
		    throw new Error('process.chdir is not supported');
		};
		process.umask = function() { return 0; };


	/***/ },
	/* 29 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {/**
		 * Copyright (c) 2013-present, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 *
		 */

		'use strict';

		/**
		 * Use invariant() to assert state which your program assumes to be true.
		 *
		 * Provide sprintf-style format (only %s is supported) and arguments
		 * to provide information about what broke and what you were
		 * expecting.
		 *
		 * The invariant message will be stripped in production, but the invariant
		 * will remain to ensure logic does not differ in production.
		 */

		function invariant(condition, format, a, b, c, d, e, f) {
		  if (process.env.NODE_ENV !== 'production') {
		    if (format === undefined) {
		      throw new Error('invariant requires an error message argument');
		    }
		  }

		  if (!condition) {
		    var error;
		    if (format === undefined) {
		      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
		    } else {
		      var args = [a, b, c, d, e, f];
		      var argIndex = 0;
		      error = new Error(format.replace(/%s/g, function () {
		        return args[argIndex++];
		      }));
		      error.name = 'Invariant Violation';
		    }

		    error.framesToPop = 1; // we don't care about invariant's own frame
		    throw error;
		  }
		}

		module.exports = invariant;
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 30 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _context = __webpack_require__(22);

		var _context2 = _interopRequireDefault(_context);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		var ReduxDispatcher = function () {
		  function ReduxDispatcher(reducer, store) {
		    _classCallCheck(this, ReduxDispatcher);

		    this.reducer = reducer;
		    this.store = store;
		  }

		  _createClass(ReduxDispatcher, [{
		    key: 'dispatch',
		    value: function dispatch(event) {
		      this.reducer(event);
		      this.store.dispatch(event);
		    }
		  }]);

		  return ReduxDispatcher;
		}();

		exports.default = ReduxDispatcher;

	/***/ },
	/* 31 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

		var _class, _temp;

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _reactRouter = __webpack_require__(32);

		var _utils = __webpack_require__(5);

		var _utils2 = _interopRequireDefault(_utils);

		var _context = __webpack_require__(22);

		var _context2 = _interopRequireDefault(_context);

		var _HomeRoute = __webpack_require__(88);

		var _HomeRoute2 = _interopRequireDefault(_HomeRoute);

		var _LoginRoute = __webpack_require__(89);

		var _LoginRoute2 = _interopRequireDefault(_LoginRoute);

		var _LogoutRoute = __webpack_require__(90);

		var _LogoutRoute2 = _interopRequireDefault(_LogoutRoute);

		var _AuthenticatedRoute = __webpack_require__(91);

		var _AuthenticatedRoute2 = _interopRequireDefault(_AuthenticatedRoute);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var Router = (_temp = _class = function (_ReactRouter) {
		  _inherits(Router, _ReactRouter);

		  function Router() {
		    _classCallCheck(this, Router);

		    var _this = _possibleConstructorReturn(this, (Router.__proto__ || Object.getPrototypeOf(Router)).apply(this, arguments));

		    _this.state = {
		      authenticated: false,
		      user: undefined
		    };
		    _this.markedRoutes = {
		      home: {
		        type: _HomeRoute2.default,
		        authenticated: {
		          props: null
		        },
		        notAuthenticated: {
		          props: null
		        }
		      },
		      login: {
		        type: _LoginRoute2.default,
		        props: null
		      },
		      logout: {
		        type: _LogoutRoute2.default,
		        props: null
		      }
		    };


		    if (_this.props.routes) {
		      // The reason we wrap in a div is because we just need to have a root element.
		      _this._mapMarkedRoutes(_react2.default.createElement(
		        'div',
		        null,
		        _this.props.routes
		      ));
		    } else {
		      _this._mapMarkedRoutes(_this);
		    }

		    _this.sessionChangeListener = _this._setSessionState.bind(_this);

		    _context2.default.setRouter(_this);
		    return _this;
		  }

		  _createClass(Router, [{
		    key: '_mapMarkedRoutes',
		    value: function _mapMarkedRoutes(routes) {
		      var markedRoutes = this.markedRoutes;

		      _utils2.default.deepForEach(routes, function (node, parent) {
		        // Try and map the route node to a marked route.
		        for (var routeName in markedRoutes) {
		          var route = markedRoutes[routeName];
		          if (node.type === route.type) {
		            var markedRoute = markedRoutes[routeName];

		            if (node.type === _HomeRoute2.default) {
		              if (parent.type === _AuthenticatedRoute2.default) {
		                markedRoute = markedRoute.authenticated;
		              } else {
		                markedRoute = markedRoute.notAuthenticated;
		              }
		            }

		            markedRoute.props = node.props;
		            break;
		          }
		        }
		      });
		    }
		  }, {
		    key: 'getHomeRoute',
		    value: function getHomeRoute() {
		      return this.markedRoutes.home.notAuthenticated.props;
		    }
		  }, {
		    key: 'getAuthenticatedHomeRoute',
		    value: function getAuthenticatedHomeRoute() {
		      return this.markedRoutes.home.authenticated.props;
		    }
		  }, {
		    key: 'getLoginRoute',
		    value: function getLoginRoute() {
		      return this.markedRoutes.login.props;
		    }
		  }, {
		    key: 'getLogoutRoute',
		    value: function getLogoutRoute() {
		      return this.markedRoutes.logout.props;
		    }
		  }, {
		    key: '_setSessionState',
		    value: function _setSessionState(user) {
		      this.setState({
		        authenticated: user !== undefined,
		        user: user
		      });
		    }
		  }, {
		    key: 'componentDidMount',
		    value: function componentDidMount() {
		      this._setSessionState(_context2.default.sessionStore.get());
		      _context2.default.sessionStore.addListener('changed', this.sessionChangeListener);
		    }
		  }, {
		    key: 'componentWillUnmount',
		    value: function componentWillUnmount() {
		      _get(Router.prototype.__proto__ || Object.getPrototypeOf(Router.prototype), 'componentWillUnmount', this).call(this);
		      _context2.default.sessionStore.removeListener('changed', this.sessionChangeListener);
		    }
		  }, {
		    key: 'getChildContext',
		    value: function getChildContext() {
		      return {
		        authenticated: this.state.authenticated,
		        user: this.state.user
		      };
		    }
		  }]);

		  return Router;
		}(_reactRouter.Router), _class.childContextTypes = {
		  authenticated: _react2.default.PropTypes.bool,
		  user: _react2.default.PropTypes.object
		}, _class.defaultProps = _reactRouter.Router.defaultProps, _temp);
		exports.default = Router;

	/***/ },
	/* 32 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;
		exports.createMemoryHistory = exports.hashHistory = exports.browserHistory = exports.applyRouterMiddleware = exports.formatPattern = exports.useRouterHistory = exports.match = exports.routerShape = exports.locationShape = exports.RouterContext = exports.createRoutes = exports.Route = exports.Redirect = exports.IndexRoute = exports.IndexRedirect = exports.withRouter = exports.IndexLink = exports.Link = exports.Router = undefined;

		var _RouteUtils = __webpack_require__(33);

		Object.defineProperty(exports, 'createRoutes', {
		  enumerable: true,
		  get: function get() {
		    return _RouteUtils.createRoutes;
		  }
		});

		var _PropTypes = __webpack_require__(34);

		Object.defineProperty(exports, 'locationShape', {
		  enumerable: true,
		  get: function get() {
		    return _PropTypes.locationShape;
		  }
		});
		Object.defineProperty(exports, 'routerShape', {
		  enumerable: true,
		  get: function get() {
		    return _PropTypes.routerShape;
		  }
		});

		var _PatternUtils = __webpack_require__(35);

		Object.defineProperty(exports, 'formatPattern', {
		  enumerable: true,
		  get: function get() {
		    return _PatternUtils.formatPattern;
		  }
		});

		var _Router2 = __webpack_require__(37);

		var _Router3 = _interopRequireDefault(_Router2);

		var _Link2 = __webpack_require__(53);

		var _Link3 = _interopRequireDefault(_Link2);

		var _IndexLink2 = __webpack_require__(54);

		var _IndexLink3 = _interopRequireDefault(_IndexLink2);

		var _withRouter2 = __webpack_require__(55);

		var _withRouter3 = _interopRequireDefault(_withRouter2);

		var _IndexRedirect2 = __webpack_require__(57);

		var _IndexRedirect3 = _interopRequireDefault(_IndexRedirect2);

		var _IndexRoute2 = __webpack_require__(59);

		var _IndexRoute3 = _interopRequireDefault(_IndexRoute2);

		var _Redirect2 = __webpack_require__(58);

		var _Redirect3 = _interopRequireDefault(_Redirect2);

		var _Route2 = __webpack_require__(60);

		var _Route3 = _interopRequireDefault(_Route2);

		var _RouterContext2 = __webpack_require__(49);

		var _RouterContext3 = _interopRequireDefault(_RouterContext2);

		var _match2 = __webpack_require__(61);

		var _match3 = _interopRequireDefault(_match2);

		var _useRouterHistory2 = __webpack_require__(75);

		var _useRouterHistory3 = _interopRequireDefault(_useRouterHistory2);

		var _applyRouterMiddleware2 = __webpack_require__(76);

		var _applyRouterMiddleware3 = _interopRequireDefault(_applyRouterMiddleware2);

		var _browserHistory2 = __webpack_require__(77);

		var _browserHistory3 = _interopRequireDefault(_browserHistory2);

		var _hashHistory2 = __webpack_require__(85);

		var _hashHistory3 = _interopRequireDefault(_hashHistory2);

		var _createMemoryHistory2 = __webpack_require__(63);

		var _createMemoryHistory3 = _interopRequireDefault(_createMemoryHistory2);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		exports.Router = _Router3.default; /* components */

		exports.Link = _Link3.default;
		exports.IndexLink = _IndexLink3.default;
		exports.withRouter = _withRouter3.default;

		/* components (configuration) */

		exports.IndexRedirect = _IndexRedirect3.default;
		exports.IndexRoute = _IndexRoute3.default;
		exports.Redirect = _Redirect3.default;
		exports.Route = _Route3.default;

		/* utils */

		exports.RouterContext = _RouterContext3.default;
		exports.match = _match3.default;
		exports.useRouterHistory = _useRouterHistory3.default;
		exports.applyRouterMiddleware = _applyRouterMiddleware3.default;

		/* histories */

		exports.browserHistory = _browserHistory3.default;
		exports.hashHistory = _hashHistory3.default;
		exports.createMemoryHistory = _createMemoryHistory3.default;

	/***/ },
	/* 33 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		exports.isReactChildren = isReactChildren;
		exports.createRouteFromReactElement = createRouteFromReactElement;
		exports.createRoutesFromReactChildren = createRoutesFromReactChildren;
		exports.createRoutes = createRoutes;

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function isValidChild(object) {
		  return object == null || _react2.default.isValidElement(object);
		}

		function isReactChildren(object) {
		  return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
		}

		function createRoute(defaultProps, props) {
		  return _extends({}, defaultProps, props);
		}

		function createRouteFromReactElement(element) {
		  var type = element.type;
		  var route = createRoute(type.defaultProps, element.props);

		  if (route.children) {
		    var childRoutes = createRoutesFromReactChildren(route.children, route);

		    if (childRoutes.length) route.childRoutes = childRoutes;

		    delete route.children;
		  }

		  return route;
		}

		/**
		 * Creates and returns a routes object from the given ReactChildren. JSX
		 * provides a convenient way to visualize how routes in the hierarchy are
		 * nested.
		 *
		 *   import { Route, createRoutesFromReactChildren } from 'react-router'
		 *
		 *   const routes = createRoutesFromReactChildren(
		 *     <Route component={App}>
		 *       <Route path="home" component={Dashboard}/>
		 *       <Route path="news" component={NewsFeed}/>
		 *     </Route>
		 *   )
		 *
		 * Note: This method is automatically used when you provide <Route> children
		 * to a <Router> component.
		 */
		function createRoutesFromReactChildren(children, parentRoute) {
		  var routes = [];

		  _react2.default.Children.forEach(children, function (element) {
		    if (_react2.default.isValidElement(element)) {
		      // Component classes may have a static create* method.
		      if (element.type.createRouteFromReactElement) {
		        var route = element.type.createRouteFromReactElement(element, parentRoute);

		        if (route) routes.push(route);
		      } else {
		        routes.push(createRouteFromReactElement(element));
		      }
		    }
		  });

		  return routes;
		}

		/**
		 * Creates and returns an array of routes from the given object which
		 * may be a JSX route, a plain object route, or an array of either.
		 */
		function createRoutes(routes) {
		  if (isReactChildren(routes)) {
		    routes = createRoutesFromReactChildren(routes);
		  } else if (routes && !Array.isArray(routes)) {
		    routes = [routes];
		  }

		  return routes;
		}

	/***/ },
	/* 34 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;
		exports.locationShape = exports.routerShape = undefined;

		var _react = __webpack_require__(12);

		var func = _react.PropTypes.func,
		    object = _react.PropTypes.object,
		    shape = _react.PropTypes.shape,
		    string = _react.PropTypes.string;
		var routerShape = exports.routerShape = shape({
		  push: func.isRequired,
		  replace: func.isRequired,
		  go: func.isRequired,
		  goBack: func.isRequired,
		  goForward: func.isRequired,
		  setRouteLeaveHook: func.isRequired,
		  isActive: func.isRequired
		});

		var locationShape = exports.locationShape = shape({
		  pathname: string.isRequired,
		  search: string.isRequired,
		  state: object,
		  action: string.isRequired,
		  key: string
		});

	/***/ },
	/* 35 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		exports.__esModule = true;
		exports.compilePattern = compilePattern;
		exports.matchPattern = matchPattern;
		exports.getParamNames = getParamNames;
		exports.getParams = getParams;
		exports.formatPattern = formatPattern;

		var _invariant = __webpack_require__(36);

		var _invariant2 = _interopRequireDefault(_invariant);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function escapeRegExp(string) {
		  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
		}

		function _compilePattern(pattern) {
		  var regexpSource = '';
		  var paramNames = [];
		  var tokens = [];

		  var match = void 0,
		      lastIndex = 0,
		      matcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|\*\*|\*|\(|\)/g;
		  while (match = matcher.exec(pattern)) {
		    if (match.index !== lastIndex) {
		      tokens.push(pattern.slice(lastIndex, match.index));
		      regexpSource += escapeRegExp(pattern.slice(lastIndex, match.index));
		    }

		    if (match[1]) {
		      regexpSource += '([^/]+)';
		      paramNames.push(match[1]);
		    } else if (match[0] === '**') {
		      regexpSource += '(.*)';
		      paramNames.push('splat');
		    } else if (match[0] === '*') {
		      regexpSource += '(.*?)';
		      paramNames.push('splat');
		    } else if (match[0] === '(') {
		      regexpSource += '(?:';
		    } else if (match[0] === ')') {
		      regexpSource += ')?';
		    }

		    tokens.push(match[0]);

		    lastIndex = matcher.lastIndex;
		  }

		  if (lastIndex !== pattern.length) {
		    tokens.push(pattern.slice(lastIndex, pattern.length));
		    regexpSource += escapeRegExp(pattern.slice(lastIndex, pattern.length));
		  }

		  return {
		    pattern: pattern,
		    regexpSource: regexpSource,
		    paramNames: paramNames,
		    tokens: tokens
		  };
		}

		var CompiledPatternsCache = Object.create(null);

		function compilePattern(pattern) {
		  if (!CompiledPatternsCache[pattern]) CompiledPatternsCache[pattern] = _compilePattern(pattern);

		  return CompiledPatternsCache[pattern];
		}

		/**
		 * Attempts to match a pattern on the given pathname. Patterns may use
		 * the following special characters:
		 *
		 * - :paramName     Matches a URL segment up to the next /, ?, or #. The
		 *                  captured string is considered a "param"
		 * - ()             Wraps a segment of the URL that is optional
		 * - *              Consumes (non-greedy) all characters up to the next
		 *                  character in the pattern, or to the end of the URL if
		 *                  there is none
		 * - **             Consumes (greedy) all characters up to the next character
		 *                  in the pattern, or to the end of the URL if there is none
		 *
		 *  The function calls callback(error, matched) when finished.
		 * The return value is an object with the following properties:
		 *
		 * - remainingPathname
		 * - paramNames
		 * - paramValues
		 */
		function matchPattern(pattern, pathname) {
		  // Ensure pattern starts with leading slash for consistency with pathname.
		  if (pattern.charAt(0) !== '/') {
		    pattern = '/' + pattern;
		  }

		  var _compilePattern2 = compilePattern(pattern),
		      regexpSource = _compilePattern2.regexpSource,
		      paramNames = _compilePattern2.paramNames,
		      tokens = _compilePattern2.tokens;

		  if (pattern.charAt(pattern.length - 1) !== '/') {
		    regexpSource += '/?'; // Allow optional path separator at end.
		  }

		  // Special-case patterns like '*' for catch-all routes.
		  if (tokens[tokens.length - 1] === '*') {
		    regexpSource += '$';
		  }

		  var match = pathname.match(new RegExp('^' + regexpSource, 'i'));
		  if (match == null) {
		    return null;
		  }

		  var matchedPath = match[0];
		  var remainingPathname = pathname.substr(matchedPath.length);

		  if (remainingPathname) {
		    // Require that the match ends at a path separator, if we didn't match
		    // the full path, so any remaining pathname is a new path segment.
		    if (matchedPath.charAt(matchedPath.length - 1) !== '/') {
		      return null;
		    }

		    // If there is a remaining pathname, treat the path separator as part of
		    // the remaining pathname for properly continuing the match.
		    remainingPathname = '/' + remainingPathname;
		  }

		  return {
		    remainingPathname: remainingPathname,
		    paramNames: paramNames,
		    paramValues: match.slice(1).map(function (v) {
		      return v && decodeURIComponent(v);
		    })
		  };
		}

		function getParamNames(pattern) {
		  return compilePattern(pattern).paramNames;
		}

		function getParams(pattern, pathname) {
		  var match = matchPattern(pattern, pathname);
		  if (!match) {
		    return null;
		  }

		  var paramNames = match.paramNames,
		      paramValues = match.paramValues;

		  var params = {};

		  paramNames.forEach(function (paramName, index) {
		    params[paramName] = paramValues[index];
		  });

		  return params;
		}

		/**
		 * Returns a version of the given pattern with params interpolated. Throws
		 * if there is a dynamic segment of the pattern for which there is no param.
		 */
		function formatPattern(pattern, params) {
		  params = params || {};

		  var _compilePattern3 = compilePattern(pattern),
		      tokens = _compilePattern3.tokens;

		  var parenCount = 0,
		      pathname = '',
		      splatIndex = 0,
		      parenHistory = [];

		  var token = void 0,
		      paramName = void 0,
		      paramValue = void 0;
		  for (var i = 0, len = tokens.length; i < len; ++i) {
		    token = tokens[i];

		    if (token === '*' || token === '**') {
		      paramValue = Array.isArray(params.splat) ? params.splat[splatIndex++] : params.splat;

		      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Missing splat #%s for path "%s"', splatIndex, pattern) : (0, _invariant2.default)(false) : void 0;

		      if (paramValue != null) pathname += encodeURI(paramValue);
		    } else if (token === '(') {
		      parenHistory[parenCount] = '';
		      parenCount += 1;
		    } else if (token === ')') {
		      var parenText = parenHistory.pop();
		      parenCount -= 1;

		      if (parenCount) parenHistory[parenCount - 1] += parenText;else pathname += parenText;
		    } else if (token.charAt(0) === ':') {
		      paramName = token.substring(1);
		      paramValue = params[paramName];

		      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Missing "%s" parameter for path "%s"', paramName, pattern) : (0, _invariant2.default)(false) : void 0;

		      if (paramValue == null) {
		        if (parenCount) {
		          parenHistory[parenCount - 1] = '';

		          var curTokenIdx = tokens.indexOf(token);
		          var tokensSubset = tokens.slice(curTokenIdx, tokens.length);
		          var nextParenIdx = -1;

		          for (var _i = 0; _i < tokensSubset.length; _i++) {
		            if (tokensSubset[_i] == ')') {
		              nextParenIdx = _i;
		              break;
		            }
		          }

		          !(nextParenIdx > 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Path "%s" is missing end paren at segment "%s"', pattern, tokensSubset.join('')) : (0, _invariant2.default)(false) : void 0;

		          // jump to ending paren
		          i = curTokenIdx + nextParenIdx - 1;
		        }
		      } else if (parenCount) parenHistory[parenCount - 1] += encodeURIComponent(paramValue);else pathname += encodeURIComponent(paramValue);
		    } else {
		      if (parenCount) parenHistory[parenCount - 1] += token;else pathname += token;
		    }
		  }

		  !(parenCount <= 0) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Path "%s" is missing end paren', pattern) : (0, _invariant2.default)(false) : void 0;

		  return pathname.replace(/\/+/g, '/');
		}
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 36 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {/**
		 * Copyright 2013-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 */

		'use strict';

		/**
		 * Use invariant() to assert state which your program assumes to be true.
		 *
		 * Provide sprintf-style format (only %s is supported) and arguments
		 * to provide information about what broke and what you were
		 * expecting.
		 *
		 * The invariant message will be stripped in production, but the invariant
		 * will remain to ensure logic does not differ in production.
		 */

		var invariant = function(condition, format, a, b, c, d, e, f) {
		  if (process.env.NODE_ENV !== 'production') {
		    if (format === undefined) {
		      throw new Error('invariant requires an error message argument');
		    }
		  }

		  if (!condition) {
		    var error;
		    if (format === undefined) {
		      error = new Error(
		        'Minified exception occurred; use the non-minified dev environment ' +
		        'for the full error message and additional helpful warnings.'
		      );
		    } else {
		      var args = [a, b, c, d, e, f];
		      var argIndex = 0;
		      error = new Error(
		        format.replace(/%s/g, function() { return args[argIndex++]; })
		      );
		      error.name = 'Invariant Violation';
		    }

		    error.framesToPop = 1; // we don't care about invariant's own frame
		    throw error;
		  }
		};

		module.exports = invariant;

		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 37 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _invariant = __webpack_require__(36);

		var _invariant2 = _interopRequireDefault(_invariant);

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _createTransitionManager2 = __webpack_require__(38);

		var _createTransitionManager3 = _interopRequireDefault(_createTransitionManager2);

		var _InternalPropTypes = __webpack_require__(48);

		var _RouterContext = __webpack_require__(49);

		var _RouterContext2 = _interopRequireDefault(_RouterContext);

		var _RouteUtils = __webpack_require__(33);

		var _RouterUtils = __webpack_require__(52);

		var _routerWarning = __webpack_require__(39);

		var _routerWarning2 = _interopRequireDefault(_routerWarning);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

		var _React$PropTypes = _react2.default.PropTypes,
		    func = _React$PropTypes.func,
		    object = _React$PropTypes.object;

		/**
		 * A <Router> is a high-level API for automatically setting up
		 * a router that renders a <RouterContext> with all the props
		 * it needs each time the URL changes.
		 */

		var Router = _react2.default.createClass({
		  displayName: 'Router',


		  propTypes: {
		    history: object,
		    children: _InternalPropTypes.routes,
		    routes: _InternalPropTypes.routes, // alias for children
		    render: func,
		    createElement: func,
		    onError: func,
		    onUpdate: func,

		    // PRIVATE: For client-side rehydration of server match.
		    matchContext: object
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      render: function render(props) {
		        return _react2.default.createElement(_RouterContext2.default, props);
		      }
		    };
		  },
		  getInitialState: function getInitialState() {
		    return {
		      location: null,
		      routes: null,
		      params: null,
		      components: null
		    };
		  },
		  handleError: function handleError(error) {
		    if (this.props.onError) {
		      this.props.onError.call(this, error);
		    } else {
		      // Throw errors by default so we don't silently swallow them!
		      throw error; // This error probably occurred in getChildRoutes or getComponents.
		    }
		  },
		  createRouterObject: function createRouterObject(state) {
		    var matchContext = this.props.matchContext;

		    if (matchContext) {
		      return matchContext.router;
		    }

		    var history = this.props.history;

		    return (0, _RouterUtils.createRouterObject)(history, this.transitionManager, state);
		  },
		  createTransitionManager: function createTransitionManager() {
		    var matchContext = this.props.matchContext;

		    if (matchContext) {
		      return matchContext.transitionManager;
		    }

		    var history = this.props.history;
		    var _props = this.props,
		        routes = _props.routes,
		        children = _props.children;


		    !history.getCurrentLocation ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'You have provided a history object created with history v2.x or ' + 'earlier. This version of React Router is only compatible with v3 ' + 'history objects. Please upgrade to history v3.x.') : (0, _invariant2.default)(false) : void 0;

		    return (0, _createTransitionManager3.default)(history, (0, _RouteUtils.createRoutes)(routes || children));
		  },
		  componentWillMount: function componentWillMount() {
		    var _this = this;

		    this.transitionManager = this.createTransitionManager();
		    this.router = this.createRouterObject(this.state);

		    this._unlisten = this.transitionManager.listen(function (error, state) {
		      if (error) {
		        _this.handleError(error);
		      } else {
		        // Keep the identity of this.router because of a caveat in ContextUtils:
		        // they only work if the object identity is preserved.
		        (0, _RouterUtils.assignRouterState)(_this.router, state);
		        _this.setState(state, _this.props.onUpdate);
		      }
		    });
		  },


		  /* istanbul ignore next: sanity check */
		  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		    process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(nextProps.history === this.props.history, 'You cannot change <Router history>; it will be ignored') : void 0;

		    process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)((nextProps.routes || nextProps.children) === (this.props.routes || this.props.children), 'You cannot change <Router routes>; it will be ignored') : void 0;
		  },
		  componentWillUnmount: function componentWillUnmount() {
		    if (this._unlisten) this._unlisten();
		  },
		  render: function render() {
		    var _state = this.state,
		        location = _state.location,
		        routes = _state.routes,
		        params = _state.params,
		        components = _state.components;

		    var _props2 = this.props,
		        createElement = _props2.createElement,
		        render = _props2.render,
		        props = _objectWithoutProperties(_props2, ['createElement', 'render']);

		    if (location == null) return null; // Async match

		    // Only forward non-Router-specific props to routing context, as those are
		    // the only ones that might be custom routing context props.
		    Object.keys(Router.propTypes).forEach(function (propType) {
		      return delete props[propType];
		    });

		    return render(_extends({}, props, {
		      router: this.router,
		      location: location,
		      routes: routes,
		      params: params,
		      components: components,
		      createElement: createElement
		    }));
		  }
		});

		exports.default = Router;
		module.exports = exports['default'];
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 38 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		exports.default = createTransitionManager;

		var _routerWarning = __webpack_require__(39);

		var _routerWarning2 = _interopRequireDefault(_routerWarning);

		var _computeChangedRoutes2 = __webpack_require__(41);

		var _computeChangedRoutes3 = _interopRequireDefault(_computeChangedRoutes2);

		var _TransitionUtils = __webpack_require__(42);

		var _isActive2 = __webpack_require__(44);

		var _isActive3 = _interopRequireDefault(_isActive2);

		var _getComponents = __webpack_require__(45);

		var _getComponents2 = _interopRequireDefault(_getComponents);

		var _matchRoutes = __webpack_require__(47);

		var _matchRoutes2 = _interopRequireDefault(_matchRoutes);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function hasAnyProperties(object) {
		  for (var p in object) {
		    if (Object.prototype.hasOwnProperty.call(object, p)) return true;
		  }return false;
		}

		function createTransitionManager(history, routes) {
		  var state = {};

		  // Signature should be (location, indexOnly), but needs to support (path,
		  // query, indexOnly)
		  function isActive(location, indexOnly) {
		    location = history.createLocation(location);

		    return (0, _isActive3.default)(location, indexOnly, state.location, state.routes, state.params);
		  }

		  var partialNextState = void 0;

		  function match(location, callback) {
		    if (partialNextState && partialNextState.location === location) {
		      // Continue from where we left off.
		      finishMatch(partialNextState, callback);
		    } else {
		      (0, _matchRoutes2.default)(routes, location, function (error, nextState) {
		        if (error) {
		          callback(error);
		        } else if (nextState) {
		          finishMatch(_extends({}, nextState, { location: location }), callback);
		        } else {
		          callback();
		        }
		      });
		    }
		  }

		  function finishMatch(nextState, callback) {
		    var _computeChangedRoutes = (0, _computeChangedRoutes3.default)(state, nextState),
		        leaveRoutes = _computeChangedRoutes.leaveRoutes,
		        changeRoutes = _computeChangedRoutes.changeRoutes,
		        enterRoutes = _computeChangedRoutes.enterRoutes;

		    (0, _TransitionUtils.runLeaveHooks)(leaveRoutes, state);

		    // Tear down confirmation hooks for left routes
		    leaveRoutes.filter(function (route) {
		      return enterRoutes.indexOf(route) === -1;
		    }).forEach(removeListenBeforeHooksForRoute);

		    // change and enter hooks are run in series
		    (0, _TransitionUtils.runChangeHooks)(changeRoutes, state, nextState, function (error, redirectInfo) {
		      if (error || redirectInfo) return handleErrorOrRedirect(error, redirectInfo);

		      (0, _TransitionUtils.runEnterHooks)(enterRoutes, nextState, finishEnterHooks);
		    });

		    function finishEnterHooks(error, redirectInfo) {
		      if (error || redirectInfo) return handleErrorOrRedirect(error, redirectInfo);

		      // TODO: Fetch components after state is updated.
		      (0, _getComponents2.default)(nextState, function (error, components) {
		        if (error) {
		          callback(error);
		        } else {
		          // TODO: Make match a pure function and have some other API
		          // for "match and update state".
		          callback(null, null, state = _extends({}, nextState, { components: components }));
		        }
		      });
		    }

		    function handleErrorOrRedirect(error, redirectInfo) {
		      if (error) callback(error);else callback(null, redirectInfo);
		    }
		  }

		  var RouteGuid = 1;

		  function getRouteID(route) {
		    var create = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

		    return route.__id__ || create && (route.__id__ = RouteGuid++);
		  }

		  var RouteHooks = Object.create(null);

		  function getRouteHooksForRoutes(routes) {
		    return routes.map(function (route) {
		      return RouteHooks[getRouteID(route)];
		    }).filter(function (hook) {
		      return hook;
		    });
		  }

		  function transitionHook(location, callback) {
		    (0, _matchRoutes2.default)(routes, location, function (error, nextState) {
		      if (nextState == null) {
		        // TODO: We didn't actually match anything, but hang
		        // onto error/nextState so we don't have to matchRoutes
		        // again in the listen callback.
		        callback();
		        return;
		      }

		      // Cache some state here so we don't have to
		      // matchRoutes() again in the listen callback.
		      partialNextState = _extends({}, nextState, { location: location });

		      var hooks = getRouteHooksForRoutes((0, _computeChangedRoutes3.default)(state, partialNextState).leaveRoutes);

		      var result = void 0;
		      for (var i = 0, len = hooks.length; result == null && i < len; ++i) {
		        // Passing the location arg here indicates to
		        // the user that this is a transition hook.
		        result = hooks[i](location);
		      }

		      callback(result);
		    });
		  }

		  /* istanbul ignore next: untestable with Karma */
		  function beforeUnloadHook() {
		    // Synchronously check to see if any route hooks want
		    // to prevent the current window/tab from closing.
		    if (state.routes) {
		      var hooks = getRouteHooksForRoutes(state.routes);

		      var message = void 0;
		      for (var i = 0, len = hooks.length; typeof message !== 'string' && i < len; ++i) {
		        // Passing no args indicates to the user that this is a
		        // beforeunload hook. We don't know the next location.
		        message = hooks[i]();
		      }

		      return message;
		    }
		  }

		  var unlistenBefore = void 0,
		      unlistenBeforeUnload = void 0;

		  function removeListenBeforeHooksForRoute(route) {
		    var routeID = getRouteID(route);
		    if (!routeID) {
		      return;
		    }

		    delete RouteHooks[routeID];

		    if (!hasAnyProperties(RouteHooks)) {
		      // teardown transition & beforeunload hooks
		      if (unlistenBefore) {
		        unlistenBefore();
		        unlistenBefore = null;
		      }

		      if (unlistenBeforeUnload) {
		        unlistenBeforeUnload();
		        unlistenBeforeUnload = null;
		      }
		    }
		  }

		  /**
		   * Registers the given hook function to run before leaving the given route.
		   *
		   * During a normal transition, the hook function receives the next location
		   * as its only argument and can return either a prompt message (string) to show the user,
		   * to make sure they want to leave the page; or `false`, to prevent the transition.
		   * Any other return value will have no effect.
		   *
		   * During the beforeunload event (in browsers) the hook receives no arguments.
		   * In this case it must return a prompt message to prevent the transition.
		   *
		   * Returns a function that may be used to unbind the listener.
		   */
		  function listenBeforeLeavingRoute(route, hook) {
		    var thereWereNoRouteHooks = !hasAnyProperties(RouteHooks);
		    var routeID = getRouteID(route, true);

		    RouteHooks[routeID] = hook;

		    if (thereWereNoRouteHooks) {
		      // setup transition & beforeunload hooks
		      unlistenBefore = history.listenBefore(transitionHook);

		      if (history.listenBeforeUnload) unlistenBeforeUnload = history.listenBeforeUnload(beforeUnloadHook);
		    }

		    return function () {
		      removeListenBeforeHooksForRoute(route);
		    };
		  }

		  /**
		   * This is the API for stateful environments. As the location
		   * changes, we update state and call the listener. We can also
		   * gracefully handle errors and redirects.
		   */
		  function listen(listener) {
		    function historyListener(location) {
		      if (state.location === location) {
		        listener(null, state);
		      } else {
		        match(location, function (error, redirectLocation, nextState) {
		          if (error) {
		            listener(error);
		          } else if (redirectLocation) {
		            history.replace(redirectLocation);
		          } else if (nextState) {
		            listener(null, nextState);
		          } else {
		            process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'Location "%s" did not match any routes', location.pathname + location.search + location.hash) : void 0;
		          }
		        });
		      }
		    }

		    // TODO: Only use a single history listener. Otherwise we'll end up with
		    // multiple concurrent calls to match.

		    // Set up the history listener first in case the initial match redirects.
		    var unsubscribe = history.listen(historyListener);

		    if (state.location) {
		      // Picking up on a matchContext.
		      listener(null, state);
		    } else {
		      historyListener(history.getCurrentLocation());
		    }

		    return unsubscribe;
		  }

		  return {
		    isActive: isActive,
		    match: match,
		    listenBeforeLeavingRoute: listenBeforeLeavingRoute,
		    listen: listen
		  };
		}
		module.exports = exports['default'];
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 39 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;
		exports.default = routerWarning;
		exports._resetWarned = _resetWarned;

		var _warning = __webpack_require__(40);

		var _warning2 = _interopRequireDefault(_warning);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var warned = {};

		function routerWarning(falseToWarn, message) {
		  // Only issue deprecation warnings once.
		  if (message.indexOf('deprecated') !== -1) {
		    if (warned[message]) {
		      return;
		    }

		    warned[message] = true;
		  }

		  message = '[react-router] ' + message;

		  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
		    args[_key - 2] = arguments[_key];
		  }

		  _warning2.default.apply(undefined, [falseToWarn, message].concat(args));
		}

		function _resetWarned() {
		  warned = {};
		}

	/***/ },
	/* 40 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {/**
		 * Copyright 2014-2015, Facebook, Inc.
		 * All rights reserved.
		 *
		 * This source code is licensed under the BSD-style license found in the
		 * LICENSE file in the root directory of this source tree. An additional grant
		 * of patent rights can be found in the PATENTS file in the same directory.
		 */

		'use strict';

		/**
		 * Similar to invariant but only logs a warning if the condition is not met.
		 * This can be used to log issues in development environments in critical
		 * paths. Removing the logging code for production environments will keep the
		 * same logic and follow the same code paths.
		 */

		var warning = function() {};

		if (process.env.NODE_ENV !== 'production') {
		  warning = function(condition, format, args) {
		    var len = arguments.length;
		    args = new Array(len > 2 ? len - 2 : 0);
		    for (var key = 2; key < len; key++) {
		      args[key - 2] = arguments[key];
		    }
		    if (format === undefined) {
		      throw new Error(
		        '`warning(condition, format, ...args)` requires a warning ' +
		        'message argument'
		      );
		    }

		    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
		      throw new Error(
		        'The warning format should be able to uniquely identify this ' +
		        'warning. Please, use a more descriptive format than: ' + format
		      );
		    }

		    if (!condition) {
		      var argIndex = 0;
		      var message = 'Warning: ' +
		        format.replace(/%s/g, function() {
		          return args[argIndex++];
		        });
		      if (typeof console !== 'undefined') {
		        console.error(message);
		      }
		      try {
		        // This error was thrown as a convenience so that you can use this stack
		        // to find the callsite that caused this warning to fire.
		        throw new Error(message);
		      } catch(x) {}
		    }
		  };
		}

		module.exports = warning;

		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 41 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _PatternUtils = __webpack_require__(35);

		function routeParamsChanged(route, prevState, nextState) {
		  if (!route.path) return false;

		  var paramNames = (0, _PatternUtils.getParamNames)(route.path);

		  return paramNames.some(function (paramName) {
		    return prevState.params[paramName] !== nextState.params[paramName];
		  });
		}

		/**
		 * Returns an object of { leaveRoutes, changeRoutes, enterRoutes } determined by
		 * the change from prevState to nextState. We leave routes if either
		 * 1) they are not in the next state or 2) they are in the next state
		 * but their params have changed (i.e. /users/123 => /users/456).
		 *
		 * leaveRoutes are ordered starting at the leaf route of the tree
		 * we're leaving up to the common parent route. enterRoutes are ordered
		 * from the top of the tree we're entering down to the leaf route.
		 *
		 * changeRoutes are any routes that didn't leave or enter during
		 * the transition.
		 */
		function computeChangedRoutes(prevState, nextState) {
		  var prevRoutes = prevState && prevState.routes;
		  var nextRoutes = nextState.routes;

		  var leaveRoutes = void 0,
		      changeRoutes = void 0,
		      enterRoutes = void 0;
		  if (prevRoutes) {
		    (function () {
		      var parentIsLeaving = false;
		      leaveRoutes = prevRoutes.filter(function (route) {
		        if (parentIsLeaving) {
		          return true;
		        } else {
		          var isLeaving = nextRoutes.indexOf(route) === -1 || routeParamsChanged(route, prevState, nextState);
		          if (isLeaving) parentIsLeaving = true;
		          return isLeaving;
		        }
		      });

		      // onLeave hooks start at the leaf route.
		      leaveRoutes.reverse();

		      enterRoutes = [];
		      changeRoutes = [];

		      nextRoutes.forEach(function (route) {
		        var isNew = prevRoutes.indexOf(route) === -1;
		        var paramsChanged = leaveRoutes.indexOf(route) !== -1;

		        if (isNew || paramsChanged) enterRoutes.push(route);else changeRoutes.push(route);
		      });
		    })();
		  } else {
		    leaveRoutes = [];
		    changeRoutes = [];
		    enterRoutes = nextRoutes;
		  }

		  return {
		    leaveRoutes: leaveRoutes,
		    changeRoutes: changeRoutes,
		    enterRoutes: enterRoutes
		  };
		}

		exports.default = computeChangedRoutes;
		module.exports = exports['default'];

	/***/ },
	/* 42 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;
		exports.runEnterHooks = runEnterHooks;
		exports.runChangeHooks = runChangeHooks;
		exports.runLeaveHooks = runLeaveHooks;

		var _AsyncUtils = __webpack_require__(43);

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		var PendingHooks = function PendingHooks() {
		  var _this = this;

		  _classCallCheck(this, PendingHooks);

		  this.hooks = [];

		  this.add = function (hook) {
		    return _this.hooks.push(hook);
		  };

		  this.remove = function (hook) {
		    return _this.hooks = _this.hooks.filter(function (h) {
		      return h !== hook;
		    });
		  };

		  this.has = function (hook) {
		    return _this.hooks.indexOf(hook) !== -1;
		  };

		  this.clear = function () {
		    return _this.hooks = [];
		  };
		};

		var enterHooks = new PendingHooks();
		var changeHooks = new PendingHooks();

		function createTransitionHook(hook, route, asyncArity, pendingHooks) {
		  var isSync = hook.length < asyncArity;

		  var transitionHook = function transitionHook() {
		    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    hook.apply(route, args);

		    if (isSync) {
		      var callback = args[args.length - 1];
		      // Assume hook executes synchronously and
		      // automatically call the callback.
		      callback();
		    }
		  };

		  pendingHooks.add(transitionHook);

		  return transitionHook;
		}

		function getEnterHooks(routes) {
		  return routes.reduce(function (hooks, route) {
		    if (route.onEnter) hooks.push(createTransitionHook(route.onEnter, route, 3, enterHooks));
		    return hooks;
		  }, []);
		}

		function getChangeHooks(routes) {
		  return routes.reduce(function (hooks, route) {
		    if (route.onChange) hooks.push(createTransitionHook(route.onChange, route, 4, changeHooks));
		    return hooks;
		  }, []);
		}

		function runTransitionHooks(length, iter, callback) {
		  if (!length) {
		    callback();
		    return;
		  }

		  var redirectInfo = void 0;
		  function replace(location) {
		    redirectInfo = location;
		  }

		  (0, _AsyncUtils.loopAsync)(length, function (index, next, done) {
		    iter(index, replace, function (error) {
		      if (error || redirectInfo) {
		        done(error, redirectInfo); // No need to continue.
		      } else {
		        next();
		      }
		    });
		  }, callback);
		}

		/**
		 * Runs all onEnter hooks in the given array of routes in order
		 * with onEnter(nextState, replace, callback) and calls
		 * callback(error, redirectInfo) when finished. The first hook
		 * to use replace short-circuits the loop.
		 *
		 * If a hook needs to run asynchronously, it may use the callback
		 * function. However, doing so will cause the transition to pause,
		 * which could lead to a non-responsive UI if the hook is slow.
		 */
		function runEnterHooks(routes, nextState, callback) {
		  enterHooks.clear();
		  var hooks = getEnterHooks(routes);
		  return runTransitionHooks(hooks.length, function (index, replace, next) {
		    var wrappedNext = function wrappedNext() {
		      if (enterHooks.has(hooks[index])) {
		        next();
		        enterHooks.remove(hooks[index]);
		      }
		    };
		    hooks[index](nextState, replace, wrappedNext);
		  }, callback);
		}

		/**
		 * Runs all onChange hooks in the given array of routes in order
		 * with onChange(prevState, nextState, replace, callback) and calls
		 * callback(error, redirectInfo) when finished. The first hook
		 * to use replace short-circuits the loop.
		 *
		 * If a hook needs to run asynchronously, it may use the callback
		 * function. However, doing so will cause the transition to pause,
		 * which could lead to a non-responsive UI if the hook is slow.
		 */
		function runChangeHooks(routes, state, nextState, callback) {
		  changeHooks.clear();
		  var hooks = getChangeHooks(routes);
		  return runTransitionHooks(hooks.length, function (index, replace, next) {
		    var wrappedNext = function wrappedNext() {
		      if (changeHooks.has(hooks[index])) {
		        next();
		        changeHooks.remove(hooks[index]);
		      }
		    };
		    hooks[index](state, nextState, replace, wrappedNext);
		  }, callback);
		}

		/**
		 * Runs all onLeave hooks in the given array of routes in order.
		 */
		function runLeaveHooks(routes, prevState) {
		  for (var i = 0, len = routes.length; i < len; ++i) {
		    if (routes[i].onLeave) routes[i].onLeave.call(routes[i], prevState);
		  }
		}

	/***/ },
	/* 43 */
	/***/ function(module, exports) {

		"use strict";

		exports.__esModule = true;
		exports.loopAsync = loopAsync;
		exports.mapAsync = mapAsync;
		function loopAsync(turns, work, callback) {
		  var currentTurn = 0,
		      isDone = false;
		  var sync = false,
		      hasNext = false,
		      doneArgs = void 0;

		  function done() {
		    isDone = true;
		    if (sync) {
		      // Iterate instead of recursing if possible.
		      doneArgs = [].concat(Array.prototype.slice.call(arguments));
		      return;
		    }

		    callback.apply(this, arguments);
		  }

		  function next() {
		    if (isDone) {
		      return;
		    }

		    hasNext = true;
		    if (sync) {
		      // Iterate instead of recursing if possible.
		      return;
		    }

		    sync = true;

		    while (!isDone && currentTurn < turns && hasNext) {
		      hasNext = false;
		      work.call(this, currentTurn++, next, done);
		    }

		    sync = false;

		    if (isDone) {
		      // This means the loop finished synchronously.
		      callback.apply(this, doneArgs);
		      return;
		    }

		    if (currentTurn >= turns && hasNext) {
		      isDone = true;
		      callback();
		    }
		  }

		  next();
		}

		function mapAsync(array, work, callback) {
		  var length = array.length;
		  var values = [];

		  if (length === 0) return callback(null, values);

		  var isDone = false,
		      doneCount = 0;

		  function done(index, error, value) {
		    if (isDone) return;

		    if (error) {
		      isDone = true;
		      callback(error);
		    } else {
		      values[index] = value;

		      isDone = ++doneCount === length;

		      if (isDone) callback(null, values);
		    }
		  }

		  array.forEach(function (item, index) {
		    work(item, index, function (error, value) {
		      done(index, error, value);
		    });
		  });
		}

	/***/ },
	/* 44 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

		exports.default = isActive;

		var _PatternUtils = __webpack_require__(35);

		function deepEqual(a, b) {
		  if (a == b) return true;

		  if (a == null || b == null) return false;

		  if (Array.isArray(a)) {
		    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
		      return deepEqual(item, b[index]);
		    });
		  }

		  if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object') {
		    for (var p in a) {
		      if (!Object.prototype.hasOwnProperty.call(a, p)) {
		        continue;
		      }

		      if (a[p] === undefined) {
		        if (b[p] !== undefined) {
		          return false;
		        }
		      } else if (!Object.prototype.hasOwnProperty.call(b, p)) {
		        return false;
		      } else if (!deepEqual(a[p], b[p])) {
		        return false;
		      }
		    }

		    return true;
		  }

		  return String(a) === String(b);
		}

		/**
		 * Returns true if the current pathname matches the supplied one, net of
		 * leading and trailing slash normalization. This is sufficient for an
		 * indexOnly route match.
		 */
		function pathIsActive(pathname, currentPathname) {
		  // Normalize leading slash for consistency. Leading slash on pathname has
		  // already been normalized in isActive. See caveat there.
		  if (currentPathname.charAt(0) !== '/') {
		    currentPathname = '/' + currentPathname;
		  }

		  // Normalize the end of both path names too. Maybe `/foo/` shouldn't show
		  // `/foo` as active, but in this case, we would already have failed the
		  // match.
		  if (pathname.charAt(pathname.length - 1) !== '/') {
		    pathname += '/';
		  }
		  if (currentPathname.charAt(currentPathname.length - 1) !== '/') {
		    currentPathname += '/';
		  }

		  return currentPathname === pathname;
		}

		/**
		 * Returns true if the given pathname matches the active routes and params.
		 */
		function routeIsActive(pathname, routes, params) {
		  var remainingPathname = pathname,
		      paramNames = [],
		      paramValues = [];

		  // for...of would work here but it's probably slower post-transpilation.
		  for (var i = 0, len = routes.length; i < len; ++i) {
		    var route = routes[i];
		    var pattern = route.path || '';

		    if (pattern.charAt(0) === '/') {
		      remainingPathname = pathname;
		      paramNames = [];
		      paramValues = [];
		    }

		    if (remainingPathname !== null && pattern) {
		      var matched = (0, _PatternUtils.matchPattern)(pattern, remainingPathname);
		      if (matched) {
		        remainingPathname = matched.remainingPathname;
		        paramNames = [].concat(paramNames, matched.paramNames);
		        paramValues = [].concat(paramValues, matched.paramValues);
		      } else {
		        remainingPathname = null;
		      }

		      if (remainingPathname === '') {
		        // We have an exact match on the route. Just check that all the params
		        // match.
		        // FIXME: This doesn't work on repeated params.
		        return paramNames.every(function (paramName, index) {
		          return String(paramValues[index]) === String(params[paramName]);
		        });
		      }
		    }
		  }

		  return false;
		}

		/**
		 * Returns true if all key/value pairs in the given query are
		 * currently active.
		 */
		function queryIsActive(query, activeQuery) {
		  if (activeQuery == null) return query == null;

		  if (query == null) return true;

		  return deepEqual(query, activeQuery);
		}

		/**
		 * Returns true if a <Link> to the given pathname/query combination is
		 * currently active.
		 */
		function isActive(_ref, indexOnly, currentLocation, routes, params) {
		  var pathname = _ref.pathname,
		      query = _ref.query;

		  if (currentLocation == null) return false;

		  // TODO: This is a bit ugly. It keeps around support for treating pathnames
		  // without preceding slashes as absolute paths, but possibly also works
		  // around the same quirks with basenames as in matchRoutes.
		  if (pathname.charAt(0) !== '/') {
		    pathname = '/' + pathname;
		  }

		  if (!pathIsActive(pathname, currentLocation.pathname)) {
		    // The path check is necessary and sufficient for indexOnly, but otherwise
		    // we still need to check the routes.
		    if (indexOnly || !routeIsActive(pathname, routes, params)) {
		      return false;
		    }
		  }

		  return queryIsActive(query, currentLocation.query);
		}
		module.exports = exports['default'];

	/***/ },
	/* 45 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _AsyncUtils = __webpack_require__(43);

		var _PromiseUtils = __webpack_require__(46);

		function getComponentsForRoute(nextState, route, callback) {
		  if (route.component || route.components) {
		    callback(null, route.component || route.components);
		    return;
		  }

		  var getComponent = route.getComponent || route.getComponents;
		  if (getComponent) {
		    var componentReturn = getComponent.call(route, nextState, callback);
		    if ((0, _PromiseUtils.isPromise)(componentReturn)) componentReturn.then(function (component) {
		      return callback(null, component);
		    }, callback);
		  } else {
		    callback();
		  }
		}

		/**
		 * Asynchronously fetches all components needed for the given router
		 * state and calls callback(error, components) when finished.
		 *
		 * Note: This operation may finish synchronously if no routes have an
		 * asynchronous getComponents method.
		 */
		function getComponents(nextState, callback) {
		  (0, _AsyncUtils.mapAsync)(nextState.routes, function (route, index, callback) {
		    getComponentsForRoute(nextState, route, callback);
		  }, callback);
		}

		exports.default = getComponents;
		module.exports = exports['default'];

	/***/ },
	/* 46 */
	/***/ function(module, exports) {

		'use strict';

		exports.__esModule = true;
		exports.isPromise = isPromise;
		function isPromise(obj) {
		  return obj && typeof obj.then === 'function';
		}

	/***/ },
	/* 47 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

		exports.default = matchRoutes;

		var _AsyncUtils = __webpack_require__(43);

		var _PromiseUtils = __webpack_require__(46);

		var _PatternUtils = __webpack_require__(35);

		var _routerWarning = __webpack_require__(39);

		var _routerWarning2 = _interopRequireDefault(_routerWarning);

		var _RouteUtils = __webpack_require__(33);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function getChildRoutes(route, location, paramNames, paramValues, callback) {
		  if (route.childRoutes) {
		    return [null, route.childRoutes];
		  }
		  if (!route.getChildRoutes) {
		    return [];
		  }

		  var sync = true,
		      result = void 0;

		  var partialNextState = {
		    location: location,
		    params: createParams(paramNames, paramValues)
		  };

		  var childRoutesReturn = route.getChildRoutes(partialNextState, function (error, childRoutes) {
		    childRoutes = !error && (0, _RouteUtils.createRoutes)(childRoutes);
		    if (sync) {
		      result = [error, childRoutes];
		      return;
		    }

		    callback(error, childRoutes);
		  });

		  if ((0, _PromiseUtils.isPromise)(childRoutesReturn)) childRoutesReturn.then(function (childRoutes) {
		    return callback(null, (0, _RouteUtils.createRoutes)(childRoutes));
		  }, callback);

		  sync = false;
		  return result; // Might be undefined.
		}

		function getIndexRoute(route, location, paramNames, paramValues, callback) {
		  if (route.indexRoute) {
		    callback(null, route.indexRoute);
		  } else if (route.getIndexRoute) {
		    var partialNextState = {
		      location: location,
		      params: createParams(paramNames, paramValues)
		    };

		    var indexRoutesReturn = route.getIndexRoute(partialNextState, function (error, indexRoute) {
		      callback(error, !error && (0, _RouteUtils.createRoutes)(indexRoute)[0]);
		    });

		    if ((0, _PromiseUtils.isPromise)(indexRoutesReturn)) indexRoutesReturn.then(function (indexRoute) {
		      return callback(null, (0, _RouteUtils.createRoutes)(indexRoute)[0]);
		    }, callback);
		  } else if (route.childRoutes) {
		    (function () {
		      var pathless = route.childRoutes.filter(function (childRoute) {
		        return !childRoute.path;
		      });

		      (0, _AsyncUtils.loopAsync)(pathless.length, function (index, next, done) {
		        getIndexRoute(pathless[index], location, paramNames, paramValues, function (error, indexRoute) {
		          if (error || indexRoute) {
		            var routes = [pathless[index]].concat(Array.isArray(indexRoute) ? indexRoute : [indexRoute]);
		            done(error, routes);
		          } else {
		            next();
		          }
		        });
		      }, function (err, routes) {
		        callback(null, routes);
		      });
		    })();
		  } else {
		    callback();
		  }
		}

		function assignParams(params, paramNames, paramValues) {
		  return paramNames.reduce(function (params, paramName, index) {
		    var paramValue = paramValues && paramValues[index];

		    if (Array.isArray(params[paramName])) {
		      params[paramName].push(paramValue);
		    } else if (paramName in params) {
		      params[paramName] = [params[paramName], paramValue];
		    } else {
		      params[paramName] = paramValue;
		    }

		    return params;
		  }, params);
		}

		function createParams(paramNames, paramValues) {
		  return assignParams({}, paramNames, paramValues);
		}

		function matchRouteDeep(route, location, remainingPathname, paramNames, paramValues, callback) {
		  var pattern = route.path || '';

		  if (pattern.charAt(0) === '/') {
		    remainingPathname = location.pathname;
		    paramNames = [];
		    paramValues = [];
		  }

		  // Only try to match the path if the route actually has a pattern, and if
		  // we're not just searching for potential nested absolute paths.
		  if (remainingPathname !== null && pattern) {
		    try {
		      var matched = (0, _PatternUtils.matchPattern)(pattern, remainingPathname);
		      if (matched) {
		        remainingPathname = matched.remainingPathname;
		        paramNames = [].concat(paramNames, matched.paramNames);
		        paramValues = [].concat(paramValues, matched.paramValues);
		      } else {
		        remainingPathname = null;
		      }
		    } catch (error) {
		      callback(error);
		    }

		    // By assumption, pattern is non-empty here, which is the prerequisite for
		    // actually terminating a match.
		    if (remainingPathname === '') {
		      var _ret2 = function () {
		        var match = {
		          routes: [route],
		          params: createParams(paramNames, paramValues)
		        };

		        getIndexRoute(route, location, paramNames, paramValues, function (error, indexRoute) {
		          if (error) {
		            callback(error);
		          } else {
		            if (Array.isArray(indexRoute)) {
		              var _match$routes;

		              process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(indexRoute.every(function (route) {
		                return !route.path;
		              }), 'Index routes should not have paths') : void 0;
		              (_match$routes = match.routes).push.apply(_match$routes, indexRoute);
		            } else if (indexRoute) {
		              process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(!indexRoute.path, 'Index routes should not have paths') : void 0;
		              match.routes.push(indexRoute);
		            }

		            callback(null, match);
		          }
		        });

		        return {
		          v: void 0
		        };
		      }();

		      if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
		    }
		  }

		  if (remainingPathname != null || route.childRoutes) {
		    // Either a) this route matched at least some of the path or b)
		    // we don't have to load this route's children asynchronously. In
		    // either case continue checking for matches in the subtree.
		    var onChildRoutes = function onChildRoutes(error, childRoutes) {
		      if (error) {
		        callback(error);
		      } else if (childRoutes) {
		        // Check the child routes to see if any of them match.
		        matchRoutes(childRoutes, location, function (error, match) {
		          if (error) {
		            callback(error);
		          } else if (match) {
		            // A child route matched! Augment the match and pass it up the stack.
		            match.routes.unshift(route);
		            callback(null, match);
		          } else {
		            callback();
		          }
		        }, remainingPathname, paramNames, paramValues);
		      } else {
		        callback();
		      }
		    };

		    var result = getChildRoutes(route, location, paramNames, paramValues, onChildRoutes);
		    if (result) {
		      onChildRoutes.apply(undefined, result);
		    }
		  } else {
		    callback();
		  }
		}

		/**
		 * Asynchronously matches the given location to a set of routes and calls
		 * callback(error, state) when finished. The state object will have the
		 * following properties:
		 *
		 * - routes       An array of routes that matched, in hierarchical order
		 * - params       An object of URL parameters
		 *
		 * Note: This operation may finish synchronously if no routes have an
		 * asynchronous getChildRoutes method.
		 */
		function matchRoutes(routes, location, callback, remainingPathname) {
		  var paramNames = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
		  var paramValues = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];

		  if (remainingPathname === undefined) {
		    // TODO: This is a little bit ugly, but it works around a quirk in history
		    // that strips the leading slash from pathnames when using basenames with
		    // trailing slashes.
		    if (location.pathname.charAt(0) !== '/') {
		      location = _extends({}, location, {
		        pathname: '/' + location.pathname
		      });
		    }
		    remainingPathname = location.pathname;
		  }

		  (0, _AsyncUtils.loopAsync)(routes.length, function (index, next, done) {
		    matchRouteDeep(routes[index], location, remainingPathname, paramNames, paramValues, function (error, match) {
		      if (error || match) {
		        done(error, match);
		      } else {
		        next();
		      }
		    });
		  }, callback);
		}
		module.exports = exports['default'];
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 48 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;
		exports.routes = exports.route = exports.components = exports.component = exports.history = undefined;
		exports.falsy = falsy;

		var _react = __webpack_require__(12);

		var func = _react.PropTypes.func,
		    object = _react.PropTypes.object,
		    arrayOf = _react.PropTypes.arrayOf,
		    oneOfType = _react.PropTypes.oneOfType,
		    element = _react.PropTypes.element,
		    shape = _react.PropTypes.shape,
		    string = _react.PropTypes.string;
		function falsy(props, propName, componentName) {
		  if (props[propName]) return new Error('<' + componentName + '> should not have a "' + propName + '" prop');
		}

		var history = exports.history = shape({
		  listen: func.isRequired,
		  push: func.isRequired,
		  replace: func.isRequired,
		  go: func.isRequired,
		  goBack: func.isRequired,
		  goForward: func.isRequired
		});

		var component = exports.component = oneOfType([func, string]);
		var components = exports.components = oneOfType([component, object]);
		var route = exports.route = oneOfType([object, element]);
		var routes = exports.routes = oneOfType([route, arrayOf(route)]);

	/***/ },
	/* 49 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

		var _invariant = __webpack_require__(36);

		var _invariant2 = _interopRequireDefault(_invariant);

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _getRouteParams = __webpack_require__(50);

		var _getRouteParams2 = _interopRequireDefault(_getRouteParams);

		var _ContextUtils = __webpack_require__(51);

		var _RouteUtils = __webpack_require__(33);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var _React$PropTypes = _react2.default.PropTypes,
		    array = _React$PropTypes.array,
		    func = _React$PropTypes.func,
		    object = _React$PropTypes.object;

		/**
		 * A <RouterContext> renders the component tree for a given router state
		 * and sets the history object and the current location in context.
		 */

		var RouterContext = _react2.default.createClass({
		  displayName: 'RouterContext',


		  mixins: [(0, _ContextUtils.ContextProvider)('router')],

		  propTypes: {
		    router: object.isRequired,
		    location: object.isRequired,
		    routes: array.isRequired,
		    params: object.isRequired,
		    components: array.isRequired,
		    createElement: func.isRequired
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      createElement: _react2.default.createElement
		    };
		  },


		  childContextTypes: {
		    router: object.isRequired
		  },

		  getChildContext: function getChildContext() {
		    return {
		      router: this.props.router
		    };
		  },
		  createElement: function createElement(component, props) {
		    return component == null ? null : this.props.createElement(component, props);
		  },
		  render: function render() {
		    var _this = this;

		    var _props = this.props,
		        location = _props.location,
		        routes = _props.routes,
		        params = _props.params,
		        components = _props.components,
		        router = _props.router;

		    var element = null;

		    if (components) {
		      element = components.reduceRight(function (element, components, index) {
		        if (components == null) return element; // Don't create new children; use the grandchildren.

		        var route = routes[index];
		        var routeParams = (0, _getRouteParams2.default)(route, params);
		        var props = {
		          location: location,
		          params: params,
		          route: route,
		          router: router,
		          routeParams: routeParams,
		          routes: routes
		        };

		        if ((0, _RouteUtils.isReactChildren)(element)) {
		          props.children = element;
		        } else if (element) {
		          for (var prop in element) {
		            if (Object.prototype.hasOwnProperty.call(element, prop)) props[prop] = element[prop];
		          }
		        }

		        if ((typeof components === 'undefined' ? 'undefined' : _typeof(components)) === 'object') {
		          var elements = {};

		          for (var key in components) {
		            if (Object.prototype.hasOwnProperty.call(components, key)) {
		              // Pass through the key as a prop to createElement to allow
		              // custom createElement functions to know which named component
		              // they're rendering, for e.g. matching up to fetched data.
		              elements[key] = _this.createElement(components[key], _extends({
		                key: key }, props));
		            }
		          }

		          return elements;
		        }

		        return _this.createElement(components, props);
		      }, element);
		    }

		    !(element === null || element === false || _react2.default.isValidElement(element)) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'The root route must render a single element') : (0, _invariant2.default)(false) : void 0;

		    return element;
		  }
		});

		exports.default = RouterContext;
		module.exports = exports['default'];
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 50 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _PatternUtils = __webpack_require__(35);

		/**
		 * Extracts an object of params the given route cares about from
		 * the given params object.
		 */
		function getRouteParams(route, params) {
		  var routeParams = {};

		  if (!route.path) return routeParams;

		  (0, _PatternUtils.getParamNames)(route.path).forEach(function (p) {
		    if (Object.prototype.hasOwnProperty.call(params, p)) {
		      routeParams[p] = params[p];
		    }
		  });

		  return routeParams;
		}

		exports.default = getRouteParams;
		module.exports = exports['default'];

	/***/ },
	/* 51 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;
		exports.ContextProvider = ContextProvider;
		exports.ContextSubscriber = ContextSubscriber;

		var _react = __webpack_require__(12);

		// Works around issues with context updates failing to propagate.
		// Caveat: the context value is expected to never change its identity.
		// https://github.com/facebook/react/issues/2517
		// https://github.com/reactjs/react-router/issues/470

		var contextProviderShape = _react.PropTypes.shape({
		  subscribe: _react.PropTypes.func.isRequired,
		  eventIndex: _react.PropTypes.number.isRequired
		});

		function makeContextName(name) {
		  return '@@contextSubscriber/' + name;
		}

		function ContextProvider(name) {
		  var _childContextTypes, _ref2;

		  var contextName = makeContextName(name);
		  var listenersKey = contextName + '/listeners';
		  var eventIndexKey = contextName + '/eventIndex';
		  var subscribeKey = contextName + '/subscribe';

		  return _ref2 = {
		    childContextTypes: (_childContextTypes = {}, _childContextTypes[contextName] = contextProviderShape.isRequired, _childContextTypes),

		    getChildContext: function getChildContext() {
		      var _ref;

		      return _ref = {}, _ref[contextName] = {
		        eventIndex: this[eventIndexKey],
		        subscribe: this[subscribeKey]
		      }, _ref;
		    },
		    componentWillMount: function componentWillMount() {
		      this[listenersKey] = [];
		      this[eventIndexKey] = 0;
		    },
		    componentWillReceiveProps: function componentWillReceiveProps() {
		      this[eventIndexKey]++;
		    },
		    componentDidUpdate: function componentDidUpdate() {
		      var _this = this;

		      this[listenersKey].forEach(function (listener) {
		        return listener(_this[eventIndexKey]);
		      });
		    }
		  }, _ref2[subscribeKey] = function (listener) {
		    var _this2 = this;

		    // No need to immediately call listener here.
		    this[listenersKey].push(listener);

		    return function () {
		      _this2[listenersKey] = _this2[listenersKey].filter(function (item) {
		        return item !== listener;
		      });
		    };
		  }, _ref2;
		}

		function ContextSubscriber(name) {
		  var _contextTypes, _ref4;

		  var contextName = makeContextName(name);
		  var lastRenderedEventIndexKey = contextName + '/lastRenderedEventIndex';
		  var handleContextUpdateKey = contextName + '/handleContextUpdate';
		  var unsubscribeKey = contextName + '/unsubscribe';

		  return _ref4 = {
		    contextTypes: (_contextTypes = {}, _contextTypes[contextName] = contextProviderShape, _contextTypes),

		    getInitialState: function getInitialState() {
		      var _ref3;

		      if (!this.context[contextName]) {
		        return {};
		      }

		      return _ref3 = {}, _ref3[lastRenderedEventIndexKey] = this.context[contextName].eventIndex, _ref3;
		    },
		    componentDidMount: function componentDidMount() {
		      if (!this.context[contextName]) {
		        return;
		      }

		      this[unsubscribeKey] = this.context[contextName].subscribe(this[handleContextUpdateKey]);
		    },
		    componentWillReceiveProps: function componentWillReceiveProps() {
		      var _setState;

		      if (!this.context[contextName]) {
		        return;
		      }

		      this.setState((_setState = {}, _setState[lastRenderedEventIndexKey] = this.context[contextName].eventIndex, _setState));
		    },
		    componentWillUnmount: function componentWillUnmount() {
		      if (!this[unsubscribeKey]) {
		        return;
		      }

		      this[unsubscribeKey]();
		      this[unsubscribeKey] = null;
		    }
		  }, _ref4[handleContextUpdateKey] = function (eventIndex) {
		    if (eventIndex !== this.state[lastRenderedEventIndexKey]) {
		      var _setState2;

		      this.setState((_setState2 = {}, _setState2[lastRenderedEventIndexKey] = eventIndex, _setState2));
		    }
		  }, _ref4;
		}

	/***/ },
	/* 52 */
	/***/ function(module, exports) {

		"use strict";

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		exports.createRouterObject = createRouterObject;
		exports.assignRouterState = assignRouterState;
		function createRouterObject(history, transitionManager, state) {
		  var router = _extends({}, history, {
		    setRouteLeaveHook: transitionManager.listenBeforeLeavingRoute,
		    isActive: transitionManager.isActive
		  });

		  return assignRouterState(router, state);
		}

		function assignRouterState(router, _ref) {
		  var location = _ref.location,
		      params = _ref.params,
		      routes = _ref.routes;

		  router.location = location;
		  router.params = params;
		  router.routes = routes;

		  return router;
		}

	/***/ },
	/* 53 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _invariant = __webpack_require__(36);

		var _invariant2 = _interopRequireDefault(_invariant);

		var _PropTypes = __webpack_require__(34);

		var _ContextUtils = __webpack_require__(51);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

		var _React$PropTypes = _react2.default.PropTypes,
		    bool = _React$PropTypes.bool,
		    object = _React$PropTypes.object,
		    string = _React$PropTypes.string,
		    func = _React$PropTypes.func,
		    oneOfType = _React$PropTypes.oneOfType;


		function isLeftClickEvent(event) {
		  return event.button === 0;
		}

		function isModifiedEvent(event) {
		  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
		}

		// TODO: De-duplicate against hasAnyProperties in createTransitionManager.
		function isEmptyObject(object) {
		  for (var p in object) {
		    if (Object.prototype.hasOwnProperty.call(object, p)) return false;
		  }return true;
		}

		function resolveToLocation(to, router) {
		  return typeof to === 'function' ? to(router.location) : to;
		}

		/**
		 * A <Link> is used to create an <a> element that links to a route.
		 * When that route is active, the link gets the value of its
		 * activeClassName prop.
		 *
		 * For example, assuming you have the following route:
		 *
		 *   <Route path="/posts/:postID" component={Post} />
		 *
		 * You could use the following component to link to that route:
		 *
		 *   <Link to={`/posts/${post.id}`} />
		 *
		 * Links may pass along location state and/or query string parameters
		 * in the state/query props, respectively.
		 *
		 *   <Link ... query={{ show: true }} state={{ the: 'state' }} />
		 */
		var Link = _react2.default.createClass({
		  displayName: 'Link',


		  mixins: [(0, _ContextUtils.ContextSubscriber)('router')],

		  contextTypes: {
		    router: _PropTypes.routerShape
		  },

		  propTypes: {
		    to: oneOfType([string, object, func]),
		    query: object,
		    hash: string,
		    state: object,
		    activeStyle: object,
		    activeClassName: string,
		    onlyActiveOnIndex: bool.isRequired,
		    onClick: func,
		    target: string
		  },

		  getDefaultProps: function getDefaultProps() {
		    return {
		      onlyActiveOnIndex: false,
		      style: {}
		    };
		  },
		  handleClick: function handleClick(event) {
		    if (this.props.onClick) this.props.onClick(event);

		    if (event.defaultPrevented) return;

		    var router = this.context.router;

		    !router ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<Link>s rendered outside of a router context cannot navigate.') : (0, _invariant2.default)(false) : void 0;

		    if (isModifiedEvent(event) || !isLeftClickEvent(event)) return;

		    // If target prop is set (e.g. to "_blank"), let browser handle link.
		    /* istanbul ignore if: untestable with Karma */
		    if (this.props.target) return;

		    event.preventDefault();

		    router.push(resolveToLocation(this.props.to, router));
		  },
		  render: function render() {
		    var _props = this.props,
		        to = _props.to,
		        activeClassName = _props.activeClassName,
		        activeStyle = _props.activeStyle,
		        onlyActiveOnIndex = _props.onlyActiveOnIndex,
		        props = _objectWithoutProperties(_props, ['to', 'activeClassName', 'activeStyle', 'onlyActiveOnIndex']);

		    // Ignore if rendered outside the context of router to simplify unit testing.


		    var router = this.context.router;


		    if (router) {
		      // If user does not specify a `to` prop, return an empty anchor tag.
		      if (to == null) {
		        return _react2.default.createElement('a', props);
		      }

		      var toLocation = resolveToLocation(to, router);
		      props.href = router.createHref(toLocation);

		      if (activeClassName || activeStyle != null && !isEmptyObject(activeStyle)) {
		        if (router.isActive(toLocation, onlyActiveOnIndex)) {
		          if (activeClassName) {
		            if (props.className) {
		              props.className += ' ' + activeClassName;
		            } else {
		              props.className = activeClassName;
		            }
		          }

		          if (activeStyle) props.style = _extends({}, props.style, activeStyle);
		        }
		      }
		    }

		    return _react2.default.createElement('a', _extends({}, props, { onClick: this.handleClick }));
		  }
		});

		exports.default = Link;
		module.exports = exports['default'];
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 54 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _Link = __webpack_require__(53);

		var _Link2 = _interopRequireDefault(_Link);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		/**
		 * An <IndexLink> is used to link to an <IndexRoute>.
		 */
		var IndexLink = _react2.default.createClass({
		  displayName: 'IndexLink',
		  render: function render() {
		    return _react2.default.createElement(_Link2.default, _extends({}, this.props, { onlyActiveOnIndex: true }));
		  }
		});

		exports.default = IndexLink;
		module.exports = exports['default'];

	/***/ },
	/* 55 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		exports.default = withRouter;

		var _invariant = __webpack_require__(36);

		var _invariant2 = _interopRequireDefault(_invariant);

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _hoistNonReactStatics = __webpack_require__(56);

		var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

		var _ContextUtils = __webpack_require__(51);

		var _PropTypes = __webpack_require__(34);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function getDisplayName(WrappedComponent) {
		  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
		}

		function withRouter(WrappedComponent, options) {
		  var withRef = options && options.withRef;

		  var WithRouter = _react2.default.createClass({
		    displayName: 'WithRouter',

		    mixins: [(0, _ContextUtils.ContextSubscriber)('router')],

		    contextTypes: { router: _PropTypes.routerShape },
		    propTypes: { router: _PropTypes.routerShape },

		    getWrappedInstance: function getWrappedInstance() {
		      !withRef ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'To access the wrapped instance, you need to specify ' + '`{ withRef: true }` as the second argument of the withRouter() call.') : (0, _invariant2.default)(false) : void 0;

		      return this.wrappedInstance;
		    },
		    render: function render() {
		      var _this = this;

		      var router = this.props.router || this.context.router;
		      var params = router.params,
		          location = router.location,
		          routes = router.routes;

		      var props = _extends({}, this.props, { router: router, params: params, location: location, routes: routes });

		      if (withRef) {
		        props.ref = function (c) {
		          _this.wrappedInstance = c;
		        };
		      }

		      return _react2.default.createElement(WrappedComponent, props);
		    }
		  });

		  WithRouter.displayName = 'withRouter(' + getDisplayName(WrappedComponent) + ')';
		  WithRouter.WrappedComponent = WrappedComponent;

		  return (0, _hoistNonReactStatics2.default)(WithRouter, WrappedComponent);
		}
		module.exports = exports['default'];
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 56 */
	/***/ function(module, exports) {

		/**
		 * Copyright 2015, Yahoo! Inc.
		 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
		 */
		'use strict';

		var REACT_STATICS = {
		    childContextTypes: true,
		    contextTypes: true,
		    defaultProps: true,
		    displayName: true,
		    getDefaultProps: true,
		    mixins: true,
		    propTypes: true,
		    type: true
		};

		var KNOWN_STATICS = {
		    name: true,
		    length: true,
		    prototype: true,
		    caller: true,
		    arguments: true,
		    arity: true
		};

		var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';

		module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
		    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components
		        var keys = Object.getOwnPropertyNames(sourceComponent);

		        /* istanbul ignore else */
		        if (isGetOwnPropertySymbolsAvailable) {
		            keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
		        }

		        for (var i = 0; i < keys.length; ++i) {
		            if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
		                try {
		                    targetComponent[keys[i]] = sourceComponent[keys[i]];
		                } catch (error) {

		                }
		            }
		        }
		    }

		    return targetComponent;
		};


	/***/ },
	/* 57 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		exports.__esModule = true;

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _routerWarning = __webpack_require__(39);

		var _routerWarning2 = _interopRequireDefault(_routerWarning);

		var _invariant = __webpack_require__(36);

		var _invariant2 = _interopRequireDefault(_invariant);

		var _Redirect = __webpack_require__(58);

		var _Redirect2 = _interopRequireDefault(_Redirect);

		var _InternalPropTypes = __webpack_require__(48);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var _React$PropTypes = _react2.default.PropTypes,
		    string = _React$PropTypes.string,
		    object = _React$PropTypes.object;

		/**
		 * An <IndexRedirect> is used to redirect from an indexRoute.
		 */
		/* eslint-disable react/require-render-return */

		var IndexRedirect = _react2.default.createClass({
		  displayName: 'IndexRedirect',


		  statics: {
		    createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
		      /* istanbul ignore else: sanity check */
		      if (parentRoute) {
		        parentRoute.indexRoute = _Redirect2.default.createRouteFromReactElement(element);
		      } else {
		        process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'An <IndexRedirect> does not make sense at the root of your route config') : void 0;
		      }
		    }
		  },

		  propTypes: {
		    to: string.isRequired,
		    query: object,
		    state: object,
		    onEnter: _InternalPropTypes.falsy,
		    children: _InternalPropTypes.falsy
		  },

		  /* istanbul ignore next: sanity check */
		  render: function render() {
		     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<IndexRedirect> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
		  }
		});

		exports.default = IndexRedirect;
		module.exports = exports['default'];
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 58 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		exports.__esModule = true;

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _invariant = __webpack_require__(36);

		var _invariant2 = _interopRequireDefault(_invariant);

		var _RouteUtils = __webpack_require__(33);

		var _PatternUtils = __webpack_require__(35);

		var _InternalPropTypes = __webpack_require__(48);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var _React$PropTypes = _react2.default.PropTypes,
		    string = _React$PropTypes.string,
		    object = _React$PropTypes.object;

		/**
		 * A <Redirect> is used to declare another URL path a client should
		 * be sent to when they request a given URL.
		 *
		 * Redirects are placed alongside routes in the route configuration
		 * and are traversed in the same manner.
		 */
		/* eslint-disable react/require-render-return */

		var Redirect = _react2.default.createClass({
		  displayName: 'Redirect',


		  statics: {
		    createRouteFromReactElement: function createRouteFromReactElement(element) {
		      var route = (0, _RouteUtils.createRouteFromReactElement)(element);

		      if (route.from) route.path = route.from;

		      route.onEnter = function (nextState, replace) {
		        var location = nextState.location,
		            params = nextState.params;


		        var pathname = void 0;
		        if (route.to.charAt(0) === '/') {
		          pathname = (0, _PatternUtils.formatPattern)(route.to, params);
		        } else if (!route.to) {
		          pathname = location.pathname;
		        } else {
		          var routeIndex = nextState.routes.indexOf(route);
		          var parentPattern = Redirect.getRoutePattern(nextState.routes, routeIndex - 1);
		          var pattern = parentPattern.replace(/\/*$/, '/') + route.to;
		          pathname = (0, _PatternUtils.formatPattern)(pattern, params);
		        }

		        replace({
		          pathname: pathname,
		          query: route.query || location.query,
		          state: route.state || location.state
		        });
		      };

		      return route;
		    },
		    getRoutePattern: function getRoutePattern(routes, routeIndex) {
		      var parentPattern = '';

		      for (var i = routeIndex; i >= 0; i--) {
		        var route = routes[i];
		        var pattern = route.path || '';

		        parentPattern = pattern.replace(/\/*$/, '/') + parentPattern;

		        if (pattern.indexOf('/') === 0) break;
		      }

		      return '/' + parentPattern;
		    }
		  },

		  propTypes: {
		    path: string,
		    from: string, // Alias for path
		    to: string.isRequired,
		    query: object,
		    state: object,
		    onEnter: _InternalPropTypes.falsy,
		    children: _InternalPropTypes.falsy
		  },

		  /* istanbul ignore next: sanity check */
		  render: function render() {
		     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<Redirect> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
		  }
		});

		exports.default = Redirect;
		module.exports = exports['default'];
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 59 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		exports.__esModule = true;

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _routerWarning = __webpack_require__(39);

		var _routerWarning2 = _interopRequireDefault(_routerWarning);

		var _invariant = __webpack_require__(36);

		var _invariant2 = _interopRequireDefault(_invariant);

		var _RouteUtils = __webpack_require__(33);

		var _InternalPropTypes = __webpack_require__(48);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var func = _react2.default.PropTypes.func;

		/**
		 * An <IndexRoute> is used to specify its parent's <Route indexRoute> in
		 * a JSX route config.
		 */
		/* eslint-disable react/require-render-return */

		var IndexRoute = _react2.default.createClass({
		  displayName: 'IndexRoute',


		  statics: {
		    createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
		      /* istanbul ignore else: sanity check */
		      if (parentRoute) {
		        parentRoute.indexRoute = (0, _RouteUtils.createRouteFromReactElement)(element);
		      } else {
		        process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(false, 'An <IndexRoute> does not make sense at the root of your route config') : void 0;
		      }
		    }
		  },

		  propTypes: {
		    path: _InternalPropTypes.falsy,
		    component: _InternalPropTypes.component,
		    components: _InternalPropTypes.components,
		    getComponent: func,
		    getComponents: func
		  },

		  /* istanbul ignore next: sanity check */
		  render: function render() {
		     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<IndexRoute> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
		  }
		});

		exports.default = IndexRoute;
		module.exports = exports['default'];
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 60 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		exports.__esModule = true;

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _invariant = __webpack_require__(36);

		var _invariant2 = _interopRequireDefault(_invariant);

		var _RouteUtils = __webpack_require__(33);

		var _InternalPropTypes = __webpack_require__(48);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var _React$PropTypes = _react2.default.PropTypes,
		    string = _React$PropTypes.string,
		    func = _React$PropTypes.func;

		/**
		 * A <Route> is used to declare which components are rendered to the
		 * page when the URL matches a given pattern.
		 *
		 * Routes are arranged in a nested tree structure. When a new URL is
		 * requested, the tree is searched depth-first to find a route whose
		 * path matches the URL.  When one is found, all routes in the tree
		 * that lead to it are considered "active" and their components are
		 * rendered into the DOM, nested in the same order as in the tree.
		 */
		/* eslint-disable react/require-render-return */

		var Route = _react2.default.createClass({
		  displayName: 'Route',


		  statics: {
		    createRouteFromReactElement: _RouteUtils.createRouteFromReactElement
		  },

		  propTypes: {
		    path: string,
		    component: _InternalPropTypes.component,
		    components: _InternalPropTypes.components,
		    getComponent: func,
		    getComponents: func
		  },

		  /* istanbul ignore next: sanity check */
		  render: function render() {
		     true ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, '<Route> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
		  }
		});

		exports.default = Route;
		module.exports = exports['default'];
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 61 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _Actions = __webpack_require__(62);

		var _invariant = __webpack_require__(36);

		var _invariant2 = _interopRequireDefault(_invariant);

		var _createMemoryHistory = __webpack_require__(63);

		var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);

		var _createTransitionManager = __webpack_require__(38);

		var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

		var _RouteUtils = __webpack_require__(33);

		var _RouterUtils = __webpack_require__(52);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

		/**
		 * A high-level API to be used for server-side rendering.
		 *
		 * This function matches a location to a set of routes and calls
		 * callback(error, redirectLocation, renderProps) when finished.
		 *
		 * Note: You probably don't want to use this in a browser unless you're using
		 * server-side rendering with async routes.
		 */
		function match(_ref, callback) {
		  var history = _ref.history,
		      routes = _ref.routes,
		      location = _ref.location,
		      options = _objectWithoutProperties(_ref, ['history', 'routes', 'location']);

		  !(history || location) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'match needs a history or a location') : (0, _invariant2.default)(false) : void 0;

		  history = history ? history : (0, _createMemoryHistory2.default)(options);
		  var transitionManager = (0, _createTransitionManager2.default)(history, (0, _RouteUtils.createRoutes)(routes));

		  if (location) {
		    // Allow match({ location: '/the/path', ... })
		    location = history.createLocation(location);
		  } else {
		    location = history.getCurrentLocation();
		  }

		  transitionManager.match(location, function (error, redirectLocation, nextState) {
		    var renderProps = void 0;

		    if (nextState) {
		      var router = (0, _RouterUtils.createRouterObject)(history, transitionManager, nextState);
		      renderProps = _extends({}, nextState, {
		        router: router,
		        matchContext: { transitionManager: transitionManager, router: router }
		      });
		    }

		    callback(error, redirectLocation && history.createLocation(redirectLocation, _Actions.REPLACE), renderProps);
		  });
		}

		exports.default = match;
		module.exports = exports['default'];
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 62 */
	/***/ function(module, exports) {

		'use strict';

		exports.__esModule = true;
		/**
		 * Indicates that navigation was caused by a call to history.push.
		 */
		var PUSH = exports.PUSH = 'PUSH';

		/**
		 * Indicates that navigation was caused by a call to history.replace.
		 */
		var REPLACE = exports.REPLACE = 'REPLACE';

		/**
		 * Indicates that navigation was caused by some other action such
		 * as using a browser's back/forward buttons and/or manually manipulating
		 * the URL in a browser's location bar. This is the default.
		 *
		 * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
		 * for more information.
		 */
		var POP = exports.POP = 'POP';

	/***/ },
	/* 63 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;
		exports.default = createMemoryHistory;

		var _useQueries = __webpack_require__(64);

		var _useQueries2 = _interopRequireDefault(_useQueries);

		var _useBasename = __webpack_require__(71);

		var _useBasename2 = _interopRequireDefault(_useBasename);

		var _createMemoryHistory = __webpack_require__(72);

		var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function createMemoryHistory(options) {
		  // signatures and type checking differ between `useQueries` and
		  // `createMemoryHistory`, have to create `memoryHistory` first because
		  // `useQueries` doesn't understand the signature
		  var memoryHistory = (0, _createMemoryHistory2.default)(options);
		  var createHistory = function createHistory() {
		    return memoryHistory;
		  };
		  var history = (0, _useQueries2.default)((0, _useBasename2.default)(createHistory))(options);
		  return history;
		}
		module.exports = exports['default'];

	/***/ },
	/* 64 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _queryString = __webpack_require__(65);

		var _runTransitionHook = __webpack_require__(68);

		var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

		var _LocationUtils = __webpack_require__(69);

		var _PathUtils = __webpack_require__(70);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var defaultStringifyQuery = function defaultStringifyQuery(query) {
		  return (0, _queryString.stringify)(query).replace(/%20/g, '+');
		};

		var defaultParseQueryString = _queryString.parse;

		/**
		 * Returns a new createHistory function that may be used to create
		 * history objects that know how to handle URL queries.
		 */
		var useQueries = function useQueries(createHistory) {
		  return function () {
		    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

		    var history = createHistory(options);
		    var stringifyQuery = options.stringifyQuery;
		    var parseQueryString = options.parseQueryString;


		    if (typeof stringifyQuery !== 'function') stringifyQuery = defaultStringifyQuery;

		    if (typeof parseQueryString !== 'function') parseQueryString = defaultParseQueryString;

		    var decodeQuery = function decodeQuery(location) {
		      if (!location) return location;

		      if (location.query == null) location.query = parseQueryString(location.search.substring(1));

		      return location;
		    };

		    var encodeQuery = function encodeQuery(location, query) {
		      if (query == null) return location;

		      var object = typeof location === 'string' ? (0, _PathUtils.parsePath)(location) : location;
		      var queryString = stringifyQuery(query);
		      var search = queryString ? '?' + queryString : '';

		      return _extends({}, object, {
		        search: search
		      });
		    };

		    // Override all read methods with query-aware versions.
		    var getCurrentLocation = function getCurrentLocation() {
		      return decodeQuery(history.getCurrentLocation());
		    };

		    var listenBefore = function listenBefore(hook) {
		      return history.listenBefore(function (location, callback) {
		        return (0, _runTransitionHook2.default)(hook, decodeQuery(location), callback);
		      });
		    };

		    var listen = function listen(listener) {
		      return history.listen(function (location) {
		        return listener(decodeQuery(location));
		      });
		    };

		    // Override all write methods with query-aware versions.
		    var push = function push(location) {
		      return history.push(encodeQuery(location, location.query));
		    };

		    var replace = function replace(location) {
		      return history.replace(encodeQuery(location, location.query));
		    };

		    var createPath = function createPath(location) {
		      return history.createPath(encodeQuery(location, location.query));
		    };

		    var createHref = function createHref(location) {
		      return history.createHref(encodeQuery(location, location.query));
		    };

		    var createLocation = function createLocation(location) {
		      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		        args[_key - 1] = arguments[_key];
		      }

		      var newLocation = history.createLocation.apply(history, [encodeQuery(location, location.query)].concat(args));

		      if (location.query) newLocation.query = (0, _LocationUtils.createQuery)(location.query);

		      return decodeQuery(newLocation);
		    };

		    return _extends({}, history, {
		      getCurrentLocation: getCurrentLocation,
		      listenBefore: listenBefore,
		      listen: listen,
		      push: push,
		      replace: replace,
		      createPath: createPath,
		      createHref: createHref,
		      createLocation: createLocation
		    });
		  };
		};

		exports.default = useQueries;

	/***/ },
	/* 65 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		var strictUriEncode = __webpack_require__(66);
		var objectAssign = __webpack_require__(67);

		function encode(value, opts) {
			if (opts.encode) {
				return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
			}

			return value;
		}

		exports.extract = function (str) {
			return str.split('?')[1] || '';
		};

		exports.parse = function (str) {
			// Create an object with no prototype
			// https://github.com/sindresorhus/query-string/issues/47
			var ret = Object.create(null);

			if (typeof str !== 'string') {
				return ret;
			}

			str = str.trim().replace(/^(\?|#|&)/, '');

			if (!str) {
				return ret;
			}

			str.split('&').forEach(function (param) {
				var parts = param.replace(/\+/g, ' ').split('=');
				// Firefox (pre 40) decodes `%3D` to `=`
				// https://github.com/sindresorhus/query-string/pull/37
				var key = parts.shift();
				var val = parts.length > 0 ? parts.join('=') : undefined;

				key = decodeURIComponent(key);

				// missing `=` should be `null`:
				// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
				val = val === undefined ? null : decodeURIComponent(val);

				if (ret[key] === undefined) {
					ret[key] = val;
				} else if (Array.isArray(ret[key])) {
					ret[key].push(val);
				} else {
					ret[key] = [ret[key], val];
				}
			});

			return ret;
		};

		exports.stringify = function (obj, opts) {
			var defaults = {
				encode: true,
				strict: true
			};

			opts = objectAssign(defaults, opts);

			return obj ? Object.keys(obj).sort().map(function (key) {
				var val = obj[key];

				if (val === undefined) {
					return '';
				}

				if (val === null) {
					return encode(key, opts);
				}

				if (Array.isArray(val)) {
					var result = [];

					val.slice().forEach(function (val2) {
						if (val2 === undefined) {
							return;
						}

						if (val2 === null) {
							result.push(encode(key, opts));
						} else {
							result.push(encode(key, opts) + '=' + encode(val2, opts));
						}
					});

					return result.join('&');
				}

				return encode(key, opts) + '=' + encode(val, opts);
			}).filter(function (x) {
				return x.length > 0;
			}).join('&') : '';
		};


	/***/ },
	/* 66 */
	/***/ function(module, exports) {

		'use strict';
		module.exports = function (str) {
			return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
				return '%' + c.charCodeAt(0).toString(16).toUpperCase();
			});
		};


	/***/ },
	/* 67 */
	/***/ function(module, exports) {

		'use strict';
		/* eslint-disable no-unused-vars */
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		var propIsEnumerable = Object.prototype.propertyIsEnumerable;

		function toObject(val) {
			if (val === null || val === undefined) {
				throw new TypeError('Object.assign cannot be called with null or undefined');
			}

			return Object(val);
		}

		function shouldUseNative() {
			try {
				if (!Object.assign) {
					return false;
				}

				// Detect buggy property enumeration order in older V8 versions.

				// https://bugs.chromium.org/p/v8/issues/detail?id=4118
				var test1 = new String('abc');  // eslint-disable-line
				test1[5] = 'de';
				if (Object.getOwnPropertyNames(test1)[0] === '5') {
					return false;
				}

				// https://bugs.chromium.org/p/v8/issues/detail?id=3056
				var test2 = {};
				for (var i = 0; i < 10; i++) {
					test2['_' + String.fromCharCode(i)] = i;
				}
				var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
					return test2[n];
				});
				if (order2.join('') !== '0123456789') {
					return false;
				}

				// https://bugs.chromium.org/p/v8/issues/detail?id=3056
				var test3 = {};
				'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
					test3[letter] = letter;
				});
				if (Object.keys(Object.assign({}, test3)).join('') !==
						'abcdefghijklmnopqrst') {
					return false;
				}

				return true;
			} catch (e) {
				// We don't expect any of the above to throw, but better to be safe.
				return false;
			}
		}

		module.exports = shouldUseNative() ? Object.assign : function (target, source) {
			var from;
			var to = toObject(target);
			var symbols;

			for (var s = 1; s < arguments.length; s++) {
				from = Object(arguments[s]);

				for (var key in from) {
					if (hasOwnProperty.call(from, key)) {
						to[key] = from[key];
					}
				}

				if (Object.getOwnPropertySymbols) {
					symbols = Object.getOwnPropertySymbols(from);
					for (var i = 0; i < symbols.length; i++) {
						if (propIsEnumerable.call(from, symbols[i])) {
							to[symbols[i]] = from[symbols[i]];
						}
					}
				}
			}

			return to;
		};


	/***/ },
	/* 68 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		exports.__esModule = true;

		var _warning = __webpack_require__(40);

		var _warning2 = _interopRequireDefault(_warning);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var runTransitionHook = function runTransitionHook(hook, location, callback) {
		  var result = hook(location, callback);

		  if (hook.length < 2) {
		    // Assume the hook runs synchronously and automatically
		    // call the callback with the return value.
		    callback(result);
		  } else {
		    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(result === undefined, 'You should not "return" in a transition hook with a callback argument; ' + 'call the callback instead') : void 0;
		  }
		};

		exports.default = runTransitionHook;
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 69 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		exports.__esModule = true;
		exports.locationsAreEqual = exports.statesAreEqual = exports.createLocation = exports.createQuery = undefined;

		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _invariant = __webpack_require__(36);

		var _invariant2 = _interopRequireDefault(_invariant);

		var _warning = __webpack_require__(40);

		var _warning2 = _interopRequireDefault(_warning);

		var _PathUtils = __webpack_require__(70);

		var _Actions = __webpack_require__(62);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var createQuery = exports.createQuery = function createQuery(props) {
		  return _extends(Object.create(null), props);
		};

		var createLocation = exports.createLocation = function createLocation() {
		  var input = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];
		  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];
		  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

		  var object = typeof input === 'string' ? (0, _PathUtils.parsePath)(input) : input;

		  process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(!object.path, 'Location descriptor objects should have a `pathname`, not a `path`.') : void 0;

		  var pathname = object.pathname || '/';
		  var search = object.search || '';
		  var hash = object.hash || '';
		  var state = object.state;

		  return {
		    pathname: pathname,
		    search: search,
		    hash: hash,
		    state: state,
		    action: action,
		    key: key
		  };
		};

		var isDate = function isDate(object) {
		  return Object.prototype.toString.call(object) === '[object Date]';
		};

		var statesAreEqual = exports.statesAreEqual = function statesAreEqual(a, b) {
		  if (a === b) return true;

		  var typeofA = typeof a === 'undefined' ? 'undefined' : _typeof(a);
		  var typeofB = typeof b === 'undefined' ? 'undefined' : _typeof(b);

		  if (typeofA !== typeofB) return false;

		  !(typeofA !== 'function') ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'You must not store functions in location state') : (0, _invariant2.default)(false) : void 0;

		  // Not the same object, but same type.
		  if (typeofA === 'object') {
		    !!(isDate(a) && isDate(b)) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'You must not store Date objects in location state') : (0, _invariant2.default)(false) : void 0;

		    if (!Array.isArray(a)) {
		      var keysofA = Object.keys(a);
		      var keysofB = Object.keys(b);
		      return keysofA.length === keysofB.length && keysofA.every(function (key) {
		        return statesAreEqual(a[key], b[key]);
		      });
		    }

		    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
		      return statesAreEqual(item, b[index]);
		    });
		  }

		  // All other serializable types (string, number, boolean)
		  // should be strict equal.
		  return false;
		};

		var locationsAreEqual = exports.locationsAreEqual = function locationsAreEqual(a, b) {
		  return a.key === b.key &&
		  // a.action === b.action && // Different action !== location change.
		  a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && statesAreEqual(a.state, b.state);
		};
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 70 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		exports.__esModule = true;
		exports.createPath = exports.parsePath = exports.getQueryStringValueFromPath = exports.stripQueryStringValueFromPath = exports.addQueryStringValueToPath = undefined;

		var _warning = __webpack_require__(40);

		var _warning2 = _interopRequireDefault(_warning);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var addQueryStringValueToPath = exports.addQueryStringValueToPath = function addQueryStringValueToPath(path, key, value) {
		  var _parsePath = parsePath(path);

		  var pathname = _parsePath.pathname;
		  var search = _parsePath.search;
		  var hash = _parsePath.hash;


		  return createPath({
		    pathname: pathname,
		    search: search + (search.indexOf('?') === -1 ? '?' : '&') + key + '=' + value,
		    hash: hash
		  });
		};

		var stripQueryStringValueFromPath = exports.stripQueryStringValueFromPath = function stripQueryStringValueFromPath(path, key) {
		  var _parsePath2 = parsePath(path);

		  var pathname = _parsePath2.pathname;
		  var search = _parsePath2.search;
		  var hash = _parsePath2.hash;


		  return createPath({
		    pathname: pathname,
		    search: search.replace(new RegExp('([?&])' + key + '=[a-zA-Z0-9]+(&?)'), function (match, prefix, suffix) {
		      return prefix === '?' ? prefix : suffix;
		    }),
		    hash: hash
		  });
		};

		var getQueryStringValueFromPath = exports.getQueryStringValueFromPath = function getQueryStringValueFromPath(path, key) {
		  var _parsePath3 = parsePath(path);

		  var search = _parsePath3.search;

		  var match = search.match(new RegExp('[?&]' + key + '=([a-zA-Z0-9]+)'));
		  return match && match[1];
		};

		var extractPath = function extractPath(string) {
		  var match = string.match(/^(https?:)?\/\/[^\/]*/);
		  return match == null ? string : string.substring(match[0].length);
		};

		var parsePath = exports.parsePath = function parsePath(path) {
		  var pathname = extractPath(path);
		  var search = '';
		  var hash = '';

		  process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(path === pathname, 'A path must be pathname + search + hash only, not a full URL like "%s"', path) : void 0;

		  var hashIndex = pathname.indexOf('#');
		  if (hashIndex !== -1) {
		    hash = pathname.substring(hashIndex);
		    pathname = pathname.substring(0, hashIndex);
		  }

		  var searchIndex = pathname.indexOf('?');
		  if (searchIndex !== -1) {
		    search = pathname.substring(searchIndex);
		    pathname = pathname.substring(0, searchIndex);
		  }

		  if (pathname === '') pathname = '/';

		  return {
		    pathname: pathname,
		    search: search,
		    hash: hash
		  };
		};

		var createPath = exports.createPath = function createPath(location) {
		  if (location == null || typeof location === 'string') return location;

		  var basename = location.basename;
		  var pathname = location.pathname;
		  var search = location.search;
		  var hash = location.hash;

		  var path = (basename || '') + pathname;

		  if (search && search !== '?') path += search;

		  if (hash) path += hash;

		  return path;
		};
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 71 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _runTransitionHook = __webpack_require__(68);

		var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

		var _PathUtils = __webpack_require__(70);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var useBasename = function useBasename(createHistory) {
		  return function () {
		    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

		    var history = createHistory(options);
		    var basename = options.basename;


		    var addBasename = function addBasename(location) {
		      if (!location) return location;

		      if (basename && location.basename == null) {
		        if (location.pathname.indexOf(basename) === 0) {
		          location.pathname = location.pathname.substring(basename.length);
		          location.basename = basename;

		          if (location.pathname === '') location.pathname = '/';
		        } else {
		          location.basename = '';
		        }
		      }

		      return location;
		    };

		    var prependBasename = function prependBasename(location) {
		      if (!basename) return location;

		      var object = typeof location === 'string' ? (0, _PathUtils.parsePath)(location) : location;
		      var pname = object.pathname;
		      var normalizedBasename = basename.slice(-1) === '/' ? basename : basename + '/';
		      var normalizedPathname = pname.charAt(0) === '/' ? pname.slice(1) : pname;
		      var pathname = normalizedBasename + normalizedPathname;

		      return _extends({}, object, {
		        pathname: pathname
		      });
		    };

		    // Override all read methods with basename-aware versions.
		    var getCurrentLocation = function getCurrentLocation() {
		      return addBasename(history.getCurrentLocation());
		    };

		    var listenBefore = function listenBefore(hook) {
		      return history.listenBefore(function (location, callback) {
		        return (0, _runTransitionHook2.default)(hook, addBasename(location), callback);
		      });
		    };

		    var listen = function listen(listener) {
		      return history.listen(function (location) {
		        return listener(addBasename(location));
		      });
		    };

		    // Override all write methods with basename-aware versions.
		    var push = function push(location) {
		      return history.push(prependBasename(location));
		    };

		    var replace = function replace(location) {
		      return history.replace(prependBasename(location));
		    };

		    var createPath = function createPath(location) {
		      return history.createPath(prependBasename(location));
		    };

		    var createHref = function createHref(location) {
		      return history.createHref(prependBasename(location));
		    };

		    var createLocation = function createLocation(location) {
		      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		        args[_key - 1] = arguments[_key];
		      }

		      return addBasename(history.createLocation.apply(history, [prependBasename(location)].concat(args)));
		    };

		    return _extends({}, history, {
		      getCurrentLocation: getCurrentLocation,
		      listenBefore: listenBefore,
		      listen: listen,
		      push: push,
		      replace: replace,
		      createPath: createPath,
		      createHref: createHref,
		      createLocation: createLocation
		    });
		  };
		};

		exports.default = useBasename;

	/***/ },
	/* 72 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _warning = __webpack_require__(40);

		var _warning2 = _interopRequireDefault(_warning);

		var _invariant = __webpack_require__(36);

		var _invariant2 = _interopRequireDefault(_invariant);

		var _LocationUtils = __webpack_require__(69);

		var _PathUtils = __webpack_require__(70);

		var _createHistory = __webpack_require__(73);

		var _createHistory2 = _interopRequireDefault(_createHistory);

		var _Actions = __webpack_require__(62);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var createStateStorage = function createStateStorage(entries) {
		  return entries.filter(function (entry) {
		    return entry.state;
		  }).reduce(function (memo, entry) {
		    memo[entry.key] = entry.state;
		    return memo;
		  }, {});
		};

		var createMemoryHistory = function createMemoryHistory() {
		  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

		  if (Array.isArray(options)) {
		    options = { entries: options };
		  } else if (typeof options === 'string') {
		    options = { entries: [options] };
		  }

		  var getCurrentLocation = function getCurrentLocation() {
		    var entry = entries[current];
		    var path = (0, _PathUtils.createPath)(entry);

		    var key = void 0,
		        state = void 0;
		    if (entry.key) {
		      key = entry.key;
		      state = readState(key);
		    }

		    var init = (0, _PathUtils.parsePath)(path);

		    return (0, _LocationUtils.createLocation)(_extends({}, init, { state: state }), undefined, key);
		  };

		  var canGo = function canGo(n) {
		    var index = current + n;
		    return index >= 0 && index < entries.length;
		  };

		  var go = function go(n) {
		    if (!n) return;

		    if (!canGo(n)) {
		      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'Cannot go(%s) there is not enough history', n) : void 0;

		      return;
		    }

		    current += n;
		    var currentLocation = getCurrentLocation();

		    // Change action to POP
		    history.transitionTo(_extends({}, currentLocation, { action: _Actions.POP }));
		  };

		  var pushLocation = function pushLocation(location) {
		    current += 1;

		    if (current < entries.length) entries.splice(current);

		    entries.push(location);

		    saveState(location.key, location.state);
		  };

		  var replaceLocation = function replaceLocation(location) {
		    entries[current] = location;
		    saveState(location.key, location.state);
		  };

		  var history = (0, _createHistory2.default)(_extends({}, options, {
		    getCurrentLocation: getCurrentLocation,
		    pushLocation: pushLocation,
		    replaceLocation: replaceLocation,
		    go: go
		  }));

		  var _options = options;
		  var entries = _options.entries;
		  var current = _options.current;


		  if (typeof entries === 'string') {
		    entries = [entries];
		  } else if (!Array.isArray(entries)) {
		    entries = ['/'];
		  }

		  entries = entries.map(function (entry) {
		    return (0, _LocationUtils.createLocation)(entry);
		  });

		  if (current == null) {
		    current = entries.length - 1;
		  } else {
		    !(current >= 0 && current < entries.length) ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Current index must be >= 0 and < %s, was %s', entries.length, current) : (0, _invariant2.default)(false) : void 0;
		  }

		  var storage = createStateStorage(entries);

		  var saveState = function saveState(key, state) {
		    return storage[key] = state;
		  };

		  var readState = function readState(key) {
		    return storage[key];
		  };

		  return _extends({}, history, {
		    canGo: canGo
		  });
		};

		exports.default = createMemoryHistory;
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 73 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _AsyncUtils = __webpack_require__(74);

		var _PathUtils = __webpack_require__(70);

		var _runTransitionHook = __webpack_require__(68);

		var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

		var _Actions = __webpack_require__(62);

		var _LocationUtils = __webpack_require__(69);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var createHistory = function createHistory() {
		  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
		  var getCurrentLocation = options.getCurrentLocation;
		  var getUserConfirmation = options.getUserConfirmation;
		  var pushLocation = options.pushLocation;
		  var replaceLocation = options.replaceLocation;
		  var go = options.go;
		  var keyLength = options.keyLength;


		  var currentLocation = void 0;
		  var pendingLocation = void 0;
		  var beforeListeners = [];
		  var listeners = [];
		  var allKeys = [];

		  var getCurrentIndex = function getCurrentIndex() {
		    if (pendingLocation && pendingLocation.action === _Actions.POP) return allKeys.indexOf(pendingLocation.key);

		    if (currentLocation) return allKeys.indexOf(currentLocation.key);

		    return -1;
		  };

		  var updateLocation = function updateLocation(nextLocation) {
		    var currentIndex = getCurrentIndex();

		    currentLocation = nextLocation;

		    if (currentLocation.action === _Actions.PUSH) {
		      allKeys = [].concat(allKeys.slice(0, currentIndex + 1), [currentLocation.key]);
		    } else if (currentLocation.action === _Actions.REPLACE) {
		      allKeys[currentIndex] = currentLocation.key;
		    }

		    listeners.forEach(function (listener) {
		      return listener(currentLocation);
		    });
		  };

		  var listenBefore = function listenBefore(listener) {
		    beforeListeners.push(listener);

		    return function () {
		      return beforeListeners = beforeListeners.filter(function (item) {
		        return item !== listener;
		      });
		    };
		  };

		  var listen = function listen(listener) {
		    listeners.push(listener);

		    return function () {
		      return listeners = listeners.filter(function (item) {
		        return item !== listener;
		      });
		    };
		  };

		  var confirmTransitionTo = function confirmTransitionTo(location, callback) {
		    (0, _AsyncUtils.loopAsync)(beforeListeners.length, function (index, next, done) {
		      (0, _runTransitionHook2.default)(beforeListeners[index], location, function (result) {
		        return result != null ? done(result) : next();
		      });
		    }, function (message) {
		      if (getUserConfirmation && typeof message === 'string') {
		        getUserConfirmation(message, function (ok) {
		          return callback(ok !== false);
		        });
		      } else {
		        callback(message !== false);
		      }
		    });
		  };

		  var transitionTo = function transitionTo(nextLocation) {
		    if (currentLocation && (0, _LocationUtils.locationsAreEqual)(currentLocation, nextLocation) || pendingLocation && (0, _LocationUtils.locationsAreEqual)(pendingLocation, nextLocation)) return; // Nothing to do

		    pendingLocation = nextLocation;

		    confirmTransitionTo(nextLocation, function (ok) {
		      if (pendingLocation !== nextLocation) return; // Transition was interrupted during confirmation

		      pendingLocation = null;

		      if (ok) {
		        // Treat PUSH to same path like REPLACE to be consistent with browsers
		        if (nextLocation.action === _Actions.PUSH) {
		          var prevPath = (0, _PathUtils.createPath)(currentLocation);
		          var nextPath = (0, _PathUtils.createPath)(nextLocation);

		          if (nextPath === prevPath && (0, _LocationUtils.statesAreEqual)(currentLocation.state, nextLocation.state)) nextLocation.action = _Actions.REPLACE;
		        }

		        if (nextLocation.action === _Actions.POP) {
		          updateLocation(nextLocation);
		        } else if (nextLocation.action === _Actions.PUSH) {
		          if (pushLocation(nextLocation) !== false) updateLocation(nextLocation);
		        } else if (nextLocation.action === _Actions.REPLACE) {
		          if (replaceLocation(nextLocation) !== false) updateLocation(nextLocation);
		        }
		      } else if (currentLocation && nextLocation.action === _Actions.POP) {
		        var prevIndex = allKeys.indexOf(currentLocation.key);
		        var nextIndex = allKeys.indexOf(nextLocation.key);

		        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL
		      }
		    });
		  };

		  var push = function push(input) {
		    return transitionTo(createLocation(input, _Actions.PUSH));
		  };

		  var replace = function replace(input) {
		    return transitionTo(createLocation(input, _Actions.REPLACE));
		  };

		  var goBack = function goBack() {
		    return go(-1);
		  };

		  var goForward = function goForward() {
		    return go(1);
		  };

		  var createKey = function createKey() {
		    return Math.random().toString(36).substr(2, keyLength || 6);
		  };

		  var createHref = function createHref(location) {
		    return (0, _PathUtils.createPath)(location);
		  };

		  var createLocation = function createLocation(location, action) {
		    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];
		    return (0, _LocationUtils.createLocation)(location, action, key);
		  };

		  return {
		    getCurrentLocation: getCurrentLocation,
		    listenBefore: listenBefore,
		    listen: listen,
		    transitionTo: transitionTo,
		    push: push,
		    replace: replace,
		    go: go,
		    goBack: goBack,
		    goForward: goForward,
		    createKey: createKey,
		    createPath: _PathUtils.createPath,
		    createHref: createHref,
		    createLocation: createLocation
		  };
		};

		exports.default = createHistory;

	/***/ },
	/* 74 */
	/***/ function(module, exports) {

		"use strict";

		exports.__esModule = true;
		var loopAsync = exports.loopAsync = function loopAsync(turns, work, callback) {
		  var currentTurn = 0,
		      isDone = false;
		  var isSync = false,
		      hasNext = false,
		      doneArgs = void 0;

		  var done = function done() {
		    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    isDone = true;

		    if (isSync) {
		      // Iterate instead of recursing if possible.
		      doneArgs = args;
		      return;
		    }

		    callback.apply(undefined, args);
		  };

		  var next = function next() {
		    if (isDone) return;

		    hasNext = true;

		    if (isSync) return; // Iterate instead of recursing if possible.

		    isSync = true;

		    while (!isDone && currentTurn < turns && hasNext) {
		      hasNext = false;
		      work(currentTurn++, next, done);
		    }

		    isSync = false;

		    if (isDone) {
		      // This means the loop finished synchronously.
		      callback.apply(undefined, doneArgs);
		      return;
		    }

		    if (currentTurn >= turns && hasNext) {
		      isDone = true;
		      callback();
		    }
		  };

		  next();
		};

	/***/ },
	/* 75 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;
		exports.default = useRouterHistory;

		var _useQueries = __webpack_require__(64);

		var _useQueries2 = _interopRequireDefault(_useQueries);

		var _useBasename = __webpack_require__(71);

		var _useBasename2 = _interopRequireDefault(_useBasename);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function useRouterHistory(createHistory) {
		  return function (options) {
		    var history = (0, _useQueries2.default)((0, _useBasename2.default)(createHistory))(options);
		    return history;
		  };
		}
		module.exports = exports['default'];

	/***/ },
	/* 76 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _RouterContext = __webpack_require__(49);

		var _RouterContext2 = _interopRequireDefault(_RouterContext);

		var _routerWarning = __webpack_require__(39);

		var _routerWarning2 = _interopRequireDefault(_routerWarning);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		exports.default = function () {
		  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
		    middlewares[_key] = arguments[_key];
		  }

		  if (process.env.NODE_ENV !== 'production') {
		    middlewares.forEach(function (middleware, index) {
		      process.env.NODE_ENV !== 'production' ? (0, _routerWarning2.default)(middleware.renderRouterContext || middleware.renderRouteComponent, 'The middleware specified at index ' + index + ' does not appear to be ' + 'a valid React Router middleware.') : void 0;
		    });
		  }

		  var withContext = middlewares.map(function (middleware) {
		    return middleware.renderRouterContext;
		  }).filter(Boolean);
		  var withComponent = middlewares.map(function (middleware) {
		    return middleware.renderRouteComponent;
		  }).filter(Boolean);

		  var makeCreateElement = function makeCreateElement() {
		    var baseCreateElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _react.createElement;
		    return function (Component, props) {
		      return withComponent.reduceRight(function (previous, renderRouteComponent) {
		        return renderRouteComponent(previous, props);
		      }, baseCreateElement(Component, props));
		    };
		  };

		  return function (renderProps) {
		    return withContext.reduceRight(function (previous, renderRouterContext) {
		      return renderRouterContext(previous, renderProps);
		    }, _react2.default.createElement(_RouterContext2.default, _extends({}, renderProps, {
		      createElement: makeCreateElement(renderProps.createElement)
		    })));
		  };
		};

		module.exports = exports['default'];
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 77 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _createBrowserHistory = __webpack_require__(78);

		var _createBrowserHistory2 = _interopRequireDefault(_createBrowserHistory);

		var _createRouterHistory = __webpack_require__(84);

		var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		exports.default = (0, _createRouterHistory2.default)(_createBrowserHistory2.default);
		module.exports = exports['default'];

	/***/ },
	/* 78 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _invariant = __webpack_require__(36);

		var _invariant2 = _interopRequireDefault(_invariant);

		var _ExecutionEnvironment = __webpack_require__(79);

		var _BrowserProtocol = __webpack_require__(80);

		var BrowserProtocol = _interopRequireWildcard(_BrowserProtocol);

		var _RefreshProtocol = __webpack_require__(83);

		var RefreshProtocol = _interopRequireWildcard(_RefreshProtocol);

		var _DOMUtils = __webpack_require__(81);

		var _createHistory = __webpack_require__(73);

		var _createHistory2 = _interopRequireDefault(_createHistory);

		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		/**
		 * Creates and returns a history object that uses HTML5's history API
		 * (pushState, replaceState, and the popstate event) to manage history.
		 * This is the recommended method of managing history in browsers because
		 * it provides the cleanest URLs.
		 *
		 * Note: In browsers that do not support the HTML5 history API full
		 * page reloads will be used to preserve clean URLs. You can force this
		 * behavior using { forceRefresh: true } in options.
		 */
		var createBrowserHistory = function createBrowserHistory() {
		  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

		  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Browser history needs a DOM') : (0, _invariant2.default)(false) : void 0;

		  var useRefresh = options.forceRefresh || !(0, _DOMUtils.supportsHistory)();
		  var Protocol = useRefresh ? RefreshProtocol : BrowserProtocol;

		  var getUserConfirmation = Protocol.getUserConfirmation;
		  var getCurrentLocation = Protocol.getCurrentLocation;
		  var pushLocation = Protocol.pushLocation;
		  var replaceLocation = Protocol.replaceLocation;
		  var go = Protocol.go;


		  var history = (0, _createHistory2.default)(_extends({
		    getUserConfirmation: getUserConfirmation }, options, {
		    getCurrentLocation: getCurrentLocation,
		    pushLocation: pushLocation,
		    replaceLocation: replaceLocation,
		    go: go
		  }));

		  var listenerCount = 0,
		      stopListener = void 0;

		  var startListener = function startListener(listener, before) {
		    if (++listenerCount === 1) stopListener = BrowserProtocol.startListener(history.transitionTo);

		    var unlisten = before ? history.listenBefore(listener) : history.listen(listener);

		    return function () {
		      unlisten();

		      if (--listenerCount === 0) stopListener();
		    };
		  };

		  var listenBefore = function listenBefore(listener) {
		    return startListener(listener, true);
		  };

		  var listen = function listen(listener) {
		    return startListener(listener, false);
		  };

		  return _extends({}, history, {
		    listenBefore: listenBefore,
		    listen: listen
		  });
		};

		exports.default = createBrowserHistory;
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 79 */
	/***/ function(module, exports) {

		'use strict';

		exports.__esModule = true;
		var canUseDOM = exports.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/***/ },
	/* 80 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;
		exports.go = exports.replaceLocation = exports.pushLocation = exports.startListener = exports.getUserConfirmation = exports.getCurrentLocation = undefined;

		var _LocationUtils = __webpack_require__(69);

		var _DOMUtils = __webpack_require__(81);

		var _DOMStateStorage = __webpack_require__(82);

		var _PathUtils = __webpack_require__(70);

		var _ExecutionEnvironment = __webpack_require__(79);

		var PopStateEvent = 'popstate';
		var HashChangeEvent = 'hashchange';

		var needsHashchangeListener = _ExecutionEnvironment.canUseDOM && !(0, _DOMUtils.supportsPopstateOnHashchange)();

		var _createLocation = function _createLocation(historyState) {
		  var key = historyState && historyState.key;

		  return (0, _LocationUtils.createLocation)({
		    pathname: window.location.pathname,
		    search: window.location.search,
		    hash: window.location.hash,
		    state: key ? (0, _DOMStateStorage.readState)(key) : undefined
		  }, undefined, key);
		};

		var getCurrentLocation = exports.getCurrentLocation = function getCurrentLocation() {
		  var historyState = void 0;
		  try {
		    historyState = window.history.state || {};
		  } catch (error) {
		    // IE 11 sometimes throws when accessing window.history.state
		    // See https://github.com/ReactTraining/history/pull/289
		    historyState = {};
		  }

		  return _createLocation(historyState);
		};

		var getUserConfirmation = exports.getUserConfirmation = function getUserConfirmation(message, callback) {
		  return callback(window.confirm(message));
		}; // eslint-disable-line no-alert

		var startListener = exports.startListener = function startListener(listener) {
		  var handlePopState = function handlePopState(event) {
		    if (event.state !== undefined) // Ignore extraneous popstate events in WebKit
		      listener(_createLocation(event.state));
		  };

		  (0, _DOMUtils.addEventListener)(window, PopStateEvent, handlePopState);

		  var handleUnpoppedHashChange = function handleUnpoppedHashChange() {
		    return listener(getCurrentLocation());
		  };

		  if (needsHashchangeListener) {
		    (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleUnpoppedHashChange);
		  }

		  return function () {
		    (0, _DOMUtils.removeEventListener)(window, PopStateEvent, handlePopState);

		    if (needsHashchangeListener) {
		      (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleUnpoppedHashChange);
		    }
		  };
		};

		var updateLocation = function updateLocation(location, updateState) {
		  var state = location.state;
		  var key = location.key;


		  if (state !== undefined) (0, _DOMStateStorage.saveState)(key, state);

		  updateState({ key: key }, (0, _PathUtils.createPath)(location));
		};

		var pushLocation = exports.pushLocation = function pushLocation(location) {
		  return updateLocation(location, function (state, path) {
		    return window.history.pushState(state, null, path);
		  });
		};

		var replaceLocation = exports.replaceLocation = function replaceLocation(location) {
		  return updateLocation(location, function (state, path) {
		    return window.history.replaceState(state, null, path);
		  });
		};

		var go = exports.go = function go(n) {
		  if (n) window.history.go(n);
		};

	/***/ },
	/* 81 */
	/***/ function(module, exports) {

		'use strict';

		exports.__esModule = true;
		var addEventListener = exports.addEventListener = function addEventListener(node, event, listener) {
		  return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);
		};

		var removeEventListener = exports.removeEventListener = function removeEventListener(node, event, listener) {
		  return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);
		};

		/**
		 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
		 *
		 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
		 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
		 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
		 */
		var supportsHistory = exports.supportsHistory = function supportsHistory() {
		  var ua = window.navigator.userAgent;

		  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;

		  return window.history && 'pushState' in window.history;
		};

		/**
		 * Returns false if using go(n) with hash history causes a full page reload.
		 */
		var supportsGoWithoutReloadUsingHash = exports.supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
		  return window.navigator.userAgent.indexOf('Firefox') === -1;
		};

		/**
		 * Returns true if browser fires popstate on hash change.
		 * IE10 and IE11 do not.
		 */
		var supportsPopstateOnHashchange = exports.supportsPopstateOnHashchange = function supportsPopstateOnHashchange() {
		  return window.navigator.userAgent.indexOf('Trident') === -1;
		};

	/***/ },
	/* 82 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		exports.__esModule = true;
		exports.readState = exports.saveState = undefined;

		var _warning = __webpack_require__(40);

		var _warning2 = _interopRequireDefault(_warning);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var QuotaExceededErrors = {
		  QuotaExceededError: true,
		  QUOTA_EXCEEDED_ERR: true
		};

		var SecurityErrors = {
		  SecurityError: true
		};

		var KeyPrefix = '@@History/';

		var createKey = function createKey(key) {
		  return KeyPrefix + key;
		};

		var saveState = exports.saveState = function saveState(key, state) {
		  if (!window.sessionStorage) {
		    // Session storage is not available or hidden.
		    // sessionStorage is undefined in Internet Explorer when served via file protocol.
		    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to save state; sessionStorage is not available') : void 0;

		    return;
		  }

		  try {
		    if (state == null) {
		      window.sessionStorage.removeItem(createKey(key));
		    } else {
		      window.sessionStorage.setItem(createKey(key), JSON.stringify(state));
		    }
		  } catch (error) {
		    if (SecurityErrors[error.name]) {
		      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
		      // attempt to access window.sessionStorage.
		      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to save state; sessionStorage is not available due to security settings') : void 0;

		      return;
		    }

		    if (QuotaExceededErrors[error.name] && window.sessionStorage.length === 0) {
		      // Safari "private mode" throws QuotaExceededError.
		      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : void 0;

		      return;
		    }

		    throw error;
		  }
		};

		var readState = exports.readState = function readState(key) {
		  var json = void 0;
		  try {
		    json = window.sessionStorage.getItem(createKey(key));
		  } catch (error) {
		    if (SecurityErrors[error.name]) {
		      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
		      // attempt to access window.sessionStorage.
		      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '[history] Unable to read state; sessionStorage is not available due to security settings') : void 0;

		      return undefined;
		    }
		  }

		  if (json) {
		    try {
		      return JSON.parse(json);
		    } catch (error) {
		      // Ignore invalid JSON.
		    }
		  }

		  return undefined;
		};
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 83 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;
		exports.replaceLocation = exports.pushLocation = exports.getCurrentLocation = exports.go = exports.getUserConfirmation = undefined;

		var _BrowserProtocol = __webpack_require__(80);

		Object.defineProperty(exports, 'getUserConfirmation', {
		  enumerable: true,
		  get: function get() {
		    return _BrowserProtocol.getUserConfirmation;
		  }
		});
		Object.defineProperty(exports, 'go', {
		  enumerable: true,
		  get: function get() {
		    return _BrowserProtocol.go;
		  }
		});

		var _LocationUtils = __webpack_require__(69);

		var _PathUtils = __webpack_require__(70);

		var getCurrentLocation = exports.getCurrentLocation = function getCurrentLocation() {
		  return (0, _LocationUtils.createLocation)(window.location);
		};

		var pushLocation = exports.pushLocation = function pushLocation(location) {
		  window.location.href = (0, _PathUtils.createPath)(location);
		  return false; // Don't update location
		};

		var replaceLocation = exports.replaceLocation = function replaceLocation(location) {
		  window.location.replace((0, _PathUtils.createPath)(location));
		  return false; // Don't update location
		};

	/***/ },
	/* 84 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		exports.default = function (createHistory) {
		  var history = void 0;
		  if (canUseDOM) history = (0, _useRouterHistory2.default)(createHistory)();
		  return history;
		};

		var _useRouterHistory = __webpack_require__(75);

		var _useRouterHistory2 = _interopRequireDefault(_useRouterHistory);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

		module.exports = exports['default'];

	/***/ },
	/* 85 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _createHashHistory = __webpack_require__(86);

		var _createHashHistory2 = _interopRequireDefault(_createHashHistory);

		var _createRouterHistory = __webpack_require__(84);

		var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		exports.default = (0, _createRouterHistory2.default)(_createHashHistory2.default);
		module.exports = exports['default'];

	/***/ },
	/* 86 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		exports.__esModule = true;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _warning = __webpack_require__(40);

		var _warning2 = _interopRequireDefault(_warning);

		var _invariant = __webpack_require__(36);

		var _invariant2 = _interopRequireDefault(_invariant);

		var _ExecutionEnvironment = __webpack_require__(79);

		var _DOMUtils = __webpack_require__(81);

		var _HashProtocol = __webpack_require__(87);

		var HashProtocol = _interopRequireWildcard(_HashProtocol);

		var _createHistory = __webpack_require__(73);

		var _createHistory2 = _interopRequireDefault(_createHistory);

		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var DefaultQueryKey = '_k';

		var addLeadingSlash = function addLeadingSlash(path) {
		  return path.charAt(0) === '/' ? path : '/' + path;
		};

		var HashPathCoders = {
		  hashbang: {
		    encodePath: function encodePath(path) {
		      return path.charAt(0) === '!' ? path : '!' + path;
		    },
		    decodePath: function decodePath(path) {
		      return path.charAt(0) === '!' ? path.substring(1) : path;
		    }
		  },
		  noslash: {
		    encodePath: function encodePath(path) {
		      return path.charAt(0) === '/' ? path.substring(1) : path;
		    },
		    decodePath: addLeadingSlash
		  },
		  slash: {
		    encodePath: addLeadingSlash,
		    decodePath: addLeadingSlash
		  }
		};

		var createHashHistory = function createHashHistory() {
		  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

		  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'Hash history needs a DOM') : (0, _invariant2.default)(false) : void 0;

		  var queryKey = options.queryKey;
		  var hashType = options.hashType;


		  process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(queryKey !== false, 'Using { queryKey: false } no longer works. Instead, just don\'t ' + 'use location state if you don\'t want a key in your URL query string') : void 0;

		  if (typeof queryKey !== 'string') queryKey = DefaultQueryKey;

		  if (hashType == null) hashType = 'slash';

		  if (!(hashType in HashPathCoders)) {
		    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'Invalid hash type: %s', hashType) : void 0;

		    hashType = 'slash';
		  }

		  var pathCoder = HashPathCoders[hashType];

		  var getUserConfirmation = HashProtocol.getUserConfirmation;


		  var getCurrentLocation = function getCurrentLocation() {
		    return HashProtocol.getCurrentLocation(pathCoder, queryKey);
		  };

		  var pushLocation = function pushLocation(location) {
		    return HashProtocol.pushLocation(location, pathCoder, queryKey);
		  };

		  var replaceLocation = function replaceLocation(location) {
		    return HashProtocol.replaceLocation(location, pathCoder, queryKey);
		  };

		  var history = (0, _createHistory2.default)(_extends({
		    getUserConfirmation: getUserConfirmation }, options, {
		    getCurrentLocation: getCurrentLocation,
		    pushLocation: pushLocation,
		    replaceLocation: replaceLocation,
		    go: HashProtocol.go
		  }));

		  var listenerCount = 0,
		      stopListener = void 0;

		  var startListener = function startListener(listener, before) {
		    if (++listenerCount === 1) stopListener = HashProtocol.startListener(history.transitionTo, pathCoder, queryKey);

		    var unlisten = before ? history.listenBefore(listener) : history.listen(listener);

		    return function () {
		      unlisten();

		      if (--listenerCount === 0) stopListener();
		    };
		  };

		  var listenBefore = function listenBefore(listener) {
		    return startListener(listener, true);
		  };

		  var listen = function listen(listener) {
		    return startListener(listener, false);
		  };

		  var goIsSupportedWithoutReload = (0, _DOMUtils.supportsGoWithoutReloadUsingHash)();

		  var go = function go(n) {
		    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(goIsSupportedWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : void 0;

		    history.go(n);
		  };

		  var createHref = function createHref(path) {
		    return '#' + pathCoder.encodePath(history.createHref(path));
		  };

		  return _extends({}, history, {
		    listenBefore: listenBefore,
		    listen: listen,
		    go: go,
		    createHref: createHref
		  });
		};

		exports.default = createHashHistory;
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 87 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {'use strict';

		exports.__esModule = true;
		exports.replaceLocation = exports.pushLocation = exports.startListener = exports.getCurrentLocation = exports.go = exports.getUserConfirmation = undefined;

		var _BrowserProtocol = __webpack_require__(80);

		Object.defineProperty(exports, 'getUserConfirmation', {
		  enumerable: true,
		  get: function get() {
		    return _BrowserProtocol.getUserConfirmation;
		  }
		});
		Object.defineProperty(exports, 'go', {
		  enumerable: true,
		  get: function get() {
		    return _BrowserProtocol.go;
		  }
		});

		var _warning = __webpack_require__(40);

		var _warning2 = _interopRequireDefault(_warning);

		var _LocationUtils = __webpack_require__(69);

		var _DOMUtils = __webpack_require__(81);

		var _DOMStateStorage = __webpack_require__(82);

		var _PathUtils = __webpack_require__(70);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var HashChangeEvent = 'hashchange';

		var getHashPath = function getHashPath() {
		  // We can't use window.location.hash here because it's not
		  // consistent across browsers - Firefox will pre-decode it!
		  var href = window.location.href;
		  var hashIndex = href.indexOf('#');
		  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
		};

		var pushHashPath = function pushHashPath(path) {
		  return window.location.hash = path;
		};

		var replaceHashPath = function replaceHashPath(path) {
		  var hashIndex = window.location.href.indexOf('#');

		  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
		};

		var getCurrentLocation = exports.getCurrentLocation = function getCurrentLocation(pathCoder, queryKey) {
		  var path = pathCoder.decodePath(getHashPath());
		  var key = (0, _PathUtils.getQueryStringValueFromPath)(path, queryKey);

		  var state = void 0;
		  if (key) {
		    path = (0, _PathUtils.stripQueryStringValueFromPath)(path, queryKey);
		    state = (0, _DOMStateStorage.readState)(key);
		  }

		  var init = (0, _PathUtils.parsePath)(path);
		  init.state = state;

		  return (0, _LocationUtils.createLocation)(init, undefined, key);
		};

		var prevLocation = void 0;

		var startListener = exports.startListener = function startListener(listener, pathCoder, queryKey) {
		  var handleHashChange = function handleHashChange() {
		    var path = getHashPath();
		    var encodedPath = pathCoder.encodePath(path);

		    if (path !== encodedPath) {
		      // Always be sure we have a properly-encoded hash.
		      replaceHashPath(encodedPath);
		    } else {
		      var currentLocation = getCurrentLocation(pathCoder, queryKey);

		      if (prevLocation && currentLocation.key && prevLocation.key === currentLocation.key) return; // Ignore extraneous hashchange events

		      prevLocation = currentLocation;

		      listener(currentLocation);
		    }
		  };

		  // Ensure the hash is encoded properly.
		  var path = getHashPath();
		  var encodedPath = pathCoder.encodePath(path);

		  if (path !== encodedPath) replaceHashPath(encodedPath);

		  (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);

		  return function () {
		    return (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
		  };
		};

		var updateLocation = function updateLocation(location, pathCoder, queryKey, updateHash) {
		  var state = location.state;
		  var key = location.key;


		  var path = pathCoder.encodePath((0, _PathUtils.createPath)(location));

		  if (state !== undefined) {
		    path = (0, _PathUtils.addQueryStringValueToPath)(path, queryKey, key);
		    (0, _DOMStateStorage.saveState)(key, state);
		  }

		  prevLocation = location;

		  updateHash(path);
		};

		var pushLocation = exports.pushLocation = function pushLocation(location, pathCoder, queryKey) {
		  return updateLocation(location, pathCoder, queryKey, function (path) {
		    if (getHashPath() !== path) {
		      pushHashPath(path);
		    } else {
		      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'You cannot PUSH the same path using hash history') : void 0;
		    }
		  });
		};

		var replaceLocation = exports.replaceLocation = function replaceLocation(location, pathCoder, queryKey) {
		  return updateLocation(location, pathCoder, queryKey, function (path) {
		    if (getHashPath() !== path) replaceHashPath(path);
		  });
		};
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

	/***/ },
	/* 88 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _reactRouter = __webpack_require__(32);

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var HomeRoute = function (_Route) {
		  _inherits(HomeRoute, _Route);

		  function HomeRoute() {
		    _classCallCheck(this, HomeRoute);

		    return _possibleConstructorReturn(this, (HomeRoute.__proto__ || Object.getPrototypeOf(HomeRoute)).apply(this, arguments));
		  }

		  return HomeRoute;
		}(_reactRouter.Route);

		exports.default = HomeRoute;

	/***/ },
	/* 89 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _class, _temp;

		var _reactRouter = __webpack_require__(32);

		var _context = __webpack_require__(22);

		var _context2 = _interopRequireDefault(_context);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var LoginRoute = (_temp = _class = function (_Route) {
		  _inherits(LoginRoute, _Route);

		  function LoginRoute() {
		    _classCallCheck(this, LoginRoute);

		    return _possibleConstructorReturn(this, (LoginRoute.__proto__ || Object.getPrototypeOf(LoginRoute)).apply(this, arguments));
		  }

		  return LoginRoute;
		}(_reactRouter.Route), _class.defaultProps = {
		  onEnter: function onEnter(nextState, replace, callback) {
		    _context2.default.userStore.isAuthenticated(function (err, authenticated) {
		      if (authenticated) {
		        var router = _context2.default.getRouter();
		        var homeRoute = router.getHomeRoute();
		        var authenticatedHomeRoute = router.getAuthenticatedHomeRoute();
		        var redirectTo = (authenticatedHomeRoute || {}).path || (homeRoute || {}).path || '/';

		        replace(redirectTo);
		      }
		      callback();
		    });
		  }
		}, _temp);
		exports.default = LoginRoute;

	/***/ },
	/* 90 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _class, _temp;

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _reactRouter = __webpack_require__(32);

		var _reactRouter2 = _interopRequireDefault(_reactRouter);

		var _context = __webpack_require__(22);

		var _context2 = _interopRequireDefault(_context);

		var _UserActions = __webpack_require__(21);

		var _UserActions2 = _interopRequireDefault(_UserActions);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var LogoutRoute = (_temp = _class = function (_Route) {
		  _inherits(LogoutRoute, _Route);

		  function LogoutRoute() {
		    _classCallCheck(this, LogoutRoute);

		    return _possibleConstructorReturn(this, (LogoutRoute.__proto__ || Object.getPrototypeOf(LogoutRoute)).apply(this, arguments));
		  }

		  return LogoutRoute;
		}(_reactRouter.Route), _class.defaultProps = {
		  onEnter: function onEnter(nextState, replace, callback) {
		    var _this2 = this;

		    _UserActions2.default.logout(function () {
		      var router = _context2.default.getRouter();
		      var homeRoute = router.getHomeRoute();
		      var loginRoute = router.getLoginRoute();
		      var redirectTo = _this2.redirectTo || (homeRoute || {}).path || (loginRoute || {}).path || '/';

		      replace(redirectTo);

		      callback();
		    });
		  }
		}, _temp);
		exports.default = LogoutRoute;

	/***/ },
	/* 91 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _class, _temp;

		var _reactRouter = __webpack_require__(32);

		var _context = __webpack_require__(22);

		var _context2 = _interopRequireDefault(_context);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var AuthenticatedRoute = (_temp = _class = function (_Route) {
		  _inherits(AuthenticatedRoute, _Route);

		  function AuthenticatedRoute() {
		    _classCallCheck(this, AuthenticatedRoute);

		    return _possibleConstructorReturn(this, (AuthenticatedRoute.__proto__ || Object.getPrototypeOf(AuthenticatedRoute)).apply(this, arguments));
		  }

		  return AuthenticatedRoute;
		}(_reactRouter.Route), _class.defaultProps = {
		  onEnter: function onEnter(nextState, replace, callback) {
		    _context2.default.userStore.isAuthenticated({
		      inGroup: this.inGroup
		    }, function (err, authenticated) {
		      if (!authenticated) {
		        var router = _context2.default.getRouter();
		        var homeRoute = router.getHomeRoute();
		        var loginRoute = router.getLoginRoute();
		        var redirectTo = (loginRoute || {}).path || (homeRoute || {}).path || '/';

		        replace(redirectTo);
		      }
		      callback();
		    });
		  }
		}, _temp);
		exports.default = AuthenticatedRoute;

	/***/ },
	/* 92 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _class, _temp;

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _utils = __webpack_require__(5);

		var _utils2 = _interopRequireDefault(_utils);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var Authenticated = (_temp = _class = function (_React$Component) {
		  _inherits(Authenticated, _React$Component);

		  function Authenticated() {
		    _classCallCheck(this, Authenticated);

		    return _possibleConstructorReturn(this, (Authenticated.__proto__ || Object.getPrototypeOf(Authenticated)).apply(this, arguments));
		  }

		  _createClass(Authenticated, [{
		    key: 'render',
		    value: function render() {
		      var user = this.context.user;
		      var authenticated = user !== undefined;

		      if (authenticated && this.props.inGroup) {
		        if (user.groups) {
		          authenticated = _utils2.default.groupsMatchExpression(user.groups, this.props.inGroup);
		        } else {
		          _utils2.default.logWarning('<Authenticated>', 'In order to use the inGroup property, you must expand the groups resource for the /me endpoint.');
		        }
		      }

		      var propsToForward = _utils2.default.excludeProps(['inGroup'], this.props);

		      return authenticated ? _utils2.default.enforceRootElement(this.props.children, propsToForward) : null;
		    }
		  }]);

		  return Authenticated;
		}(_react2.default.Component), _class.contextTypes = {
		  user: _react2.default.PropTypes.object
		}, _temp);
		exports.default = Authenticated;

	/***/ },
	/* 93 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _class, _temp;

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _utils = __webpack_require__(5);

		var _utils2 = _interopRequireDefault(_utils);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var NotAuthenticated = (_temp = _class = function (_React$Component) {
		  _inherits(NotAuthenticated, _React$Component);

		  function NotAuthenticated() {
		    _classCallCheck(this, NotAuthenticated);

		    return _possibleConstructorReturn(this, (NotAuthenticated.__proto__ || Object.getPrototypeOf(NotAuthenticated)).apply(this, arguments));
		  }

		  _createClass(NotAuthenticated, [{
		    key: 'render',
		    value: function render() {
		      var user = this.context.user;
		      var authenticated = user !== undefined;

		      if (this.props.inGroup) {
		        if (authenticated) {
		          if (user.groups) {
		            authenticated = _utils2.default.groupsMatchExpression(user.groups, this.props.inGroup);
		          } else {
		            _utils2.default.logWarning('<NotAuthenticated> In order to use the inGroup option, you must expand the groups resource for the /me endpoint.');
		          }
		        } else {
		          return null;
		        }
		      }

		      var propsToForward = _utils2.default.excludeProps(['inGroup'], this.props);

		      return !authenticated ? _utils2.default.enforceRootElement(this.props.children, propsToForward) : null;
		    }
		  }]);

		  return NotAuthenticated;
		}(_react2.default.Component), _class.contextTypes = {
		  user: _react2.default.PropTypes.object
		}, _temp);
		exports.default = NotAuthenticated;

	/***/ },
	/* 94 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _reactRouter = __webpack_require__(32);

		var _utils = __webpack_require__(5);

		var _utils2 = _interopRequireDefault(_utils);

		var _context = __webpack_require__(22);

		var _context2 = _interopRequireDefault(_context);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var LoginLink = function (_React$Component) {
		  _inherits(LoginLink, _React$Component);

		  function LoginLink() {
		    _classCallCheck(this, LoginLink);

		    return _possibleConstructorReturn(this, (LoginLink.__proto__ || Object.getPrototypeOf(LoginLink)).apply(this, arguments));
		  }

		  _createClass(LoginLink, [{
		    key: 'render',
		    value: function render() {
		      var router = _context2.default.getRouter();
		      var loginRoute = router.getLoginRoute();
		      var targetPath = (loginRoute || {}).path || '/login';
		      var selectedProps = _utils2.default.excludeProps(['to', 'children'], this.props);

		      return _react2.default.createElement(
		        _reactRouter.Link,
		        _extends({ to: targetPath }, selectedProps),
		        this.props.children ? this.props.children : 'Login'
		      );
		    }
		  }]);

		  return LoginLink;
		}(_react2.default.Component);

		exports.default = LoginLink;

	/***/ },
	/* 95 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _class, _temp2;

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _utils = __webpack_require__(5);

		var _utils2 = _interopRequireDefault(_utils);

		var _context = __webpack_require__(22);

		var _context2 = _interopRequireDefault(_context);

		var _UserActions = __webpack_require__(21);

		var _UserActions2 = _interopRequireDefault(_UserActions);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var LogoutLink = (_temp2 = _class = function (_React$Component) {
		  _inherits(LogoutLink, _React$Component);

		  function LogoutLink() {
		    var _ref;

		    var _temp, _this, _ret;

		    _classCallCheck(this, LogoutLink);

		    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = LogoutLink.__proto__ || Object.getPrototypeOf(LogoutLink)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
		      disabled: false
		    }, _temp), _possibleConstructorReturn(_this, _ret);
		  }

		  _createClass(LogoutLink, [{
		    key: '_performRedirect',
		    value: function _performRedirect(primaryRedirectTo) {
		      var router = _context2.default.getRouter();
		      var homeRoute = router.getHomeRoute();
		      var loginRoute = router.getLoginRoute();
		      var redirectTo = primaryRedirectTo || (homeRoute || {}).path || (loginRoute || {}).path || '/';

		      this.context.router.push(redirectTo);
		    }
		  }, {
		    key: 'onClick',
		    value: function onClick(e) {
		      var _this2 = this;

		      e.preventDefault();

		      var primaryRedirectTo = this.props.redirectTo;

		      if (!this.state.disabled) {
		        this.setState({ disabled: true });

		        _UserActions2.default.logout(function () {
		          _this2._performRedirect(primaryRedirectTo);
		        });
		      }
		    }
		  }, {
		    key: 'render',
		    value: function render() {
		      var selectedProps = _utils2.default.excludeProps(['redirectTo', 'href', 'onClick', 'disabled', 'children'], this.props);

		      return _react2.default.createElement(
		        'a',
		        _extends({ href: '#', onClick: this.onClick.bind(this), disabled: this.state.disabled }, selectedProps),
		        this.props.children ? this.props.children : 'Logout'
		      );
		    }
		  }]);

		  return LogoutLink;
		}(_react2.default.Component), _class.contextTypes = {
		  router: _react2.default.PropTypes.object.isRequired
		}, _temp2);
		exports.default = LogoutLink;

	/***/ },
	/* 96 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _class2, _temp3;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _reactRouter = __webpack_require__(32);

		var _utils = __webpack_require__(5);

		var _utils2 = _interopRequireDefault(_utils);

		var _context = __webpack_require__(22);

		var _context2 = _interopRequireDefault(_context);

		var _UserActions = __webpack_require__(21);

		var _UserActions2 = _interopRequireDefault(_UserActions);

		var _LoadingText = __webpack_require__(97);

		var _LoadingText2 = _interopRequireDefault(_LoadingText);

		var _SocialLoginButton = __webpack_require__(98);

		var _SocialLoginButton2 = _interopRequireDefault(_SocialLoginButton);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var DefaultLoginForm = function (_React$Component) {
		  _inherits(DefaultLoginForm, _React$Component);

		  function DefaultLoginForm() {
		    var _ref;

		    var _temp, _this, _ret;

		    _classCallCheck(this, DefaultLoginForm);

		    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DefaultLoginForm.__proto__ || Object.getPrototypeOf(DefaultLoginForm)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
		      fields: null,
		      socialProviders: null
		    }, _temp), _possibleConstructorReturn(_this, _ret);
		  }

		  _createClass(DefaultLoginForm, [{
		    key: 'componentDidMount',
		    value: function componentDidMount() {
		      var _this2 = this;

		      if (this.state.fields !== null) {
		        return;
		      }

		      var defaultFields = [{
		        label: 'Username or Email',
		        name: 'login',
		        placeholder: 'Username or Email',
		        required: true,
		        type: 'text'
		      }, {
		        label: 'Password',
		        name: 'password',
		        placeholder: 'Password',
		        required: true,
		        type: 'password'
		      }];

		      _context2.default.userStore.getLoginViewData(function (err, data) {
		        var fields = null;
		        var socialProviders = null;

		        if (err) {
		          fields = defaultFields;
		        } else if (data && data.form) {
		          fields = data.form.fields;
		          if (!_this2.props.hideSocial) {
		            data.accountStores.forEach(function (accountStore) {
		              if (!accountStore.provider) {
		                return;
		              }

		              if (socialProviders === null) {
		                socialProviders = [];
		              }

		              socialProviders.push({
		                id: accountStore.provider.providerId
		              });
		            });
		          }
		        }

		        _this2.setState({
		          fields: fields,
		          socialProviders: socialProviders
		        });
		      });
		    }
		  }, {
		    key: 'render',
		    value: function render() {
		      var fieldMarkup = null;

		      if (this.state.fields !== null) {
		        fieldMarkup = [];

		        this.state.fields.forEach(function (field, index) {
		          var fieldId = 'sp-' + field.name + '-' + index;
		          fieldMarkup.push(_react2.default.createElement(
		            'div',
		            { key: fieldId, className: 'form-group' },
		            _react2.default.createElement(
		              'label',
		              { htmlFor: fieldId, className: 'col-xs-12 col-sm-4 control-label' },
		              field.label
		            ),
		            _react2.default.createElement(
		              'div',
		              { className: 'col-xs-12 col-sm-4' },
		              _react2.default.createElement('input', { type: field.type, className: 'form-control', id: fieldId, name: field.name, placeholder: field.placeholder, required: field.required })
		            )
		          ));
		        });

		        fieldMarkup.push(_react2.default.createElement(
		          'div',
		          { key: 'login-button', className: 'form-group' },
		          _react2.default.createElement(
		            'div',
		            { className: 'col-sm-offset-4 col-sm-4' },
		            _react2.default.createElement(
		              'p',
		              { className: 'alert alert-danger', 'data-spIf': 'form.error' },
		              _react2.default.createElement('span', { 'data-spBind': 'form.errorMessage' })
		            ),
		            _react2.default.createElement(
		              'button',
		              { type: 'submit', className: 'btn btn-primary' },
		              'Login'
		            ),
		            _react2.default.createElement(
		              _reactRouter.Link,
		              { to: '/forgot', className: 'pull-right' },
		              'Forgot Password'
		            )
		          )
		        ));
		      }

		      if (this.state.socialProviders !== null) {
		        var providerButtons = [];

		        this.state.socialProviders.forEach(function (provider, index) {
		          var providerKey = 'sp-' + provider.id + '-' + index;

		          providerButtons.push(_react2.default.createElement(_SocialLoginButton2.default, { key: providerKey, providerId: provider.id, style: { marginRight: '5px', marginBottom: '5px' } }));
		        });

		        if (providerButtons.length) {
		          fieldMarkup.push(_react2.default.createElement(
		            'div',
		            { key: 'provider-buttons', className: 'form-group', style: { paddingTop: '20px' } },
		            _react2.default.createElement(
		              'div',
		              { className: 'col-sm-offset-4 col-sm-4', style: { marginBottom: '10px' } },
		              'Or sign in using...'
		            ),
		            _react2.default.createElement(
		              'div',
		              { className: 'col-sm-offset-4 col-sm-4' },
		              providerButtons
		            )
		          ));
		        }
		      }

		      return _react2.default.createElement(
		        LoginForm,
		        this.props,
		        _react2.default.createElement(
		          'div',
		          { className: 'sp-login-form' },
		          _react2.default.createElement(
		            'div',
		            { className: 'row' },
		            _react2.default.createElement(
		              'div',
		              { className: 'col-xs-12' },
		              _react2.default.createElement(
		                'div',
		                { className: 'form-horizontal' },
		                fieldMarkup ? fieldMarkup : _react2.default.createElement(_LoadingText2.default, null)
		              )
		            )
		          )
		        )
		      );
		    }
		  }]);

		  return DefaultLoginForm;
		}(_react2.default.Component);

		var LoginForm = (_temp3 = _class2 = function (_React$Component2) {
		  _inherits(LoginForm, _React$Component2);

		  function LoginForm() {
		    var _ref2;

		    var _temp2, _this3, _ret2;

		    _classCallCheck(this, LoginForm);

		    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
		      args[_key2] = arguments[_key2];
		    }

		    return _ret2 = (_temp2 = (_this3 = _possibleConstructorReturn(this, (_ref2 = LoginForm.__proto__ || Object.getPrototypeOf(LoginForm)).call.apply(_ref2, [this].concat(args))), _this3), _this3.state = {
		      fields: {
		        username: '',
		        password: ''
		      },
		      errorMessage: null,
		      isFormProcessing: false
		    }, _temp2), _possibleConstructorReturn(_this3, _ret2);
		  }

		  _createClass(LoginForm, [{
		    key: 'onFormSubmit',
		    value: function onFormSubmit(e) {
		      var _this4 = this;

		      e.preventDefault();
		      e.persist();

		      var primaryRedirectTo = this.props.redirectTo;
		      var onSubmitSuccess = this.props.onSubmitSuccess;
		      var onSubmitError = this.props.onSubmitError;

		      var setErrorState = function setErrorState(recentError, newError) {
		        _this4.setState({
		          isFormProcessing: false,
		          errorMessage: (newError || recentError).message
		        });
		      };

		      var next = function next(err, data) {
		        if (err) {
		          if (onSubmitError) {
		            return onSubmitError({
		              data: data,
		              error: err
		            }, setErrorState.bind(_this4, err));
		          }

		          return setErrorState(err);
		        }

		        // If the user didn't specify any data,
		        // then simply default to what we have in state.
		        data = data || _this4.state.fields;

		        _UserActions2.default.login({
		          login: data.username,
		          password: data.password
		        }, function (err, result) {
		          if (err) {
		            if (onSubmitError) {
		              return onSubmitError({
		                data: data,
		                error: err
		              }, setErrorState.bind(_this4, err));
		            }

		            return setErrorState(err);
		          }

		          var performRedirect = _this4._performRedirect.bind(_this4, primaryRedirectTo);

		          if (onSubmitSuccess) {
		            return onSubmitSuccess({
		              data: data,
		              result: result
		            }, performRedirect);
		          }

		          performRedirect();
		        });
		      };

		      this.setState({
		        isFormProcessing: true
		      });

		      if (this.props.onSubmit) {
		        e.data = this.state.fields;
		        this.props.onSubmit(e, next);
		      } else {
		        next(null, this.state.fields);
		      }
		    }
		  }, {
		    key: '_performRedirect',
		    value: function _performRedirect(primaryRedirectTo) {
		      var router = _context2.default.getRouter();
		      var homeRoute = router.getHomeRoute();
		      var authenticatedHomeRoute = router.getAuthenticatedHomeRoute();
		      var redirectTo = primaryRedirectTo || (authenticatedHomeRoute || {}).path || (homeRoute || {}).path || '/';

		      this.context.router.push(redirectTo);
		    }
		  }, {
		    key: '_mapFormFieldHandler',
		    value: function _mapFormFieldHandler(element, tryMapField) {
		      var tryMapFormField = function tryMapFormField(name) {
		        switch (element.props.name) {
		          case 'login':
		          case 'username':
		            tryMapField('username');
		            break;
		          case 'password':
		            tryMapField('password');
		            break;
		        }
		      };

		      if (typeof element.type === 'function' && _utils2.default.containsWord(element.type.name, ['input', 'field', 'text'])) {
		        if (element.props && element.props.name) {
		          tryMapFormField(element.props.name);
		        }
		      } else if (['input', 'textarea'].indexOf(element.type) > -1) {
		        if (element.props.type !== 'submit') {
		          tryMapFormField(element.props.name);
		        }
		      }
		    }
		  }, {
		    key: '_spIfHandler',
		    value: function _spIfHandler(action, element) {
		      var test = null;

		      switch (action) {
		        case 'form.processing':
		          test = this.state.isFormProcessing;
		          break;
		        case 'form.error':
		          test = this.state.errorMessage !== null;
		          break;
		      }

		      return test;
		    }
		  }, {
		    key: '_spBindHandler',
		    value: function _spBindHandler(bind, element) {
		      var result = false;

		      switch (bind) {
		        case 'form.errorMessage':
		          var className = element.props ? element.props.className : undefined;
		          result = _react2.default.createElement(
		            'span',
		            { className: className },
		            this.state.errorMessage
		          );
		          break;
		      }

		      return result;
		    }
		  }, {
		    key: 'render',
		    value: function render() {
		      if (this.props.children) {
		        var selectedProps = _utils2.default.excludeProps(['redirectTo', 'hideSocial', 'onSubmit', 'onSubmitError', 'onSubmitSuccess', 'children'], this.props);

		        return _react2.default.createElement(
		          'form',
		          _extends({ onSubmit: this.onFormSubmit.bind(this) }, selectedProps),
		          _utils2.default.makeForm(this, this._mapFormFieldHandler.bind(this), this._spIfHandler.bind(this), this._spBindHandler.bind(this))
		        );
		      } else {
		        return _react2.default.createElement(DefaultLoginForm, this.props);
		      }
		    }
		  }]);

		  return LoginForm;
		}(_react2.default.Component), _class2.contextTypes = {
		  router: _react2.default.PropTypes.object.isRequired
		}, _temp3);
		exports.default = LoginForm;

	/***/ },
	/* 97 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var LoadingText = function (_React$Component) {
		  _inherits(LoadingText, _React$Component);

		  function LoadingText() {
		    var _ref;

		    var _temp, _this, _ret;

		    _classCallCheck(this, LoadingText);

		    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = LoadingText.__proto__ || Object.getPrototypeOf(LoadingText)).call.apply(_ref, [this].concat(args))), _this), _this.waitTimeout = null, _this.state = {
		      text: null
		    }, _temp), _possibleConstructorReturn(_this, _ret);
		  }

		  _createClass(LoadingText, [{
		    key: 'componentDidMount',
		    value: function componentDidMount() {
		      var _this2 = this;

		      this.waitTimeout = setTimeout(function () {
		        _this2.setState({
		          text: _this2.props.text || 'Loading...'
		        });
		      }, this.props.showAfter || 250);
		    }
		  }, {
		    key: 'componentWillUnmount',
		    value: function componentWillUnmount() {
		      clearTimeout(this.waitTimeout);
		    }
		  }, {
		    key: 'render',
		    value: function render() {
		      if (!this.state.text) {
		        return null;
		      }

		      return _react2.default.createElement(
		        'p',
		        _extends({}, this.props, { style: { textAlign: 'center' } }),
		        this.props.children ? this.props.children : this.state.text
		      );
		    }
		  }]);

		  return LoadingText;
		}(_react2.default.Component);

		exports.default = LoadingText;

	/***/ },
	/* 98 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _utils = __webpack_require__(5);

		var _utils2 = _interopRequireDefault(_utils);

		var _SocialLoginLink = __webpack_require__(99);

		var _SocialLoginLink2 = _interopRequireDefault(_SocialLoginLink);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var SocialLoginButton = function (_React$Component) {
		  _inherits(SocialLoginButton, _React$Component);

		  function SocialLoginButton() {
		    _classCallCheck(this, SocialLoginButton);

		    return _possibleConstructorReturn(this, (SocialLoginButton.__proto__ || Object.getPrototypeOf(SocialLoginButton)).apply(this, arguments));
		  }

		  _createClass(SocialLoginButton, [{
		    key: 'render',
		    value: function render() {
		      var providerId = this.props.providerId;
		      var selectedProps = _utils2.default.excludeProps(['hideIcon', 'children', 'className'], this.props);

		      return _react2.default.createElement(
		        _SocialLoginLink2.default,
		        _extends({ className: 'btn btn-default btn-social btn-' + providerId + ' ' + this.props.className }, selectedProps),
		        !this.props.hideIcon ? _react2.default.createElement('span', { className: 'fa fa-' + providerId, style: { marginRight: '5px' } }) : null,
		        this.props.children ? this.props.children : _utils2.default.translateProviderIdToName(providerId)
		      );
		    }
		  }]);

		  return SocialLoginButton;
		}(_react2.default.Component);

		exports.default = SocialLoginButton;

	/***/ },
	/* 99 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _utils = __webpack_require__(5);

		var _utils2 = _interopRequireDefault(_utils);

		var _context = __webpack_require__(22);

		var _context2 = _interopRequireDefault(_context);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var providerAuthorizationUris = {
		  github: 'https://github.com/login/oauth/authorize',
		  google: 'https://accounts.google.com/o/oauth2/v2/auth',
		  linkedin: 'https://www.linkedin.com/uas/oauth2/authorization',
		  facebook: 'https://www.facebook.com/dialog/oauth'
		};

		var SocialLoginLink = function (_React$Component) {
		  _inherits(SocialLoginLink, _React$Component);

		  function SocialLoginLink() {
		    var _ref;

		    var _temp, _this, _ret;

		    _classCallCheck(this, SocialLoginLink);

		    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SocialLoginLink.__proto__ || Object.getPrototypeOf(SocialLoginLink)).call.apply(_ref, [this].concat(args))), _this), _this.availableProps = {
		      providerId: null
		    }, _this.state = {
		      disabled: false
		    }, _temp), _possibleConstructorReturn(_this, _ret);
		  }

		  _createClass(SocialLoginLink, [{
		    key: '_buildRedirectUri',
		    value: function _buildRedirectUri(provider) {
		      return location.protocol + '//' + location.host + '/callbacks/' + provider.providerId;
		    }
		  }, {
		    key: '_createStateCookie',
		    value: function _createStateCookie() {
		      var stateId = _utils2.default.uuid();

		      document.cookie = 'oauthStateToken=' + stateId;

		      return stateId;
		    }
		  }, {
		    key: '_buildAuthorizationUri',
		    value: function _buildAuthorizationUri(provider, scope, redirectUri) {
		      var authorizationUri = providerAuthorizationUris[provider.providerId];

		      if (!authorizationUri) {
		        return false;
		      }

		      var queryString = {
		        client_id: provider.clientId,
		        scope: scope || provider.scope,
		        redirect_uri: redirectUri || this._buildRedirectUri(provider),
		        state: this._createStateCookie(),
		        response_type: 'code'
		      };

		      return authorizationUri + '?' + _utils2.default.encodeQueryString(queryString);
		    }
		  }, {
		    key: '_findProvider',
		    value: function _findProvider(accountStores, providerId) {
		      var provider;

		      for (var i = 0; i < accountStores.length; i++) {
		        var item = accountStores[i];

		        if (item.provider.providerId === providerId) {
		          provider = item.provider;
		          break;
		        }
		      }

		      return provider;
		    }
		  }, {
		    key: '_onClick',
		    value: function _onClick(e) {
		      var _this2 = this;

		      e.preventDefault();

		      if (!this.state.disabled) {
		        this.setState({ disabled: true });

		        var providerId = this.props.providerId;

		        _context2.default.userStore.getLoginViewData(function (err, result) {
		          if (err) {
		            return console.error('Error: Unable to retrieve login view data.');
		          }

		          var provider = _this2._findProvider(result.accountStores, providerId);

		          if (!provider) {
		            return console.error('Error: Unable to login. Social provider ' + _utils2.default.translateProviderIdToName(providerId) + ' not configured.');
		          }

		          window.location.href = _this2._buildAuthorizationUri(provider, _this2.props.scope, _this2.props.redirectUri);
		        });
		      }
		    }
		  }, {
		    key: 'render',
		    value: function render() {
		      var providerId = this.props.providerId;
		      var selectedProps = _utils2.default.excludeProps(['providerId', 'scope', 'redirectUri', 'children', 'disabled', 'onClick', 'href'], this.props);

		      return _react2.default.createElement(
		        'a',
		        _extends({}, selectedProps, { href: '#', onClick: this._onClick.bind(this), disabled: this.state.disabled }),
		        this.props.children ? this.props.children : 'Login with ' + _utils2.default.translateProviderIdToName(providerId)
		      );
		    }
		  }]);

		  return SocialLoginLink;
		}(_react2.default.Component);

		exports.default = SocialLoginLink;

	/***/ },
	/* 100 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _class2, _temp3;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _reactRouter = __webpack_require__(32);

		var _utils = __webpack_require__(5);

		var _utils2 = _interopRequireDefault(_utils);

		var _context = __webpack_require__(22);

		var _context2 = _interopRequireDefault(_context);

		var _UserActions = __webpack_require__(21);

		var _UserActions2 = _interopRequireDefault(_UserActions);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var DefaultUserProfileForm = function (_React$Component) {
		  _inherits(DefaultUserProfileForm, _React$Component);

		  function DefaultUserProfileForm() {
		    var _ref;

		    var _temp, _this, _ret;

		    _classCallCheck(this, DefaultUserProfileForm);

		    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DefaultUserProfileForm.__proto__ || Object.getPrototypeOf(DefaultUserProfileForm)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
		      showPasswordVerification: false
		    }, _temp), _possibleConstructorReturn(_this, _ret);
		  }

		  _createClass(DefaultUserProfileForm, [{
		    key: 'onPasswordChanged',
		    value: function onPasswordChanged(e) {
		      this.setState({
		        showPasswordVerification: e.target.value.length > 0
		      });
		    }
		  }, {
		    key: 'render',
		    value: function render() {
		      return _react2.default.createElement(
		        UserProfileForm,
		        this.props,
		        _react2.default.createElement(
		          'div',
		          { className: 'sp-update-profile-form' },
		          _react2.default.createElement(
		            'div',
		            { className: 'row' },
		            _react2.default.createElement(
		              'div',
		              { className: 'col-xs-12' },
		              _react2.default.createElement(
		                'div',
		                { className: 'form-horizontal' },
		                _react2.default.createElement(
		                  'div',
		                  { className: 'form-group' },
		                  _react2.default.createElement(
		                    'label',
		                    { htmlFor: 'givenName', className: 'col-xs-12 col-sm-4 control-label' },
		                    'First name'
		                  ),
		                  _react2.default.createElement(
		                    'div',
		                    { className: 'col-xs-12 col-sm-4' },
		                    _react2.default.createElement('input', { type: 'text', className: 'form-control', id: 'givenName', name: 'givenName', placeholder: 'First name', required: true })
		                  )
		                ),
		                _react2.default.createElement(
		                  'div',
		                  { className: 'form-group' },
		                  _react2.default.createElement(
		                    'label',
		                    { htmlFor: 'surname', className: 'col-xs-12 col-sm-4 control-label' },
		                    'Last name'
		                  ),
		                  _react2.default.createElement(
		                    'div',
		                    { className: 'col-xs-12 col-sm-4' },
		                    _react2.default.createElement('input', { type: 'text', className: 'form-control', id: 'surname', name: 'surname', placeholder: 'Last name', required: true })
		                  )
		                ),
		                _react2.default.createElement(
		                  'div',
		                  { className: 'form-group' },
		                  _react2.default.createElement(
		                    'label',
		                    { htmlFor: 'email', className: 'col-xs-12 col-sm-4 control-label' },
		                    'Email'
		                  ),
		                  _react2.default.createElement(
		                    'div',
		                    { className: 'col-xs-12 col-sm-4' },
		                    _react2.default.createElement('input', { type: 'email', className: 'form-control', id: 'email', name: 'email', placeholder: 'Email', required: true })
		                  )
		                ),
		                _react2.default.createElement(
		                  'div',
		                  { className: 'form-group' },
		                  _react2.default.createElement(
		                    'label',
		                    { htmlFor: 'password', className: 'col-xs-12 col-sm-4 control-label' },
		                    'Password'
		                  ),
		                  _react2.default.createElement(
		                    'div',
		                    { className: 'col-xs-12 col-sm-4' },
		                    _react2.default.createElement('input', { type: 'password', className: 'form-control', id: 'password', name: 'password', placeholder: 'Password', onChange: this.onPasswordChanged.bind(this) })
		                  )
		                ),
		                _react2.default.createElement(
		                  'div',
		                  null,
		                  this.state.showPasswordVerification ? _react2.default.createElement(
		                    'div',
		                    { className: 'form-group' },
		                    _react2.default.createElement(
		                      'label',
		                      { htmlFor: 'password', className: 'col-xs-12 col-sm-4 control-label' },
		                      'Existing password'
		                    ),
		                    _react2.default.createElement(
		                      'div',
		                      { className: 'col-xs-12 col-sm-4' },
		                      _react2.default.createElement('input', { type: 'password', className: 'form-control', id: 'existingPassword', name: 'existingPassword', placeholder: 'Existing password', required: true })
		                    )
		                  ) : null
		                ),
		                _react2.default.createElement(
		                  'div',
		                  { key: 'update-button', className: 'form-group' },
		                  _react2.default.createElement(
		                    'div',
		                    { className: 'col-sm-offset-4 col-sm-4' },
		                    _react2.default.createElement(
		                      'p',
		                      { className: 'alert alert-danger', 'data-spIf': 'form.error' },
		                      _react2.default.createElement('span', { 'data-spBind': 'form.errorMessage' })
		                    ),
		                    _react2.default.createElement(
		                      'p',
		                      { className: 'alert alert-success', 'data-spIf': 'form.successful' },
		                      'Profile updated.'
		                    ),
		                    _react2.default.createElement(
		                      'button',
		                      { type: 'submit', className: 'btn btn-primary' },
		                      _react2.default.createElement(
		                        'span',
		                        { 'data-spIf': '!form.processing' },
		                        'Update'
		                      ),
		                      _react2.default.createElement(
		                        'span',
		                        { 'data-spIf': 'form.processing' },
		                        'Updating...'
		                      )
		                    )
		                  )
		                )
		              )
		            )
		          )
		        )
		      );
		    }
		  }]);

		  return DefaultUserProfileForm;
		}(_react2.default.Component);

		var UserProfileForm = (_temp3 = _class2 = function (_React$Component2) {
		  _inherits(UserProfileForm, _React$Component2);

		  function UserProfileForm() {
		    var _ref2;

		    var _temp2, _this2, _ret2;

		    _classCallCheck(this, UserProfileForm);

		    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
		      args[_key2] = arguments[_key2];
		    }

		    return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, (_ref2 = UserProfileForm.__proto__ || Object.getPrototypeOf(UserProfileForm)).call.apply(_ref2, [this].concat(args))), _this2), _this2.state = {
		      fields: {},
		      defaultFields: _this2.context.user,
		      errorMessage: null,
		      isFormProcessing: false,
		      isFormSuccessful: false
		    }, _this2._updateSessionData = function (data, callback) {
		      var sessionStore = _context2.default.sessionStore;

		      if (!sessionStore.empty()) {
		        var hasChanged = false;
		        var updatedSession = _utils2.default.clone(sessionStore.get());

		        for (var key in data) {
		          if (key in updatedSession) {
		            if (updatedSession[key] != data[key]) {
		              hasChanged = true;
		              updatedSession[key] = data[key];
		            }
		          }
		        }

		        if (hasChanged) {
		          _context2.default.userStore.resolveSession(callback, true);
		        } else {
		          callback();
		        }
		      }
		    }, _temp2), _possibleConstructorReturn(_this2, _ret2);
		  }

		  _createClass(UserProfileForm, [{
		    key: '_onFormSubmit',
		    value: function _onFormSubmit(e) {
		      var _this3 = this;

		      e.preventDefault();
		      e.persist();

		      var next = function next(err, data) {
		        if (err) {
		          return _this3.setState({
		            isFormProcessing: false,
		            isFormSuccessful: false,
		            errorMessage: err.message
		          });
		        }

		        // If the user didn't specify any data,
		        // then simply default to what we have in state.
		        data = data || _this3.state.fields;

		        _UserActions2.default.updateProfile(data, function (err) {
		          if (err) {
		            return _this3.setState({
		              isFormProcessing: false,
		              isFormSuccessful: false,
		              errorMessage: err.message
		            });
		          }

		          _this3._updateSessionData(data, function () {
		            _this3.setState({
		              isFormProcessing: false,
		              isFormSuccessful: true,
		              errorMessage: null
		            });
		          });
		        });
		      };

		      this.setState({
		        isFormProcessing: true
		      });

		      if (this.props.onSubmit) {
		        e.data = this.state.fields;
		        this.props.onSubmit(e, next);
		      } else {
		        next(null, this.state.fields);
		      }
		    }
		  }, {
		    key: '_mapFormFieldHandler',
		    value: function _mapFormFieldHandler(element, tryMapField) {
		      var defaultValue = element.props.name ? _utils2.default.getFieldValue(this.state.defaultFields, element.props.name) : undefined;

		      if (typeof element.type === 'function' && _utils2.default.containsWord(element.type.name, ['input', 'field', 'text'])) {
		        if (element.props && element.props.name) {
		          tryMapField(element.props.name, defaultValue);
		        }
		      } else if (element.type === 'input') {
		        if (element.props.type === 'submit') {
		          return;
		        }

		        tryMapField(element.props.name, defaultValue);
		      }
		    }
		  }, {
		    key: '_spIfHandler',
		    value: function _spIfHandler(action, element) {
		      var test = null;

		      switch (action) {
		        case 'form.successful':
		          test = this.state.isFormSuccessful;
		          break;
		        case 'form.processing':
		          test = this.state.isFormProcessing;
		          break;
		        case 'form.error':
		          test = !!this.state.errorMessage;
		          break;
		      }

		      return test;
		    }
		  }, {
		    key: '_spBindHandler',
		    value: function _spBindHandler(bind, element) {
		      var result = false;

		      switch (bind) {
		        case 'form.errorMessage':
		          var className = element.props ? element.props.className : undefined;
		          result = _react2.default.createElement(
		            'span',
		            { className: className },
		            this.state.errorMessage
		          );
		          break;
		      }

		      return result;
		    }
		  }, {
		    key: 'render',
		    value: function render() {
		      if (this.props.children) {
		        var selectedProps = _utils2.default.excludeProps(['onSubmit', 'children'], this.props);

		        return _react2.default.createElement(
		          'form',
		          _extends({ onSubmit: this._onFormSubmit.bind(this) }, selectedProps),
		          _utils2.default.makeForm(this, this._mapFormFieldHandler.bind(this), this._spIfHandler.bind(this), this._spBindHandler.bind(this))
		        );
		      } else {
		        return _react2.default.createElement(DefaultUserProfileForm, this.props);
		      }
		    }
		  }]);

		  return UserProfileForm;
		}(_react2.default.Component), _class2.contextTypes = {
		  user: _react2.default.PropTypes.object
		}, _temp3);
		exports.default = UserProfileForm;

	/***/ },
	/* 101 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _class2, _temp3;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _reactRouter = __webpack_require__(32);

		var _utils = __webpack_require__(5);

		var _utils2 = _interopRequireDefault(_utils);

		var _context = __webpack_require__(22);

		var _context2 = _interopRequireDefault(_context);

		var _LoginLink = __webpack_require__(94);

		var _LoginLink2 = _interopRequireDefault(_LoginLink);

		var _UserActions = __webpack_require__(21);

		var _UserActions2 = _interopRequireDefault(_UserActions);

		var _LoadingText = __webpack_require__(97);

		var _LoadingText2 = _interopRequireDefault(_LoadingText);

		var _SocialLoginButton = __webpack_require__(98);

		var _SocialLoginButton2 = _interopRequireDefault(_SocialLoginButton);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var DefaultRegistrationForm = function (_React$Component) {
		  _inherits(DefaultRegistrationForm, _React$Component);

		  function DefaultRegistrationForm() {
		    var _ref;

		    var _temp, _this, _ret;

		    _classCallCheck(this, DefaultRegistrationForm);

		    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DefaultRegistrationForm.__proto__ || Object.getPrototypeOf(DefaultRegistrationForm)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
		      fields: null,
		      socialProviders: null
		    }, _temp), _possibleConstructorReturn(_this, _ret);
		  }

		  _createClass(DefaultRegistrationForm, [{
		    key: 'componentDidMount',
		    value: function componentDidMount() {
		      var _this2 = this;

		      if (this.state.fields !== null) {
		        return;
		      }

		      var defaultFields = [{
		        label: 'First Name',
		        name: 'givenName',
		        placeholder: 'First Name',
		        required: true,
		        type: 'text'
		      }, {
		        label: 'Last Name',
		        name: 'surname',
		        placeholder: 'Last Name',
		        required: true,
		        type: 'text'
		      }, {
		        label: 'Email',
		        name: 'email',
		        placeholder: 'Email',
		        required: true,
		        type: 'email'
		      }, {
		        label: 'Password',
		        name: 'password',
		        placeholder: 'Password',
		        required: true,
		        type: 'password'
		      }];

		      _context2.default.userStore.getRegisterViewData(function (err, data) {
		        var fields = null;
		        var socialProviders = null;

		        if (err) {
		          fields = defaultFields;
		        } else if (data && data.form) {
		          fields = data.form.fields;
		          if (!_this2.props.hideSocial) {
		            data.accountStores.forEach(function (accountStore) {
		              if (!accountStore.provider) {
		                return;
		              }

		              if (socialProviders === null) {
		                socialProviders = [];
		              }

		              socialProviders.push({
		                id: accountStore.provider.providerId
		              });
		            });
		          }
		        }

		        _this2.setState({
		          fields: fields,
		          socialProviders: socialProviders
		        });
		      });
		    }
		  }, {
		    key: 'render',
		    value: function render() {
		      var fieldMarkup = null;

		      if (this.state.fields !== null) {
		        fieldMarkup = [];

		        this.state.fields.forEach(function (field, index) {
		          var fieldId = 'sp-' + field.name + '-' + index;
		          fieldMarkup.push(_react2.default.createElement(
		            'div',
		            { key: fieldId, className: 'form-group' },
		            _react2.default.createElement(
		              'label',
		              { htmlFor: fieldId, className: 'col-xs-12 col-sm-4 control-label' },
		              field.label
		            ),
		            _react2.default.createElement(
		              'div',
		              { className: 'col-xs-12 col-sm-4' },
		              _react2.default.createElement('input', { type: field.type, className: 'form-control', id: fieldId, name: field.name, placeholder: field.placeholder, required: field.required })
		            )
		          ));
		        });

		        fieldMarkup.push(_react2.default.createElement(
		          'div',
		          { key: 'register-button', className: 'form-group' },
		          _react2.default.createElement(
		            'div',
		            { className: 'col-sm-offset-4 col-sm-4' },
		            _react2.default.createElement(
		              'p',
		              { className: 'alert alert-danger', 'data-spIf': 'form.error' },
		              _react2.default.createElement('span', { 'data-spBind': 'form.errorMessage' })
		            ),
		            _react2.default.createElement(
		              'button',
		              { type: 'submit', className: 'btn btn-primary' },
		              'Register'
		            )
		          )
		        ));
		      }

		      if (this.state.socialProviders !== null) {
		        var providerButtons = [];

		        this.state.socialProviders.forEach(function (provider, index) {
		          var providerKey = 'sp-' + provider.id + '-' + index;

		          providerButtons.push(_react2.default.createElement(_SocialLoginButton2.default, { key: providerKey, providerId: provider.id, style: { marginRight: '5px', marginBottom: '5px' } }));
		        });

		        if (providerButtons.length) {
		          fieldMarkup.push(_react2.default.createElement(
		            'div',
		            { key: 'provider-buttons', className: 'form-group', style: { paddingTop: '20px' } },
		            _react2.default.createElement(
		              'div',
		              { className: 'col-sm-offset-4 col-sm-4', style: { marginBottom: '10px' } },
		              'Or register using...'
		            ),
		            _react2.default.createElement(
		              'div',
		              { className: 'col-sm-offset-4 col-sm-4' },
		              providerButtons
		            )
		          ));
		        }
		      }

		      return _react2.default.createElement(
		        RegistrationForm,
		        this.props,
		        _react2.default.createElement(
		          'div',
		          { className: 'sp-login-form' },
		          _react2.default.createElement(
		            'div',
		            { className: 'row', 'data-spIf': 'account.created' },
		            _react2.default.createElement(
		              'div',
		              { className: 'col-sm-offset-4 col-xs-12 col-sm-4' },
		              _react2.default.createElement(
		                'p',
		                { className: 'alert alert-success', 'data-spIf': 'account.enabled' },
		                'Your account has been created. ',
		                _react2.default.createElement(
		                  _LoginLink2.default,
		                  null,
		                  'Login Now'
		                ),
		                '.'
		              ),
		              _react2.default.createElement(
		                'div',
		                { 'data-spIf': '!account.enabled' },
		                _react2.default.createElement(
		                  'p',
		                  { className: 'alert alert-success' },
		                  'Your account has been created. Please check your email for a verification link.'
		                ),
		                _react2.default.createElement(
		                  'p',
		                  { className: 'pull-right' },
		                  _react2.default.createElement(
		                    _LoginLink2.default,
		                    null,
		                    'Back to Login'
		                  )
		                )
		              )
		            )
		          ),
		          _react2.default.createElement(
		            'div',
		            { className: 'row', 'data-spIf': '!account.created' },
		            _react2.default.createElement(
		              'div',
		              { className: 'col-xs-12' },
		              _react2.default.createElement(
		                'div',
		                { className: 'form-horizontal' },
		                fieldMarkup ? fieldMarkup : _react2.default.createElement(_LoadingText2.default, null)
		              )
		            )
		          )
		        )
		      );
		    }
		  }]);

		  return DefaultRegistrationForm;
		}(_react2.default.Component);

		var RegistrationForm = (_temp3 = _class2 = function (_React$Component2) {
		  _inherits(RegistrationForm, _React$Component2);

		  function RegistrationForm() {
		    var _ref2;

		    var _temp2, _this3, _ret2;

		    _classCallCheck(this, RegistrationForm);

		    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
		      args[_key2] = arguments[_key2];
		    }

		    return _ret2 = (_temp2 = (_this3 = _possibleConstructorReturn(this, (_ref2 = RegistrationForm.__proto__ || Object.getPrototypeOf(RegistrationForm)).call.apply(_ref2, [this].concat(args))), _this3), _this3.state = {
		      fields: {
		        givenName: '',
		        surname: '',
		        email: '',
		        password: ''
		      },
		      errorMessage: null,
		      isFormProcessing: false,
		      isAccountCreated: false,
		      isAccountEnabled: false
		    }, _temp2), _possibleConstructorReturn(_this3, _ret2);
		  }

		  _createClass(RegistrationForm, [{
		    key: 'onFormSubmit',
		    value: function onFormSubmit(e) {
		      var _this4 = this;

		      e.preventDefault();
		      e.persist();

		      var primaryRedirectTo = this.props.redirectTo;
		      var onSubmitSuccess = this.props.onSubmitSuccess;
		      var onSubmitError = this.props.onSubmitError;

		      var setErrorState = function setErrorState(recentError, newError) {
		        _this4.setState({
		          isFormProcessing: false,
		          isAccountCreated: false,
		          errorMessage: (newError || recentError).message
		        });
		      };

		      var next = function next(err, data) {
		        if (err) {
		          if (onSubmitError) {
		            return onSubmitError({
		              data: data,
		              error: err
		            }, setErrorState.bind(_this4, err));
		          }

		          return setErrorState(err);
		        }

		        // If the user didn't specify any data,
		        // then simply default to what we have in state.
		        data = data || _this4.state.fields;

		        _UserActions2.default.register(data, function (err, result) {
		          if (err) {
		            if (onSubmitError) {
		              return onSubmitError({
		                data: data,
		                result: result,
		                error: err
		              }, setErrorState.bind(_this4, err));
		            }

		            setErrorState(err);
		          } else if (result.status === 'ENABLED') {
		            _UserActions2.default.login({
		              login: data.email || data.username,
		              password: data.password
		            }, function (err) {
		              if (err) {
		                if (onSubmitError) {
		                  return onSubmitError({
		                    data: data,
		                    result: result,
		                    error: err
		                  }, setErrorState.bind(_this4, err));
		                }

		                return setErrorState(err);
		              }

		              var performRedirect = _this4._performRedirect.bind(_this4, primaryRedirectTo);

		              if (onSubmitSuccess) {
		                return onSubmitSuccess({
		                  data: data,
		                  result: result
		                }, performRedirect);
		              }

		              performRedirect();
		            });
		          } else {
		            var setSuccessState = function setSuccessState() {
		              _this4.setState({
		                isFormProcessing: false,
		                isAccountCreated: true,
		                isAccountEnabled: false
		              });
		            };

		            if (onSubmitSuccess) {
		              return onSubmitSuccess({
		                data: data,
		                result: result
		              }, setSuccessState);
		            }

		            setSuccessState();
		          }
		        });
		      };

		      this.setState({
		        isFormProcessing: true
		      });

		      if (this.props.onSubmit) {
		        e.data = this.state.fields;
		        this.props.onSubmit(e, next);
		      } else {
		        next(null, this.state.fields);
		      }
		    }
		  }, {
		    key: '_performRedirect',
		    value: function _performRedirect(primaryRedirectTo) {
		      var router = _context2.default.getRouter();
		      var homeRoute = router.getHomeRoute();
		      var authenticatedHomeRoute = router.getAuthenticatedHomeRoute();
		      var redirectTo = primaryRedirectTo || (authenticatedHomeRoute || {}).path || (homeRoute || {}).path || '/';

		      this.context.router.push(redirectTo);
		    }
		  }, {
		    key: '_mapFormFieldHandler',
		    value: function _mapFormFieldHandler(element, tryMapField) {
		      var tryMapFormField = function tryMapFormField(name) {
		        if (name.indexOf('customData.') === 0) {
		          tryMapField(name);
		          return;
		        }

		        switch (name) {
		          case 'email':
		            tryMapField('email');
		            break;
		          case 'login':
		          case 'username':
		            tryMapField('username');
		            break;
		          case 'givenName':
		          case 'firstName':
		            tryMapField('givenName');
		            break;
		          case 'surname':
		          case 'lastName':
		            tryMapField('surname');
		            break;
		          case 'password':
		            tryMapField('password');
		            break;
		        }
		      };

		      if (typeof element.type === 'function' && _utils2.default.containsWord(element.type.name, ['input', 'field', 'text'])) {
		        if (element.props && element.props.name) {
		          tryMapFormField(element.props.name);
		        }
		      } else if (['input', 'textarea'].indexOf(element.type) > -1) {
		        if (element.props.type !== 'submit') {
		          tryMapFormField(element.props.name);
		        }
		      }
		    }
		  }, {
		    key: '_spIfHandler',
		    value: function _spIfHandler(action, element) {
		      var test = null;

		      switch (action) {
		        case 'form.processing':
		          test = this.state.isFormProcessing;
		          break;
		        case 'form.error':
		          test = !!this.state.errorMessage;
		          break;
		        case 'account.created':
		          test = this.state.isAccountCreated;
		          break;
		        case 'account.enabled':
		          test = this.state.isAccountEnabled;
		          break;
		      }

		      return test;
		    }
		  }, {
		    key: '_spBindHandler',
		    value: function _spBindHandler(bind, element) {
		      var result = false;

		      switch (bind) {
		        case 'form.errorMessage':
		          var className = element.props ? element.props.className : undefined;
		          result = _react2.default.createElement(
		            'span',
		            { className: className },
		            this.state.errorMessage
		          );
		          break;
		      }

		      return result;
		    }
		  }, {
		    key: 'render',
		    value: function render() {
		      if (this.props.children) {
		        var selectedProps = _utils2.default.excludeProps(['redirectTo', 'hideSocial', 'onSubmit', 'onSubmitError', 'onSubmitSuccess', 'children'], this.props);

		        return _react2.default.createElement(
		          'form',
		          _extends({ onSubmit: this.onFormSubmit.bind(this) }, selectedProps),
		          _utils2.default.makeForm(this, this._mapFormFieldHandler.bind(this), this._spIfHandler.bind(this), this._spBindHandler.bind(this))
		        );
		      } else {
		        return _react2.default.createElement(DefaultRegistrationForm, this.props);
		      }
		    }
		  }]);

		  return RegistrationForm;
		}(_react2.default.Component), _class2.contextTypes = {
		  router: _react2.default.PropTypes.object.isRequired
		}, _temp3);
		exports.default = RegistrationForm;

	/***/ },
	/* 102 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _reactRouter = __webpack_require__(32);

		var _utils = __webpack_require__(5);

		var _utils2 = _interopRequireDefault(_utils);

		var _LoginLink = __webpack_require__(94);

		var _LoginLink2 = _interopRequireDefault(_LoginLink);

		var _UserActions = __webpack_require__(21);

		var _UserActions2 = _interopRequireDefault(_UserActions);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var DefaultResetPasswordForm = function (_React$Component) {
		  _inherits(DefaultResetPasswordForm, _React$Component);

		  function DefaultResetPasswordForm() {
		    _classCallCheck(this, DefaultResetPasswordForm);

		    return _possibleConstructorReturn(this, (DefaultResetPasswordForm.__proto__ || Object.getPrototypeOf(DefaultResetPasswordForm)).apply(this, arguments));
		  }

		  _createClass(DefaultResetPasswordForm, [{
		    key: 'render',
		    value: function render() {
		      return _react2.default.createElement(
		        ResetPasswordForm,
		        this.props,
		        _react2.default.createElement(
		          'div',
		          { className: 'sp-reset-password-form' },
		          _react2.default.createElement(
		            'div',
		            { className: 'row' },
		            _react2.default.createElement(
		              'div',
		              { className: 'col-sm-offset-4 col-xs-12 col-sm-4', 'data-spIf': 'form.sent' },
		              _react2.default.createElement(
		                'p',
		                { className: 'alert alert-success' },
		                'We have sent a password reset link to the email address of the account that you specified. Please check your email for this message, then click on the link.'
		              ),
		              _react2.default.createElement(
		                'p',
		                { className: 'pull-right' },
		                _react2.default.createElement(
		                  _LoginLink2.default,
		                  null,
		                  'Back to Login'
		                )
		              )
		            ),
		            _react2.default.createElement(
		              'div',
		              { className: 'col-xs-12', 'data-spIf': '!form.sent' },
		              _react2.default.createElement(
		                'div',
		                { className: 'form-horizontal' },
		                _react2.default.createElement(
		                  'div',
		                  { className: 'form-group' },
		                  _react2.default.createElement(
		                    'label',
		                    { htmlFor: 'spEmail', className: 'col-xs-12 col-sm-4 control-label' },
		                    'Email or Username'
		                  ),
		                  _react2.default.createElement(
		                    'div',
		                    { className: 'col-xs-12 col-sm-4' },
		                    _react2.default.createElement('input', { className: 'form-control', id: 'spEmail', name: 'email', placeholder: 'Your Email Address' })
		                  )
		                ),
		                _react2.default.createElement(
		                  'div',
		                  { className: 'form-group' },
		                  _react2.default.createElement(
		                    'div',
		                    { className: 'col-sm-offset-4 col-xs-12' },
		                    _react2.default.createElement(
		                      'p',
		                      { 'data-spIf': 'form.error' },
		                      _react2.default.createElement('span', { 'data-spBind': 'form.errorMessage' })
		                    ),
		                    _react2.default.createElement(
		                      'button',
		                      { type: 'submit', className: 'btn btn-primary' },
		                      'Request Password Reset'
		                    )
		                  )
		                )
		              )
		            )
		          )
		        )
		      );
		    }
		  }]);

		  return DefaultResetPasswordForm;
		}(_react2.default.Component);

		var ResetPasswordForm = function (_React$Component2) {
		  _inherits(ResetPasswordForm, _React$Component2);

		  function ResetPasswordForm() {
		    var _ref;

		    var _temp, _this2, _ret;

		    _classCallCheck(this, ResetPasswordForm);

		    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    return _ret = (_temp = (_this2 = _possibleConstructorReturn(this, (_ref = ResetPasswordForm.__proto__ || Object.getPrototypeOf(ResetPasswordForm)).call.apply(_ref, [this].concat(args))), _this2), _this2.state = {
		      fields: {
		        email: ''
		      },
		      errorMessage: null,
		      isFormProcessing: false,
		      isFormSent: false
		    }, _temp), _possibleConstructorReturn(_this2, _ret);
		  }

		  _createClass(ResetPasswordForm, [{
		    key: 'onFormSubmit',
		    value: function onFormSubmit(e) {
		      var _this3 = this;

		      e.preventDefault();
		      e.persist();

		      var next = function next(err, data) {
		        if (err) {
		          return _this3.setState({
		            isFormProcessing: false,
		            errorMessage: err.message
		          });
		        }

		        // If the user didn't specify any data,
		        // then simply default to what we have in state.
		        data = data || _this3.state.fields;

		        _UserActions2.default.forgotPassword(_this3.state.fields, function (err) {
		          if (err) {
		            _this3.setState({
		              isFormProcessing: false,
		              errorMessage: err.message
		            });
		          } else {
		            _this3.setState({
		              isFormSent: true,
		              isFormProcessing: false,
		              errorMessage: null
		            });
		          }
		        });
		      };

		      this.setState({
		        isFormProcessing: true
		      });

		      if (this.props.onSubmit) {
		        e.data = this.state.fields;
		        this.props.onSubmit(e, next);
		      } else {
		        next(null, this.state.fields);
		      }
		    }
		  }, {
		    key: '_mapFormFieldHandler',
		    value: function _mapFormFieldHandler(element, tryMapField) {
		      var tryMapFormField = function tryMapFormField(name) {
		        switch (name) {
		          case 'email':
		            tryMapField('email');
		            break;
		        }
		      };

		      if (typeof element.type === 'function' && _utils2.default.containsWord(element.type.name, ['input', 'field', 'text'])) {
		        if (element.props && element.props.name) {
		          tryMapFormField(element.props.name);
		        }
		      } else if (['input', 'textarea'].indexOf(element.type) > -1) {
		        if (element.props.type !== 'submit') {
		          tryMapFormField(element.props.name);
		        }
		      }
		    }
		  }, {
		    key: '_spIfHandler',
		    value: function _spIfHandler(action, element) {
		      var test = null;

		      switch (action) {
		        case 'form.processing':
		          test = this.state.isFormProcessing;
		          break;
		        case 'form.sent':
		          test = this.state.isFormSent;
		          break;
		        case 'form.error':
		          test = this.state.errorMessage !== null;
		          break;
		      }

		      return test;
		    }
		  }, {
		    key: '_spBindHandler',
		    value: function _spBindHandler(bind, element) {
		      var result = false;

		      switch (bind) {
		        case 'form.errorMessage':
		          var className = element.props ? element.props.className : undefined;
		          result = _react2.default.createElement(
		            'span',
		            { className: className },
		            this.state.errorMessage
		          );
		          break;
		      }

		      return result;
		    }
		  }, {
		    key: 'render',
		    value: function render() {
		      if (this.props.children) {
		        var selectedProps = _utils2.default.excludeProps(['onSubmit', 'children'], this.props);

		        return _react2.default.createElement(
		          'form',
		          _extends({ onSubmit: this.onFormSubmit.bind(this) }, selectedProps),
		          _utils2.default.makeForm(this, this._mapFormFieldHandler.bind(this), this._spIfHandler.bind(this), this._spBindHandler.bind(this))
		        );
		      } else {
		        return _react2.default.createElement(DefaultResetPasswordForm, this.props);
		      }
		    }
		  }]);

		  return ResetPasswordForm;
		}(_react2.default.Component);

		exports.default = ResetPasswordForm;

	/***/ },
	/* 103 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _reactRouter = __webpack_require__(32);

		var _utils = __webpack_require__(5);

		var _utils2 = _interopRequireDefault(_utils);

		var _LoginLink = __webpack_require__(94);

		var _LoginLink2 = _interopRequireDefault(_LoginLink);

		var _LoadingText = __webpack_require__(97);

		var _LoadingText2 = _interopRequireDefault(_LoadingText);

		var _UserActions = __webpack_require__(21);

		var _UserActions2 = _interopRequireDefault(_UserActions);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var DefaultChangePasswordForm = function (_React$Component) {
		  _inherits(DefaultChangePasswordForm, _React$Component);

		  function DefaultChangePasswordForm() {
		    _classCallCheck(this, DefaultChangePasswordForm);

		    return _possibleConstructorReturn(this, (DefaultChangePasswordForm.__proto__ || Object.getPrototypeOf(DefaultChangePasswordForm)).apply(this, arguments));
		  }

		  _createClass(DefaultChangePasswordForm, [{
		    key: 'render',
		    value: function render() {
		      return _react2.default.createElement(
		        ChangePasswordForm,
		        this.props,
		        _react2.default.createElement(
		          'div',
		          { className: 'sp-change-password-form' },
		          _react2.default.createElement(
		            'div',
		            { className: 'row' },
		            _react2.default.createElement(
		              'div',
		              { className: 'col-sm-offset-4 col-xs-12 col-sm-4', 'data-spIf': 'form.sent' },
		              _react2.default.createElement(
		                'p',
		                { className: 'alert alert-success' },
		                'Your new password has been set. Please ',
		                _react2.default.createElement(_LoginLink2.default, null),
		                '.'
		              )
		            ),
		            _react2.default.createElement(
		              'div',
		              { className: 'col-xs-12', 'data-spIf': '!form.sent' },
		              _react2.default.createElement(
		                'div',
		                { className: 'form-horizontal' },
		                _react2.default.createElement(
		                  'div',
		                  { className: 'form-group' },
		                  _react2.default.createElement(
		                    'label',
		                    { htmlFor: 'spPassword', className: 'col-xs-12 col-sm-4 control-label' },
		                    'New Password'
		                  ),
		                  _react2.default.createElement(
		                    'div',
		                    { className: 'col-xs-12 col-sm-4' },
		                    _react2.default.createElement('input', { id: 'spPassword', type: 'password', name: 'password', className: 'form-control', placeholder: 'New Password', required: true })
		                  )
		                ),
		                _react2.default.createElement(
		                  'div',
		                  { className: 'form-group' },
		                  _react2.default.createElement(
		                    'label',
		                    { htmlFor: 'spConfirmPassword', className: 'col-xs-12 col-sm-4 control-label' },
		                    'Confirm New Password'
		                  ),
		                  _react2.default.createElement(
		                    'div',
		                    { className: 'col-xs-12 col-sm-4' },
		                    _react2.default.createElement('input', { id: 'spConfirmPassword', type: 'password', name: 'confirmPassword', className: 'form-control', placeholder: 'Confirm New Password', required: true })
		                  )
		                ),
		                _react2.default.createElement(
		                  'div',
		                  { className: 'form-group' },
		                  _react2.default.createElement(
		                    'div',
		                    { className: 'col-sm-offset-4 col-sm-4' },
		                    _react2.default.createElement(
		                      'p',
		                      { className: 'alert alert-danger', 'data-spIf': 'form.error' },
		                      _react2.default.createElement('span', { 'data-spBind': 'form.errorMessage' })
		                    ),
		                    _react2.default.createElement(
		                      'button',
		                      { type: 'submit', className: 'btn btn-primary' },
		                      _react2.default.createElement(
		                        'span',
		                        { 'data-spIf': 'form.processing' },
		                        'Setting New Password...'
		                      ),
		                      _react2.default.createElement(
		                        'span',
		                        { 'data-spIf': '!form.processing' },
		                        'Set New Password'
		                      )
		                    )
		                  )
		                )
		              )
		            )
		          )
		        )
		      );
		    }
		  }]);

		  return DefaultChangePasswordForm;
		}(_react2.default.Component);

		var ChangePasswordForm = function (_React$Component2) {
		  _inherits(ChangePasswordForm, _React$Component2);

		  function ChangePasswordForm() {
		    var _ref;

		    _classCallCheck(this, ChangePasswordForm);

		    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    var _this2 = _possibleConstructorReturn(this, (_ref = ChangePasswordForm.__proto__ || Object.getPrototypeOf(ChangePasswordForm)).call.apply(_ref, [this].concat(args)));

		    _this2.state = {
		      spToken: null,
		      fields: {
		        password: ''
		      },
		      errorMessage: null,
		      isFormSent: false,
		      isFormProcessing: false
		    };


		    if (!_this2.props || !('spToken' in _this2.props)) {
		      throw new Error('[Stormpath SDK/Error] ChangePasswordForm: Property \'spToken\' is required.');
		    }

		    _this2.state.spToken = _this2.props.spToken;
		    return _this2;
		  }

		  _createClass(ChangePasswordForm, [{
		    key: 'onFormSubmit',
		    value: function onFormSubmit(e) {
		      var _this3 = this;

		      e.preventDefault();
		      e.persist();

		      var next = function next(err, data) {
		        if (err) {
		          return _this3.setState({
		            isFormProcessing: false,
		            errorMessage: err.message
		          });
		        }

		        // If the user didn't specify any data,
		        // then simply default to what we have in state.
		        data = data || _this3.state.fields;

		        if ('confirmPassword' in data && data.password !== data.confirmPassword) {
		          return _this3.setState({
		            isFormProcessing: false,
		            errorMessage: 'Passwords does not match.'
		          });
		        }

		        _UserActions2.default.changePassword(data, function (err) {
		          if (err) {
		            if (err.status === 404) {
		              err.message = 'The reset password token is not valid. Please try resetting your password again.';
		            }

		            return _this3.setState({
		              isFormProcessing: false,
		              errorMessage: err.message
		            });
		          }

		          _this3.setState({
		            isFormProcessing: false,
		            isFormSent: true
		          });
		        });
		      };

		      this.setState({
		        errorMessage: null,
		        isFormSent: false,
		        isFormProcessing: true
		      });

		      var data = this.state.fields;

		      if (this.state.spToken) {
		        data.sptoken = this.props.spToken;
		      }

		      if (this.props.onSubmit) {
		        e.data = data;
		        this.props.onSubmit(e, next);
		      } else {
		        next(null, data);
		      }
		    }
		  }, {
		    key: '_mapFormFieldHandler',
		    value: function _mapFormFieldHandler(element, tryMapField) {
		      var tryMapFormField = function tryMapFormField(name) {
		        switch (name) {
		          case 'password':
		            tryMapField('password');
		            break;
		          case 'confirmPassword':
		            tryMapField('confirmPassword');
		            break;
		        }
		      };

		      if (typeof element.type === 'function' && _utils2.default.containsWord(element.type.name, ['input', 'field', 'text'])) {
		        if (element.props && element.props.name) {
		          tryMapFormField(element.props.name);
		        }
		      } else if (element.type === 'input' || element.type === 'textarea') {
		        if (element.props.type !== 'submit') {
		          tryMapFormField(element.props.name);
		        }
		      }
		    }
		  }, {
		    key: '_spIfHandler',
		    value: function _spIfHandler(action, element) {
		      var test = null;

		      switch (action) {
		        case 'form.sent':
		          test = this.state.isFormSent;
		          break;
		        case 'form.processing':
		          test = this.state.isFormProcessing;
		          break;
		        case 'form.error':
		          test = this.state.errorMessage !== null;
		          break;
		      }

		      return test;
		    }
		  }, {
		    key: '_spBindHandler',
		    value: function _spBindHandler(bind, element) {
		      var result = false;

		      switch (bind) {
		        case 'form.errorMessage':
		          var className = element.props ? element.props.className : undefined;
		          result = _react2.default.createElement(
		            'span',
		            { className: className },
		            this.state.errorMessage
		          );
		          break;
		      }

		      return result;
		    }
		  }, {
		    key: 'render',
		    value: function render() {
		      if (this.props.children) {
		        var selectedProps = _utils2.default.excludeProps(['onSubmit', 'children', 'spToken'], this.props);

		        return _react2.default.createElement(
		          'form',
		          _extends({ onSubmit: this.onFormSubmit.bind(this) }, selectedProps),
		          _utils2.default.makeForm(this, this._mapFormFieldHandler.bind(this), this._spIfHandler.bind(this), this._spBindHandler.bind(this))
		        );
		      } else {
		        return _react2.default.createElement(DefaultChangePasswordForm, this.props);
		      }
		    }
		  }]);

		  return ChangePasswordForm;
		}(_react2.default.Component);

		exports.default = ChangePasswordForm;

	/***/ },
	/* 104 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _utils = __webpack_require__(5);

		var _utils2 = _interopRequireDefault(_utils);

		var _LoginLink = __webpack_require__(94);

		var _LoginLink2 = _interopRequireDefault(_LoginLink);

		var _UserActions = __webpack_require__(21);

		var _UserActions2 = _interopRequireDefault(_UserActions);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var VerifyEmailView = function (_React$Component) {
		  _inherits(VerifyEmailView, _React$Component);

		  function VerifyEmailView() {
		    var _ref;

		    var _temp, _this, _ret;

		    _classCallCheck(this, VerifyEmailView);

		    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = VerifyEmailView.__proto__ || Object.getPrototypeOf(VerifyEmailView)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
		      status: 'VERIFYING'
		    }, _temp), _possibleConstructorReturn(_this, _ret);
		  }

		  _createClass(VerifyEmailView, [{
		    key: 'componentDidMount',
		    value: function componentDidMount() {
		      var _this2 = this;

		      var spToken = this.props.spToken;

		      _UserActions2.default.verifyEmail(spToken, function (err) {
		        if (err) {
		          _this2.setState({
		            status: 'ERROR'
		          });
		        } else {
		          _this2.setState({
		            status: 'VERIFIED'
		          });
		        }
		      });
		    }
		  }, {
		    key: 'render',
		    value: function render() {
		      var selectedProps = _utils2.default.excludeProps(['className', 'spToken'], this.props);

		      return _react2.default.createElement(
		        'div',
		        _extends({ className: "row " + this.props.className }, selectedProps),
		        _react2.default.createElement(
		          'div',
		          { className: 'col-sm-offset-4 col-xs-12 col-sm-4' },
		          {
		            VERIFYING: _react2.default.createElement(
		              'p',
		              { className: 'alert alert-warning' },
		              'We are verifying your account.'
		            ),
		            VERIFIED: _react2.default.createElement(
		              'p',
		              { className: 'alert alert-success' },
		              'Your account has has been verified! ',
		              _react2.default.createElement(
		                _LoginLink2.default,
		                null,
		                'Login Now.'
		              )
		            ),
		            ERROR: _react2.default.createElement(
		              'div',
		              { className: 'alert alert-danger' },
		              'This email verification link is not valid.'
		            )
		          }[this.state.status]
		        )
		      );
		    }
		  }]);

		  return VerifyEmailView;
		}(_react2.default.Component);

		exports.default = VerifyEmailView;

	/***/ },
	/* 105 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _utils = __webpack_require__(5);

		var _utils2 = _interopRequireDefault(_utils);

		var _UserComponent2 = __webpack_require__(106);

		var _UserComponent3 = _interopRequireDefault(_UserComponent2);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var UserField = function (_UserComponent) {
		  _inherits(UserField, _UserComponent);

		  function UserField() {
		    _classCallCheck(this, UserField);

		    var _this = _possibleConstructorReturn(this, (UserField.__proto__ || Object.getPrototypeOf(UserField)).apply(this, arguments));

		    _utils2.default.logWarning('The UserField component has been deprecated. Please use the user context instead. See: https://github.com/stormpath/stormpath-sdk-react/blob/master/docs/api.md#contexts');
		    return _this;
		  }

		  _createClass(UserField, [{
		    key: '_resolveFieldValue',
		    value: function _resolveFieldValue(name) {
		      var value = this.state.user;
		      var keys = name.split('.');

		      while (keys.length) {
		        var key = keys.shift();

		        if (!(key in value)) {
		          throw new Error('Field does not exist');
		        }

		        value = value[key];
		      }

		      return value;
		    }
		  }, {
		    key: 'render',
		    value: function render() {
		      var fieldName = this.props.fieldName;
		      var fieldValue = null;

		      try {
		        fieldValue = this._resolveFieldValue(fieldName);
		      } catch (e) {
		        if ('default' in this.props) {
		          fieldValue = this.props['default'];
		        }
		      }

		      return _react2.default.createElement(
		        'span',
		        { className: this.props.className },
		        fieldValue
		      );
		    }
		  }]);

		  return UserField;
		}(_UserComponent3.default);

		exports.default = UserField;

	/***/ },
	/* 106 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = undefined;

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		var _react = __webpack_require__(12);

		var _react2 = _interopRequireDefault(_react);

		var _utils = __webpack_require__(5);

		var _utils2 = _interopRequireDefault(_utils);

		var _context = __webpack_require__(22);

		var _context2 = _interopRequireDefault(_context);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

		var UserComponent = function (_React$Component) {
		  _inherits(UserComponent, _React$Component);

		  function UserComponent() {
		    _classCallCheck(this, UserComponent);

		    var _this = _possibleConstructorReturn(this, (UserComponent.__proto__ || Object.getPrototypeOf(UserComponent)).apply(this, arguments));

		    _this.onChangeListener = null;
		    _this.state = {
		      user: {}
		    };

		    _utils2.default.logWarning('The UserComponent class has been deprecated. Please use the user context instead. See: https://github.com/stormpath/stormpath-sdk-react/blob/master/docs/api.md#contexts');
		    return _this;
		  }

		  _createClass(UserComponent, [{
		    key: 'onChange',
		    value: function onChange() {
		      var _this2 = this;

		      _context2.default.userStore.resolveSession(function (err, user) {
		        if (_this2.onChangeListener !== null) {
		          _this2.setState({ user: user });
		        }
		      });
		    }
		  }, {
		    key: 'componentDidMount',
		    value: function componentDidMount() {
		      this.onChangeListener = this.onChange.bind(this);
		      _context2.default.userStore.addChangeListener(this.onChangeListener);
		      this.onChange();
		    }
		  }, {
		    key: 'componentWillUnmount',
		    value: function componentWillUnmount() {
		      _context2.default.userStore.removeChangeListener(this.onChangeListener);
		      this.onChangeListener = null;
		    }
		  }]);

		  return UserComponent;
		}(_react2.default.Component);

		exports.default = UserComponent;

	/***/ }
	/******/ ]);

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(236);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(238)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js?modules!./style.css", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js?modules!./style.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(237)();
	// imports


	// module
	exports.push([module.id, "body {\n  margin: 0;\n  padding: 0;\n  font-family: sans-serif;\n}\n._17jnU7i__bsciRZDSvmqDD {\n  text-align: center;\n}\n.pzARqn5_vT5NgDcM8YdYc {\n  background-color: #222;\n  height: 50px;\n  padding: 20px;\n  color: white;\n}\n@keyframes _3hhXKY5hYd4uMjEt8r1g75 {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n._3z1woNQ8IsXqHH6ZHM3pXc {\n  padding-top: 80px;\n}\n._3Bfoy7izAJd5ucrh8Ahtfd {\n  margin-right: 10px;\n  text-decoration: none;\n\n}\n._33az3qQ4YdZXht0Q10QfMO {\n  text-decoration: none;\n}\n\n.VgW0N2rWXRqfzCTwHBtQJ {background: red}\n", ""]);

	// exports
	exports.locals = {
		"App": "_17jnU7i__bsciRZDSvmqDD",
		"App-header": "pzARqn5_vT5NgDcM8YdYc",
		"video": "_3z1woNQ8IsXqHH6ZHM3pXc",
		"singIn": "_3Bfoy7izAJd5ucrh8Ahtfd",
		"signUp": "_33az3qQ4YdZXht0Q10QfMO",
		"test": "VgW0N2rWXRqfzCTwHBtQJ",
		"App-logo-spin": "_3hhXKY5hYd4uMjEt8r1g75"
	};

/***/ },
/* 237 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactRouter = __webpack_require__(179);

	var _reactDocumentTitle = __webpack_require__(240);

	var _reactDocumentTitle2 = _interopRequireDefault(_reactDocumentTitle);

	var _reactStormpath = __webpack_require__(234);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var LoginPage = function (_React$Component) {
		_inherits(LoginPage, _React$Component);

		function LoginPage() {
			_classCallCheck(this, LoginPage);

			return _possibleConstructorReturn(this, (LoginPage.__proto__ || Object.getPrototypeOf(LoginPage)).apply(this, arguments));
		}

		_createClass(LoginPage, [{
			key: 'render',
			value: function render() {
				return _react2.default.createElement(
					_reactDocumentTitle2.default,
					{ title: 'Login' },
					_react2.default.createElement(
						'div',
						{ className: 'container' },
						_react2.default.createElement(
							'div',
							{ className: 'well clearfix box' },
							_react2.default.createElement(
								'h1',
								null,
								'Sign in'
							),
							_react2.default.createElement(
								'div',
								{ className: 'vertical-center' },
								_react2.default.createElement(_reactStormpath.LoginForm, null)
							)
						),
						_react2.default.createElement(
							'ul',
							null,
							_react2.default.createElement(
								'li',
								null,
								_react2.default.createElement(
									_reactRouter.Link,
									{ to: '/register' },
									'Sign-up'
								)
							),
							_react2.default.createElement(
								'li',
								null,
								_react2.default.createElement(
									_reactRouter.Link,
									{ to: '/landing' },
									'Return to landing page'
								)
							)
						)
					)
				);
			}
		}]);

		return LoginPage;
	}(_react2.default.Component);

	exports.default = LoginPage;

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1),
	    withSideEffect = __webpack_require__(241);

	function reducePropsToState(propsList) {
	  var innermostProps = propsList[propsList.length - 1];
	  if (innermostProps) {
	    return innermostProps.title;
	  }
	}

	function handleStateChangeOnClient(title) {
	  var nextTitle = title || '';
	  if (nextTitle !== document.title) {
	    document.title = nextTitle;
	  }
	}

	var DocumentTitle = React.createClass({
	  displayName: 'DocumentTitle',

	  propTypes: {
	    title: React.PropTypes.string.isRequired
	  },

	  render: function render() {
	    if (this.props.children) {
	      return React.Children.only(this.props.children);
	    } else {
	      return null;
	    }
	  }
	});

	module.exports = withSideEffect(
	  reducePropsToState,
	  handleStateChangeOnClient
	)(DocumentTitle);


/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _fbjsLibExecutionEnvironment = __webpack_require__(242);

	var _fbjsLibExecutionEnvironment2 = _interopRequireDefault(_fbjsLibExecutionEnvironment);

	var _fbjsLibShallowEqual = __webpack_require__(243);

	var _fbjsLibShallowEqual2 = _interopRequireDefault(_fbjsLibShallowEqual);

	module.exports = function withSideEffect(reducePropsToState, handleStateChangeOnClient, mapStateOnServer) {
	  if (typeof reducePropsToState !== 'function') {
	    throw new Error('Expected reducePropsToState to be a function.');
	  }
	  if (typeof handleStateChangeOnClient !== 'function') {
	    throw new Error('Expected handleStateChangeOnClient to be a function.');
	  }
	  if (typeof mapStateOnServer !== 'undefined' && typeof mapStateOnServer !== 'function') {
	    throw new Error('Expected mapStateOnServer to either be undefined or a function.');
	  }

	  function getDisplayName(WrappedComponent) {
	    return WrappedComponent.displayName || WrappedComponent.name || 'Component';
	  }

	  return function wrap(WrappedComponent) {
	    if (typeof WrappedComponent !== 'function') {
	      throw new Error('Expected WrappedComponent to be a React component.');
	    }

	    var mountedInstances = [];
	    var state = undefined;

	    function emitChange() {
	      state = reducePropsToState(mountedInstances.map(function (instance) {
	        return instance.props;
	      }));

	      if (SideEffect.canUseDOM) {
	        handleStateChangeOnClient(state);
	      } else if (mapStateOnServer) {
	        state = mapStateOnServer(state);
	      }
	    }

	    var SideEffect = (function (_Component) {
	      _inherits(SideEffect, _Component);

	      function SideEffect() {
	        _classCallCheck(this, SideEffect);

	        _Component.apply(this, arguments);
	      }

	      SideEffect.peek = function peek() {
	        return state;
	      };

	      SideEffect.rewind = function rewind() {
	        if (SideEffect.canUseDOM) {
	          throw new Error('You may ony call rewind() on the server. Call peek() to read the current state.');
	        }

	        var recordedState = state;
	        state = undefined;
	        mountedInstances = [];
	        return recordedState;
	      };

	      SideEffect.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	        return !_fbjsLibShallowEqual2['default'](nextProps, this.props);
	      };

	      SideEffect.prototype.componentWillMount = function componentWillMount() {
	        mountedInstances.push(this);
	        emitChange();
	      };

	      SideEffect.prototype.componentDidUpdate = function componentDidUpdate() {
	        emitChange();
	      };

	      SideEffect.prototype.componentWillUnmount = function componentWillUnmount() {
	        var index = mountedInstances.indexOf(this);
	        mountedInstances.splice(index, 1);
	        emitChange();
	      };

	      SideEffect.prototype.render = function render() {
	        return _react2['default'].createElement(WrappedComponent, this.props);
	      };

	      _createClass(SideEffect, null, [{
	        key: 'displayName',

	        // Try to use displayName of wrapped component
	        value: 'SideEffect(' + getDisplayName(WrappedComponent) + ')',

	        // Expose canUseDOM so tests can monkeypatch it
	        enumerable: true
	      }, {
	        key: 'canUseDOM',
	        value: _fbjsLibExecutionEnvironment2['default'].canUseDOM,
	        enumerable: true
	      }]);

	      return SideEffect;
	    })(_react.Component);

	    return SideEffect;
	  };
	};

/***/ },
/* 242 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 243 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 * @typechecks
	 * 
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var bHasOwnProperty = hasOwnProperty.bind(objB);
	  for (var i = 0; i < keysA.length; i++) {
	    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDocumentTitle = __webpack_require__(240);

	var _reactDocumentTitle2 = _interopRequireDefault(_reactDocumentTitle);

	var _reactStormpath = __webpack_require__(234);

	var _reactRouter = __webpack_require__(179);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var RegistrationPage = function (_React$Component) {
		_inherits(RegistrationPage, _React$Component);

		function RegistrationPage() {
			_classCallCheck(this, RegistrationPage);

			return _possibleConstructorReturn(this, (RegistrationPage.__proto__ || Object.getPrototypeOf(RegistrationPage)).apply(this, arguments));
		}

		_createClass(RegistrationPage, [{
			key: 'render',
			value: function render() {
				return _react2.default.createElement(
					_reactDocumentTitle2.default,
					{ title: 'Registration' },
					_react2.default.createElement(
						'div',
						{ className: 'container' },
						_react2.default.createElement(
							'div',
							{ className: 'well clearfix' },
							_react2.default.createElement(
								'h1',
								null,
								'Sign up'
							),
							_react2.default.createElement(_reactStormpath.RegistrationForm, null)
						),
						_react2.default.createElement(
							'ul',
							null,
							_react2.default.createElement(
								'li',
								null,
								_react2.default.createElement(
									_reactRouter.Link,
									{ to: '/login' },
									'Sign-in'
								)
							),
							_react2.default.createElement(
								'li',
								null,
								_react2.default.createElement(
									_reactRouter.Link,
									{ to: '/forgot' },
									'Forgot Password'
								)
							),
							_react2.default.createElement(
								'li',
								null,
								_react2.default.createElement(
									_reactRouter.Link,
									{ to: '/landing' },
									'Return to landing page'
								)
							)
						)
					)
				);
			}
		}]);

		return RegistrationPage;
	}(_react2.default.Component);

	exports.default = RegistrationPage;

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactRouter = __webpack_require__(179);

	var _reactStormpath = __webpack_require__(234);

	var _reactDocumentTitle = __webpack_require__(240);

	var _reactDocumentTitle2 = _interopRequireDefault(_reactDocumentTitle);

	var _Header = __webpack_require__(246);

	var _Header2 = _interopRequireDefault(_Header);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var is = function (_React$Component) {
		_inherits(is, _React$Component);

		function is() {
			_classCallCheck(this, is);

			return _possibleConstructorReturn(this, (is.__proto__ || Object.getPrototypeOf(is)).apply(this, arguments));
		}

		_createClass(is, [{
			key: 'render',
			value: function render() {
				return _react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(_Header2.default, null),
					this.props.children
				);
			}
		}]);

		return is;
	}(_react2.default.Component);

	exports.default = is;

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactRouter = __webpack_require__(179);

	var _reactStormpath = __webpack_require__(234);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Header = function (_React$Component) {
		_inherits(Header, _React$Component);

		function Header() {
			_classCallCheck(this, Header);

			return _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));
		}

		_createClass(Header, [{
			key: 'render',
			value: function render() {
				return _react2.default.createElement(
					_reactStormpath.Authenticated,
					null,
					_react2.default.createElement(
						'nav',
						{ className: 'navbar navbar-default navbar-static-top' },
						_react2.default.createElement(
							'div',
							{ className: 'container-fluid' },
							_react2.default.createElement(
								'div',
								{ className: 'navbar-header' },
								_react2.default.createElement(
									'button',
									{ type: 'button', className: 'navbar-toggle collapsed', 'data-toggle': 'collapse', 'data-target': '#bs-example-navbar-collapse-1', 'aria-expanded': 'false' },
									_react2.default.createElement(
										'span',
										{ className: 'sr-only' },
										'Toggle navigation'
									),
									_react2.default.createElement('span', { className: 'icon-bar' }),
									_react2.default.createElement('span', { className: 'icon-bar' }),
									_react2.default.createElement('span', { className: 'icon-bar' })
								),
								_react2.default.createElement(
									_reactRouter.Link,
									{ className: 'navbar-brand', to: '/home' },
									'Voicercize'
								)
							),
							_react2.default.createElement(
								'ul',
								{ className: 'nav navbar-nav' },
								_react2.default.createElement(
									'li',
									null,
									_react2.default.createElement(
										_reactRouter.Link,
										{ to: '/exercises' },
										'Exercises'
									)
								),
								_react2.default.createElement(
									'li',
									null,
									_react2.default.createElement(
										_reactRouter.Link,
										{ to: '/profile' },
										'Profile'
									)
								)
							),
							_react2.default.createElement(
								'ul',
								{ className: 'nav navbar-nav navbar-right' },
								_react2.default.createElement(
									'li',
									null,
									_react2.default.createElement(_reactStormpath.LogoutLink, null)
								)
							)
						)
					)
				);
			}
		}]);

		return Header;
	}(_react2.default.Component);

	exports.default = Header;

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Header = __webpack_require__(246);

	var _Header2 = _interopRequireDefault(_Header);

	var _reactRouter = __webpack_require__(179);

	var _reactStormpath = __webpack_require__(234);

	var _reactDocumentTitle = __webpack_require__(240);

	var _reactDocumentTitle2 = _interopRequireDefault(_reactDocumentTitle);

	var _amcharts = __webpack_require__(248);

	var _amcharts2 = _interopRequireDefault(_amcharts);

	var _axios = __webpack_require__(249);

	var _axios2 = _interopRequireDefault(_axios);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	// import AmCharts from 'amcharts'


	var is = function (_React$Component) {
		_inherits(is, _React$Component);

		function is() {
			_classCallCheck(this, is);

			return _possibleConstructorReturn(this, (is.__proto__ || Object.getPrototypeOf(is)).apply(this, arguments));
		}

		_createClass(is, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				_axios2.default.get("/secret").then(function (response) {
					console.log(response);
				});
			}
		}, {
			key: 'render',
			value: function render() {
				return _react2.default.createElement(
					_reactDocumentTitle2.default,
					{ title: 'My React App' },
					_react2.default.createElement(
						'div',
						null,
						_react2.default.createElement('div', { id: 'chartDiv', style: { width: '100%', height: '300px' } }),
						_react2.default.createElement(
							'div',
							{ className: 'col-md-6' },
							_react2.default.createElement(
								'h1',
								null,
								'Forums'
							),
							_react2.default.createElement('div', { id: 'forums' })
						),
						_react2.default.createElement(
							'div',
							{ className: 'col-md-6' },
							_react2.default.createElement(
								'h1',
								null,
								'Updates'
							),
							_react2.default.createElement('div', { id: 'updates' })
						)
					)
				);
			}
		}]);

		return is;
	}(_react2.default.Component);

	exports.default = is;

/***/ },
/* 248 */
/***/ function(module, exports) {

	(function(){var d;window.AmCharts?d=window.AmCharts:(d={},window.AmCharts=d,d.themes={},d.maps={},d.inheriting={},d.charts=[],d.onReadyArray=[],d.useUTC=!1,d.updateRate=60,d.uid=0,d.lang={},d.translations={},d.mapTranslations={},d.windows={},d.initHandlers=[],d.amString="am",d.pmString="pm");d.Class=function(a){var b=function(){arguments[0]!==d.inheriting&&(this.events={},this.construct.apply(this,arguments))};a.inherits?(b.prototype=new a.inherits(d.inheriting),b.base=a.inherits.prototype,delete a.inherits):
	(b.prototype.createEvents=function(){for(var a=0;a<arguments.length;a++)this.events[arguments[a]]=[]},b.prototype.listenTo=function(a,b,c){this.removeListener(a,b,c);a.events[b].push({handler:c,scope:this})},b.prototype.addListener=function(a,b,c){this.removeListener(this,a,b);a&&this.events[a]&&this.events[a].push({handler:b,scope:c})},b.prototype.removeListener=function(a,b,c){if(a&&a.events&&(a=a.events[b]))for(b=a.length-1;0<=b;b--)a[b].handler===c&&a.splice(b,1)},b.prototype.fire=function(a){for(var b=
	this.events[a.type],c=0;c<b.length;c++){var d=b[c];d.handler.call(d.scope,a)}});for(var c in a)b.prototype[c]=a[c];return b};d.addChart=function(a){window.requestAnimationFrame?d.animationRequested||(d.animationRequested=!0,window.requestAnimationFrame(d.update)):d.updateInt||(d.updateInt=setInterval(function(){d.update()},Math.round(1E3/d.updateRate)));d.charts.push(a)};d.removeChart=function(a){for(var b=d.charts,c=b.length-1;0<=c;c--)b[c]==a&&b.splice(c,1);0===b.length&&(d.requestAnimation&&(window.cancelAnimationFrame(d.requestAnimation),
	d.animationRequested=!1),d.updateInt&&(clearInterval(d.updateInt),d.updateInt=NaN))};d.isModern=!0;d.getIEVersion=function(){var a=0,b,c;"Microsoft Internet Explorer"==navigator.appName&&(b=navigator.userAgent,c=/MSIE ([0-9]{1,}[.0-9]{0,})/,null!==c.exec(b)&&(a=parseFloat(RegExp.$1)));return a};d.applyLang=function(a,b){var c=d.translations;b.dayNames=d.extend({},d.dayNames);b.shortDayNames=d.extend({},d.shortDayNames);b.monthNames=d.extend({},d.monthNames);b.shortMonthNames=d.extend({},d.shortMonthNames);
	b.amString="am";b.pmString="pm";c&&(c=c[a])&&(d.lang=c,b.langObj=c,c.monthNames&&(b.dayNames=d.extend({},c.dayNames),b.shortDayNames=d.extend({},c.shortDayNames),b.monthNames=d.extend({},c.monthNames),b.shortMonthNames=d.extend({},c.shortMonthNames)),c.am&&(b.amString=c.am),c.pm&&(b.pmString=c.pm));d.amString=b.amString;d.pmString=b.pmString};d.IEversion=d.getIEVersion();9>d.IEversion&&0<d.IEversion&&(d.isModern=!1,d.isIE=!0);d.dx=0;d.dy=0;if(document.addEventListener||window.opera)d.isNN=!0,d.isIE=
	!1,d.dx=.5,d.dy=.5;document.attachEvent&&(d.isNN=!1,d.isIE=!0,d.isModern||(d.dx=0,d.dy=0));window.chrome&&(d.chrome=!0);d.handleMouseUp=function(a){for(var b=d.charts,c=0;c<b.length;c++){var e=b[c];e&&e.handleReleaseOutside&&e.handleReleaseOutside(a)}};d.handleMouseMove=function(a){for(var b=d.charts,c=0;c<b.length;c++){var e=b[c];e&&e.handleMouseMove&&e.handleMouseMove(a)}};d.handleWheel=function(a){for(var b=d.charts,c=0;c<b.length;c++){var e=b[c];if(e&&e.mouseIsOver){(e.mouseWheelScrollEnabled||
	e.mouseWheelZoomEnabled)&&e.handleWheel&&e.handleWheel(a);break}}};d.resetMouseOver=function(){for(var a=d.charts,b=0;b<a.length;b++){var c=a[b];c&&(c.mouseIsOver=!1)}};d.ready=function(a){d.onReadyArray.push(a)};d.handleLoad=function(){d.isReady=!0;for(var a=d.onReadyArray,b=0;b<a.length;b++){var c=a[b];isNaN(d.processDelay)?c():setTimeout(c,d.processDelay*b)}};d.addInitHandler=function(a,b){d.initHandlers.push({method:a,types:b})};d.callInitHandler=function(a){var b=d.initHandlers;if(d.initHandlers)for(var c=
	0;c<b.length;c++){var e=b[c];e.types?d.isInArray(e.types,a.type)&&e.method(a):e.method(a)}};d.getUniqueId=function(){d.uid++;return"AmChartsEl-"+d.uid};d.isNN&&(document.addEventListener("mousemove",d.handleMouseMove),document.addEventListener("mouseup",d.handleMouseUp,!0),window.addEventListener("load",d.handleLoad,!0),window.addEventListener("DOMMouseScroll",d.handleWheel,!0),document.addEventListener("mousewheel",d.handleWheel,!0));d.isIE&&(document.attachEvent("onmousemove",d.handleMouseMove),
	document.attachEvent("onmouseup",d.handleMouseUp),window.attachEvent("onload",d.handleLoad),document.attachEvent("onmousewheel",d.handleWheel));d.clear=function(){var a=d.charts;if(a)for(var b=a.length-1;0<=b;b--)a[b].clear();d.updateInt&&clearInterval(d.updateInt);d.requestAnimation&&window.cancelAnimationFrame(d.requestAnimation);d.charts=[];d.isNN&&(document.removeEventListener("mousemove",d.handleMouseMove,!0),document.removeEventListener("mouseup",d.handleMouseUp,!0),window.removeEventListener("load",
	d.handleLoad,!0),window.removeEventListener("DOMMouseScroll",d.handleWheel,!0),document.removeEventListener("mousewheel",d.handleWheel,!0));d.isIE&&(document.detachEvent("onmousemove",d.handleMouseMove),document.detachEvent("onmouseup",d.handleMouseUp),window.detachEvent("onload",d.handleLoad))};d.makeChart=function(a,b,c){var e=b.type,g=b.theme;d.isString(g)&&(g=d.themes[g],b.theme=g);var f;switch(e){case "serial":f=new d.AmSerialChart(g);break;case "xy":f=new d.AmXYChart(g);break;case "pie":f=new d.AmPieChart(g);
	break;case "radar":f=new d.AmRadarChart(g);break;case "gauge":f=new d.AmAngularGauge(g);break;case "funnel":f=new d.AmFunnelChart(g);break;case "map":f=new d.AmMap(g);break;case "stock":f=new d.AmStockChart(g);break;case "gantt":f=new d.AmGanttChart(g)}d.extend(f,b);d.isReady?isNaN(c)?f.write(a):setTimeout(function(){d.realWrite(f,a)},c):d.ready(function(){isNaN(c)?f.write(a):setTimeout(function(){d.realWrite(f,a)},c)});return f};d.realWrite=function(a,b){a.write(b)};d.updateCount=0;d.validateAt=
	Math.round(d.updateRate/10);d.update=function(){var a=d.charts;d.updateCount++;var b=!1;d.updateCount==d.validateAt&&(b=!0,d.updateCount=0);if(a)for(var c=a.length-1;0<=c;c--)a[c].update&&a[c].update(),b&&(a[c].autoResize?a[c].validateSize&&a[c].validateSize():a[c].premeasure&&a[c].premeasure());window.requestAnimationFrame&&(d.requestAnimation=window.requestAnimationFrame(d.update))};d.bezierX=3;d.bezierY=6;"complete"==document.readyState&&d.handleLoad()})();(function(){var d=window.AmCharts;d.toBoolean=function(a,b){if(void 0===a)return b;switch(String(a).toLowerCase()){case "true":case "yes":case "1":return!0;case "false":case "no":case "0":case null:return!1;default:return!!a}};d.removeFromArray=function(a,b){var c;if(void 0!==b&&void 0!==a)for(c=a.length-1;0<=c;c--)a[c]==b&&a.splice(c,1)};d.getPath=function(){var a=document.getElementsByTagName("script");if(a)for(var b=0;b<a.length;b++){var c=a[b].src;if(-1!==c.search(/\/(amcharts|ammap)\.js/))return c.replace(/\/(amcharts|ammap)\.js.*/,
	"/")}};d.normalizeUrl=function(a){return""!==a&&-1===a.search(/\/$/)?a+"/":a};d.isAbsolute=function(a){return 0===a.search(/^http[s]?:|^\//)};d.isInArray=function(a,b){for(var c=0;c<a.length;c++)if(a[c]==b)return!0;return!1};d.getDecimals=function(a){var b=0;isNaN(a)||(a=String(a),-1!=a.indexOf("e-")?b=Number(a.split("-")[1]):-1!=a.indexOf(".")&&(b=a.split(".")[1].length));return b};d.wordwrap=function(a,b,c,e){var g,f,h,k;a+="";if(1>b)return a;g=-1;for(a=(k=a.split(/\r\n|\n|\r/)).length;++g<a;k[g]+=
	h){h=k[g];for(k[g]="";h.length>b;k[g]+=d.trim(h.slice(0,f))+((h=h.slice(f)).length?c:""))f=2==e||(f=h.slice(0,b+1).match(/\S*(\s)?$/))[1]?b:f.input.length-f[0].length||1==e&&b||f.input.length+(f=h.slice(b).match(/^\S*/))[0].length;h=d.trim(h)}return k.join(c)};d.trim=function(a){return a.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")};d.wrappedText=function(a,b,c,e,g,f,h,k){var l=d.text(a,b,c,e,g,f,h);if(l){var m=l.getBBox();if(m.width>k){var n="\n";d.isModern||(n="<br>");k=Math.floor(k/(m.width/
	b.length));2<k&&(k-=2);b=d.wordwrap(b,k,n,!0);l.remove();l=d.text(a,b,c,e,g,f,h)}}return l};d.getStyle=function(a,b){var c="";if(document.defaultView&&document.defaultView.getComputedStyle)try{c=document.defaultView.getComputedStyle(a,"").getPropertyValue(b)}catch(e){}else a.currentStyle&&(b=b.replace(/\-(\w)/g,function(a,b){return b.toUpperCase()}),c=a.currentStyle[b]);return c};d.removePx=function(a){if(void 0!==a)return Number(a.substring(0,a.length-2))};d.getURL=function(a,b){if(a)if("_self"!=
	b&&b)if("_top"==b&&window.top)window.top.location.href=a;else if("_parent"==b&&window.parent)window.parent.location.href=a;else if("_blank"==b)window.open(a);else{var c=document.getElementsByName(b)[0];c?c.src=a:(c=d.windows[b])?c.opener&&!c.opener.closed?c.location.href=a:d.windows[b]=window.open(a):d.windows[b]=window.open(a)}else window.location.href=a};d.ifArray=function(a){return a&&"object"==typeof a&&0<a.length?!0:!1};d.callMethod=function(a,b){var c;for(c=0;c<b.length;c++){var e=b[c];if(e){if(e[a])e[a]();
	var d=e.length;if(0<d){var f;for(f=0;f<d;f++){var h=e[f];if(h&&h[a])h[a]()}}}}};d.toNumber=function(a){return"number"==typeof a?a:Number(String(a).replace(/[^0-9\-.]+/g,""))};d.toColor=function(a){if(""!==a&&void 0!==a)if(-1!=a.indexOf(",")){a=a.split(",");var b;for(b=0;b<a.length;b++){var c=a[b].substring(a[b].length-6,a[b].length);a[b]="#"+c}}else a=a.substring(a.length-6,a.length),a="#"+a;return a};d.toCoordinate=function(a,b,c){var e;void 0!==a&&(a=String(a),c&&c<b&&(b=c),e=Number(a),-1!=a.indexOf("!")&&
	(e=b-Number(a.substr(1))),-1!=a.indexOf("%")&&(e=b*Number(a.substr(0,a.length-1))/100));return e};d.fitToBounds=function(a,b,c){a<b&&(a=b);a>c&&(a=c);return a};d.isDefined=function(a){return void 0===a?!1:!0};d.stripNumbers=function(a){return a.replace(/[0-9]+/g,"")};d.roundTo=function(a,b){if(0>b)return a;var c=Math.pow(10,b);return Math.round(a*c)/c};d.toFixed=function(a,b){var c=String(Math.round(a*Math.pow(10,b)));if(0<b){var e=c.length;if(e<b){var d;for(d=0;d<b-e;d++)c="0"+c}e=c.substring(0,
	c.length-b);""===e&&(e=0);return e+"."+c.substring(c.length-b,c.length)}return String(c)};d.formatDuration=function(a,b,c,e,g,f){var h=d.intervals,k=f.decimalSeparator;if(a>=h[b].contains){var l=a-Math.floor(a/h[b].contains)*h[b].contains;"ss"==b?(l=d.formatNumber(l,f),1==l.split(k)[0].length&&(l="0"+l)):l=d.roundTo(l,f.precision);("mm"==b||"hh"==b)&&10>l&&(l="0"+l);c=l+""+e[b]+""+c;a=Math.floor(a/h[b].contains);b=h[b].nextInterval;return d.formatDuration(a,b,c,e,g,f)}"ss"==b&&(a=d.formatNumber(a,
	f),1==a.split(k)[0].length&&(a="0"+a));("mm"==b||"hh"==b)&&10>a&&(a="0"+a);c=a+""+e[b]+""+c;if(h[g].count>h[b].count)for(a=h[b].count;a<h[g].count;a++)b=h[b].nextInterval,"ss"==b||"mm"==b||"hh"==b?c="00"+e[b]+""+c:"DD"==b&&(c="0"+e[b]+""+c);":"==c.charAt(c.length-1)&&(c=c.substring(0,c.length-1));return c};d.formatNumber=function(a,b,c,e,g){a=d.roundTo(a,b.precision);isNaN(c)&&(c=b.precision);var f=b.decimalSeparator;b=b.thousandsSeparator;var h;h=0>a?"-":"";a=Math.abs(a);var k=String(a),l=!1;-1!=
	k.indexOf("e")&&(l=!0);0<=c&&!l&&(k=d.toFixed(a,c));var m="";if(l)m=k;else{var k=k.split("."),l=String(k[0]),n;for(n=l.length;0<=n;n-=3)m=n!=l.length?0!==n?l.substring(n-3,n)+b+m:l.substring(n-3,n)+m:l.substring(n-3,n);void 0!==k[1]&&(m=m+f+k[1]);void 0!==c&&0<c&&"0"!=m&&(m=d.addZeroes(m,f,c))}m=h+m;""===h&&!0===e&&0!==a&&(m="+"+m);!0===g&&(m+="%");return m};d.addZeroes=function(a,b,c){a=a.split(b);void 0===a[1]&&0<c&&(a[1]="0");return a[1].length<c?(a[1]+="0",d.addZeroes(a[0]+b+a[1],b,c)):void 0!==
	a[1]?a[0]+b+a[1]:a[0]};d.scientificToNormal=function(a){var b;a=String(a).split("e");var c;if("-"==a[1].substr(0,1)){b="0.";for(c=0;c<Math.abs(Number(a[1]))-1;c++)b+="0";b+=a[0].split(".").join("")}else{var e=0;b=a[0].split(".");b[1]&&(e=b[1].length);b=a[0].split(".").join("");for(c=0;c<Math.abs(Number(a[1]))-e;c++)b+="0"}return b};d.toScientific=function(a,b){if(0===a)return"0";var c=Math.floor(Math.log(Math.abs(a))*Math.LOG10E),e=String(e).split(".").join(b);return String(e)+"e"+c};d.randomColor=
	function(){return"#"+("00000"+(16777216*Math.random()<<0).toString(16)).substr(-6)};d.hitTest=function(a,b,c){var e=!1,g=a.x,f=a.x+a.width,h=a.y,k=a.y+a.height,l=d.isInRectangle;e||(e=l(g,h,b));e||(e=l(g,k,b));e||(e=l(f,h,b));e||(e=l(f,k,b));e||!0===c||(e=d.hitTest(b,a,!0));return e};d.isInRectangle=function(a,b,c){return a>=c.x-5&&a<=c.x+c.width+5&&b>=c.y-5&&b<=c.y+c.height+5?!0:!1};d.isPercents=function(a){if(-1!=String(a).indexOf("%"))return!0};d.formatValue=function(a,b,c,e,g,f,h,k){if(b){void 0===
	g&&(g="");var l;for(l=0;l<c.length;l++){var m=c[l],n=b[m];void 0!==n&&(n=f?d.addPrefix(n,k,h,e):d.formatNumber(n,e),a=a.replace(new RegExp("\\[\\["+g+""+m+"\\]\\]","g"),n))}}return a};d.formatDataContextValue=function(a,b){if(a){var c=a.match(/\[\[.*?\]\]/g),e;for(e=0;e<c.length;e++){var d=c[e],d=d.substr(2,d.length-4);void 0!==b[d]&&(a=a.replace(new RegExp("\\[\\["+d+"\\]\\]","g"),b[d]))}}return a};d.massReplace=function(a,b){for(var c in b)if(b.hasOwnProperty(c)){var e=b[c];void 0===e&&(e="");a=
	a.replace(c,e)}return a};d.cleanFromEmpty=function(a){return a.replace(/\[\[[^\]]*\]\]/g,"")};d.addPrefix=function(a,b,c,e,g){var f=d.formatNumber(a,e),h="",k,l,m;if(0===a)return"0";0>a&&(h="-");a=Math.abs(a);if(1<a)for(k=b.length-1;-1<k;k--){if(a>=b[k].number&&(l=a/b[k].number,m=Number(e.precision),1>m&&(m=1),c=d.roundTo(l,m),m=d.formatNumber(c,{precision:-1,decimalSeparator:e.decimalSeparator,thousandsSeparator:e.thousandsSeparator}),!g||l==c)){f=h+""+m+""+b[k].prefix;break}}else for(k=0;k<c.length;k++)if(a<=
	c[k].number){l=a/c[k].number;m=Math.abs(Math.floor(Math.log(l)*Math.LOG10E));l=d.roundTo(l,m);f=h+""+l+""+c[k].prefix;break}return f};d.remove=function(a){a&&a.remove()};d.getEffect=function(a){">"==a&&(a="easeOutSine");"<"==a&&(a="easeInSine");"elastic"==a&&(a="easeOutElastic");return a};d.getObjById=function(a,b){var c,e;for(e=0;e<a.length;e++){var d=a[e];if(d.id==b){c=d;break}}return c};d.applyTheme=function(a,b,c){b||(b=d.theme);try{b=JSON.parse(JSON.stringify(b))}catch(e){}b&&b[c]&&d.extend(a,
	b[c])};d.isString=function(a){return"string"==typeof a?!0:!1};d.extend=function(a,b,c){var e;a||(a={});for(e in b)c?a.hasOwnProperty(e)||(a[e]=b[e]):a[e]=b[e];return a};d.copyProperties=function(a,b){for(var c in a)a.hasOwnProperty(c)&&"events"!=c&&void 0!==a[c]&&"function"!=typeof a[c]&&"cname"!=c&&(b[c]=a[c])};d.processObject=function(a,b,c,e){if(!1===a instanceof b&&(a=e?d.extend(new b(c),a):d.extend(a,new b(c),!0),a.listeners))for(var g in a.listeners)b=a.listeners[g],a.addListener(b.event,b.method);
	return a};d.fixNewLines=function(a){var b=RegExp("\\n","g");a&&(a=a.replace(b,"<br />"));return a};d.fixBrakes=function(a){if(d.isModern){var b=RegExp("<br>","g");a&&(a=a.replace(b,"\n"))}else a=d.fixNewLines(a);return a};d.deleteObject=function(a,b){if(a){if(void 0===b||null===b)b=20;if(0!==b)if("[object Array]"===Object.prototype.toString.call(a))for(var c=0;c<a.length;c++)d.deleteObject(a[c],b-1),a[c]=null;else if(a&&!a.tagName)try{for(c in a.theme=null,a)a[c]&&("object"==typeof a[c]&&d.deleteObject(a[c],
	b-1),"function"!=typeof a[c]&&(a[c]=null))}catch(e){}}};d.bounce=function(a,b,c,e,d){return(b/=d)<1/2.75?7.5625*e*b*b+c:b<2/2.75?e*(7.5625*(b-=1.5/2.75)*b+.75)+c:b<2.5/2.75?e*(7.5625*(b-=2.25/2.75)*b+.9375)+c:e*(7.5625*(b-=2.625/2.75)*b+.984375)+c};d.easeInOutQuad=function(a,b,c,e,d){b/=d/2;if(1>b)return e/2*b*b+c;b--;return-e/2*(b*(b-2)-1)+c};d.easeInSine=function(a,b,c,e,d){return-e*Math.cos(b/d*(Math.PI/2))+e+c};d.easeOutSine=function(a,b,c,e,d){return e*Math.sin(b/d*(Math.PI/2))+c};d.easeOutElastic=
	function(a,b,c,e,d){a=1.70158;var f=0,h=e;if(0===b)return c;if(1==(b/=d))return c+e;f||(f=.3*d);h<Math.abs(e)?(h=e,a=f/4):a=f/(2*Math.PI)*Math.asin(e/h);return h*Math.pow(2,-10*b)*Math.sin(2*(b*d-a)*Math.PI/f)+e+c};d.fixStepE=function(a){a=a.toExponential(0).split("e");var b=Number(a[1]);9==Number(a[0])&&b++;return d.generateNumber(1,b)};d.generateNumber=function(a,b){var c="",e;e=0>b?Math.abs(b)-1:Math.abs(b);var d;for(d=0;d<e;d++)c+="0";return 0>b?Number("0."+c+String(a)):Number(String(a)+c)};d.setCN=
	function(a,b,c,e){if(a.addClassNames&&b&&(b=b.node)&&c){var d=b.getAttribute("class");a=a.classNamePrefix+"-";e&&(a="");d?b.setAttribute("class",d+" "+a+c):b.setAttribute("class",a+c)}};d.removeCN=function(a,b,c){b&&(b=b.node)&&c&&(b=b.classList)&&b.remove(a.classNamePrefix+"-"+c)};d.parseDefs=function(a,b){for(var c in a){var e=typeof a[c];if(0<a[c].length&&"object"==e)for(var g=0;g<a[c].length;g++)e=document.createElementNS(d.SVG_NS,c),b.appendChild(e),d.parseDefs(a[c][g],e);else"object"==e?(e=
	document.createElementNS(d.SVG_NS,c),b.appendChild(e),d.parseDefs(a[c],e)):b.setAttribute(c,a[c])}}})();(function(){var d=window.AmCharts;d.AxisBase=d.Class({construct:function(a){this.createEvents("clickItem","rollOverItem","rollOutItem");this.titleDY=this.y=this.x=this.dy=this.dx=0;this.axisThickness=1;this.axisColor="#000000";this.axisAlpha=1;this.gridCount=this.tickLength=5;this.gridAlpha=.15;this.gridThickness=1;this.gridColor="#000000";this.dashLength=0;this.labelFrequency=1;this.showLastLabel=this.showFirstLabel=!0;this.fillColor="#FFFFFF";this.fillAlpha=0;this.labelsEnabled=!0;this.labelRotation=
	0;this.autoGridCount=!0;this.offset=0;this.guides=[];this.visible=!0;this.counter=0;this.guides=[];this.ignoreAxisWidth=this.inside=!1;this.minHorizontalGap=75;this.minVerticalGap=35;this.titleBold=!0;this.minorGridEnabled=!1;this.minorGridAlpha=.07;this.autoWrap=!1;this.titleAlign="middle";this.labelOffset=0;this.bcn="axis-";this.centerLabels=!1;this.firstDayOfWeek=1;this.centerLabelOnFullPeriod=this.markPeriodChange=this.boldPeriodBeginning=!0;this.periods=[{period:"fff",count:1},{period:"fff",
	count:5},{period:"fff",count:10},{period:"fff",count:50},{period:"fff",count:100},{period:"fff",count:500},{period:"ss",count:1},{period:"ss",count:5},{period:"ss",count:10},{period:"ss",count:30},{period:"mm",count:1},{period:"mm",count:5},{period:"mm",count:10},{period:"mm",count:30},{period:"hh",count:1},{period:"hh",count:3},{period:"hh",count:6},{period:"hh",count:12},{period:"DD",count:1},{period:"DD",count:2},{period:"DD",count:3},{period:"DD",count:4},{period:"DD",count:5},{period:"WW",count:1},
	{period:"MM",count:1},{period:"MM",count:2},{period:"MM",count:3},{period:"MM",count:6},{period:"YYYY",count:1},{period:"YYYY",count:2},{period:"YYYY",count:5},{period:"YYYY",count:10},{period:"YYYY",count:50},{period:"YYYY",count:100}];this.dateFormats=[{period:"fff",format:"NN:SS.QQQ"},{period:"ss",format:"JJ:NN:SS"},{period:"mm",format:"JJ:NN"},{period:"hh",format:"JJ:NN"},{period:"DD",format:"MMM DD"},{period:"WW",format:"MMM DD"},{period:"MM",format:"MMM"},{period:"YYYY",format:"YYYY"}];this.nextPeriod=
	{fff:"ss",ss:"mm",mm:"hh",hh:"DD",DD:"MM",MM:"YYYY"};d.applyTheme(this,a,"AxisBase")},zoom:function(a,b){this.start=a;this.end=b;this.dataChanged=!0;this.draw()},fixAxisPosition:function(){var a=this.position;"H"==this.orientation?("left"==a&&(a="bottom"),"right"==a&&(a="top")):("bottom"==a&&(a="left"),"top"==a&&(a="right"));this.position=a},init:function(){this.createBalloon()},draw:function(){var a=this.chart;this.prevBY=this.prevBX=NaN;this.allLabels=[];this.counter=0;this.destroy();this.fixAxisPosition();
	this.setBalloonBounds();this.labels=[];var b=a.container,c=b.set();a.gridSet.push(c);this.set=c;b=b.set();a.axesLabelsSet.push(b);this.labelsSet=b;this.axisLine=new this.axisRenderer(this);this.autoGridCount?("V"==this.orientation?(a=this.height/this.minVerticalGap,3>a&&(a=3)):a=this.width/this.minHorizontalGap,this.gridCountR=Math.max(a,1)):this.gridCountR=this.gridCount;this.axisWidth=this.axisLine.axisWidth;this.addTitle()},setOrientation:function(a){this.orientation=a?"H":"V"},addTitle:function(){var a=
	this.title;this.titleLabel=null;if(a){var b=this.chart,c=this.titleColor;void 0===c&&(c=b.color);var e=this.titleFontSize;isNaN(e)&&(e=b.fontSize+1);a=d.text(b.container,a,c,b.fontFamily,e,this.titleAlign,this.titleBold);d.setCN(b,a,this.bcn+"title");this.titleLabel=a}},positionTitle:function(){var a=this.titleLabel;if(a){var b,c,e=this.labelsSet,g={};0<e.length()?g=e.getBBox():(g.x=0,g.y=0,g.width=this.width,g.height=this.height,d.VML&&(g.y+=this.y,g.x+=this.x));e.push(a);var e=g.x,f=g.y;d.VML&&
	(f-=this.y,e-=this.x);var h=g.width,g=g.height,k=this.width,l=this.height,m=0,n=a.getBBox().height/2,q=this.inside,p=this.titleAlign;switch(this.position){case "top":b="left"==p?-1:"right"==p?k:k/2;c=f-10-n;break;case "bottom":b="left"==p?-1:"right"==p?k:k/2;c=f+g+10+n;break;case "left":b=e-10-n;q&&(b-=5);m=-90;c=("left"==p?l+1:"right"==p?-1:l/2)+this.titleDY;break;case "right":b=e+h+10+n,q&&(b+=7),c=("left"==p?l+2:"right"==p?-2:l/2)+this.titleDY,m=-90}this.marginsChanged?(a.translate(b,c),this.tx=
	b,this.ty=c):a.translate(this.tx,this.ty);this.marginsChanged=!1;isNaN(this.titleRotation)||(m=this.titleRotation);0!==m&&a.rotate(m)}},pushAxisItem:function(a,b){var c=this,e=a.graphics();0<e.length()&&(b?c.labelsSet.push(e):c.set.push(e));if(e=a.getLabel())c.labelsSet.push(e),e.click(function(b){c.handleMouse(b,a,"clickItem")}).touchend(function(b){c.handleMouse(b,a,"clickItem")}).mouseover(function(b){c.handleMouse(b,a,"rollOverItem")}).mouseout(function(b){c.handleMouse(b,a,"rollOutItem")})},
	handleMouse:function(a,b,c){this.fire({type:c,value:b.value,serialDataItem:b.serialDataItem,axis:this,target:b.label,chart:this.chart,event:a})},addGuide:function(a){for(var b=this.guides,c=!1,e=b.length,g=0;g<b.length;g++)b[g]==a&&(c=!0,e=g);a=d.processObject(a,d.Guide,this.theme);a.id||(a.id="guideAuto"+e+"_"+(new Date).getTime());c||b.push(a)},removeGuide:function(a){var b=this.guides,c;for(c=0;c<b.length;c++)b[c]==a&&b.splice(c,1)},handleGuideOver:function(a){clearTimeout(this.chart.hoverInt);
	var b=a.graphics.getBBox(),c=this.x+b.x+b.width/2,b=this.y+b.y+b.height/2,e=a.fillColor;void 0===e&&(e=a.lineColor);this.chart.showBalloon(a.balloonText,e,!0,c,b)},handleGuideOut:function(){this.chart.hideBalloon()},addEventListeners:function(a,b){var c=this;a.mouseover(function(){c.handleGuideOver(b)});a.touchstart(function(){c.handleGuideOver(b)});a.mouseout(function(){c.handleGuideOut(b)})},getBBox:function(){var a;this.labelsSet&&(a=this.labelsSet.getBBox());a?d.VML||(a={x:a.x+this.x,y:a.y+this.y,
	width:a.width,height:a.height}):a={x:0,y:0,width:0,height:0};return a},destroy:function(){d.remove(this.set);d.remove(this.labelsSet);var a=this.axisLine;a&&d.remove(a.axisSet);d.remove(this.grid0)},chooseMinorFrequency:function(a){for(var b=10;0<b;b--)if(a/b==Math.round(a/b))return a/b},parseDatesDraw:function(){var a,b=this.chart,c=this.showFirstLabel,e=this.showLastLabel,g,f="",h=d.extractPeriod(this.minPeriod),k=d.getPeriodDuration(h.period,h.count),l,m,n,q,p,t=this.firstDayOfWeek,r=this.boldPeriodBeginning;
	a=this.minorGridEnabled;var w,y=this.gridAlpha,x,u=this.choosePeriod(0),A=u.period,u=u.count,z=d.getPeriodDuration(A,u);z<k&&(A=h.period,u=h.count,z=k);h=A;"WW"==h&&(h="DD");this.stepWidth=this.getStepWidth(this.timeDifference);var B=Math.ceil(this.timeDifference/z)+5,D=l=d.resetDateToMin(new Date(this.startTime-z),A,u,t).getTime();if(h==A&&1==u&&this.centerLabelOnFullPeriod||this.autoWrap||this.centerLabels)n=z*this.stepWidth,this.autoWrap&&!this.centerLabels&&(n=-n);this.cellWidth=k*this.stepWidth;
	q=Math.round(l/z);k=-1;q/2==Math.round(q/2)&&(k=-2,l-=z);q=this.firstTime;var C=0,K=0;a&&1<u&&(w=this.chooseMinorFrequency(u),x=d.getPeriodDuration(A,w),"DD"==A&&(x+=d.getPeriodDuration("hh")),"fff"==A&&(x=1));if(0<this.gridCountR)for(B-5-k>this.autoRotateCount&&!isNaN(this.autoRotateAngle)&&(this.labelRotationR=this.autoRotateAngle),a=k;a<=B;a++){p=q+z*(a+Math.floor((D-q)/z))-C;"DD"==A&&(p+=36E5);p=d.resetDateToMin(new Date(p),A,u,t).getTime();"MM"==A&&(g=(p-l)/z,1.5<=(p-l)/z&&(p=p-(g-1)*z+d.getPeriodDuration("DD",
	3),p=d.resetDateToMin(new Date(p),A,1).getTime(),C+=z));g=(p-this.startTime)*this.stepWidth;if("radar"==b.type){if(g=this.axisWidth-g,0>g||g>this.axisWidth)continue}else this.rotate?"date"==this.type&&"middle"==this.gridPosition&&(K=-z*this.stepWidth/2):"date"==this.type&&(g=this.axisWidth-g);f=!1;this.nextPeriod[h]&&(f=this.checkPeriodChange(this.nextPeriod[h],1,p,l,h));l=!1;f&&this.markPeriodChange?(f=this.dateFormatsObject[this.nextPeriod[h]],this.twoLineMode&&(f=this.dateFormatsObject[h]+"\n"+
	f,f=d.fixBrakes(f)),l=!0):f=this.dateFormatsObject[h];r||(l=!1);this.currentDateFormat=f;f=d.formatDate(new Date(p),f,b);if(a==k&&!c||a==B&&!e)f=" ";this.labelFunction&&(f=this.labelFunction(f,new Date(p),this,A,u,m).toString());this.boldLabels&&(l=!0);m=new this.axisItemRenderer(this,g,f,!1,n,K,!1,l);this.pushAxisItem(m);m=l=p;if(!isNaN(w))for(g=1;g<u;g+=w)this.gridAlpha=this.minorGridAlpha,f=p+x*g,f=d.resetDateToMin(new Date(f),A,w,t).getTime(),f=new this.axisItemRenderer(this,(f-this.startTime)*
	this.stepWidth,void 0,void 0,void 0,void 0,void 0,void 0,void 0,!0),this.pushAxisItem(f);this.gridAlpha=y}},choosePeriod:function(a){var b=d.getPeriodDuration(this.periods[a].period,this.periods[a].count),c=this.periods;return this.timeDifference<b&&0<a?c[a-1]:Math.ceil(this.timeDifference/b)<=this.gridCountR?c[a]:a+1<c.length?this.choosePeriod(a+1):c[a]},getStepWidth:function(a){var b;this.startOnAxis?(b=this.axisWidth/(a-1),1==a&&(b=this.axisWidth)):b=this.axisWidth/a;return b},timeZoom:function(a,
	b){this.startTime=a;this.endTime=b},minDuration:function(){var a=d.extractPeriod(this.minPeriod);return d.getPeriodDuration(a.period,a.count)},checkPeriodChange:function(a,b,c,e,g){c=new Date(c);var f=new Date(e),h=this.firstDayOfWeek;e=b;"DD"==a&&(b=1);c=d.resetDateToMin(c,a,b,h).getTime();b=d.resetDateToMin(f,a,b,h).getTime();return"DD"==a&&"hh"!=g&&c-b<d.getPeriodDuration(a,e)-d.getPeriodDuration("hh",1)?!1:c!=b?!0:!1},generateDFObject:function(){this.dateFormatsObject={};var a;for(a=0;a<this.dateFormats.length;a++){var b=
	this.dateFormats[a];this.dateFormatsObject[b.period]=b.format}},hideBalloon:function(){this.balloon&&this.balloon.hide&&this.balloon.hide();this.prevBY=this.prevBX=NaN},formatBalloonText:function(a){return a},showBalloon:function(a,b,c,e){var d=this.offset;switch(this.position){case "bottom":b=this.height+d;break;case "top":b=-d;break;case "left":a=-d;break;case "right":a=this.width+d}c||(c=this.currentDateFormat);if("V"==this.orientation){if(0>b||b>this.height)return;if(isNaN(b)){this.hideBalloon();
	return}b=this.adjustBalloonCoordinate(b,e);e=this.coordinateToValue(b)}else{if(0>a||a>this.width)return;if(isNaN(a)){this.hideBalloon();return}a=this.adjustBalloonCoordinate(a,e);e=this.coordinateToValue(a)}var f;if(d=this.chart.chartCursor)f=d.index;if(this.balloon&&void 0!==e&&this.balloon.enabled){if(this.balloonTextFunction){if("date"==this.type||!0===this.parseDates)e=new Date(e);e=this.balloonTextFunction(e)}else this.balloonText?e=this.formatBalloonText(this.balloonText,f,c):isNaN(e)||(e=this.formatValue(e,
	c));if(a!=this.prevBX||b!=this.prevBY)this.balloon.setPosition(a,b),this.prevBX=a,this.prevBY=b,e&&this.balloon.showBalloon(e)}},adjustBalloonCoordinate:function(a){return a},createBalloon:function(){var a=this.chart,b=a.chartCursor;b&&(b=b.cursorPosition,"mouse"!=b&&(this.stickBalloonToCategory=!0),"start"==b&&(this.stickBalloonToStart=!0),"ValueAxis"==this.cname&&(this.stickBalloonToCategory=!1));this.balloon&&(this.balloon.destroy&&this.balloon.destroy(),d.extend(this.balloon,a.balloon,!0))},setBalloonBounds:function(){var a=
	this.balloon;if(a){var b=this.chart;a.cornerRadius=0;a.shadowAlpha=0;a.borderThickness=1;a.borderAlpha=1;a.adjustBorderColor=!1;a.showBullet=!1;this.balloon=a;a.chart=b;a.mainSet=b.plotBalloonsSet;a.pointerWidth=this.tickLength;if(this.parseDates||"date"==this.type)a.pointerWidth=0;a.className=this.id;b="V";"V"==this.orientation&&(b="H");this.stickBalloonToCategory||(a.animationDuration=0);var c,e,d,f,h=this.inside,k=this.width,l=this.height;switch(this.position){case "bottom":c=0;e=k;h?(d=0,f=l):
	(d=l,f=l+1E3);break;case "top":c=0;e=k;h?(d=0,f=l):(d=-1E3,f=0);break;case "left":d=0;f=l;h?(c=0,e=k):(c=-1E3,e=0);break;case "right":d=0,f=l,h?(c=0,e=k):(c=k,e=k+1E3)}a.drop||(a.pointerOrientation=b);a.setBounds(c,d,e,f)}}})})();(function(){var d=window.AmCharts;d.ValueAxis=d.Class({inherits:d.AxisBase,construct:function(a){this.cname="ValueAxis";this.createEvents("axisChanged","logarithmicAxisFailed","axisZoomed","axisIntZoomed");d.ValueAxis.base.construct.call(this,a);this.dataChanged=!0;this.stackType="none";this.position="left";this.unitPosition="right";this.includeAllValues=this.recalculateToPercents=this.includeHidden=this.includeGuidesInMinMax=this.integersOnly=!1;this.durationUnits={DD:"d. ",hh:":",mm:":",ss:""};
	this.scrollbar=!1;this.baseValue=0;this.radarCategoriesEnabled=!0;this.axisFrequency=1;this.gridType="polygons";this.useScientificNotation=!1;this.axisTitleOffset=10;this.pointPosition="axis";this.minMaxMultiplier=1;this.logGridLimit=2;this.totalTextOffset=this.treatZeroAs=0;this.minPeriod="ss";this.relativeStart=0;this.relativeEnd=1;d.applyTheme(this,a,this.cname)},updateData:function(){0>=this.gridCountR&&(this.gridCountR=1);this.totals=[];this.data=this.chart.chartData;var a=this.chart;"xy"!=a.type&&
	(this.stackGraphs("smoothedLine"),this.stackGraphs("line"),this.stackGraphs("column"),this.stackGraphs("step"));this.recalculateToPercents&&this.recalculate();this.synchronizationMultiplier&&this.synchronizeWith?(d.isString(this.synchronizeWith)&&(this.synchronizeWith=a.getValueAxisById(this.synchronizeWith)),this.synchronizeWith&&(this.synchronizeWithAxis(this.synchronizeWith),this.foundGraphs=!0)):(this.foundGraphs=!1,this.getMinMax(),0===this.start&&this.end==this.data.length-1&&isNaN(this.minZoom)&&
	isNaN(this.maxZoom)&&(this.fullMin=this.min,this.fullMax=this.max,"date"!=this.type&&this.strictMinMax&&(isNaN(this.minimum)||(this.fullMin=this.minimum),isNaN(this.maximum)||(this.fullMax=this.maximum)),this.logarithmic&&(this.fullMin=this.logMin,0===this.fullMin&&(this.fullMin=this.treatZeroAs)),"date"==this.type&&(this.minimumDate||(this.fullMin=this.minRR),this.maximumDate||(this.fullMax=this.maxRR))))},draw:function(){d.ValueAxis.base.draw.call(this);var a=this.chart,b=this.set;this.labelRotationR=
	this.labelRotation;d.setCN(a,this.set,"value-axis value-axis-"+this.id);d.setCN(a,this.labelsSet,"value-axis value-axis-"+this.id);d.setCN(a,this.axisLine.axisSet,"value-axis value-axis-"+this.id);var c=this.type;"duration"==c&&(this.duration="ss");!0===this.dataChanged&&(this.updateData(),this.dataChanged=!1);"date"==c&&(this.logarithmic=!1,this.min=this.minRR,this.max=this.maxRR,this.reversed=!1,this.getDateMinMax());if(this.logarithmic){var e=this.treatZeroAs,g=this.getExtremes(0,this.data.length-
	1).min;!isNaN(this.minimum)&&this.minimum<g&&(g=this.minimum);this.logMin=g;this.minReal<g&&(this.minReal=g);isNaN(this.minReal)&&(this.minReal=g);0<e&&0===g&&(this.minReal=g=e);if(0>=g||0>=this.minimum){this.fire({type:"logarithmicAxisFailed",chart:a});return}}this.grid0=null;var f,h,k=a.dx,l=a.dy,e=!1,g=this.logarithmic;if(isNaN(this.min)||isNaN(this.max)||!this.foundGraphs||Infinity==this.min||-Infinity==this.max)e=!0;else{"date"==this.type&&this.min==this.max&&(this.max+=this.minDuration(),this.min-=
	this.minDuration());var m=this.labelFrequency,n=this.showFirstLabel,q=this.showLastLabel,p=1,t=0;this.minCalc=this.min;this.maxCalc=this.max;if(this.strictMinMax&&(isNaN(this.minimum)||(this.min=this.minimum),isNaN(this.maximum)||(this.max=this.maximum),this.min==this.max))return;isNaN(this.minZoom)||(this.minReal=this.min=this.minZoom);isNaN(this.maxZoom)||(this.max=this.maxZoom);if(this.logarithmic){h=Math.log(this.fullMax)*Math.LOG10E-Math.log(this.fullMin)*Math.LOG10E;var r=Math.log(this.max)/
	Math.LN10-Math.log(this.fullMin)*Math.LOG10E;this.relativeStart=(Math.log(this.minReal)/Math.LN10-Math.log(this.fullMin)*Math.LOG10E)/h;this.relativeEnd=r/h}else this.relativeStart=d.fitToBounds((this.min-this.fullMin)/(this.fullMax-this.fullMin),0,1),this.relativeEnd=d.fitToBounds((this.max-this.fullMin)/(this.fullMax-this.fullMin),0,1);var r=Math.round((this.maxCalc-this.minCalc)/this.step)+1,w;!0===g?(w=Math.log(this.max)*Math.LOG10E-Math.log(this.minReal)*Math.LOG10E,this.stepWidth=this.axisWidth/
	w,w>this.logGridLimit&&(r=Math.ceil(Math.log(this.max)*Math.LOG10E)+1,t=Math.round(Math.log(this.minReal)*Math.LOG10E),r>this.gridCountR&&(p=Math.ceil(r/this.gridCountR)))):this.stepWidth=this.axisWidth/(this.max-this.min);var y=0;1>this.step&&-1<this.step&&(y=d.getDecimals(this.step));this.integersOnly&&(y=0);y>this.maxDecCount&&(y=this.maxDecCount);var x=this.precision;isNaN(x)||(y=x);isNaN(this.maxZoom)&&(this.max=d.roundTo(this.max,this.maxDecCount),this.min=d.roundTo(this.min,this.maxDecCount));
	h={};h.precision=y;h.decimalSeparator=a.nf.decimalSeparator;h.thousandsSeparator=a.nf.thousandsSeparator;this.numberFormatter=h;var u;this.exponential=!1;for(h=t;h<r;h+=p){var A=d.roundTo(this.step*h+this.min,y);-1!=String(A).indexOf("e")&&(this.exponential=!0)}this.duration&&(this.maxInterval=d.getMaxInterval(this.max,this.duration));var y=this.step,z,A=this.minorGridAlpha;this.minorGridEnabled&&(z=this.getMinorGridStep(y,this.stepWidth*y));if(this.autoGridCount||0!==this.gridCount)if("date"==c)this.generateDFObject(),
	this.timeDifference=this.max-this.min,this.maxTime=this.lastTime=this.max,this.startTime=this.firstTime=this.min,this.parseDatesDraw();else for(r>=this.autoRotateCount&&!isNaN(this.autoRotateAngle)&&(this.labelRotationR=this.autoRotateAngle),c=this.minCalc,g&&(r++,c=this.maxCalc-r*y),this.gridCountReal=r,h=this.startCount=t;h<r;h+=p)if(t=y*h+c,t=d.roundTo(t,this.maxDecCount+1),!this.integersOnly||Math.round(t)==t)if(isNaN(x)||Number(d.toFixed(t,x))==t){if(!0===g)if(w>this.logGridLimit)t=Math.pow(10,
	h);else if(0>=t&&(t=c+y*h+y/2,0>=t))continue;u=this.formatValue(t,!1,h);Math.round(h/m)!=h/m&&(u=void 0);if(0===h&&!n||h==r-1&&!q)u=" ";f=this.getCoordinate(t);var B;this.rotate&&this.autoWrap&&(B=this.stepWidth*y-10);u=new this.axisItemRenderer(this,f,u,void 0,B,void 0,void 0,this.boldLabels);this.pushAxisItem(u);if(t==this.baseValue&&"radar"!=a.type){var D,C,K=this.width,H=this.height;"H"==this.orientation?0<=f&&f<=K+1&&(D=[f,f,f+k],C=[H,0,l]):0<=f&&f<=H+1&&(D=[0,K,K+k],C=[f,f,f+l]);D&&(f=d.fitToBounds(2*
	this.gridAlpha,0,1),isNaN(this.zeroGridAlpha)||(f=this.zeroGridAlpha),f=d.line(a.container,D,C,this.gridColor,f,1,this.dashLength),f.translate(this.x,this.y),this.grid0=f,a.axesSet.push(f),f.toBack(),d.setCN(a,f,this.bcn+"zero-grid-"+this.id),d.setCN(a,f,this.bcn+"zero-grid"))}if(!isNaN(z)&&0<A&&h<r-1){f=y/z;g&&(z=y*(h+p)+this.minCalc,z=d.roundTo(z,this.maxDecCount+1),w>this.logGridLimit&&(z=Math.pow(10,h+p)),f=9,z=(z-t)/f);K=this.gridAlpha;this.gridAlpha=this.minorGridAlpha;for(H=1;H<f;H++){var Q=
	this.getCoordinate(t+z*H),Q=new this.axisItemRenderer(this,Q,"",!1,0,0,!1,!1,0,!0);this.pushAxisItem(Q)}this.gridAlpha=K}}w=this.guides;B=w.length;if(0<B){D=this.fillAlpha;for(h=this.fillAlpha=0;h<B;h++)C=w[h],k=NaN,z=C.above,isNaN(C.toValue)||(k=this.getCoordinate(C.toValue),u=new this.axisItemRenderer(this,k,"",!0,NaN,NaN,C),this.pushAxisItem(u,z)),l=NaN,isNaN(C.value)||(l=this.getCoordinate(C.value),u=new this.axisItemRenderer(this,l,C.label,!0,NaN,(k-l)/2,C),this.pushAxisItem(u,z)),isNaN(k)&&
	(l-=3,k=l+3),C.balloonText&&u&&(m=u.label)&&this.addEventListeners(m,C),isNaN(k-l)||0>l&&0>k||(k=new this.guideFillRenderer(this,l,k,C),this.pushAxisItem(k,z),z=k.graphics(),C.graphics=z,C.balloonText&&this.addEventListeners(z,C));this.fillAlpha=D}u=this.baseValue;this.min>this.baseValue&&this.max>this.baseValue&&(u=this.min);this.min<this.baseValue&&this.max<this.baseValue&&(u=this.max);g&&u<this.minReal&&(u=this.minReal);this.baseCoord=this.getCoordinate(u,!0);u={type:"axisChanged",target:this,
	chart:a};u.min=g?this.minReal:this.min;u.max=this.max;this.fire(u);this.axisCreated=!0}g=this.axisLine.set;u=this.labelsSet;b.translate(this.x,this.y);u.translate(this.x,this.y);this.positionTitle();"radar"!=a.type&&g.toFront();!this.visible||e?(b.hide(),g.hide(),u.hide()):(b.show(),g.show(),u.show());this.axisY=this.y;this.axisX=this.x},getDateMinMax:function(){this.minimumDate&&(this.minimumDate instanceof Date||(this.minimumDate=d.getDate(this.minimumDate,this.chart.dataDateFormat,"fff")),this.min=
	this.minimumDate.getTime());this.maximumDate&&(this.maximumDate instanceof Date||(this.maximumDate=d.getDate(this.maximumDate,this.chart.dataDateFormat,"fff")),this.max=this.maximumDate.getTime())},formatValue:function(a,b,c){var e=this.exponential,g=this.logarithmic,f=this.numberFormatter,h=this.chart;if(f)return!0===this.logarithmic&&(e=-1!=String(a).indexOf("e")?!0:!1),this.useScientificNotation&&(e=!0),this.usePrefixes&&(e=!1),e?(c=-1==String(a).indexOf("e")?a.toExponential(15):String(a),e=c.split("e"),
	c=Number(e[0]),e=Number(e[1]),c=d.roundTo(c,14),b||isNaN(this.precision)||(c=d.roundTo(c,this.precision)),10==c&&(c=1,e+=1),c=c+"e"+e,0===a&&(c="0"),1==a&&(c="1")):(g&&(e=String(a).split("."),e[1]?(f.precision=e[1].length,0>c&&(f.precision=Math.abs(c)),b&&1<a&&(f.precision=0),b||isNaN(this.precision)||(f.precision=this.precision)):f.precision=-1),c=this.usePrefixes?d.addPrefix(a,h.prefixesOfBigNumbers,h.prefixesOfSmallNumbers,f,!b):d.formatNumber(a,f,f.precision)),this.duration&&(b&&(f.precision=
	0),c=d.formatDuration(a,this.duration,"",this.durationUnits,this.maxInterval,f)),"date"==this.type&&(c=d.formatDate(new Date(a),this.currentDateFormat,h)),this.recalculateToPercents?c+="%":(b=this.unit)&&(c="left"==this.unitPosition?b+c:c+b),this.labelFunction&&(c="date"==this.type?this.labelFunction(c,new Date(a),this).toString():this.labelFunction(a,c,this).toString()),c},getMinorGridStep:function(a,b){var c=[5,4,2];60>b&&c.shift();for(var e=Math.floor(Math.log(Math.abs(a))*Math.LOG10E),d=0;d<c.length;d++){var f=
	a/c[d],h=Math.floor(Math.log(Math.abs(f))*Math.LOG10E);if(!(1<Math.abs(e-h)))if(1>a){if(h=Math.pow(10,-h)*f,h==Math.round(h))return f}else if(f==Math.round(f))return f}},stackGraphs:function(a){var b=this.stackType;"stacked"==b&&(b="regular");"line"==b&&(b="none");"100% stacked"==b&&(b="100%");this.stackType=b;var c=[],e=[],g=[],f=[],h,k=this.chart.graphs,l,m,n,q,p,t=this.baseValue,r=!1;if("line"==a||"step"==a||"smoothedLine"==a)r=!0;if(r&&("regular"==b||"100%"==b))for(q=0;q<k.length;q++)n=k[q],n.stackGraph=
	null,n.hidden||(m=n.type,n.chart==this.chart&&n.valueAxis==this&&a==m&&n.stackable&&(l&&(n.stackGraph=l),l=n));n=this.start-10;l=this.end+10;q=this.data.length-1;n=d.fitToBounds(n,0,q);l=d.fitToBounds(l,0,q);for(p=n;p<=l;p++){var w=0;for(q=0;q<k.length;q++)if(n=k[q],n.hidden)n.newStack&&(g[p]=NaN,e[p]=NaN);else if(m=n.type,n.chart==this.chart&&n.valueAxis==this&&a==m&&n.stackable)if(m=this.data[p].axes[this.id].graphs[n.id],h=m.values.value,isNaN(h))n.newStack&&(g[p]=NaN,e[p]=NaN);else{var y=d.getDecimals(h);
	w<y&&(w=y);isNaN(f[p])?f[p]=Math.abs(h):f[p]+=Math.abs(h);f[p]=d.roundTo(f[p],w);y=n.fillToGraph;r&&y&&(y=this.data[p].axes[this.id].graphs[y.id])&&(m.values.open=y.values.value);"regular"==b&&(r&&(isNaN(c[p])?(c[p]=h,m.values.close=h,m.values.open=this.baseValue):(isNaN(h)?m.values.close=c[p]:m.values.close=h+c[p],m.values.open=c[p],c[p]=m.values.close)),"column"==a&&(n.newStack&&(g[p]=NaN,e[p]=NaN),m.values.close=h,0>h?(m.values.close=h,isNaN(e[p])?m.values.open=t:(m.values.close+=e[p],m.values.open=
	e[p]),e[p]=m.values.close):(m.values.close=h,isNaN(g[p])?m.values.open=t:(m.values.close+=g[p],m.values.open=g[p]),g[p]=m.values.close)))}}for(p=this.start;p<=this.end;p++)for(q=0;q<k.length;q++)(n=k[q],n.hidden)?n.newStack&&(g[p]=NaN,e[p]=NaN):(m=n.type,n.chart==this.chart&&n.valueAxis==this&&a==m&&n.stackable&&(m=this.data[p].axes[this.id].graphs[n.id],h=m.values.value,isNaN(h)||(c=h/f[p]*100,m.values.percents=c,m.values.total=f[p],n.newStack&&(g[p]=NaN,e[p]=NaN),"100%"==b&&(isNaN(e[p])&&(e[p]=
	0),isNaN(g[p])&&(g[p]=0),0>c?(m.values.close=d.fitToBounds(c+e[p],-100,100),m.values.open=e[p],e[p]=m.values.close):(m.values.close=d.fitToBounds(c+g[p],-100,100),m.values.open=g[p],g[p]=m.values.close)))))},recalculate:function(){var a=this.chart,b=a.graphs,c;for(c=0;c<b.length;c++){var e=b[c];if(e.valueAxis==this){var g="value";if("candlestick"==e.type||"ohlc"==e.type)g="open";var f,h,k=this.end+2,k=d.fitToBounds(this.end+1,0,this.data.length-1),l=this.start;0<l&&l--;var m;h=this.start;e.compareFromStart&&
	(h=0);if(!isNaN(a.startTime)&&(m=a.categoryAxis)){var n=m.minDuration(),n=new Date(a.startTime+n/2),q=d.resetDateToMin(new Date(a.startTime),m.minPeriod).getTime();d.resetDateToMin(new Date(n),m.minPeriod).getTime()>q&&h++}if(m=a.recalculateFromDate)m=d.getDate(m,a.dataDateFormat,"fff"),h=a.getClosestIndex(a.chartData,"time",m.getTime(),!0,0,a.chartData.length),k=a.chartData.length-1;for(m=h;m<=k&&(h=this.data[m].axes[this.id].graphs[e.id],f=h.values[g],e.recalculateValue&&(f=h.dataContext[e.valueField+
	e.recalculateValue]),isNaN(f));m++);this.recBaseValue=f;for(g=l;g<=k;g++){h=this.data[g].axes[this.id].graphs[e.id];h.percents={};var l=h.values,p;for(p in l)h.percents[p]="percents"!=p?l[p]/f*100-100:l[p]}}}},getMinMax:function(){var a=!1,b=this.chart,c=b.graphs,e;for(e=0;e<c.length;e++){var g=c[e].type;("line"==g||"step"==g||"smoothedLine"==g)&&this.expandMinMax&&(a=!0)}a&&(0<this.start&&this.start--,this.end<this.data.length-1&&this.end++);"serial"==b.type&&(!0!==b.categoryAxis.parseDates||a||
	this.end<this.data.length-1&&this.end++);this.includeAllValues&&(this.start=0,this.end=this.data.length-1);a=this.minMaxMultiplier;b=this.getExtremes(this.start,this.end);this.min=b.min;this.max=b.max;this.minRR=this.min;this.maxRR=this.max;a=(this.max-this.min)*(a-1);this.min-=a;this.max+=a;a=this.guides.length;if(this.includeGuidesInMinMax&&0<a)for(b=0;b<a;b++)c=this.guides[b],c.toValue<this.min&&(this.min=c.toValue),c.value<this.min&&(this.min=c.value),c.toValue>this.max&&(this.max=c.toValue),
	c.value>this.max&&(this.max=c.value);isNaN(this.minimum)||(this.min=this.minimum);isNaN(this.maximum)||(this.max=this.maximum);"date"==this.type&&this.getDateMinMax();this.min>this.max&&(a=this.max,this.max=this.min,this.min=a);isNaN(this.minZoom)||(this.min=this.minZoom);isNaN(this.maxZoom)||(this.max=this.maxZoom);this.minCalc=this.min;this.maxCalc=this.max;this.minReal=this.min;this.maxReal=this.max;0===this.min&&0===this.max&&(this.max=9);this.min>this.max&&(this.min=this.max-1);a=this.min;b=
	this.max;c=this.max-this.min;e=0===c?Math.pow(10,Math.floor(Math.log(Math.abs(this.max))*Math.LOG10E))/10:Math.pow(10,Math.floor(Math.log(Math.abs(c))*Math.LOG10E))/10;isNaN(this.maximum)&&(this.max=Math.ceil(this.max/e)*e+e);isNaN(this.minimum)&&(this.min=Math.floor(this.min/e)*e-e);0>this.min&&0<=a&&(this.min=0);0<this.max&&0>=b&&(this.max=0);"100%"==this.stackType&&(this.min=0>this.min?-100:0,this.max=0>this.max?0:100);c=this.max-this.min;e=Math.pow(10,Math.floor(Math.log(Math.abs(c))*Math.LOG10E))/
	10;this.step=Math.ceil(c/this.gridCountR/e)*e;c=Math.pow(10,Math.floor(Math.log(Math.abs(this.step))*Math.LOG10E));c=d.fixStepE(c);e=Math.ceil(this.step/c);5<e&&(e=10);5>=e&&2<e&&(e=5);this.step=Math.ceil(this.step/(c*e))*c*e;isNaN(this.setStep)||(this.step=this.setStep);1>c?(this.maxDecCount=Math.abs(Math.log(Math.abs(c))*Math.LOG10E),this.maxDecCount=Math.round(this.maxDecCount),this.step=d.roundTo(this.step,this.maxDecCount+1)):this.maxDecCount=0;this.min=this.step*Math.floor(this.min/this.step);
	this.max=this.step*Math.ceil(this.max/this.step);0>this.min&&0<=a&&(this.min=0);0<this.max&&0>=b&&(this.max=0);1<this.minReal&&1<this.max-this.minReal&&(this.minReal=Math.floor(this.minReal));c=Math.pow(10,Math.floor(Math.log(Math.abs(this.minReal))*Math.LOG10E));0===this.min&&(this.minReal=c);0===this.min&&1<this.minReal&&(this.minReal=1);0<this.min&&0<this.minReal-this.step&&(this.minReal=this.min+this.step<this.minReal?this.min+this.step:this.min);this.logarithmic&&(2<Math.log(b)*Math.LOG10E-Math.log(a)*
	Math.LOG10E?(this.minReal=this.min=Math.pow(10,Math.floor(Math.log(Math.abs(a))*Math.LOG10E)),this.max=Math.pow(10,Math.ceil(Math.log(Math.abs(b))*Math.LOG10E))):(a=Math.pow(10,Math.floor(Math.log(Math.abs(a))*Math.LOG10E))/10,Math.pow(10,Math.floor(Math.log(Math.abs(this.min))*Math.LOG10E))/10<a&&(this.minReal=this.min=10*a)))},getExtremes:function(a,b){var c,e,d;for(d=a;d<=b;d++){var f=this.data[d].axes[this.id].graphs,h;for(h in f)if(f.hasOwnProperty(h)){var k=this.chart.graphsById[h];if(k.includeInMinMax&&
	(!k.hidden||this.includeHidden)){isNaN(c)&&(c=Infinity);isNaN(e)&&(e=-Infinity);this.foundGraphs=!0;k=f[h].values;this.recalculateToPercents&&(k=f[h].percents);var l;if(this.minMaxField)l=k[this.minMaxField],l<c&&(c=l),l>e&&(e=l);else for(var m in k)k.hasOwnProperty(m)&&"percents"!=m&&"total"!=m&&"error"!=m&&(l=k[m],l<c&&(c=l),l>e&&(e=l))}}}return{min:c,max:e}},zoomOut:function(a){this.maxZoom=this.minZoom=NaN;this.zoomToRelativeValues(0,1,a)},zoomToRelativeValues:function(a,b,c){if(this.reversed){var e=
	a;a=1-b;b=1-e}var d=this.fullMax,e=this.fullMin,f=e+(d-e)*a,h=e+(d-e)*b;0<=this.minimum&&0>f&&(f=0);this.logarithmic&&(d=Math.log(d)*Math.LOG10E-Math.log(e)*Math.LOG10E,f=Math.pow(10,d*a+Math.log(e)*Math.LOG10E),h=Math.pow(10,d*b+Math.log(e)*Math.LOG10E));return this.zoomToValues(f,h,c)},zoomToValues:function(a,b,c){if(b<a){var e=b;b=a;a=e}var g=this.fullMax,e=this.fullMin;this.relativeStart=(a-e)/(g-e);this.relativeEnd=(b-e)/(g-e);if(this.logarithmic){var g=Math.log(g)*Math.LOG10E-Math.log(e)*Math.LOG10E,
	f=Math.log(b)/Math.LN10-Math.log(e)*Math.LOG10E;this.relativeStart=(Math.log(a)/Math.LN10-Math.log(e)*Math.LOG10E)/g;this.relativeEnd=f/g}if(this.minZoom!=a||this.maxZoom!=b)return this.minZoom=a,this.maxZoom=b,e={type:"axisZoomed"},e.chart=this.chart,e.valueAxis=this,e.startValue=a,e.endValue=b,e.relativeStart=this.relativeStart,e.relativeEnd=this.relativeEnd,this.prevStartValue==a&&this.prevEndValue==b||this.fire(e),this.prevStartValue=a,this.prevEndValue=b,c||(a={},d.copyProperties(e,a),a.type=
	"axisIntZoomed",this.fire(a)),0===this.relativeStart&&1==this.relativeEnd&&(this.maxZoom=this.minZoom=NaN),!0},coordinateToValue:function(a){if(isNaN(a))return NaN;var b=this.axisWidth,c=this.stepWidth,e=this.reversed,d=this.rotate,f=this.min,h=this.minReal;return!0===this.logarithmic?Math.pow(10,(d?!0===e?(b-a)/c:a/c:!0===e?a/c:(b-a)/c)+Math.log(h)*Math.LOG10E):!0===e?d?f-(a-b)/c:a/c+f:d?a/c+f:f-(a-b)/c},getCoordinate:function(a,b){if(isNaN(a))return NaN;var c=this.rotate,e=this.reversed,d=this.axisWidth,
	f=this.stepWidth,h=this.min,k=this.minReal;!0===this.logarithmic?(0===a&&(a=this.treatZeroAs),h=Math.log(a)*Math.LOG10E-Math.log(k)*Math.LOG10E,c=c?!0===e?d-f*h:f*h:!0===e?f*h:d-f*h):c=!0===e?c?d-f*(a-h):f*(a-h):c?f*(a-h):d-f*(a-h);1E7<Math.abs(c)&&(c=c/Math.abs(c)*1E7);b||(c=Math.round(c));return c},synchronizeWithAxis:function(a){this.synchronizeWith=a;this.listenTo(this.synchronizeWith,"axisChanged",this.handleSynchronization)},handleSynchronization:function(){if(this.synchronizeWith){d.isString(this.synchronizeWith)&&
	(this.synchronizeWith=this.chart.getValueAxisById(this.synchronizeWith));var a=this.synchronizeWith,b=a.min,c=a.max,a=a.step,e=this.synchronizationMultiplier;e&&(this.min=b*e,this.max=c*e,this.step=a*e,b=Math.abs(Math.log(Math.abs(Math.pow(10,Math.floor(Math.log(Math.abs(this.step))*Math.LOG10E))))*Math.LOG10E),this.maxDecCount=b=Math.round(b),this.draw())}}})})();(function(){var d=window.AmCharts;d.RecAxis=d.Class({construct:function(a){var b=a.chart,c=a.axisThickness,e=a.axisColor,g=a.axisAlpha,f=a.offset,h=a.dx,k=a.dy,l=a.x,m=a.y,n=a.height,q=a.width,p=b.container;"H"==a.orientation?(e=d.line(p,[0,q],[0,0],e,g,c),this.axisWidth=a.width,"bottom"==a.position?(k=c/2+f+n+m-1,c=l):(k=-c/2-f+m+k,c=h+l)):(this.axisWidth=a.height,"right"==a.position?(e=d.line(p,[0,0,-h],[0,n,n-k],e,g,c),k=m+k,c=c/2+f+h+q+l-1):(e=d.line(p,[0,0],[0,n],e,g,c),k=m,c=-c/2-f+l));e.translate(c,
	k);c=b.container.set();c.push(e);b.axesSet.push(c);d.setCN(b,e,a.bcn+"line");this.axisSet=c;this.set=e}})})();(function(){var d=window.AmCharts;d.RecItem=d.Class({construct:function(a,b,c,e,g,f,h,k,l,m,n,q){b=Math.round(b);var p=a.chart;this.value=c;void 0==c&&(c="");l||(l=0);void 0==e&&(e=!0);var t=p.fontFamily,r=a.fontSize;void 0==r&&(r=p.fontSize);var w=a.color;void 0==w&&(w=p.color);void 0!==n&&(w=n);var y=a.chart.container,x=y.set();this.set=x;var u=a.axisThickness,A=a.axisColor,z=a.axisAlpha,B=a.tickLength,D=a.gridAlpha,C=a.gridThickness,K=a.gridColor,H=a.dashLength,Q=a.fillColor,M=a.fillAlpha,P=a.labelsEnabled;
	n=a.labelRotationR;var ia=a.counter,I=a.inside,aa=a.labelOffset,ma=a.dx,na=a.dy,Pa=a.orientation,Z=a.position,da=a.previousCoord,X=a.height,xa=a.width,ea=a.offset,fa,Ba;h?(void 0!==h.id&&(q=p.classNamePrefix+"-guide-"+h.id),P=!0,isNaN(h.tickLength)||(B=h.tickLength),void 0!=h.lineColor&&(K=h.lineColor),void 0!=h.color&&(w=h.color),isNaN(h.lineAlpha)||(D=h.lineAlpha),isNaN(h.dashLength)||(H=h.dashLength),isNaN(h.lineThickness)||(C=h.lineThickness),!0===h.inside&&(I=!0,0<ea&&(ea=0)),isNaN(h.labelRotation)||
	(n=h.labelRotation),isNaN(h.fontSize)||(r=h.fontSize),h.position&&(Z=h.position),void 0!==h.boldLabel&&(k=h.boldLabel),isNaN(h.labelOffset)||(aa=h.labelOffset)):""===c&&(B=0);m&&!isNaN(a.minorTickLength)&&(B=a.minorTickLength);var ga="start";0<g&&(ga="middle");a.centerLabels&&(ga="middle");var V=n*Math.PI/180,Y,Da,G=0,v=0,oa=0,ha=Y=0,Qa=0;"V"==Pa&&(n=0);var ca;P&&""!==c&&(ca=a.autoWrap&&0===n?d.wrappedText(y,c,w,t,r,ga,k,Math.abs(g),0):d.text(y,c,w,t,r,ga,k),ga=ca.getBBox(),ha=ga.width,Qa=ga.height);
	if("H"==Pa){if(0<=b&&b<=xa+1&&(0<B&&0<z&&b+l<=xa+1&&(fa=d.line(y,[b+l,b+l],[0,B],A,z,C),x.push(fa)),0<D&&(Ba=d.line(y,[b,b+ma,b+ma],[X,X+na,na],K,D,C,H),x.push(Ba))),v=0,G=b,h&&90==n&&I&&(G-=r),!1===e?(ga="start",v="bottom"==Z?I?v+B:v-B:I?v-B:v+B,G+=3,0<g&&(G+=g/2-3,ga="middle"),0<n&&(ga="middle")):ga="middle",1==ia&&0<M&&!h&&!m&&da<xa&&(e=d.fitToBounds(b,0,xa),da=d.fitToBounds(da,0,xa),Y=e-da,0<Y&&(Da=d.rect(y,Y,a.height,Q,M),Da.translate(e-Y+ma,na),x.push(Da))),"bottom"==Z?(v+=X+r/2+ea,I?(0<n?(v=
	X-ha/2*Math.sin(V)-B-3,a.centerRotatedLabels||(G+=ha/2*Math.cos(V)-4+2)):0>n?(v=X+ha*Math.sin(V)-B-3+2,G+=-ha*Math.cos(V)-Qa*Math.sin(V)-4):v-=B+r+3+3,v-=aa):(0<n?(v=X+ha/2*Math.sin(V)+B+3,a.centerRotatedLabels||(G-=ha/2*Math.cos(V))):0>n?(v=X+B+3-ha/2*Math.sin(V)+2,G+=ha/2*Math.cos(V)):v+=B+u+3+3,v+=aa)):(v+=na+r/2-ea,G+=ma,I?(0<n?(v=ha/2*Math.sin(V)+B+3,a.centerRotatedLabels||(G-=ha/2*Math.cos(V))):v+=B+3,v+=aa):(0<n?(v=-(ha/2)*Math.sin(V)-B-6,a.centerRotatedLabels||(G+=ha/2*Math.cos(V))):v-=B+
	r+3+u+3,v-=aa)),"bottom"==Z?Y=(I?X-B-1:X+u-1)+ea:(oa=ma,Y=(I?na:na-B-u+1)-ea),f&&(G+=f),r=G,0<n&&(r+=ha/2*Math.cos(V)),ca&&(f=0,I&&(f=ha/2*Math.cos(V)),r+f>xa+2||0>r))ca.remove(),ca=null}else{0<=b&&b<=X+1&&(0<B&&0<z&&b+l<=X+1&&(fa=d.line(y,[0,B+1],[b+l,b+l],A,z,C),x.push(fa)),0<D&&(Ba=d.line(y,[0,ma,xa+ma],[b,b+na,b+na],K,D,C,H),x.push(Ba)));ga="end";if(!0===I&&"left"==Z||!1===I&&"right"==Z)ga="start";v=b-Qa/2+2;1==ia&&0<M&&!h&&!m&&(e=d.fitToBounds(b,0,X),da=d.fitToBounds(da,0,X),V=e-da,Da=d.polygon(y,
	[0,a.width,a.width,0],[0,0,V,V],Q,M),Da.translate(ma,e-V+na),x.push(Da));v+=r/2;"right"==Z?(G+=ma+xa+ea,v+=na,I?(f||(v-=r/2+3),G=G-(B+4)-aa):(G+=B+4+u,v-=2,G+=aa)):I?(G+=B+4-ea,f||(v-=r/2+3),h&&(G+=ma,v+=na),G+=aa):(G+=-B-u-4-2-ea,v-=2,G-=aa);fa&&("right"==Z?(oa+=ma+ea+xa-1,Y+=na,oa=I?oa-u:oa+u):(oa-=ea,I||(oa-=B+u)));f&&(v+=f);I=-3;"right"==Z&&(I+=na);ca&&(v>X+1||v<I-r/10)&&(ca.remove(),ca=null)}fa&&(fa.translate(oa,Y),d.setCN(p,fa,a.bcn+"tick"),d.setCN(p,fa,q,!0),h&&d.setCN(p,fa,"guide"));!1===
	a.visible&&(fa&&fa.remove(),ca&&(ca.remove(),ca=null));ca&&(ca.attr({"text-anchor":ga}),ca.translate(G,v,NaN,!0),0!==n&&ca.rotate(-n,a.chart.backgroundColor),a.allLabels.push(ca),this.label=ca,d.setCN(p,ca,a.bcn+"label"),d.setCN(p,ca,q,!0),h&&d.setCN(p,ca,"guide"));Ba&&(d.setCN(p,Ba,a.bcn+"grid"),d.setCN(p,Ba,q,!0),h&&d.setCN(p,Ba,"guide"));Da&&(d.setCN(p,Da,a.bcn+"fill"),d.setCN(p,Da,q,!0));m?Ba&&d.setCN(p,Ba,a.bcn+"grid-minor"):(a.counter=0===ia?1:0,a.previousCoord=b);0===this.set.node.childNodes.length&&
	this.set.remove()},graphics:function(){return this.set},getLabel:function(){return this.label}})})();(function(){var d=window.AmCharts;d.RecFill=d.Class({construct:function(a,b,c,e){var g=a.dx,f=a.dy,h=a.orientation,k=0;if(c<b){var l=b;b=c;c=l}var m=e.fillAlpha;isNaN(m)&&(m=0);var l=a.chart.container,n=e.fillColor;"V"==h?(b=d.fitToBounds(b,0,a.height),c=d.fitToBounds(c,0,a.height)):(b=d.fitToBounds(b,0,a.width),c=d.fitToBounds(c,0,a.width));c-=b;isNaN(c)&&(c=4,k=2,m=0);0>c&&"object"==typeof n&&(n=n.join(",").split(",").reverse());"V"==h?(h=d.rect(l,a.width,c,n,m),h.translate(g,b-k+f)):(h=d.rect(l,
	c,a.height,n,m),h.translate(b-k+g,f));d.setCN(a.chart,h,"guide-fill");e.id&&d.setCN(a.chart,h,"guide-fill-"+e.id);this.set=l.set([h])},graphics:function(){return this.set},getLabel:function(){}})})();(function(){var d=window.AmCharts;d.AmChart=d.Class({construct:function(a){this.svgIcons=this.tapToActivate=!0;this.theme=a;this.classNamePrefix="amcharts";this.addClassNames=!1;this.version="3.20.18";d.addChart(this);this.createEvents("buildStarted","dataUpdated","init","rendered","drawn","failed","resized","animationFinished");this.height=this.width="100%";this.dataChanged=!0;this.chartCreated=!1;this.previousWidth=this.previousHeight=0;this.backgroundColor="#FFFFFF";this.borderAlpha=this.backgroundAlpha=
	0;this.color=this.borderColor="#000000";this.fontFamily="Verdana";this.fontSize=11;this.usePrefixes=!1;this.autoResize=!0;this.autoDisplay=!1;this.addCodeCredits=this.accessible=!0;this.touchStartTime=this.touchClickDuration=0;this.precision=-1;this.percentPrecision=2;this.decimalSeparator=".";this.thousandsSeparator=",";this.labels=[];this.allLabels=[];this.titles=[];this.marginRight=this.marginLeft=this.autoMarginOffset=0;this.timeOuts=[];this.creditsPosition="top-left";var b=document.createElement("div"),
	c=b.style;c.overflow="hidden";c.position="relative";c.textAlign="left";this.chartDiv=b;b=document.createElement("div");c=b.style;c.overflow="hidden";c.position="relative";c.textAlign="left";this.legendDiv=b;this.titleHeight=0;this.hideBalloonTime=150;this.handDrawScatter=2;this.cssScale=this.handDrawThickness=1;this.cssAngle=0;this.prefixesOfBigNumbers=[{number:1E3,prefix:"k"},{number:1E6,prefix:"M"},{number:1E9,prefix:"G"},{number:1E12,prefix:"T"},{number:1E15,prefix:"P"},{number:1E18,prefix:"E"},
	{number:1E21,prefix:"Z"},{number:1E24,prefix:"Y"}];this.prefixesOfSmallNumbers=[{number:1E-24,prefix:"y"},{number:1E-21,prefix:"z"},{number:1E-18,prefix:"a"},{number:1E-15,prefix:"f"},{number:1E-12,prefix:"p"},{number:1E-9,prefix:"n"},{number:1E-6,prefix:"\u03bc"},{number:.001,prefix:"m"}];this.panEventsEnabled=!0;this.product="amcharts";this.animations=[];this.balloon=new d.AmBalloon(this.theme);this.balloon.chart=this;this.processTimeout=0;this.processCount=1E3;this.animatable=[];this.langObj={};
	d.applyTheme(this,a,"AmChart")},drawChart:function(){0<this.realWidth&&0<this.realHeight&&(this.drawBackground(),this.redrawLabels(),this.drawTitles(),this.brr(),this.renderFix(),this.chartDiv&&(this.boundingRect=this.chartDiv.getBoundingClientRect()))},makeAccessible:function(a,b,c){this.accessible&&a&&(c&&a.setAttr("role",c),a.setAttr("aria-label",b))},drawBackground:function(){d.remove(this.background);var a=this.container,b=this.backgroundColor,c=this.backgroundAlpha,e=this.set;d.isModern||0!==
	c||(c=.001);var g=this.updateWidth();this.realWidth=g;var f=this.updateHeight();this.realHeight=f;b=d.polygon(a,[0,g-1,g-1,0],[0,0,f-1,f-1],b,c,1,this.borderColor,this.borderAlpha);d.setCN(this,b,"bg");this.background=b;e.push(b);if(b=this.backgroundImage)a=a.image(b,0,0,g,f),d.setCN(this,b,"bg-image"),this.bgImg=a,e.push(a)},drawTitles:function(a){var b=this.titles;this.titleHeight=0;if(d.ifArray(b)){var c=20,e;for(e=0;e<b.length;e++){var g=b[e],g=d.processObject(g,d.Title,this.theme);if(!1!==g.enabled){var f=
	g.color;void 0===f&&(f=this.color);var h=g.size;isNaN(h)&&(h=this.fontSize+2);isNaN(g.alpha);var k=this.marginLeft,l=!0;void 0!==g.bold&&(l=g.bold);f=d.wrappedText(this.container,g.text,f,this.fontFamily,h,"middle",l,this.realWidth-35);f.translate(k+(this.realWidth-this.marginRight-k)/2,c);f.node.style.pointerEvents="none";g.sprite=f;void 0!==g.tabIndex&&f.setAttr("tabindex",g.tabIndex);d.setCN(this,f,"title");g.id&&d.setCN(this,f,"title-"+g.id);f.attr({opacity:g.alpha});c+=f.getBBox().height+5;a?
	f.remove():this.freeLabelsSet.push(f)}}this.titleHeight=c-10}},write:function(a){var b=this;if(b.listeners)for(var c=0;c<b.listeners.length;c++){var e=b.listeners[c];b.addListener(e.event,e.method)}b.fire({type:"buildStarted",chart:b});b.afterWriteTO&&clearTimeout(b.afterWriteTO);0<b.processTimeout?b.afterWriteTO=setTimeout(function(){b.afterWrite.call(b,a)},b.processTimeout):b.afterWrite(a)},afterWrite:function(a){var b;if(b="object"!=typeof a?document.getElementById(a):a){for(;b.firstChild;)b.removeChild(b.firstChild);
	this.div=b;b.style.overflow="hidden";b.style.textAlign="left";a=this.chartDiv;var c=this.legendDiv,e=this.legend,g=c.style,f=a.style;this.measure();this.previousHeight=this.divRealHeight;this.previousWidth=this.divRealWidth;var h,k=document.createElement("div");h=k.style;h.position="relative";this.containerDiv=k;k.className=this.classNamePrefix+"-main-div";a.className=this.classNamePrefix+"-chart-div";b.appendChild(k);(b=this.exportConfig)&&d.AmExport&&!this.AmExport&&(this.AmExport=new d.AmExport(this,
	b));this.amExport&&d.AmExport&&(this.AmExport=d.extend(this.amExport,new d.AmExport(this),!0));this.AmExport&&this.AmExport.init&&this.AmExport.init();if(e){e=this.addLegend(e,e.divId);if(e.enabled)switch(g.left=null,g.top=null,g.right=null,f.left=null,f.right=null,f.top=null,g.position="relative",f.position="relative",h.width="100%",h.height="100%",e.position){case "bottom":k.appendChild(a);k.appendChild(c);break;case "top":k.appendChild(c);k.appendChild(a);break;case "absolute":g.position="absolute";
	f.position="absolute";void 0!==e.left&&(g.left=e.left+"px");void 0!==e.right&&(g.right=e.right+"px");void 0!==e.top&&(g.top=e.top+"px");void 0!==e.bottom&&(g.bottom=e.bottom+"px");e.marginLeft=0;e.marginRight=0;k.appendChild(a);k.appendChild(c);break;case "right":g.position="relative";f.position="absolute";k.appendChild(a);k.appendChild(c);break;case "left":g.position="absolute";f.position="relative";k.appendChild(a);k.appendChild(c);break;case "outside":k.appendChild(a)}else k.appendChild(a);this.prevLegendPosition=
	e.position}else k.appendChild(a);this.listenersAdded||(this.addListeners(),this.listenersAdded=!0);this.initChart()}},createLabelsSet:function(){d.remove(this.labelsSet);this.labelsSet=this.container.set();this.freeLabelsSet.push(this.labelsSet)},initChart:function(){this.balloon=d.processObject(this.balloon,d.AmBalloon,this.theme);window.AmCharts_path&&(this.path=window.AmCharts_path);void 0===this.path&&(this.path=d.getPath());void 0===this.path&&(this.path="amcharts/");this.path=d.normalizeUrl(this.path);
	void 0===this.pathToImages&&(this.pathToImages=this.path+"images/");this.initHC||(d.callInitHandler(this),this.initHC=!0);d.applyLang(this.language,this);var a=this.numberFormatter;a&&(isNaN(a.precision)||(this.precision=a.precision),void 0!==a.thousandsSeparator&&(this.thousandsSeparator=a.thousandsSeparator),void 0!==a.decimalSeparator&&(this.decimalSeparator=a.decimalSeparator));(a=this.percentFormatter)&&!isNaN(a.precision)&&(this.percentPrecision=a.precision);this.nf={precision:this.precision,
	thousandsSeparator:this.thousandsSeparator,decimalSeparator:this.decimalSeparator};this.pf={precision:this.percentPrecision,thousandsSeparator:this.thousandsSeparator,decimalSeparator:this.decimalSeparator};this.destroy();(a=this.container)?(a.container.innerHTML="",a.width=this.realWidth,a.height=this.realHeight,a.addDefs(this),this.chartDiv.appendChild(a.container)):a=new d.AmDraw(this.chartDiv,this.realWidth,this.realHeight,this);this.container=a;this.extension=".png";this.svgIcons&&d.SVG&&(this.extension=
	".svg");this.checkDisplay();this.checkTransform(this.div);a.chart=this;d.VML||d.SVG?(a.handDrawn=this.handDrawn,a.handDrawScatter=this.handDrawScatter,a.handDrawThickness=this.handDrawThickness,d.remove(this.set),this.set=a.set(),d.remove(this.gridSet),this.gridSet=a.set(),d.remove(this.cursorLineSet),this.cursorLineSet=a.set(),d.remove(this.graphsBehindSet),this.graphsBehindSet=a.set(),d.remove(this.bulletBehindSet),this.bulletBehindSet=a.set(),d.remove(this.columnSet),this.columnSet=a.set(),d.remove(this.graphsSet),
	this.graphsSet=a.set(),d.remove(this.trendLinesSet),this.trendLinesSet=a.set(),d.remove(this.axesSet),this.axesSet=a.set(),d.remove(this.cursorSet),this.cursorSet=a.set(),d.remove(this.scrollbarsSet),this.scrollbarsSet=a.set(),d.remove(this.bulletSet),this.bulletSet=a.set(),d.remove(this.freeLabelsSet),this.freeLabelsSet=a.set(),d.remove(this.axesLabelsSet),this.axesLabelsSet=a.set(),d.remove(this.balloonsSet),this.balloonsSet=a.set(),d.remove(this.plotBalloonsSet),this.plotBalloonsSet=a.set(),d.remove(this.zoomButtonSet),
	this.zoomButtonSet=a.set(),d.remove(this.zbSet),this.zbSet=null,d.remove(this.linkSet),this.linkSet=a.set()):this.fire({type:"failed",chart:this})},premeasure:function(){var a=this.div;if(a){try{this.boundingRect=this.chartDiv.getBoundingClientRect()}catch(e){}var b=a.offsetWidth,c=a.offsetHeight;a.clientHeight&&(b=a.clientWidth,c=a.clientHeight);if(b!=this.mw||c!=this.mh)this.mw=b,this.mh=c,this.measure()}},measure:function(){var a=this.div;if(a){var b=this.chartDiv,c=a.offsetWidth,e=a.offsetHeight,
	g=this.container;a.clientHeight&&(c=a.clientWidth,e=a.clientHeight);var e=Math.round(e),c=Math.round(c),a=Math.round(d.toCoordinate(this.width,c)),f=Math.round(d.toCoordinate(this.height,e));(c!=this.previousWidth||e!=this.previousHeight)&&0<a&&0<f&&(b.style.width=a+"px",b.style.height=f+"px",b.style.padding=0,g&&g.setSize(a,f),this.balloon=d.processObject(this.balloon,d.AmBalloon,this.theme));this.updateWidth();this.balloon.chart=this;this.realWidth=a;this.realHeight=f;this.divRealWidth=c;this.divRealHeight=
	e}},checkDisplay:function(){if(this.autoDisplay&&this.container){var a=d.rect(this.container,10,10),b=a.getBBox();0===b.width&&0===b.height&&(this.divRealHeight=this.divRealWidth=this.realHeight=this.realWidth=0,this.previousWidth=this.previousHeight=NaN);a.remove()}},checkTransform:function(a){if(this.autoTransform&&window.getComputedStyle&&a){if(a.style){var b=window.getComputedStyle(a,null);if(b&&(b=b.getPropertyValue("-webkit-transform")||b.getPropertyValue("-moz-transform")||b.getPropertyValue("-ms-transform")||
	b.getPropertyValue("-o-transform")||b.getPropertyValue("transform"))&&"none"!==b){var c=b.split("(")[1].split(")")[0].split(","),b=c[0],c=c[1],b=Math.sqrt(b*b+c*c);isNaN(b)||(this.cssScale*=b)}}a.parentNode&&this.checkTransform(a.parentNode)}},destroy:function(){this.chartDiv.innerHTML="";this.clearTimeOuts();this.legend&&this.legend.destroy()},clearTimeOuts:function(){var a=this.timeOuts;if(a){var b;for(b=0;b<a.length;b++)clearTimeout(a[b])}this.timeOuts=[]},clear:function(a){try{document.removeEventListener("touchstart",
	this.docfn1,!0),document.removeEventListener("touchend",this.docfn2,!0)}catch(b){}d.callMethod("clear",[this.chartScrollbar,this.scrollbarV,this.scrollbarH,this.chartCursor]);this.chartCursor=this.scrollbarH=this.scrollbarV=this.chartScrollbar=null;this.clearTimeOuts();this.container&&(this.container.remove(this.chartDiv),this.container.remove(this.legendDiv));a||d.removeChart(this);if(a=this.div)for(;a.firstChild;)a.removeChild(a.firstChild);this.legend&&this.legend.destroy();this.AmExport&&this.AmExport.clear&&
	this.AmExport.clear()},setMouseCursor:function(a){"auto"==a&&d.isNN&&(a="default");this.chartDiv.style.cursor=a;this.legendDiv.style.cursor=a},redrawLabels:function(){this.labels=[];var a=this.allLabels;this.createLabelsSet();var b;for(b=0;b<a.length;b++)this.drawLabel(a[b])},drawLabel:function(a){var b=this;if(b.container&&!1!==a.enabled){a=d.processObject(a,d.Label,b.theme);var c=a.y,e=a.text,g=a.align,f=a.size,h=a.color,k=a.rotation,l=a.alpha,m=a.bold,n=d.toCoordinate(a.x,b.realWidth),c=d.toCoordinate(c,
	b.realHeight);n||(n=0);c||(c=0);void 0===h&&(h=b.color);isNaN(f)&&(f=b.fontSize);g||(g="start");"left"==g&&(g="start");"right"==g&&(g="end");"center"==g&&(g="middle",k?c=b.realHeight-c+c/2:n=b.realWidth/2-n);void 0===l&&(l=1);void 0===k&&(k=0);c+=f/2;e=d.text(b.container,e,h,b.fontFamily,f,g,m,l);e.translate(n,c);void 0!==a.tabIndex&&e.setAttr("tabindex",a.tabIndex);d.setCN(b,e,"label");a.id&&d.setCN(b,e,"label-"+a.id);0!==k&&e.rotate(k);a.url?(e.setAttr("cursor","pointer"),e.click(function(){d.getURL(a.url,
	b.urlTarget)})):e.node.style.pointerEvents="none";b.labelsSet.push(e);b.labels.push(e)}},addLabel:function(a,b,c,e,d,f,h,k,l,m){a={x:a,y:b,text:c,align:e,size:d,color:f,alpha:k,rotation:h,bold:l,url:m,enabled:!0};this.container&&this.drawLabel(a);this.allLabels.push(a)},clearLabels:function(){var a=this.labels,b;for(b=a.length-1;0<=b;b--)a[b].remove();this.labels=[];this.allLabels=[]},updateHeight:function(){var a=this.divRealHeight,b=this.legend;if(b){var c=this.legendDiv.offsetHeight,b=b.position;
	if("top"==b||"bottom"==b){a-=c;if(0>a||isNaN(a))a=0;this.chartDiv.style.height=a+"px"}}return a},updateWidth:function(){var a=this.divRealWidth,b=this.divRealHeight,c=this.legend;if(c){var e=this.legendDiv,d=e.offsetWidth;isNaN(c.width)||(d=c.width);c.ieW&&(d=c.ieW);var f=e.offsetHeight,e=e.style,h=this.chartDiv.style,k=c.position;if(("right"==k||"left"==k)&&void 0===c.divId){a-=d;if(0>a||isNaN(a))a=0;h.width=a+"px";this.balloon.setBounds(2,2,a-2,this.realHeight);"left"==k?(h.left=d+"px",e.left="0px"):
	(h.left="0px",e.left=a+"px");b>f&&(e.top=(b-f)/2+"px")}}return a},getTitleHeight:function(){this.drawTitles(!0);return this.titleHeight},addTitle:function(a,b,c,e,d){isNaN(b)&&(b=this.fontSize+2);a={text:a,size:b,color:c,alpha:e,bold:d,enabled:!0};this.titles.push(a);return a},handleWheel:function(a){var b=0;a||(a=window.event);a.wheelDelta?b=a.wheelDelta/120:a.detail&&(b=-a.detail/3);b&&this.handleWheelReal(b,a.shiftKey);a.preventDefault&&a.preventDefault()},handleWheelReal:function(){},handleDocTouchStart:function(){var a=
	this;setTimeout(function(){a.hideBalloonReal()},300);a.handleMouseMove();a.tmx=a.mouseX;a.tmy=a.mouseY;a.touchStartTime=(new Date).getTime()},handleDocTouchEnd:function(){-.5<this.tmx&&this.tmx<this.divRealWidth+1&&0<this.tmy&&this.tmy<this.divRealHeight?(this.handleMouseMove(),4>Math.abs(this.mouseX-this.tmx)&&4>Math.abs(this.mouseY-this.tmy)?(this.tapped=!0,this.panRequired&&this.panEventsEnabled&&this.chartDiv&&(this.chartDiv.style.msTouchAction="none",this.chartDiv.style.touchAction="none")):
	this.mouseIsOver||this.resetTouchStyle()):(this.tapped=!1,this.resetTouchStyle())},resetTouchStyle:function(){this.panEventsEnabled&&this.chartDiv&&(this.chartDiv.style.msTouchAction="auto",this.chartDiv.style.touchAction="auto")},checkTouchDuration:function(a){var b=this,c=(new Date).getTime();if(a)if(a.touches)b.isTouchEvent=!0;else if(!b.isTouchEvent)return!0;if(c-b.touchStartTime>b.touchClickDuration)return!0;setTimeout(function(){b.resetTouchDuration()},300)},resetTouchDuration:function(){this.isTouchEvent=
	!1},checkTouchMoved:function(){if(4<Math.abs(this.mouseX-this.tmx)||4<Math.abs(this.mouseY-this.tmy))return!0},addListeners:function(){var a=this,b=a.chartDiv;document.addEventListener?("ontouchstart"in document.documentElement&&(b.addEventListener("touchstart",function(b){a.handleTouchStart.call(a,b)},!0),b.addEventListener("touchmove",function(b){a.handleMouseMove.call(a,b)},!0),b.addEventListener("touchend",function(b){a.handleTouchEnd.call(a,b)},!0),a.docfn1=function(b){a.handleDocTouchStart.call(a,
	b)},a.docfn2=function(b){a.handleDocTouchEnd.call(a,b)},document.addEventListener("touchstart",a.docfn1,!0),document.addEventListener("touchend",a.docfn2,!0)),b.addEventListener("mousedown",function(b){a.mouseIsOver=!0;a.handleMouseMove.call(a,b);a.handleMouseDown.call(a,b);a.handleDocTouchStart.call(a,b)},!0),b.addEventListener("mouseover",function(b){a.handleMouseOver.call(a,b)},!0),b.addEventListener("mouseout",function(b){a.handleMouseOut.call(a,b)},!0),b.addEventListener("mouseup",function(b){a.handleDocTouchEnd.call(a,
	b)},!0)):(b.attachEvent("onmousedown",function(b){a.handleMouseDown.call(a,b)}),b.attachEvent("onmouseover",function(b){a.handleMouseOver.call(a,b)}),b.attachEvent("onmouseout",function(b){a.handleMouseOut.call(a,b)}))},dispDUpd:function(){this.skipEvents||(this.dispatchDataUpdated&&(this.dispatchDataUpdated=!1,this.fire({type:"dataUpdated",chart:this})),this.chartCreated||(this.chartCreated=!0,this.fire({type:"init",chart:this})),this.chartRendered||(this.fire({type:"rendered",chart:this}),this.chartRendered=
	!0),this.fire({type:"drawn",chart:this}));this.skipEvents=!1},validateSize:function(){var a=this;a.premeasure();a.checkDisplay();a.cssScale=1;a.cssAngle=0;a.checkTransform(a.div);if(a.divRealWidth!=a.previousWidth||a.divRealHeight!=a.previousHeight){var b=a.legend;if(0<a.realWidth&&0<a.realHeight){a.sizeChanged=!0;if(b){a.legendInitTO&&clearTimeout(a.legendInitTO);var c=setTimeout(function(){b.invalidateSize()},10);a.timeOuts.push(c);a.legendInitTO=c}a.marginsUpdated=!1;clearTimeout(a.initTO);c=setTimeout(function(){a.initChart()},
	10);a.timeOuts.push(c);a.initTO=c}a.renderFix();b&&b.renderFix&&b.renderFix();clearTimeout(a.resizedTO);a.resizedTO=setTimeout(function(){a.fire({type:"resized",chart:a})},10);a.previousHeight=a.divRealHeight;a.previousWidth=a.divRealWidth}},invalidateSize:function(){this.previousHeight=this.previousWidth=NaN;this.invalidateSizeReal()},invalidateSizeReal:function(){var a=this;a.marginsUpdated=!1;clearTimeout(a.validateTO);var b=setTimeout(function(){a.validateSize()},5);a.timeOuts.push(b);a.validateTO=
	b},validateData:function(a){this.chartCreated&&(this.dataChanged=!0,this.marginsUpdated=!1,this.initChart(a))},validateNow:function(a,b){this.initTO&&clearTimeout(this.initTO);a&&(this.dataChanged=!0,this.marginsUpdated=!1);this.skipEvents=b;this.chartRendered=!1;var c=this.legend;c&&c.position!=this.prevLegendPosition&&(this.previousWidth=this.mw=0,c.invalidateSize&&(c.invalidateSize(),this.validateSize()));this.write(this.div)},showItem:function(a){a.hidden=!1;this.initChart()},hideItem:function(a){a.hidden=
	!0;this.initChart()},hideBalloon:function(){var a=this;clearTimeout(a.hoverInt);clearTimeout(a.balloonTO);a.hoverInt=setTimeout(function(){a.hideBalloonReal.call(a)},a.hideBalloonTime)},cleanChart:function(){},hideBalloonReal:function(){var a=this.balloon;a&&a.hide&&a.hide()},showBalloon:function(a,b,c,e,d){var f=this;clearTimeout(f.balloonTO);clearTimeout(f.hoverInt);f.balloonTO=setTimeout(function(){f.showBalloonReal.call(f,a,b,c,e,d)},1)},showBalloonReal:function(a,b,c,e,d){this.handleMouseMove();
	var f=this.balloon;f.enabled&&(f.followCursor(!1),f.changeColor(b),!c||f.fixedPosition?(f.setPosition(e,d),isNaN(e)||isNaN(d)?f.followCursor(!0):f.followCursor(!1)):f.followCursor(!0),a&&f.showBalloon(a))},handleMouseOver:function(){this.outTO&&clearTimeout(this.outTO);d.resetMouseOver();this.mouseIsOver=!0},handleMouseOut:function(){var a=this;d.resetMouseOver();a.outTO&&clearTimeout(a.outTO);a.outTO=setTimeout(function(){a.handleMouseOutReal()},10)},handleMouseOutReal:function(){this.mouseIsOver=
	!1},handleMouseMove:function(a){a||(a=window.event);this.mouse2Y=this.mouse2X=NaN;var b,c,e,d;if(a){if(a.touches){var f=a.touches.item(1);f&&this.panEventsEnabled&&this.boundingRect&&(e=f.clientX-this.boundingRect.left,d=f.clientY-this.boundingRect.top);a=a.touches.item(0);if(!a)return}else this.wasTouched=!1;this.boundingRect&&a.clientX&&(b=a.clientX-this.boundingRect.left,c=a.clientY-this.boundingRect.top);isNaN(e)?this.mouseX=b:(this.mouseX=Math.min(b,e),this.mouse2X=Math.max(b,e));isNaN(d)?this.mouseY=
	c:(this.mouseY=Math.min(c,d),this.mouse2Y=Math.max(c,d));this.autoTransform&&(this.mouseX/=this.cssScale,this.mouseY/=this.cssScale)}},handleTouchStart:function(a){this.hideBalloonReal();a&&(a.touches&&this.tapToActivate&&!this.tapped||!this.panRequired)||(this.handleMouseMove(a),this.handleMouseDown(a))},handleTouchEnd:function(a){this.wasTouched=!0;this.handleMouseMove(a);d.resetMouseOver();this.handleReleaseOutside(a)},handleReleaseOutside:function(){this.handleDocTouchEnd.call(this)},handleMouseDown:function(a){d.resetMouseOver();
	this.mouseIsOver=!0;a&&a.preventDefault&&(this.panEventsEnabled?a.preventDefault():a.touches||a.preventDefault())},addLegend:function(a,b){a=d.processObject(a,d.AmLegend,this.theme);a.divId=b;a.ieW=0;var c;c="object"!=typeof b&&b?document.getElementById(b):b;this.legend=a;a.chart=this;c?(a.div=c,a.position="outside",a.autoMargins=!1):a.div=this.legendDiv;return a},removeLegend:function(){this.legend=void 0;this.previousWidth=0;this.legendDiv.innerHTML=""},handleResize:function(){(d.isPercents(this.width)||
	d.isPercents(this.height))&&this.invalidateSizeReal();this.renderFix()},renderFix:function(){if(!d.VML){var a=this.container;a&&a.renderFix()}},getSVG:function(){if(d.hasSVG)return this.container},animate:function(a,b,c,e,g,f,h){a["an_"+b]&&d.removeFromArray(this.animations,a["an_"+b]);c={obj:a,frame:0,attribute:b,from:c,to:e,time:g,effect:f,suffix:h};a["an_"+b]=c;this.animations.push(c);return c},setLegendData:function(a){var b=this.legend;b&&b.setData(a)},stopAnim:function(a){d.removeFromArray(this.animations,
	a)},updateAnimations:function(){var a;this.container&&this.container.update();if(this.animations)for(a=this.animations.length-1;0<=a;a--){var b=this.animations[a],c=d.updateRate*b.time,e=b.frame+1,g=b.obj,f=b.attribute;if(e<=c){b.frame++;var h=Number(b.from),k=Number(b.to)-h,c=d[b.effect](0,e,h,k,c);0===k?(this.animations.splice(a,1),g.node.style[f]=Number(b.to)+b.suffix):g.node.style[f]=c+b.suffix}else g.node.style[f]=Number(b.to)+b.suffix,g.animationFinished=!0,this.animations.splice(a,1)}},update:function(){this.updateAnimations();
	var a=this.animatable;if(0<a.length){for(var b=!0,c=a.length-1;0<=c;c--){var e=a[c];e&&(e.animationFinished?a.splice(c,1):b=!1)}b&&(this.fire({type:"animationFinished",chart:this}),this.animatable=[])}},inIframe:function(){try{return window.self!==window.top}catch(a){return!0}},brr:function(){if(!this.hideCredits){var a="amcharts.com",b=window.location.hostname.split("."),c;2<=b.length&&(c=b[b.length-2]+"."+b[b.length-1]);this.amLink&&(b=this.amLink.parentNode)&&b.removeChild(this.amLink);b=this.creditsPosition;
	if(c!=a||!0===this.inIframe()){var a="http://www."+a,e=c=0,d=this.realWidth,f=this.realHeight,h=this.type;if("serial"==h||"xy"==h||"gantt"==h)c=this.marginLeftReal,e=this.marginTopReal,d=c+this.plotAreaWidth,f=e+this.plotAreaHeight;var h=a+"/javascript-charts/",k="JavaScript charts",l="JS chart by amCharts";"ammap"==this.product&&(h=a+"/javascript-maps/",k="Interactive JavaScript maps",l="JS map by amCharts");a=document.createElement("a");l=document.createTextNode(l);a.setAttribute("href",h);a.setAttribute("title",
	k);this.urlTarget&&a.setAttribute("target",this.urlTarget);a.appendChild(l);this.chartDiv.appendChild(a);this.amLink=a;h=a.style;h.position="absolute";h.textDecoration="none";h.color=this.color;h.fontFamily=this.fontFamily;h.fontSize="11px";h.opacity=.7;h.display="block";var k=a.offsetWidth,a=a.offsetHeight,l=5+c,m=e+5;"bottom-left"==b&&(l=5+c,m=f-a-3);"bottom-right"==b&&(l=d-k-5,m=f-a-3);"top-right"==b&&(l=d-k-5,m=e+5);h.left=l+"px";h.top=m+"px"}}}});d.Slice=d.Class({construct:function(){}});d.SerialDataItem=
	d.Class({construct:function(){}});d.GraphDataItem=d.Class({construct:function(){}});d.Guide=d.Class({construct:function(a){this.cname="Guide";d.applyTheme(this,a,this.cname)}});d.Title=d.Class({construct:function(a){this.cname="Title";d.applyTheme(this,a,this.cname)}});d.Label=d.Class({construct:function(a){this.cname="Label";d.applyTheme(this,a,this.cname)}})})();(function(){var d=window.AmCharts;d.AmGraph=d.Class({construct:function(a){this.cname="AmGraph";this.createEvents("rollOverGraphItem","rollOutGraphItem","clickGraphItem","doubleClickGraphItem","rightClickGraphItem","clickGraph","rollOverGraph","rollOutGraph");this.type="line";this.stackable=!0;this.columnCount=1;this.columnIndex=0;this.centerCustomBullets=this.showBalloon=!0;this.maxBulletSize=50;this.minBulletSize=4;this.balloonText="[[value]]";this.hidden=this.scrollbar=this.animationPlayed=!1;
	this.pointPosition="middle";this.depthCount=1;this.includeInMinMax=!0;this.negativeBase=0;this.visibleInLegend=!0;this.showAllValueLabels=!1;this.showBulletsAt=this.showBalloonAt="close";this.lineThickness=1;this.dashLength=0;this.connect=!0;this.lineAlpha=1;this.bullet="none";this.bulletBorderThickness=2;this.bulletBorderAlpha=0;this.bulletAlpha=1;this.bulletSize=8;this.cornerRadiusTop=this.hideBulletsCount=this.bulletOffset=0;this.cursorBulletAlpha=1;this.gradientOrientation="vertical";this.dy=
	this.dx=0;this.periodValue="";this.clustered=!0;this.periodSpan=1;this.accessibleLabel="[[title]] [[category]] [[value]]";this.accessibleSkipText="Press enter to skip [[title]]";this.y=this.x=0;this.switchable=!0;this.tcc=this.minDistance=1;this.labelRotation=0;this.labelAnchor="auto";this.labelOffset=3;this.bcn="graph-";this.dateFormat="MMM DD, YYYY";this.noRounding=!0;d.applyTheme(this,a,this.cname)},init:function(){this.createBalloon()},draw:function(){var a=this.chart;a.isRolledOverBullet=!1;
	var b=a.type;if(a.drawGraphs){isNaN(this.precision)||(this.numberFormatter?this.numberFormatter.precision=this.precision:this.numberFormatter={precision:this.precision,decimalSeparator:a.decimalSeparator,thousandsSeparator:a.thousandsSeparator});var c=a.container;this.container=c;this.destroy();var e=c.set();this.set=e;e.translate(this.x,this.y);var g=c.set();this.bulletSet=g;g.translate(this.x,this.y);this.behindColumns?(a.graphsBehindSet.push(e),a.bulletBehindSet.push(g)):(a.graphsSet.push(e),a.bulletSet.push(g));
	var f=this.bulletAxis;d.isString(f)&&(this.bulletAxis=a.getValueAxisById(f));c=c.set();d.remove(this.columnsSet);this.columnsSet=c;d.setCN(a,e,"graph-"+this.type);d.setCN(a,e,"graph-"+this.id);d.setCN(a,g,"graph-"+this.type);d.setCN(a,g,"graph-"+this.id);this.columnsArray=[];this.ownColumns=[];this.allBullets=[];this.animationArray=[];g=this.labelPosition;g||(f=this.valueAxis.stackType,g="top","column"==this.type&&(a.rotate&&(g="right"),"100%"==f||"regular"==f)&&(g="middle"),this.labelPosition=g);
	d.ifArray(this.data)&&(a=!1,"xy"==b?this.xAxis.axisCreated&&this.yAxis.axisCreated&&(a=!0):this.valueAxis.axisCreated&&(a=!0),!this.hidden&&a&&this.createGraph());e.push(c)}},createGraph:function(){var a=this,b=a.chart;a.startAlpha=b.startAlpha;a.seqAn=b.sequencedAnimation;a.baseCoord=a.valueAxis.baseCoord;void 0===a.fillAlphas&&(a.fillAlphas=0);a.bulletColorR=a.bulletColor;void 0===a.bulletColorR&&(a.bulletColorR=a.lineColorR,a.bulletColorNegative=a.negativeLineColor);void 0===a.bulletAlpha&&(a.bulletAlpha=
	a.lineAlpha);if("step"==c||d.VML)a.noRounding=!1;var c=b.type;"gantt"==c&&(c="serial");clearTimeout(a.playedTO);if(!isNaN(a.valueAxis.min)&&!isNaN(a.valueAxis.max)){switch(c){case "serial":a.categoryAxis&&(a.createSerialGraph(),"candlestick"==a.type&&1>a.valueAxis.minMaxMultiplier&&a.positiveClip(a.set));break;case "radar":a.createRadarGraph();break;case "xy":a.createXYGraph()}a.playedTO=setTimeout(function(){a.setAnimationPlayed.call(a)},500*a.chart.startDuration)}},setAnimationPlayed:function(){this.animationPlayed=
	!0},createXYGraph:function(){var a=[],b=[],c=this.xAxis,e=this.yAxis;this.pmh=e.height;this.pmw=c.width;this.pmy=this.pmx=0;var d;for(d=this.start;d<=this.end;d++){var f=this.data[d].axes[c.id].graphs[this.id],h=f.values,k=h.x,l=h.y,h=c.getCoordinate(k,this.noRounding),m=e.getCoordinate(l,this.noRounding);if(!isNaN(k)&&!isNaN(l)&&(a.push(h),b.push(m),f.x=h,f.y=m,k=this.createBullet(f,h,m,d),l=this.labelText)){var l=this.createLabel(f,l),n=0;k&&(n=k.size);this.positionLabel(f,h,m,l,n)}}this.drawLineGraph(a,
	b);this.launchAnimation()},createRadarGraph:function(){var a=this.valueAxis.stackType,b=[],c=[],e=[],d=[],f,h,k,l,m;for(m=this.start;m<=this.end;m++){var n=this.data[m].axes[this.valueAxis.id].graphs[this.id],q,p;"none"==a||"3d"==a?q=n.values.value:(q=n.values.close,p=n.values.open);if(isNaN(q))this.connect||(this.drawLineGraph(b,c,e,d),b=[],c=[],e=[],d=[]);else{var t=this.valueAxis.getCoordinate(q,this.noRounding)-this.height,t=t*this.valueAxis.rMultiplier,r=-360/(this.end-this.start+1)*m;"middle"==
	this.valueAxis.pointPosition&&(r-=180/(this.end-this.start+1));q=t*Math.sin(r/180*Math.PI);t*=Math.cos(r/180*Math.PI);b.push(q);c.push(t);if(!isNaN(p)){var w=this.valueAxis.getCoordinate(p,this.noRounding)-this.height,w=w*this.valueAxis.rMultiplier,y=w*Math.sin(r/180*Math.PI),r=w*Math.cos(r/180*Math.PI);e.push(y);d.push(r);isNaN(k)&&(k=y);isNaN(l)&&(l=r)}r=this.createBullet(n,q,t,m);n.x=q;n.y=t;if(y=this.labelText)y=this.createLabel(n,y),w=0,r&&(w=r.size),this.positionLabel(n,q,t,y,w);isNaN(f)&&(f=
	q);isNaN(h)&&(h=t)}}b.push(f);c.push(h);isNaN(k)||(e.push(k),d.push(l));this.drawLineGraph(b,c,e,d);this.launchAnimation()},positionLabel:function(a,b,c,e,d){if(e){var f=this.chart,h=this.valueAxis,k="middle",l=!1,m=this.labelPosition,n=e.getBBox(),q=this.chart.rotate,p=a.isNegative,t=this.fontSize;void 0===t&&(t=this.chart.fontSize);c-=n.height/2-t/2-1;void 0!==a.labelIsNegative&&(p=a.labelIsNegative);switch(m){case "right":m=q?p?"left":"right":"right";break;case "top":m=q?"top":p?"bottom":"top";
	break;case "bottom":m=q?"bottom":p?"top":"bottom";break;case "left":m=q?p?"right":"left":"left"}var t=a.columnGraphics,r=0,w=0;t&&(r=t.x,w=t.y);var y=this.labelOffset;switch(m){case "right":k="start";b+=d/2+y;break;case "top":c=h.reversed?c+(d/2+n.height/2+y):c-(d/2+n.height/2+y);break;case "bottom":c=h.reversed?c-(d/2+n.height/2+y):c+(d/2+n.height/2+y);break;case "left":k="end";b-=d/2+y;break;case "inside":"column"==this.type&&(l=!0,q?p?(k="end",b=r-3-y):(k="start",b=r+3+y):c=p?w+7+y:w-10-y);break;
	case "middle":"column"==this.type&&(l=!0,q?b-=(b-r)/2+y-3:c-=(c-w)/2+y-3)}"auto"!=this.labelAnchor&&(k=this.labelAnchor);e.attr({"text-anchor":k});this.labelRotation&&e.rotate(this.labelRotation);e.translate(b,c);!this.showAllValueLabels&&t&&l&&(n=e.getBBox(),n.height>a.columnHeight||n.width>a.columnWidth)&&(e.remove(),e=null);if(e&&"radar"!=f.type)if(q){if(0>c||c>this.height)e.remove(),e=null;!this.showAllValueLabels&&e&&(0>b||b>this.width)&&(e.remove(),e=null)}else{if(0>b||b>this.width)e.remove(),
	e=null;!this.showAllValueLabels&&e&&(0>c||c>this.height)&&(e.remove(),e=null)}e&&this.allBullets.push(e);return e}},getGradRotation:function(){var a=270;"horizontal"==this.gradientOrientation&&(a=0);return this.gradientRotation=a},createSerialGraph:function(){this.dashLengthSwitched=this.fillColorsSwitched=this.lineColorSwitched=void 0;var a=this.chart,b=this.id,c=this.index,e=this.data,g=this.chart.container,f=this.valueAxis,h=this.type,k=this.columnWidthReal,l=this.showBulletsAt;isNaN(this.columnWidth)||
	(k=this.columnWidth);isNaN(k)&&(k=.8);var m=this.useNegativeColorIfDown,n=this.width,q=this.height,p=this.y,t=this.rotate,r=this.columnCount,w=d.toCoordinate(this.cornerRadiusTop,k/2),y=this.connect,x=[],u=[],A,z,B,D,C=this.chart.graphs.length,K,H=this.dx/this.tcc,Q=this.dy/this.tcc,M=f.stackType,P=this.start,ia=this.end,I=this.scrollbar,aa="graph-column-";I&&(aa="scrollbar-graph-column-");var ma=this.categoryAxis,na=this.baseCoord,Pa=this.negativeBase,Z=this.columnIndex,da=this.lineThickness,X=this.lineAlpha,
	xa=this.lineColorR,ea=this.dashLength,fa=this.set,Ba,ga=this.getGradRotation(),V=this.chart.columnSpacing,Y=ma.cellWidth,Da=(Y*k-r)/r;V>Da&&(V=Da);var G,v,oa,ha=q,Qa=n,ca=0,tb=0,ub,vb,gb,hb,wb=this.fillColorsR,Ra=this.negativeFillColors,Ja=this.negativeLineColor,Ya=this.fillAlphas,Za=this.negativeFillAlphas;"object"==typeof Ya&&(Ya=Ya[0]);"object"==typeof Za&&(Za=Za[0]);var xb=this.noRounding;"step"==h&&(xb=!1);var ib=f.getCoordinate(f.min);f.logarithmic&&(ib=f.getCoordinate(f.minReal));this.minCoord=
	ib;this.resetBullet&&(this.bullet="none");if(!(I||"line"!=h&&"smoothedLine"!=h&&"step"!=h||(1==e.length&&"step"!=h&&"none"==this.bullet&&(this.bullet="round",this.resetBullet=!0),!Ra&&void 0==Ja||m))){var Ua=Pa;Ua>f.max&&(Ua=f.max);Ua<f.min&&(Ua=f.min);f.logarithmic&&(Ua=f.minReal);var Ka=f.getCoordinate(Ua),Mb=f.getCoordinate(f.max);t?(ha=q,Qa=Math.abs(Mb-Ka),ub=q,vb=Math.abs(ib-Ka),hb=tb=0,f.reversed?(ca=0,gb=Ka):(ca=Ka,gb=0)):(Qa=n,ha=Math.abs(Mb-Ka),vb=n,ub=Math.abs(ib-Ka),gb=ca=0,f.reversed?
	(hb=p,tb=Ka):hb=Ka)}var La=Math.round;this.pmx=La(ca);this.pmy=La(tb);this.pmh=La(ha);this.pmw=La(Qa);this.nmx=La(gb);this.nmy=La(hb);this.nmh=La(ub);this.nmw=La(vb);d.isModern||(this.nmy=this.nmx=0,this.nmh=this.height);this.clustered||(r=1);k="column"==h?(Y*k-V*(r-1))/r:Y*k;1>k&&(k=1);var Nb=this.fixedColumnWidth;isNaN(Nb)||(k=Nb);var L;if("line"==h||"step"==h||"smoothedLine"==h){if(0<P){for(L=P-1;-1<L;L--)if(G=e[L],v=G.axes[f.id].graphs[b],oa=v.values.value,!isNaN(oa)){P=L;break}if(this.lineColorField)for(L=
	P;-1<L;L--)if(G=e[L],v=G.axes[f.id].graphs[b],v.lineColor){this.lineColorSwitched=v.lineColor;void 0===this.bulletColor&&(this.bulletColorSwitched=this.lineColorSwitched);break}if(this.fillColorsField)for(L=P;-1<L;L--)if(G=e[L],v=G.axes[f.id].graphs[b],v.fillColors){this.fillColorsSwitched=v.fillColors;break}if(this.dashLengthField)for(L=P;-1<L;L--)if(G=e[L],v=G.axes[f.id].graphs[b],!isNaN(v.dashLength)){this.dashLengthSwitched=v.dashLength;break}}if(ia<e.length-1)for(L=ia+1;L<e.length;L++)if(G=e[L],
	v=G.axes[f.id].graphs[b],oa=v.values.value,!isNaN(oa)){ia=L;break}}ia<e.length-1&&ia++;var T=[],U=[],Ma=!1;if("line"==h||"step"==h||"smoothedLine"==h)if(this.stackable&&"regular"==M||"100%"==M||this.fillToGraph)Ma=!0;var Ob=this.noStepRisers,jb=-1E3,kb=-1E3,lb=this.minDistance,Sa=!0,$a=!1;for(L=P;L<=ia;L++){G=e[L];v=G.axes[f.id].graphs[b];v.index=L;var ab,Ta=NaN;if(m&&void 0==this.openField)for(var yb=L+1;yb<e.length&&(!e[yb]||!(ab=e[L+1].axes[f.id].graphs[b])||!ab.values||(Ta=ab.values.value,isNaN(Ta)));yb++);
	var S,R,J,ba,ja=NaN,E=NaN,F=NaN,O=NaN,N=NaN,qa=NaN,ra=NaN,sa=NaN,ta=NaN,ya=NaN,Ea=NaN,ka=NaN,la=NaN,W=NaN,zb=NaN,Ab=NaN,ua=NaN,va=void 0,Na=wb,Va=Ya,Ha=xa,Ca,za,Bb=this.proCandlesticks,mb=this.topRadius,Fa=q-1,pa=n-1,bb=this.pattern;void 0!=v.pattern&&(bb=v.pattern);isNaN(v.alpha)||(Va=v.alpha);isNaN(v.dashLength)||(ea=v.dashLength);var Ia=v.values;f.recalculateToPercents&&(Ia=v.percents);"none"==M&&(Z=isNaN(v.columnIndex)?this.columnIndex:v.columnIndex);if(Ia){W=this.stackable&&"none"!=M&&"3d"!=
	M?Ia.close:Ia.value;if("candlestick"==h||"ohlc"==h)W=Ia.close,Ab=Ia.low,ra=f.getCoordinate(Ab),zb=Ia.high,ta=f.getCoordinate(zb);ua=Ia.open;F=f.getCoordinate(W,xb);isNaN(ua)||(N=f.getCoordinate(ua,xb),m&&"regular"!=M&&"100%"!=M&&(Ta=ua,ua=N=NaN));m&&(void 0==this.openField?ab&&(ab.isNegative=Ta<W?!0:!1,isNaN(Ta)&&(v.isNegative=!Sa)):v.isNegative=Ta>W?!0:!1);if(!I)switch(this.showBalloonAt){case "close":v.y=F;break;case "open":v.y=N;break;case "high":v.y=ta;break;case "low":v.y=ra}var ja=G.x[ma.id],
	Wa=this.periodSpan-1;"step"!=h||isNaN(G.cellWidth)||(Y=G.cellWidth);var wa=Math.floor(Y/2)+Math.floor(Wa*Y/2),Ga=wa,nb=0;"left"==this.stepDirection&&(nb=(2*Y+Wa*Y)/2,ja-=nb);"center"==this.stepDirection&&(nb=Y/2,ja-=nb);"start"==this.pointPosition&&(ja-=Y/2+Math.floor(Wa*Y/2),wa=0,Ga=Math.floor(Y)+Math.floor(Wa*Y));"end"==this.pointPosition&&(ja+=Y/2+Math.floor(Wa*Y/2),wa=Math.floor(Y)+Math.floor(Wa*Y),Ga=0);if(Ob){var Cb=this.columnWidth;isNaN(Cb)||(wa*=Cb,Ga*=Cb)}I||(v.x=ja);-1E5>ja&&(ja=-1E5);
	ja>n+1E5&&(ja=n+1E5);t?(E=F,O=N,N=F=ja,isNaN(ua)&&!this.fillToGraph&&(O=na),qa=ra,sa=ta):(O=E=ja,isNaN(ua)&&!this.fillToGraph&&(N=na));if(!Bb&&W<ua||Bb&&W<Ba)v.isNegative=!0,Ra&&(Na=Ra),Za&&(Va=Za),void 0!=Ja&&(Ha=Ja);$a=!1;isNaN(W)||(m?W>Ta?(Sa&&($a=!0),Sa=!1):(Sa||($a=!0),Sa=!0):v.isNegative=W<Pa?!0:!1,Ba=W);var Pb=!1;I&&a.chartScrollbar.ignoreCustomColors&&(Pb=!0);Pb||(void 0!=v.color&&(Na=v.color),v.fillColors&&(Na=v.fillColors));F=d.fitToBounds(F,-3E4,3E4);switch(h){case "line":if(isNaN(W))y||
	(this.drawLineGraph(x,u,T,U),x=[],u=[],T=[],U=[]);else{if(Math.abs(E-jb)>=lb||Math.abs(F-kb)>=lb)x.push(E),u.push(F),jb=E,kb=F;ya=E;Ea=F;ka=E;la=F;!Ma||isNaN(N)||isNaN(O)||(T.push(O),U.push(N));if($a||void 0!=v.lineColor&&v.lineColor!=this.lineColorSwitched||void 0!=v.fillColors&&v.fillColors!=this.fillColorsSwitched||!isNaN(v.dashLength))this.drawLineGraph(x,u,T,U),x=[E],u=[F],T=[],U=[],!Ma||isNaN(N)||isNaN(O)||(T.push(O),U.push(N)),m?(Sa?(this.lineColorSwitched=xa,this.fillColorsSwitched=wb):(this.lineColorSwitched=
	Ja,this.fillColorsSwitched=Ra),void 0===this.bulletColor&&(this.bulletColorSwitched=xa)):(this.lineColorSwitched=v.lineColor,this.fillColorsSwitched=v.fillColors,void 0===this.bulletColor&&(this.bulletColorSwitched=this.lineColorSwitched)),this.dashLengthSwitched=v.dashLength;v.gap&&(this.drawLineGraph(x,u,T,U),x=[],u=[],T=[],U=[])}break;case "smoothedLine":if(isNaN(W))y||(this.drawSmoothedGraph(x,u,T,U),x=[],u=[],T=[],U=[]);else{if(Math.abs(E-jb)>=lb||Math.abs(F-kb)>=lb)x.push(E),u.push(F),jb=E,
	kb=F;ya=E;Ea=F;ka=E;la=F;!Ma||isNaN(N)||isNaN(O)||(T.push(O),U.push(N));void 0==v.lineColor&&void 0==v.fillColors&&isNaN(v.dashLength)||(this.drawSmoothedGraph(x,u,T,U),x=[E],u=[F],T=[],U=[],!Ma||isNaN(N)||isNaN(O)||(T.push(O),U.push(N)),this.lineColorSwitched=v.lineColor,this.fillColorsSwitched=v.fillColors,this.dashLengthSwitched=v.dashLength);v.gap&&(this.drawSmoothedGraph(x,u,T,U),x=[],u=[],T=[],U=[])}break;case "step":if(!isNaN(W)){t?(isNaN(A)||(x.push(A),u.push(F-wa)),u.push(F-wa),x.push(E),
	u.push(F+Ga),x.push(E),!Ma||isNaN(N)||isNaN(O)||(isNaN(B)||(T.push(B),U.push(N-wa)),T.push(O),U.push(N-wa),T.push(O),U.push(N+Ga))):(isNaN(z)||(u.push(z),x.push(E-wa)),x.push(E-wa),u.push(F),x.push(E+Ga),u.push(F),!Ma||isNaN(N)||isNaN(O)||(isNaN(D)||(T.push(O-wa),U.push(D)),T.push(O-wa),U.push(N),T.push(O+Ga),U.push(N)));A=E;z=F;B=O;D=N;ya=E;Ea=F;ka=E;la=F;if($a||void 0!=v.lineColor||void 0!=v.fillColors||!isNaN(v.dashLength)){var Db=x[x.length-2],dc=u[u.length-2];x.pop();u.pop();T.pop();U.pop();
	this.drawLineGraph(x,u,T,U);x=[Db];u=[dc];T=[];U=[];Ma&&(T=[Db,Db+wa+Ga],U=[D,D]);t?(u.push(F+Ga),x.push(E)):(x.push(E+Ga),u.push(F));this.lineColorSwitched=v.lineColor;this.fillColorsSwitched=v.fillColors;this.dashLengthSwitched=v.dashLength;m&&(Sa?(this.lineColorSwitched=xa,this.fillColorsSwitched=wb):(this.lineColorSwitched=Ja,this.fillColorsSwitched=Ra))}if(Ob||v.gap)A=z=NaN,this.drawLineGraph(x,u,T,U),x=[],u=[],T=[],U=[]}else if(!y){if(1>=this.periodSpan||1<this.periodSpan&&E-A>wa+Ga)A=z=NaN;
	this.drawLineGraph(x,u,T,U);x=[];u=[];T=[];U=[]}break;case "column":Ca=Ha;void 0!=v.lineColor&&(Ca=v.lineColor);if(!isNaN(W)){m||(v.isNegative=W<Pa?!0:!1);v.isNegative&&(Ra&&(Na=Ra),void 0!=Ja&&(Ca=Ja));var Qb=f.min,Rb=f.max,ob=ua;isNaN(ob)&&(ob=Pa);if(!(W<Qb&&ob<Qb||W>Rb&&ob>Rb)){var Aa;if(t){"3d"==M?(R=F-(r/2-this.depthCount+1)*(k+V)+V/2+Q*Z,S=O+H*Z,Aa=Z):(R=Math.floor(F-(r/2-Z)*(k+V)+V/2),S=O,Aa=0);J=k;ya=E;Ea=R+k/2;ka=E;la=R+k/2;R+J>q+Aa*Q&&(J=q-R+Aa*Q);R<Aa*Q&&(J+=R,R=Aa*Q);ba=E-O;var ec=S;S=
	d.fitToBounds(S,0,n);ba+=ec-S;ba=d.fitToBounds(ba,-S,n-S+H*Z);v.labelIsNegative=0>ba?!0:!1;0===ba&&1/W===1/-0&&(v.labelIsNegative=!0);isNaN(G.percentWidthValue)||(J=this.height*G.percentWidthValue/100,R=ja-J/2,Ea=R+J/2);J=d.roundTo(J,2);ba=d.roundTo(ba,2);R<q&&0<J&&(va=new d.Cuboid(g,ba,J,H-a.d3x,Q-a.d3y,Na,Va,da,Ca,X,ga,w,t,ea,bb,mb,aa),v.columnWidth=Math.abs(ba),v.columnHeight=Math.abs(J))}else{"3d"==M?(S=E-(r/2-this.depthCount+1)*(k+V)+V/2+H*Z,R=N+Q*Z,Aa=Z):(S=E-(r/2-Z)*(k+V)+V/2,R=N,Aa=0);J=k;
	ya=S+k/2;Ea=F;ka=S+k/2;la=F;S+J>n+Aa*H&&(J=n-S+Aa*H);S<Aa*H&&(J+=S-Aa*H,S=Aa*H);ba=F-N;v.labelIsNegative=0<ba?!0:!1;0===ba&&1/W!==1/Math.abs(W)&&(v.labelIsNegative=!0);var fc=R;R=d.fitToBounds(R,this.dy,q);ba+=fc-R;ba=d.fitToBounds(ba,-R+Q*Aa,q-R);isNaN(G.percentWidthValue)||(J=this.width*G.percentWidthValue/100,S=ja-J/2,ya=S+J/2);J=d.roundTo(J,2);ba=d.roundTo(ba,2);S<n+Z*H&&0<J&&(this.showOnAxis&&(R-=Q/2),va=new d.Cuboid(g,J,ba,H-a.d3x,Q-a.d3y,Na,Va,da,Ca,this.lineAlpha,ga,w,t,ea,bb,mb,aa),v.columnHeight=
	Math.abs(ba),v.columnWidth=Math.abs(J))}}if(va){za=va.set;d.setCN(a,va.set,"graph-"+this.type);d.setCN(a,va.set,"graph-"+this.id);v.className&&d.setCN(a,va.set,v.className,!0);v.columnGraphics=za;S=d.roundTo(S,2);R=d.roundTo(R,2);za.translate(S,R);(v.url||this.showHandOnHover)&&za.setAttr("cursor","pointer");if(!I){"none"==M&&(K=t?(this.end+1-L)*C-c:C*L+c);"3d"==M&&(t?(K=(this.end+1-L)*C-c-1E3*this.depthCount,ya+=H*Z,ka+=H*Z,v.y+=H*Z):(K=(C-c)*(L+1)+1E3*this.depthCount,Ea+=Q*Z,la+=Q*Z,v.y+=Q*Z));
	if("regular"==M||"100%"==M)K=t?0<Ia.value?(this.end+1-L)*C+c:(this.end+1-L)*C-c:0<Ia.value?C*L+c:C*L-c;this.columnsArray.push({column:va,depth:K});v.x=t?R+J/2:S+J/2;this.ownColumns.push(va);this.animateColumns(va,L,E,O,F,N);this.addListeners(za,v);void 0!==this.tabIndex&&za.setAttr("tabindex",this.tabIndex)}this.columnsSet.push(za)}}break;case "candlestick":if(!isNaN(ua)&&!isNaN(W)){var Xa,cb;Ca=Ha;void 0!=v.lineColor&&(Ca=v.lineColor);ya=E;la=Ea=F;ka=E;if(t){"open"==l&&(ka=O);"high"==l&&(ka=sa);
	"low"==l&&(ka=qa);E=d.fitToBounds(E,0,pa);O=d.fitToBounds(O,0,pa);qa=d.fitToBounds(qa,0,pa);sa=d.fitToBounds(sa,0,pa);if(0===E&&0===O&&0===qa&&0===sa)continue;if(E==pa&&O==pa&&qa==pa&&sa==pa)continue;R=F-k/2;S=O;J=k;R+J>q&&(J=q-R);0>R&&(J+=R,R=0);if(R<q&&0<J){var Eb,Fb;W>ua?(Eb=[E,sa],Fb=[O,qa]):(Eb=[O,sa],Fb=[E,qa]);!isNaN(sa)&&!isNaN(qa)&&F<q&&0<F&&(Xa=d.line(g,Eb,[F,F],Ca,X,da),cb=d.line(g,Fb,[F,F],Ca,X,da));ba=E-O;va=new d.Cuboid(g,ba,J,H,Q,Na,Ya,da,Ca,X,ga,w,t,ea,bb,mb,aa)}}else{"open"==l&&(la=
	N);"high"==l&&(la=ta);"low"==l&&(la=ra);F=d.fitToBounds(F,0,Fa);N=d.fitToBounds(N,0,Fa);ra=d.fitToBounds(ra,0,Fa);ta=d.fitToBounds(ta,0,Fa);if(0===F&&0===N&&0===ra&&0===ta)continue;if(F==Fa&&N==Fa&&ra==Fa&&ta==Fa)continue;S=E-k/2;R=N+da/2;J=k;S+J>n&&(J=n-S);0>S&&(J+=S,S=0);ba=F-N;if(S<n&&0<J){Bb&&W>=ua&&(Va=0);var va=new d.Cuboid(g,J,ba,H,Q,Na,Va,da,Ca,X,ga,w,t,ea,bb,mb,aa),Gb,Hb;W>ua?(Gb=[F,ta],Hb=[N,ra]):(Gb=[N,ta],Hb=[F,ra]);!isNaN(ta)&&!isNaN(ra)&&E<n&&0<E&&(Xa=d.line(g,[E,E],Gb,Ca,X,da),cb=d.line(g,
	[E,E],Hb,Ca,X,da),d.setCN(a,Xa,this.bcn+"line-high"),v.className&&d.setCN(a,Xa,v.className,!0),d.setCN(a,cb,this.bcn+"line-low"),v.className&&d.setCN(a,cb,v.className,!0))}}va&&(za=va.set,v.columnGraphics=za,fa.push(za),za.translate(S,R-da/2),(v.url||this.showHandOnHover)&&za.setAttr("cursor","pointer"),Xa&&(fa.push(Xa),fa.push(cb)),I||(v.x=t?R+J/2:S+J/2,this.animateColumns(va,L,E,O,F,N),this.addListeners(za,v),void 0!==this.tabIndex&&za.setAttr("tabindex",this.tabIndex)))}break;case "ohlc":if(!(isNaN(ua)||
	isNaN(zb)||isNaN(Ab)||isNaN(W))){var Sb=g.set();fa.push(Sb);W<ua&&(v.isNegative=!0,void 0!=Ja&&(Ha=Ja));void 0!=v.lineColor&&(Ha=v.lineColor);var pb,qb,rb;if(t){la=F;ka=E;"open"==l&&(ka=O);"high"==l&&(ka=sa);"low"==l&&(ka=qa);qa=d.fitToBounds(qa,0,pa);sa=d.fitToBounds(sa,0,pa);if(0===E&&0===O&&0===qa&&0===sa)continue;if(E==pa&&O==pa&&qa==pa&&sa==pa)continue;var Ib=F-k/2,Ib=d.fitToBounds(Ib,0,q),Tb=d.fitToBounds(F,0,q),Jb=F+k/2,Jb=d.fitToBounds(Jb,0,q);0<=O&&O<=pa&&(qb=d.line(g,[O,O],[Ib,Tb],Ha,X,
	da,ea));0<F&&F<q&&(pb=d.line(g,[qa,sa],[F,F],Ha,X,da,ea));0<=E&&E<=pa&&(rb=d.line(g,[E,E],[Tb,Jb],Ha,X,da,ea))}else{la=F;"open"==l&&(la=N);"high"==l&&(la=ta);"low"==l&&(la=ra);var ka=E,ra=d.fitToBounds(ra,0,Fa),ta=d.fitToBounds(ta,0,Fa),Kb=E-k/2,Kb=d.fitToBounds(Kb,0,n),Ub=d.fitToBounds(E,0,n),Lb=E+k/2,Lb=d.fitToBounds(Lb,0,n);0<=N&&N<=Fa&&(qb=d.line(g,[Kb,Ub],[N,N],Ha,X,da,ea));0<E&&E<n&&(pb=d.line(g,[E,E],[ra,ta],Ha,X,da,ea));0<=F&&F<=Fa&&(rb=d.line(g,[Ub,Lb],[F,F],Ha,X,da,ea))}fa.push(qb);fa.push(pb);
	fa.push(rb);d.setCN(a,qb,this.bcn+"stroke-open");d.setCN(a,rb,this.bcn+"stroke-close");d.setCN(a,pb,this.bcn+"stroke");v.className&&d.setCN(a,Sb,v.className,!0);ya=E;Ea=F}}if(!I&&!isNaN(W)){var Vb=this.hideBulletsCount;if(this.end-this.start<=Vb||0===Vb){var Wb=this.createBullet(v,ka,la,L),Xb=this.labelText;if(Xb&&!isNaN(ya)&&!isNaN(ya)){var gc=this.createLabel(v,Xb),Yb=0;Wb&&(Yb=Wb.size);this.positionLabel(v,ya,Ea,gc,Yb)}if("regular"==M||"100%"==M){var Zb=f.totalText;if(Zb){var Oa=this.createLabel(v,
	Zb,f.totalTextColor);d.setCN(a,Oa,this.bcn+"label-total");this.allBullets.push(Oa);if(Oa){var $b=Oa.getBBox(),ac=$b.width,bc=$b.height,db,eb,sb=f.totalTextOffset,cc=f.totals[L];cc&&cc.remove();var fb=0;"column"!=h&&(fb=this.bulletSize);t?(eb=Ea,db=0>W?E-ac/2-2-fb-sb:E+ac/2+3+fb+sb):(db=ya,eb=0>W?F+bc/2+fb+sb:F-bc/2-3-fb-sb);Oa.translate(db,eb);f.totals[L]=Oa;t?(0>eb||eb>q)&&Oa.remove():(0>db||db>n)&&Oa.remove()}}}}}}}this.lastDataItem=v;if("line"==h||"step"==h||"smoothedLine"==h)"smoothedLine"==h?
	this.drawSmoothedGraph(x,u,T,U):this.drawLineGraph(x,u,T,U),I||this.launchAnimation();this.bulletsHidden&&this.hideBullets();this.customBulletsHidden&&this.hideCustomBullets()},animateColumns:function(a,b){var c=this,e=c.chart.startDuration;0<e&&!c.animationPlayed&&(c.seqAn?(a.set.hide(),c.animationArray.push(a),e=setTimeout(function(){c.animate.call(c)},e/(c.end-c.start+1)*(b-c.start)*1E3),c.timeOuts.push(e)):c.animate(a),c.chart.animatable.push(a))},createLabel:function(a,b,c){var e=this.chart,
	g=a.labelColor;g||(g=this.color);g||(g=e.color);c&&(g=c);c=this.fontSize;void 0===c&&(this.fontSize=c=e.fontSize);var f=this.labelFunction;b=e.formatString(b,a);b=d.cleanFromEmpty(b);f&&(b=f(a,b));if(void 0!==b&&""!==b)return a=d.text(this.container,b,g,e.fontFamily,c),a.node.style.pointerEvents="none",d.setCN(e,a,this.bcn+"label"),this.bulletSet.push(a),a},positiveClip:function(a){a.clipRect(this.pmx,this.pmy,this.pmw,this.pmh)},negativeClip:function(a){a.clipRect(this.nmx,this.nmy,this.nmw,this.nmh)},
	drawLineGraph:function(a,b,c,e){var g=this;if(1<a.length){var f=g.noRounding,h=g.set,k=g.chart,l=g.container,m=l.set(),n=l.set();h.push(n);h.push(m);var q=g.lineAlpha,p=g.lineThickness,h=g.fillAlphas,t=g.lineColorR,r=g.negativeLineAlpha;isNaN(r)&&(r=q);var w=g.lineColorSwitched;w&&(t=w);var w=g.fillColorsR,y=g.fillColorsSwitched;y&&(w=y);var x=g.dashLength;(y=g.dashLengthSwitched)&&(x=y);var y=g.negativeLineColor,u=g.negativeFillColors,A=g.negativeFillAlphas,z=g.baseCoord;0!==g.negativeBase&&(z=g.valueAxis.getCoordinate(g.negativeBase,
	f),z>g.height&&(z=g.height),0>z&&(z=0));q=d.line(l,a,b,t,q,p,x,!1,!0,f);q.node.setAttribute("stroke-linejoin","round");d.setCN(k,q,g.bcn+"stroke");m.push(q);m.click(function(a){g.handleGraphEvent(a,"clickGraph")}).mouseover(function(a){g.handleGraphEvent(a,"rollOverGraph")}).mouseout(function(a){g.handleGraphEvent(a,"rollOutGraph")}).touchmove(function(a){g.chart.handleMouseMove(a)}).touchend(function(a){g.chart.handleTouchEnd(a)});void 0===y||g.useNegativeColorIfDown||(p=d.line(l,a,b,y,r,p,x,!1,
	!0,f),p.node.setAttribute("stroke-linejoin","round"),d.setCN(k,p,g.bcn+"stroke"),d.setCN(k,p,g.bcn+"stroke-negative"),n.push(p));if(0<h||0<A)if(p=a.join(";").split(";"),r=b.join(";").split(";"),q=k.type,"serial"==q||"radar"==q?0<c.length?(c.reverse(),e.reverse(),p=a.concat(c),r=b.concat(e)):"radar"==q?(r.push(0),p.push(0)):g.rotate?(r.push(r[r.length-1]),p.push(z),r.push(r[0]),p.push(z),r.push(r[0]),p.push(p[0])):(p.push(p[p.length-1]),r.push(z),p.push(p[0]),r.push(z),p.push(a[0]),r.push(r[0])):"xy"==
	q&&(b=g.fillToAxis)&&(d.isString(b)&&(b=k.getValueAxisById(b)),"H"==b.orientation?(z="top"==b.position?0:b.height,p.push(p[p.length-1]),r.push(z),p.push(p[0]),r.push(z),p.push(a[0]),r.push(r[0])):(z="left"==b.position?0:b.width,r.push(r[r.length-1]),p.push(z),r.push(r[0]),p.push(z),r.push(r[0]),p.push(p[0]))),a=g.gradientRotation,0<h&&(b=d.polygon(l,p,r,w,h,1,"#000",0,a,f),b.pattern(g.pattern,NaN,k.path),d.setCN(k,b,g.bcn+"fill"),m.push(b)),u||void 0!==y)isNaN(A)&&(A=h),u||(u=y),f=d.polygon(l,p,r,
	u,A,1,"#000",0,a,f),d.setCN(k,f,g.bcn+"fill"),d.setCN(k,f,g.bcn+"fill-negative"),f.pattern(g.pattern,NaN,k.path),n.push(f),n.click(function(a){g.handleGraphEvent(a,"clickGraph")}).mouseover(function(a){g.handleGraphEvent(a,"rollOverGraph")}).mouseout(function(a){g.handleGraphEvent(a,"rollOutGraph")}).touchmove(function(a){g.chart.handleMouseMove(a)}).touchend(function(a){g.chart.handleTouchEnd(a)});g.applyMask(n,m)}},applyMask:function(a,b){var c=a.length();"serial"!=this.chart.type||this.scrollbar||
	(this.positiveClip(b),0<c&&this.negativeClip(a))},drawSmoothedGraph:function(a,b,c,e){if(1<a.length){var g=this.set,f=this.chart,h=this.container,k=h.set(),l=h.set();g.push(l);g.push(k);var m=this.lineAlpha,n=this.lineThickness,g=this.dashLength,q=this.fillAlphas,p=this.lineColorR,t=this.fillColorsR,r=this.negativeLineColor,w=this.negativeFillColors,y=this.negativeFillAlphas,x=this.baseCoord,u=this.lineColorSwitched;u&&(p=u);(u=this.fillColorsSwitched)&&(t=u);var A=this.negativeLineAlpha;isNaN(A)&&
	(A=m);u=this.getGradRotation();m=new d.Bezier(h,a,b,p,m,n,t,0,g,void 0,u);d.setCN(f,m,this.bcn+"stroke");k.push(m.path);void 0!==r&&(n=new d.Bezier(h,a,b,r,A,n,t,0,g,void 0,u),d.setCN(f,n,this.bcn+"stroke"),d.setCN(f,n,this.bcn+"stroke-negative"),l.push(n.path));0<q&&(m=a.join(";").split(";"),p=b.join(";").split(";"),n="",0<c.length?(c.push("M"),e.push("M"),c.reverse(),e.reverse(),m=a.concat(c),p=b.concat(e)):(this.rotate?(n+=" L"+x+","+b[b.length-1],n+=" L"+x+","+b[0]):(n+=" L"+a[a.length-1]+","+
	x,n+=" L"+a[0]+","+x),n+=" L"+a[0]+","+b[0]),c=new d.Bezier(h,m,p,NaN,0,0,t,q,g,n,u),d.setCN(f,c,this.bcn+"fill"),c.path.pattern(this.pattern,NaN,f.path),k.push(c.path),w||void 0!==r)&&(y||(y=q),w||(w=r),a=new d.Bezier(h,a,b,NaN,0,0,w,y,g,n,u),a.path.pattern(this.pattern,NaN,f.path),d.setCN(f,a,this.bcn+"fill"),d.setCN(f,a,this.bcn+"fill-negative"),l.push(a.path));this.applyMask(l,k)}},launchAnimation:function(){var a=this,b=a.chart.startDuration;if(0<b&&!a.animationPlayed){var c=a.set,e=a.bulletSet;
	d.VML||(c.attr({opacity:a.startAlpha}),e.attr({opacity:a.startAlpha}));c.hide();e.hide();a.seqAn?(b=setTimeout(function(){a.animateGraphs.call(a)},a.index*b*1E3),a.timeOuts.push(b)):a.animateGraphs()}},animateGraphs:function(){var a=this.chart,b=this.set,c=this.bulletSet,e=this.x,d=this.y;b.show();c.show();var f=a.startDuration,h=a.startEffect;b&&(this.rotate?(b.translate(-1E3,d),c.translate(-1E3,d)):(b.translate(e,-1E3),c.translate(e,-1E3)),b.animate({opacity:1,translate:e+","+d},f,h),c.animate({opacity:1,
	translate:e+","+d},f,h),a.animatable.push(b))},animate:function(a){var b=this.chart,c=this.animationArray;!a&&0<c.length&&(a=c[0],c.shift());c=d[d.getEffect(b.startEffect)];b=b.startDuration;a&&(this.rotate?a.animateWidth(b,c):a.animateHeight(b,c),a.set.show())},legendKeyColor:function(){var a=this.legendColor,b=this.lineAlpha;void 0===a&&(a=this.lineColorR,0===b&&(b=this.fillColorsR)&&(a="object"==typeof b?b[0]:b));return a},legendKeyAlpha:function(){var a=this.legendAlpha;void 0===a&&(a=this.lineAlpha,
	this.fillAlphas>a&&(a=this.fillAlphas),0===a&&(a=this.bulletAlpha),0===a&&(a=1));return a},createBullet:function(a,b,c){if(!isNaN(b)&&!isNaN(c)&&("none"!=this.bullet||this.customBullet||a.bullet||a.customBullet)){var e=this.chart,g=this.container,f=this.bulletOffset,h=this.bulletSize;isNaN(a.bulletSize)||(h=a.bulletSize);var k=a.values.value,l=this.maxValue,m=this.minValue,n=this.maxBulletSize,q=this.minBulletSize;isNaN(l)||(isNaN(k)||(h=(k-m)/(l-m)*(n-q)+q),m==l&&(h=n));l=h;this.bulletAxis&&(h=a.values.error,
	isNaN(h)||(k=h),h=this.bulletAxis.stepWidth*k);h<this.minBulletSize&&(h=this.minBulletSize);this.rotate?b=a.isNegative?b-f:b+f:c=a.isNegative?c+f:c-f;q=this.bulletColorR;a.lineColor&&void 0===this.bulletColor&&(this.bulletColorSwitched=a.lineColor);this.bulletColorSwitched&&(q=this.bulletColorSwitched);a.isNegative&&void 0!==this.bulletColorNegative&&(q=this.bulletColorNegative);void 0!==a.color&&(q=a.color);var p;"xy"==e.type&&this.valueField&&(p=this.pattern,a.pattern&&(p=a.pattern));f=this.bullet;
	a.bullet&&(f=a.bullet);var k=this.bulletBorderThickness,m=this.bulletBorderColorR,n=this.bulletBorderAlpha,t=this.bulletAlpha;m||(m=q);this.useLineColorForBulletBorder&&(m=this.lineColorR,a.isNegative&&this.negativeLineColor&&(m=this.negativeLineColor),this.lineColorSwitched&&(m=this.lineColorSwitched));var r=a.alpha;isNaN(r)||(t=r);p=d.bullet(g,f,h,q,t,k,m,n,l,0,p,e.path);l=this.customBullet;a.customBullet&&(l=a.customBullet);l&&(p&&p.remove(),"function"==typeof l?(l=new l,l.chart=e,a.bulletConfig&&
	(l.availableSpace=c,l.graph=this,l.graphDataItem=a,l.bulletY=c,a.bulletConfig.minCoord=this.minCoord-c,l.bulletConfig=a.bulletConfig),l.write(g),p&&l.showBullet&&l.set.push(p),a.customBulletGraphics=l.cset,p=l.set):(p=g.set(),l=g.image(l,0,0,h,h),p.push(l),this.centerCustomBullets&&l.translate(-h/2,-h/2)));if(p){(a.url||this.showHandOnHover)&&p.setAttr("cursor","pointer");if("serial"==e.type||"gantt"==e.type)if(-.5>b||b>this.width||c<-h/2||c>this.height)p.remove(),p=null;p&&(this.bulletSet.push(p),
	p.translate(b,c),this.addListeners(p,a),this.allBullets.push(p));a.bx=b;a.by=c;d.setCN(e,p,this.bcn+"bullet");a.className&&d.setCN(e,p,a.className,!0)}if(p){p.size=h||0;if(e=this.bulletHitAreaSize)g=d.circle(g,e,"#FFFFFF",.001,0),g.translate(b,c),a.hitBullet=g,this.bulletSet.push(g),this.addListeners(g,a);a.bulletGraphics=p;void 0!==this.tabIndex&&p.setAttr("tabindex",this.tabIndex)}else p={size:0};p.graphDataItem=a;return p}},showBullets:function(){var a=this.allBullets,b;this.bulletsHidden=!1;for(b=
	0;b<a.length;b++)a[b].show()},hideBullets:function(){var a=this.allBullets,b;this.bulletsHidden=!0;for(b=0;b<a.length;b++)a[b].hide()},showCustomBullets:function(){var a=this.allBullets,b;this.customBulletsHidden=!1;for(b=0;b<a.length;b++){var c=a[b].graphDataItem;c.customBulletGraphics&&c.customBulletGraphics.show()}},hideCustomBullets:function(){var a=this.allBullets,b;this.customBulletsHidden=!0;for(b=0;b<a.length;b++){var c=a[b].graphDataItem;c.customBulletGraphics&&c.customBulletGraphics.hide()}},
	addListeners:function(a,b){var c=this;a.mouseover(function(a){c.handleRollOver(b,a)}).mouseout(function(a){c.handleRollOut(b,a)}).touchend(function(a){c.handleRollOver(b,a);c.chart.panEventsEnabled&&c.handleClick(b,a)}).touchstart(function(a){c.handleRollOver(b,a)}).click(function(a){c.handleClick(b,a)}).dblclick(function(a){c.handleDoubleClick(b,a)}).contextmenu(function(a){c.handleRightClick(b,a)});var e=c.chart;if(e.accessible&&c.accessibleLabel){var d=e.formatString(c.accessibleLabel,b);e.makeAccessible(a,
	d)}},handleRollOver:function(a,b){this.handleGraphEvent(b,"rollOverGraph");if(a){var c=this.chart;a.bulletConfig&&(c.isRolledOverBullet=!0);var e={type:"rollOverGraphItem",item:a,index:a.index,graph:this,target:this,chart:this.chart,event:b};this.fire(e);c.fire(e);clearTimeout(c.hoverInt);(c=c.chartCursor)&&c.valueBalloonsEnabled||this.showGraphBalloon(a,"V",!0)}},handleRollOut:function(a,b){var c=this.chart;if(a){var e={type:"rollOutGraphItem",item:a,index:a.index,graph:this,target:this,chart:this.chart,
	event:b};this.fire(e);c.fire(e);c.isRolledOverBullet=!1}this.handleGraphEvent(b,"rollOutGraph");(c=c.chartCursor)&&c.valueBalloonsEnabled||this.hideBalloon()},handleClick:function(a,b){if(!this.chart.checkTouchMoved()&&this.chart.checkTouchDuration(b)){if(a){var c={type:"clickGraphItem",item:a,index:a.index,graph:this,target:this,chart:this.chart,event:b};this.fire(c);this.chart.fire(c);d.getURL(a.url,this.urlTarget)}this.handleGraphEvent(b,"clickGraph")}},handleGraphEvent:function(a,b){var c={type:b,
	graph:this,target:this,chart:this.chart,event:a};this.fire(c);this.chart.fire(c)},handleRightClick:function(a,b){if(a){var c={type:"rightClickGraphItem",item:a,index:a.index,graph:this,target:this,chart:this.chart,event:b};this.fire(c);this.chart.fire(c)}},handleDoubleClick:function(a,b){if(a){var c={type:"doubleClickGraphItem",item:a,index:a.index,graph:this,target:this,chart:this.chart,event:b};this.fire(c);this.chart.fire(c)}},zoom:function(a,b){this.start=a;this.end=b;this.draw()},changeOpacity:function(a){var b=
	this.set;b&&b.setAttr("opacity",a);if(b=this.ownColumns){var c;for(c=0;c<b.length;c++){var e=b[c].set;e&&e.setAttr("opacity",a)}}(b=this.bulletSet)&&b.setAttr("opacity",a)},destroy:function(){d.remove(this.set);d.remove(this.bulletSet);var a=this.timeOuts;if(a){var b;for(b=0;b<a.length;b++)clearTimeout(a[b])}this.timeOuts=[]},createBalloon:function(){var a=this.chart;this.balloon?this.balloon.destroy&&this.balloon.destroy():this.balloon={};var b=this.balloon;d.extend(b,a.balloon,!0);b.chart=a;b.mainSet=
	a.plotBalloonsSet;b.className=this.id},hideBalloon:function(){var a=this,b=a.chart;b.chartCursor?b.chartCursor.valueBalloonsEnabled||b.hideBalloon():b.hideBalloon();clearTimeout(a.hoverInt);a.hoverInt=setTimeout(function(){a.hideBalloonReal.call(a)},b.hideBalloonTime)},hideBalloonReal:function(){this.balloon&&this.balloon.hide();this.fixBulletSize()},fixBulletSize:function(){if(d.isModern){var a=this.resizedDItem;if(a){var b=a.bulletGraphics;if(b&&!b.doNotScale){b.translate(a.bx,a.by,1);var c=this.bulletAlpha;
	isNaN(a.alpha)||(c=a.alpha);b.setAttr("fill-opacity",c);b.setAttr("stroke-opacity",this.bulletBorderAlpha)}}this.resizedDItem=null}},showGraphBalloon:function(a,b,c,e,g){if(a){var f=this.chart,h=this.balloon,k=0,l=0,m=f.chartCursor,n=!0;m?m.valueBalloonsEnabled||(h=f.balloon,k=this.x,l=this.y,n=!1):(h=f.balloon,k=this.x,l=this.y,n=!1);clearTimeout(this.hoverInt);if(f.chartCursor&&(this.currentDataItem=a,"serial"==f.type&&f.isRolledOverBullet&&f.chartCursor.valueBalloonsEnabled)){this.hideBalloonReal();
	return}this.resizeBullet(a,e,g);if(h&&h.enabled&&this.showBalloon&&!this.hidden){var m=f.formatString(this.balloonText,a,!0),q=this.balloonFunction;q&&(m=q(a,a.graph));m&&(m=d.cleanFromEmpty(m));m&&""!==m?(e=f.getBalloonColor(this,a),h.drop||(h.pointerOrientation=b),b=a.x,g=a.y,f.rotate&&(b=a.y,g=a.x),b+=k,g+=l,isNaN(b)||isNaN(g)?this.hideBalloonReal():(a=this.width,q=this.height,n&&h.setBounds(k,l,a+k,q+l),h.changeColor(e),h.setPosition(b,g),h.fixPrevious(),h.fixedPosition&&(c=!1),!c&&"radar"!=f.type&&
	(b<k||b>a+k||g<l-.5||g>q+l)?(h.showBalloon(m),h.hide(0)):(h.followCursor(c),h.showBalloon(m)))):(this.hideBalloonReal(),h.hide(),this.resizeBullet(a,e,g))}else this.hideBalloonReal()}},resizeBullet:function(a,b,c){this.fixBulletSize();if(a&&d.isModern&&(1!=b||!isNaN(c))){var e=a.bulletGraphics;e&&!e.doNotScale&&(e.translate(a.bx,a.by,b),isNaN(c)||(e.setAttr("fill-opacity",c),e.setAttr("stroke-opacity",c)),this.resizedDItem=a)}}})})();(function(){var d=window.AmCharts;d.ChartCursor=d.Class({construct:function(a){this.cname="ChartCursor";this.createEvents("changed","zoomed","onHideCursor","onShowCursor","draw","selected","moved","panning","zoomStarted");this.enabled=!0;this.cursorAlpha=1;this.selectionAlpha=.2;this.cursorColor="#CC0000";this.categoryBalloonAlpha=1;this.color="#FFFFFF";this.type="cursor";this.zoomed=!1;this.zoomable=!0;this.pan=!1;this.categoryBalloonDateFormat="MMM DD, YYYY";this.categoryBalloonText="[[category]]";
	this.categoryBalloonEnabled=this.valueBalloonsEnabled=!0;this.rolledOver=!1;this.cursorPosition="middle";this.bulletsEnabled=this.skipZoomDispatch=!1;this.bulletSize=8;this.selectWithoutZooming=this.oneBalloonOnly=!1;this.graphBulletSize=1.7;this.animationDuration=.3;this.zooming=!1;this.adjustment=0;this.avoidBalloonOverlapping=!0;this.leaveCursor=!1;this.leaveAfterTouch=!0;this.valueZoomable=!1;this.balloonPointerOrientation="horizontal";this.hLineEnabled=this.vLineEnabled=!0;this.vZoomEnabled=
	this.hZoomEnabled=!1;d.applyTheme(this,a,this.cname)},draw:function(){this.destroy();var a=this.chart;a.panRequired=!0;var b=a.container;this.rotate=a.rotate;this.container=b;this.prevLineHeight=this.prevLineWidth=NaN;b=b.set();b.translate(this.x,this.y);this.set=b;a.cursorSet.push(b);this.createElements();d.isString(this.limitToGraph)&&(this.limitToGraph=d.getObjById(a.graphs,this.limitToGraph),this.fullWidth=!1,this.cursorPosition="middle");this.pointer=this.balloonPointerOrientation.substr(0,1).toUpperCase();
	this.isHidden=!1;this.hideLines();this.valueLineAxis||(this.valueLineAxis=a.valueAxes[0])},createElements:function(){var a=this,b=a.chart,c=b.dx,e=b.dy,g=a.width,f=a.height,h,k,l=a.cursorAlpha,m=a.valueLineAlpha;a.rotate?(h=m,k=l):(k=m,h=l);"xy"==b.type&&(k=l,void 0!==m&&(k=m),h=l);a.vvLine=d.line(a.container,[c,0,0],[e,0,f],a.cursorColor,h,1);d.setCN(b,a.vvLine,"cursor-line");d.setCN(b,a.vvLine,"cursor-line-vertical");a.hhLine=d.line(a.container,[0,g,g+c],[0,0,e],a.cursorColor,k,1);d.setCN(b,a.hhLine,
	"cursor-line");d.setCN(b,a.hhLine,"cursor-line-horizontal");a.vLine=a.rotate?a.vvLine:a.hhLine;a.set.push(a.vvLine);a.set.push(a.hhLine);a.set.node.style.pointerEvents="none";a.fullLines=a.container.set();b=b.cursorLineSet;b.push(a.fullLines);b.translate(a.x,a.y);b.clipRect(-1,-1,g+2,f+2);void 0!==a.tabIndex&&(b.setAttr("tabindex",a.tabIndex),b.keyup(function(b){a.handleKeys(b)}).focus(function(b){a.showCursor()}).blur(function(b){a.hideCursor()}));a.set.clipRect(0,0,g,f)},handleKeys:function(a){var b=
	this.prevIndex,c=this.chart;if(c){var e=c.chartData;e&&(isNaN(b)&&(b=e.length-1),37!=a.keyCode&&40!=a.keyCode||b--,39!=a.keyCode&&38!=a.keyCode||b++,b=d.fitToBounds(b,c.startIndex,c.endIndex),(a=this.chart.chartData[b])&&this.setPosition(a.x.categoryAxis),this.prevIndex=b)}},update:function(){var a=this.chart;if(a){var b=a.mouseX-this.x,c=a.mouseY-this.y;this.mouseX=b;this.mouseY=c;this.mouse2X=a.mouse2X-this.x;this.mouse2Y=a.mouse2Y-this.y;var e;if(a.chartData&&0<a.chartData.length){this.mouseIsOver()?
	(this.hideGraphBalloons=!1,this.rolledOver=e=!0,this.updateDrawing(),this.vvLine&&isNaN(this.fx)&&(a.rotate||!this.limitToGraph)&&this.vvLine.translate(b,0),!this.hhLine||!isNaN(this.fy)||a.rotate&&this.limitToGraph||this.hhLine.translate(0,c),isNaN(this.mouse2X)?this.dispatchMovedEvent(b,c):e=!1):this.forceShow||this.hideCursor();if(this.zooming){if(!isNaN(this.mouse2X)){isNaN(this.mouse2X0)||this.dispatchPanEvent();return}if(this.pan){this.dispatchPanEvent();return}(this.hZoomEnabled||this.vZoomEnabled)&&
	this.zooming&&this.updateSelection()}e&&this.showCursor()}}},updateDrawing:function(){this.drawing&&this.chart.setMouseCursor("crosshair");if(this.drawingNow){d.remove(this.drawingLine);var a=this.chart,b=a.marginTop,a=a.marginLeft;this.drawingLine=d.line(this.container,[this.drawStartX+a,this.mouseX+a],[this.drawStartY+b,this.mouseY+b],this.cursorColor,1,1)}},fixWidth:function(a){if(this.fullWidth&&this.prevLineWidth!=a){var b=this.vvLine,c=0;b&&(b.remove(),c=b.x);b=this.container.set();b.translate(c,
	0);c=d.rect(this.container,a,this.height,this.cursorColor,this.cursorAlpha,this.cursorAlpha,this.cursorColor);d.setCN(this.chart,c,"cursor-fill");c.translate(-a/2-1,0);b.push(c);this.vvLine=b;this.fullLines.push(b);this.prevLineWidth=a}},fixHeight:function(a){if(this.fullWidth&&this.prevLineHeight!=a){var b=this.hhLine,c=0;b&&(b.remove(),c=b.y);b=this.container.set();b.translate(0,c);c=d.rect(this.container,this.width,a,this.cursorColor,this.cursorAlpha);c.translate(0,-a/2);b.push(c);this.fullLines.push(b);
	this.hhLine=b;this.prevLineHeight=a}},fixVLine:function(a,b){if(!isNaN(a)){if(isNaN(this.prevLineX)){var c=0,e=this.mouseX;if(this.limitToGraph){var d=this.chart.categoryAxis;d&&(this.chart.rotate||(c="bottom"==d.position?this.height:-this.height),e=a)}this.vvLine.translate(e,c)}else this.prevLineX!=a&&this.vvLine.translate(this.prevLineX,this.prevLineY);this.fx=a;this.prevLineX!=a&&(c=this.animationDuration,this.zooming&&(c=0),this.vvLine.stop(),this.vvLine.animate({translate:a+","+b},c,"easeOutSine"),
	this.prevLineX=a,this.prevLineY=b)}},fixHLine:function(a,b){if(!isNaN(a)){if(isNaN(this.prevLineY)){var c=0,e=this.mouseY;if(this.limitToGraph){var d=this.chart.categoryAxis;d&&(this.chart.rotate&&(c="right"==d.position?this.width:-this.width),e=a)}this.hhLine.translate(c,e)}else this.prevLineY!=a&&this.hhLine.translate(this.prevLineX,this.prevLineY);this.fy=a;this.prevLineY!=a&&(c=this.animationDuration,this.zooming&&(c=0),this.hhLine.stop(),this.hhLine.animate({translate:b+","+a},c,"easeOutSine"),
	this.prevLineY=a,this.prevLineX=b)}},hideCursor:function(a){this.forceShow=!1;this.chart.wasTouched&&this.leaveAfterTouch||this.isHidden||this.leaveCursor||(this.hideCursorReal(),a?this.chart.handleCursorHide():this.fire({target:this,chart:this.chart,type:"onHideCursor"}),this.chart.setMouseCursor("auto"))},hideCursorReal:function(){this.hideLines();this.isHidden=!0;this.index=this.prevLineY=this.prevLineX=this.mouseY0=this.mouseX0=this.fy=this.fx=NaN},hideLines:function(){this.vvLine&&this.vvLine.hide();
	this.hhLine&&this.hhLine.hide();this.fullLines&&this.fullLines.hide();this.isHidden=!0;this.chart.handleCursorHide()},showCursor:function(a){!this.drawing&&this.enabled&&(this.vLineEnabled&&this.vvLine&&this.vvLine.show(),this.hLineEnabled&&this.hhLine&&this.hhLine.show(),this.isHidden=!1,this.updateFullLine(),a||this.fire({target:this,chart:this.chart,type:"onShowCursor"}),this.pan&&this.chart.setMouseCursor("move"))},updateFullLine:function(){this.zooming&&this.fullWidth&&this.selection&&(this.rotate?
	0<this.selection.height&&this.hhLine.hide():0<this.selection.width&&this.vvLine.hide())},updateSelection:function(){if(!this.pan&&this.enabled){var a=this.mouseX,b=this.mouseY;isNaN(this.fx)||(a=this.fx);isNaN(this.fy)||(b=this.fy);this.clearSelection();var c=this.mouseX0,e=this.mouseY0,g=this.width,f=this.height,a=d.fitToBounds(a,0,g),b=d.fitToBounds(b,0,f),h;a<c&&(h=a,a=c,c=h);b<e&&(h=b,b=e,e=h);this.hZoomEnabled?g=a-c:c=0;this.vZoomEnabled?f=b-e:e=0;isNaN(this.mouse2X)&&0<Math.abs(g)&&0<Math.abs(f)&&
	(a=this.chart,b=d.rect(this.container,g,f,this.cursorColor,this.selectionAlpha),d.setCN(a,b,"cursor-selection"),b.width=g,b.height=f,b.translate(c,e),this.set.push(b),this.selection=b);this.updateFullLine()}},mouseIsOver:function(){var a=this.mouseX,b=this.mouseY;if(this.justReleased)return this.justReleased=!1,!0;if(this.mouseIsDown)return!0;if(!this.chart.mouseIsOver)return this.handleMouseOut(),!1;if(0<a&&a<this.width&&0<b&&b<this.height)return!0;this.handleMouseOut()},fixPosition:function(){this.prevY=
	this.prevX=NaN},handleMouseDown:function(){this.update();if(this.mouseIsOver())if(this.mouseIsDown=!0,this.mouseX0=this.mouseX,this.mouseY0=this.mouseY,this.mouse2X0=this.mouse2X,this.mouse2Y0=this.mouse2Y,this.drawing)this.drawStartY=this.mouseY,this.drawStartX=this.mouseX,this.drawingNow=!0;else if(this.dispatchMovedEvent(this.mouseX,this.mouseY),!this.pan&&isNaN(this.mouse2X0)&&(isNaN(this.fx)||(this.mouseX0=this.fx),isNaN(this.fy)||(this.mouseY0=this.fy)),this.hZoomEnabled||this.vZoomEnabled){this.zooming=
	!0;var a={chart:this.chart,target:this,type:"zoomStarted"};a.x=this.mouseX/this.width;a.y=this.mouseY/this.height;this.index0=a.index=this.index;this.timestamp0=this.timestamp;this.fire(a)}},registerInitialMouse:function(){},handleReleaseOutside:function(){this.mouseIsDown=!1;if(this.drawingNow){this.drawingNow=!1;d.remove(this.drawingLine);var a=this.drawStartX,b=this.drawStartY,c=this.mouseX,e=this.mouseY,g=this.chart;(2<Math.abs(a-c)||2<Math.abs(b-e))&&this.fire({type:"draw",target:this,chart:g,
	initialX:a,initialY:b,finalX:c,finalY:e})}this.zooming&&(this.zooming=!1,this.selectWithoutZooming?this.dispatchZoomEvent("selected"):(this.hZoomEnabled||this.vZoomEnabled)&&this.dispatchZoomEvent("zoomed"),this.rolledOver&&this.dispatchMovedEvent(this.mouseX,this.mouseY));this.mouse2Y0=this.mouse2X0=this.mouseY0=this.mouseX0=NaN},dispatchZoomEvent:function(a){if(!this.pan){var b=this.selection;if(b&&3<Math.abs(b.width)&&3<Math.abs(b.height)){var c=Math.min(this.index,this.index0),e=Math.max(this.index,
	this.index0),d=c,f=e,h=this.chart,k=h.chartData,l=h.categoryAxis;l&&l.parseDates&&!l.equalSpacing&&(d=k[c]?k[c].time:Math.min(this.timestamp0,this.timestamp),f=k[e]?h.getEndTime(k[e].time):Math.max(this.timestamp0,this.timestamp));var b={type:a,chart:this.chart,target:this,end:f,start:d,startIndex:c,endIndex:e,selectionHeight:b.height,selectionWidth:b.width,selectionY:b.y,selectionX:b.x},m;this.hZoomEnabled&&4<Math.abs(this.mouseX0-this.mouseX)&&(b.startX=this.mouseX0/this.width,b.endX=this.mouseX/
	this.width,m=!0);this.vZoomEnabled&&4<Math.abs(this.mouseY0-this.mouseY)&&(b.startY=1-this.mouseY0/this.height,b.endY=1-this.mouseY/this.height,m=!0);m&&(this.prevY=this.prevX=NaN,this.fire(b),"selected"!=a&&this.clearSelection());this.hideCursor()}}},dispatchMovedEvent:function(a,b,c,e){a=Math.round(a);b=Math.round(b);if(!this.isHidden&&(a!=this.prevX||b!=this.prevY||"changed"==c)){c||(c="moved");var d=this.fx,f=this.fy;isNaN(d)&&(d=a);isNaN(f)&&(f=b);var h=!1;this.zooming&&this.pan&&(h=!0);h={hidden:this.isHidden,
	type:c,chart:this.chart,target:this,x:a,y:b,finalX:d,finalY:f,zooming:this.zooming,panning:h,mostCloseGraph:this.mostCloseGraph,index:this.index,skip:e,hideBalloons:this.hideGraphBalloons};this.prevIndex=this.index;this.rotate?(h.position=b,h.finalPosition=f):(h.position=a,h.finalPosition=d);this.prevX=a;this.prevY=b;e?this.chart.handleCursorMove(h):(this.fire(h),"changed"==c&&this.chart.fire(h))}},dispatchPanEvent:function(){if(this.mouseIsDown){var a=d.roundTo((this.mouseX-this.mouseX0)/this.width,
	3),b=d.roundTo((this.mouseY-this.mouseY0)/this.height,3),c=d.roundTo((this.mouse2X-this.mouse2X0)/this.width,3),e=d.roundTo((this.mouse2Y-this.mouse2Y0)/this.height,2),g=!1;0!==Math.abs(a)&&0!==Math.abs(b)&&(g=!0);if(this.prevDeltaX==a||this.prevDeltaY==b)g=!1;isNaN(c)||isNaN(e)||(0!==Math.abs(c)&&0!==Math.abs(e)&&(g=!0),this.prevDelta2X!=c&&this.prevDelta2Y!=e)||(g=!1);g&&(this.hideLines(),this.fire({type:"panning",chart:this.chart,target:this,deltaX:a,deltaY:b,delta2X:c,delta2Y:e,index:this.index}),
	this.prevDeltaX=a,this.prevDeltaY=b,this.prevDelta2X=c,this.prevDelta2Y=e)}},clearSelection:function(){var a=this.selection;a&&(a.width=0,a.height=0,a.remove())},destroy:function(){this.clear();d.remove(this.selection);this.selection=null;clearTimeout(this.syncTO);d.remove(this.set)},clear:function(){},setTimestamp:function(a){this.timestamp=a},setIndex:function(a,b){a!=this.index&&(this.index=a,b||this.isHidden||this.dispatchMovedEvent(this.mouseX,this.mouseY,"changed"))},handleMouseOut:function(){this.enabled&&
	this.rolledOver&&(this.leaveCursor||this.setIndex(void 0),this.forceShow=!1,this.hideCursor(),this.rolledOver=!1)},showCursorAt:function(a){var b=this.chart.categoryAxis;b&&this.setPosition(b.categoryToCoordinate(a),a)},setPosition:function(a,b){var c=this.chart,e=c.categoryAxis;if(e){var d,f;void 0===b&&(b=e.coordinateToValue(a));e.showBalloonAt(b,a);this.forceShow=!0;e.stickBalloonToCategory?c.rotate?this.fixHLine(a,0):this.fixVLine(a,0):(this.showCursor(),c.rotate?this.hhLine.translate(0,a):this.vvLine.translate(a,
	0));c.rotate?d=a:f=a;c.rotate?(this.vvLine&&this.vvLine.hide(),this.hhLine&&this.hhLine.show()):(this.hhLine&&this.hhLine.hide(),this.vvLine&&this.vvLine.show());this.updateFullLine();this.isHidden=!1;this.dispatchMovedEvent(f,d,"moved",!0)}},enableDrawing:function(a){this.enabled=!a;this.hideCursor();this.drawing=a},syncWithCursor:function(a,b){clearTimeout(this.syncTO);a&&(a.isHidden?this.hideCursor(!0):this.syncWithCursorReal(a,b))},isZooming:function(a){this.zooming=a},syncWithCursorReal:function(a,
	b){var c=a.vvLine,e=a.hhLine;this.index=a.index;this.forceShow=!0;this.zooming&&this.pan||this.showCursor(!0);this.hideGraphBalloons=b;this.justReleased=a.justReleased;this.zooming=a.zooming;this.index0=a.index0;this.mouseX0=a.mouseX0;this.mouseY0=a.mouseY0;this.mouse2X0=a.mouse2X0;this.mouse2Y0=a.mouse2Y0;this.timestamp0=a.timestamp0;this.prevDeltaX=a.prevDeltaX;this.prevDeltaY=a.prevDeltaY;this.prevDelta2X=a.prevDelta2X;this.prevDelta2Y=a.prevDelta2Y;this.fx=a.fx;this.fy=a.fy;a.zooming&&this.updateSelection();
	var d=a.mouseX,f=a.mouseY;this.rotate?(d=NaN,this.vvLine&&this.vvLine.hide(),this.hhLine&&e&&(isNaN(a.fy)?this.hhLine.translate(0,a.mouseY):this.fixHLine(a.fy,0))):(f=NaN,this.hhLine&&this.hhLine.hide(),this.vvLine&&c&&(isNaN(a.fx)?this.vvLine.translate(a.mouseX,0):this.fixVLine(a.fx,0)));this.dispatchMovedEvent(d,f,"moved",!0)}})})();(function(){var d=window.AmCharts;d.SimpleChartScrollbar=d.Class({construct:function(a){this.createEvents("zoomed","zoomStarted","zoomEnded");this.backgroundColor="#D4D4D4";this.backgroundAlpha=1;this.selectedBackgroundColor="#EFEFEF";this.scrollDuration=this.selectedBackgroundAlpha=1;this.resizeEnabled=!0;this.hideResizeGrips=!1;this.scrollbarHeight=20;this.updateOnReleaseOnly=!1;9>document.documentMode&&(this.updateOnReleaseOnly=!0);this.dragIconHeight=this.dragIconWidth=35;this.dragIcon="dragIconRoundBig";
	this.dragCursorHover="cursor: move; cursor: grab; cursor: -moz-grab; cursor: -webkit-grab;";this.dragCursorDown="cursor: move; cursor: grab; cursor: -moz-grabbing; cursor: -webkit-grabbing;";this.vResizeCursor="ns-resize";this.hResizeCursor="ew-resize";this.enabled=!0;this.percentStart=this.offset=0;this.percentEnd=1;d.applyTheme(this,a,"SimpleChartScrollbar")},getPercents:function(){var a=this.getDBox(),b=a.x,c=a.y,e=a.width,a=a.height;this.rotate?(b=1-c/this.height,c=1-(c+a)/this.height):(c=b/this.width,
	b=(b+e)/this.width);this.percentStart=c;this.percentEnd=b},draw:function(){var a=this;a.destroy();if(a.enabled){var b=a.chart.container,c=a.rotate,e=a.chart;e.panRequired=!0;var g=b.set();a.set=g;c?d.setCN(e,g,"scrollbar-vertical"):d.setCN(e,g,"scrollbar-horizontal");e.scrollbarsSet.push(g);var f,h;c?(f=a.scrollbarHeight,h=e.plotAreaHeight):(h=a.scrollbarHeight,f=e.plotAreaWidth);a.width=f;if((a.height=h)&&f){var k=d.rect(b,f,h,a.backgroundColor,a.backgroundAlpha,1,a.backgroundColor,a.backgroundAlpha);
	d.setCN(e,k,"scrollbar-bg");a.bg=k;g.push(k);k=d.rect(b,f,h,"#000",.005);g.push(k);a.invisibleBg=k;k.click(function(){a.handleBgClick()}).mouseover(function(){a.handleMouseOver()}).mouseout(function(){a.handleMouseOut()}).touchend(function(){a.handleBgClick()});k=d.rect(b,f,h,a.selectedBackgroundColor,a.selectedBackgroundAlpha);d.setCN(e,k,"scrollbar-bg-selected");a.selectedBG=k;g.push(k);f=d.rect(b,f,h,"#000",.005);a.dragger=f;g.push(f);f.mousedown(function(b){a.handleDragStart(b)}).mouseup(function(){a.handleDragStop()}).mouseover(function(){a.handleDraggerOver()}).mouseout(function(){a.handleMouseOut()}).touchstart(function(b){a.handleDragStart(b)}).touchend(function(){a.handleDragStop()});
	h=e.pathToImages;var l,k=a.dragIcon.replace(/\.[a-z]*$/i,"");d.isAbsolute(k)&&(h="");c?(l=h+k+"H"+e.extension,h=a.dragIconWidth,c=a.dragIconHeight):(l=h+k+e.extension,c=a.dragIconWidth,h=a.dragIconHeight);k=b.image(l,0,0,c,h);d.setCN(e,k,"scrollbar-grip-left");l=b.image(l,0,0,c,h);d.setCN(e,l,"scrollbar-grip-right");var m=10,n=20;e.panEventsEnabled&&(m=25,n=a.scrollbarHeight);var q=d.rect(b,m,n,"#000",.005),p=d.rect(b,m,n,"#000",.005);p.translate(-(m-c)/2,-(n-h)/2);q.translate(-(m-c)/2,-(n-h)/2);
	c=b.set([k,p]);b=b.set([l,q]);a.iconLeft=c;g.push(a.iconLeft);a.iconRight=b;g.push(b);a.updateGripCursor(!1);e.makeAccessible(c,a.accessibleLabel);e.makeAccessible(b,a.accessibleLabel);e.makeAccessible(f,a.accessibleLabel);c.setAttr("role","menuitem");b.setAttr("role","menuitem");f.setAttr("role","menuitem");void 0!==a.tabIndex&&(c.setAttr("tabindex",a.tabIndex),c.keyup(function(b){a.handleKeys(b,1,0)}));void 0!==a.tabIndex&&(f.setAttr("tabindex",a.tabIndex),f.keyup(function(b){a.handleKeys(b,1,1)}));
	void 0!==a.tabIndex&&(b.setAttr("tabindex",a.tabIndex),b.keyup(function(b){a.handleKeys(b,0,1)}));c.mousedown(function(){a.leftDragStart()}).mouseup(function(){a.leftDragStop()}).mouseover(function(){a.iconRollOver()}).mouseout(function(){a.iconRollOut()}).touchstart(function(){a.leftDragStart()}).touchend(function(){a.leftDragStop()});b.mousedown(function(){a.rightDragStart()}).mouseup(function(){a.rightDragStop()}).mouseover(function(){a.iconRollOver()}).mouseout(function(){a.iconRollOut()}).touchstart(function(){a.rightDragStart()}).touchend(function(){a.rightDragStop()});
	d.ifArray(e.chartData)?g.show():g.hide();a.hideDragIcons();a.clipDragger(!1)}g.translate(a.x,a.y);g.node.style.msTouchAction="none";g.node.style.touchAction="none"}},handleKeys:function(a,b,c){this.getPercents();var e=this.percentStart,d=this.percentEnd;if(this.rotate)var f=d,d=e,e=f;if(37==a.keyCode||40==a.keyCode)e-=.02*b,d-=.02*c;if(39==a.keyCode||38==a.keyCode)e+=.02*b,d+=.02*c;this.rotate&&(a=d,d=e,e=a);isNaN(d)||isNaN(e)||this.percentZoom(e,d,!0)},updateScrollbarSize:function(a,b){if(!isNaN(a)&&
	!isNaN(b)){a=Math.round(a);b=Math.round(b);var c=this.dragger,e,d,f,h,k;this.rotate?(e=0,d=a,f=this.width+1,h=b-a,c.setAttr("height",b-a),c.setAttr("y",d)):(e=a,d=0,f=b-a,h=this.height+1,k=b-a,c.setAttr("x",e),c.setAttr("width",k));this.clipAndUpdate(e,d,f,h)}},update:function(){var a,b=!1,c,e,d=this.x,f=this.y,h=this.dragger,k=this.getDBox();if(k){c=k.x+d;e=k.y+f;var l=k.width,k=k.height,m=this.rotate,n=this.chart,q=this.width,p=this.height,t=n.mouseX,n=n.mouseY;a=this.initialMouse;this.forceClip&&
	this.clipDragger(!0);if(this.dragging){var r=this.initialCoord;m?(a=r+(n-a),0>a&&(a=0),r=p-k,a>r&&(a=r),h.setAttr("y",a)):(a=r+(t-a),0>a&&(a=0),r=q-l,a>r&&(a=r),h.setAttr("x",a));this.clipDragger(!0)}if(this.resizingRight){if(m)if(a=n-e,!isNaN(this.maxHeight)&&a>this.maxHeight&&(a=this.maxHeight),a+e>p+f&&(a=p-e+f),0>a)this.resizingRight=!1,b=this.resizingLeft=!0;else{if(0===a||isNaN(a))a=.1;h.setAttr("height",a)}else if(a=t-c,!isNaN(this.maxWidth)&&a>this.maxWidth&&(a=this.maxWidth),a+c>q+d&&(a=
	q-c+d),0>a)this.resizingRight=!1,b=this.resizingLeft=!0;else{if(0===a||isNaN(a))a=.1;h.setAttr("width",a)}this.clipDragger(!0)}if(this.resizingLeft){if(m)if(c=e,e=n,e<f&&(e=f),isNaN(e)&&(e=f),e>p+f&&(e=p+f),a=!0===b?c-e:k+c-e,!isNaN(this.maxHeight)&&a>this.maxHeight&&(a=this.maxHeight,e=c),0>a)this.resizingRight=!0,this.resizingLeft=!1,h.setAttr("y",c+k-f);else{if(0===a||isNaN(a))a=.1;h.setAttr("y",e-f);h.setAttr("height",a)}else if(e=t,e<d&&(e=d),isNaN(e)&&(e=d),e>q+d&&(e=q+d),a=!0===b?c-e:l+c-e,
	!isNaN(this.maxWidth)&&a>this.maxWidth&&(a=this.maxWidth,e=c),0>a)this.resizingRight=!0,this.resizingLeft=!1,h.setAttr("x",c+l-d);else{if(0===a||isNaN(a))a=.1;h.setAttr("x",e-d);h.setAttr("width",a)}this.clipDragger(!0)}}},stopForceClip:function(){this.animating=this.forceClip=!1},clipDragger:function(a){var b=this.getDBox();if(b){var c=b.x,e=b.y,d=b.width,b=b.height,f=!1;if(this.rotate){if(c=0,d=this.width+1,this.clipY!=e||this.clipH!=b)f=!0}else if(e=0,b=this.height+1,this.clipX!=c||this.clipW!=
	d)f=!0;f&&(this.clipAndUpdate(c,e,d,b),a&&(this.updateOnReleaseOnly||this.dispatchScrollbarEvent()))}},maskGraphs:function(){},clipAndUpdate:function(a,b,c,e){this.clipX=a;this.clipY=b;this.clipW=c;this.clipH=e;this.selectedBG.setAttr("width",c);this.selectedBG.setAttr("height",e);this.selectedBG.translate(a,b);this.updateDragIconPositions();this.maskGraphs(a,b,c,e)},dispatchScrollbarEvent:function(){if(this.skipEvent)this.skipEvent=!1;else{var a=this.chart;a.hideBalloon();var b=this.getDBox(),c=
	b.x,e=b.y,d=b.width,b=b.height;this.getPercents();this.rotate?(c=e,d=this.height/b):d=this.width/d;this.fire({type:"zoomed",position:c,chart:a,target:this,multiplier:d,relativeStart:this.percentStart,relativeEnd:this.percentEnd})}},updateDragIconPositions:function(){var a=this.getDBox(),b=a.x,c=a.y,e=this.iconLeft,d=this.iconRight,f,h,k=this.scrollbarHeight;this.rotate?(f=this.dragIconWidth,h=this.dragIconHeight,e.translate((k-h)/2,c-f/2),d.translate((k-h)/2,c+a.height-f/2)):(f=this.dragIconHeight,
	h=this.dragIconWidth,e.translate(b-h/2,(k-f)/2),d.translate(b-h/2+a.width,(k-f)/2))},showDragIcons:function(){this.resizeEnabled&&(this.iconLeft.show(),this.iconRight.show())},hideDragIcons:function(){if(!this.resizingLeft&&!this.resizingRight&&!this.dragging){if(this.hideResizeGrips||!this.resizeEnabled)this.iconLeft.hide(),this.iconRight.hide();this.removeCursors()}},removeCursors:function(){this.chart.setMouseCursor("auto")},fireZoomEvent:function(a){this.fire({type:a,chart:this.chart,target:this})},
	percentZoom:function(a,b,c){a=d.fitToBounds(a,0,b);b=d.fitToBounds(b,a,1);if(this.dragger&&this.enabled){this.dragger.stop();isNaN(a)&&(a=0);isNaN(b)&&(b=1);var e,g;this.rotate?(e=this.height,b=e-e*b,g=e-e*a):(e=this.width,g=e*b,b=e*a);this.updateScrollbarSize(b,g);this.clipDragger(!1);this.getPercents();c&&this.dispatchScrollbarEvent()}},destroy:function(){this.clear();d.remove(this.set);d.remove(this.iconRight);d.remove(this.iconLeft)},clear:function(){},handleDragStart:function(){if(this.enabled){this.fireZoomEvent("zoomStarted");
	var a=this.chart;this.dragger.stop();this.removeCursors();d.isModern&&this.dragger.node.setAttribute("style",this.dragCursorDown);this.dragging=!0;var b=this.getDBox();this.rotate?(this.initialCoord=b.y,this.initialMouse=a.mouseY):(this.initialCoord=b.x,this.initialMouse=a.mouseX)}},handleDragStop:function(){this.updateOnReleaseOnly&&(this.update(),this.skipEvent=!1,this.dispatchScrollbarEvent());this.dragging=!1;this.mouseIsOver&&this.removeCursors();d.isModern&&this.dragger.node.setAttribute("style",
	this.dragCursorHover);this.update();this.fireZoomEvent("zoomEnded")},handleDraggerOver:function(){this.handleMouseOver();d.isModern&&this.dragger.node.setAttribute("style",this.dragCursorHover)},leftDragStart:function(){this.fireZoomEvent("zoomStarted");this.dragger.stop();this.resizingLeft=!0;this.updateGripCursor(!0)},updateGripCursor:function(a){d.isModern&&(a=this.rotate?a?this.vResizeCursorDown:this.vResizeCursorHover:a?this.hResizeCursorDown:this.hResizeCursorHover)&&(this.iconRight&&this.iconRight.node.setAttribute("style",
	a),this.iconLeft&&this.iconLeft.node.setAttribute("style",a))},leftDragStop:function(){this.resizingLeft&&(this.resizingLeft=!1,this.mouseIsOver||this.removeCursors(),this.updateOnRelease(),this.fireZoomEvent("zoomEnded"));this.updateGripCursor(!1)},rightDragStart:function(){this.fireZoomEvent("zoomStarted");this.dragger.stop();this.resizingRight=!0;this.updateGripCursor(!0)},rightDragStop:function(){this.resizingRight&&(this.resizingRight=!1,this.mouseIsOver||this.removeCursors(),this.updateOnRelease(),
	this.fireZoomEvent("zoomEnded"));this.updateGripCursor(!1)},iconRollOut:function(){this.removeCursors()},iconRollOver:function(){this.rotate?this.vResizeCursor&&this.chart.setMouseCursor(this.vResizeCursor):this.hResizeCursor&&this.chart.setMouseCursor(this.hResizeCursor);this.handleMouseOver()},getDBox:function(){if(this.dragger)return this.dragger.getBBox()},handleBgClick:function(){var a=this;if(!a.resizingRight&&!a.resizingLeft){a.zooming=!0;var b,c,e=a.scrollDuration,g=a.dragger;b=a.getDBox();
	var f=b.height,h=b.width;c=a.chart;var k=a.y,l=a.x,m=a.rotate;m?(b="y",c=c.mouseY-f/2-k,c=d.fitToBounds(c,0,a.height-f)):(b="x",c=c.mouseX-h/2-l,c=d.fitToBounds(c,0,a.width-h));a.updateOnReleaseOnly?(a.skipEvent=!1,g.setAttr(b,c),a.dispatchScrollbarEvent(),a.clipDragger()):(a.animating=!0,c=Math.round(c),m?g.animate({y:c},e,">"):g.animate({x:c},e,">"),a.forceClip=!0,clearTimeout(a.forceTO),a.forceTO=setTimeout(function(){a.stopForceClip.call(a)},5E3*e))}},updateOnRelease:function(){this.updateOnReleaseOnly&&
	(this.update(),this.skipEvent=!1,this.dispatchScrollbarEvent())},handleReleaseOutside:function(){if(this.set){if(this.resizingLeft||this.resizingRight||this.dragging)this.dragging=this.resizingRight=this.resizingLeft=!1,this.updateOnRelease(),this.removeCursors();this.animating=this.mouseIsOver=!1;this.hideDragIcons();this.update()}},handleMouseOver:function(){this.mouseIsOver=!0;this.showDragIcons()},handleMouseOut:function(){this.mouseIsOver=!1;this.hideDragIcons();this.removeCursors()}})})();(function(){var d=window.AmCharts;d.ChartScrollbar=d.Class({inherits:d.SimpleChartScrollbar,construct:function(a){this.cname="ChartScrollbar";d.ChartScrollbar.base.construct.call(this,a);this.graphLineColor="#BBBBBB";this.graphLineAlpha=0;this.graphFillColor="#BBBBBB";this.graphFillAlpha=1;this.selectedGraphLineColor="#888888";this.selectedGraphLineAlpha=0;this.selectedGraphFillColor="#888888";this.selectedGraphFillAlpha=1;this.gridCount=0;this.gridColor="#FFFFFF";this.gridAlpha=.7;this.skipEvent=
	this.autoGridCount=!1;this.color="#FFFFFF";this.scrollbarCreated=!1;this.oppositeAxis=!0;this.accessibleLabel="Zoom chart using cursor arrows";d.applyTheme(this,a,this.cname)},init:function(){var a=this.categoryAxis,b=this.chart,c=this.gridAxis;a||("CategoryAxis"==this.gridAxis.cname?(this.catScrollbar=!0,a=new d.CategoryAxis,a.id="scrollbar"):(a=new d.ValueAxis,a.data=b.chartData,a.id=c.id,a.type=c.type,a.maximumDate=c.maximumDate,a.minimumDate=c.minimumDate,a.minPeriod=c.minPeriod),this.categoryAxis=
	a);a.chart=b;var e=b.categoryAxis;e&&(a.firstDayOfWeek=e.firstDayOfWeek);a.dateFormats=c.dateFormats;a.markPeriodChange=c.markPeriodChange;a.boldPeriodBeginning=c.boldPeriodBeginning;a.labelFunction=c.labelFunction;a.axisItemRenderer=d.RecItem;a.axisRenderer=d.RecAxis;a.guideFillRenderer=d.RecFill;a.inside=!0;a.fontSize=this.fontSize;a.tickLength=0;a.axisAlpha=0;d.isString(this.graph)&&(this.graph=d.getObjById(b.graphs,this.graph));(a=this.graph)&&this.catScrollbar&&(c=this.valueAxis,c||(this.valueAxis=
	c=new d.ValueAxis,c.visible=!1,c.scrollbar=!0,c.axisItemRenderer=d.RecItem,c.axisRenderer=d.RecAxis,c.guideFillRenderer=d.RecFill,c.labelsEnabled=!1,c.chart=b),b=this.unselectedGraph,b||(b=new d.AmGraph,b.scrollbar=!0,this.unselectedGraph=b,b.negativeBase=a.negativeBase,b.noStepRisers=a.noStepRisers),b=this.selectedGraph,b||(b=new d.AmGraph,b.scrollbar=!0,this.selectedGraph=b,b.negativeBase=a.negativeBase,b.noStepRisers=a.noStepRisers));this.scrollbarCreated=!0},draw:function(){var a=this;d.ChartScrollbar.base.draw.call(a);
	if(a.enabled){a.scrollbarCreated||a.init();var b=a.chart,c=b.chartData,e=a.categoryAxis,g=a.rotate,f=a.x,h=a.y,k=a.width,l=a.height,m=a.gridAxis,n=a.set;e.setOrientation(!g);e.parseDates=m.parseDates;"ValueAxis"==a.categoryAxis.cname&&(e.rotate=!g);e.equalSpacing=m.equalSpacing;e.minPeriod=m.minPeriod;e.startOnAxis=m.startOnAxis;e.width=k-1;e.height=l;e.gridCount=a.gridCount;e.gridColor=a.gridColor;e.gridAlpha=a.gridAlpha;e.color=a.color;e.tickLength=0;e.axisAlpha=0;e.autoGridCount=a.autoGridCount;
	e.parseDates&&!e.equalSpacing&&e.timeZoom(b.firstTime,b.lastTime);e.minimum=a.gridAxis.fullMin;e.maximum=a.gridAxis.fullMax;e.strictMinMax=!0;e.zoom(0,c.length-1);if((m=a.graph)&&a.catScrollbar){var q=a.valueAxis,p=m.valueAxis;q.id=p.id;q.rotate=g;q.setOrientation(g);q.width=k;q.height=l;q.dataProvider=c;q.reversed=p.reversed;q.logarithmic=p.logarithmic;q.gridAlpha=0;q.axisAlpha=0;n.push(q.set);g?(q.y=h,q.x=0):(q.x=f,q.y=0);var f=Infinity,h=-Infinity,t;for(t=0;t<c.length;t++){var r=c[t].axes[p.id].graphs[m.id].values,
	w;for(w in r)if(r.hasOwnProperty(w)&&"percents"!=w&&"total"!=w){var y=r[w];y<f&&(f=y);y>h&&(h=y)}}Infinity!=f&&(q.minimum=f);-Infinity!=h&&(q.maximum=h+.1*(h-f));f==h&&(--q.minimum,q.maximum+=1);void 0!==a.minimum&&(q.minimum=a.minimum);void 0!==a.maximum&&(q.maximum=a.maximum);q.zoom(0,c.length-1);w=a.unselectedGraph;w.id=m.id;w.bcn="scrollbar-graph-";w.rotate=g;w.chart=b;w.data=c;w.valueAxis=q;w.chart=m.chart;w.categoryAxis=a.categoryAxis;w.periodSpan=m.periodSpan;w.valueField=m.valueField;w.openField=
	m.openField;w.closeField=m.closeField;w.highField=m.highField;w.lowField=m.lowField;w.lineAlpha=a.graphLineAlpha;w.lineColorR=a.graphLineColor;w.fillAlphas=a.graphFillAlpha;w.fillColorsR=a.graphFillColor;w.connect=m.connect;w.hidden=m.hidden;w.width=k;w.height=l;w.pointPosition=m.pointPosition;w.stepDirection=m.stepDirection;w.periodSpan=m.periodSpan;p=a.selectedGraph;p.id=m.id;p.bcn=w.bcn+"selected-";p.rotate=g;p.chart=b;p.data=c;p.valueAxis=q;p.chart=m.chart;p.categoryAxis=e;p.periodSpan=m.periodSpan;
	p.valueField=m.valueField;p.openField=m.openField;p.closeField=m.closeField;p.highField=m.highField;p.lowField=m.lowField;p.lineAlpha=a.selectedGraphLineAlpha;p.lineColorR=a.selectedGraphLineColor;p.fillAlphas=a.selectedGraphFillAlpha;p.fillColorsR=a.selectedGraphFillColor;p.connect=m.connect;p.hidden=m.hidden;p.width=k;p.height=l;p.pointPosition=m.pointPosition;p.stepDirection=m.stepDirection;p.periodSpan=m.periodSpan;b=a.graphType;b||(b=m.type);w.type=b;p.type=b;c=c.length-1;w.zoom(0,c);p.zoom(0,
	c);p.set.click(function(){a.handleBackgroundClick()}).mouseover(function(){a.handleMouseOver()}).mouseout(function(){a.handleMouseOut()});w.set.click(function(){a.handleBackgroundClick()}).mouseover(function(){a.handleMouseOver()}).mouseout(function(){a.handleMouseOut()});n.push(w.set);n.push(p.set)}n.push(e.set);n.push(e.labelsSet);a.bg.toBack();a.invisibleBg.toFront();a.dragger.toFront();a.iconLeft.toFront();a.iconRight.toFront()}},timeZoom:function(a,b,c){this.startTime=a;this.endTime=b;this.timeDifference=
	b-a;this.skipEvent=!d.toBoolean(c);this.zoomScrollbar();this.dispatchScrollbarEvent()},zoom:function(a,b){this.start=a;this.end=b;this.skipEvent=!0;this.zoomScrollbar()},dispatchScrollbarEvent:function(){if(this.categoryAxis&&"ValueAxis"==this.categoryAxis.cname)d.ChartScrollbar.base.dispatchScrollbarEvent.call(this);else if(this.skipEvent)this.skipEvent=!1;else{var a=this.chart.chartData,b,c,e=this.dragger.getBBox();b=e.x;var g=e.y,f=e.width,e=e.height,h=this.chart;this.rotate?(b=g,c=e):c=f;f={type:"zoomed",
	target:this};f.chart=h;var k=this.categoryAxis,l=this.stepWidth,g=h.minSelectedTime,e=h.maxSelectedTime,m=!1;if(k.parseDates&&!k.equalSpacing){if(a=h.lastTime,h=h.firstTime,k=Math.round(b/l)+h,b=this.dragging?k+this.timeDifference:Math.round((b+c)/l)+h,k>b&&(k=b),0<g&&b-k<g&&(b=Math.round(k+(b-k)/2),m=Math.round(g/2),k=b-m,b+=m,m=!0),0<e&&b-k>e&&(b=Math.round(k+(b-k)/2),m=Math.round(e/2),k=b-m,b+=m,m=!0),b>a&&(b=a),b-g<k&&(k=b-g),k<h&&(k=h),k+g>b&&(b=k+g),k!=this.startTime||b!=this.endTime)this.startTime=
	k,this.endTime=b,f.start=k,f.end=b,f.startDate=new Date(k),f.endDate=new Date(b),this.fire(f)}else{k.startOnAxis||(b+=l/2);c-=this.stepWidth/2;g=k.xToIndex(b);b=k.xToIndex(b+c);if(g!=this.start||this.end!=b)k.startOnAxis&&(this.resizingRight&&g==b&&b++,this.resizingLeft&&g==b&&(0<g?g--:b=1)),this.start=g,this.end=this.dragging?this.start+this.difference:b,f.start=this.start,f.end=this.end,k.parseDates&&(a[this.start]&&(f.startDate=new Date(a[this.start].time)),a[this.end]&&(f.endDate=new Date(a[this.end].time))),
	this.fire(f);this.percentStart=g;this.percentEnd=b}m&&this.zoomScrollbar(!0)}},zoomScrollbar:function(a){if((!(this.dragging||this.resizingLeft||this.resizingRight||this.animating)||a)&&this.dragger&&this.enabled){var b,c,e=this.chart;a=e.chartData;var d=this.categoryAxis;d.parseDates&&!d.equalSpacing?(a=d.stepWidth,c=e.firstTime,b=a*(this.startTime-c),c=a*(this.endTime-c)):(a[this.start]&&(b=a[this.start].x[d.id]),a[this.end]&&(c=a[this.end].x[d.id]),a=d.stepWidth,d.startOnAxis||(e=a/2,b-=e,c+=e));
	this.stepWidth=a;isNaN(b)||isNaN(c)||this.updateScrollbarSize(b,c)}},maskGraphs:function(a,b,c,d){var g=this.selectedGraph;g&&g.set.clipRect(a,b,c,d)},handleDragStart:function(){d.ChartScrollbar.base.handleDragStart.call(this);this.difference=this.end-this.start;this.timeDifference=this.endTime-this.startTime;0>this.timeDifference&&(this.timeDifference=0)},handleBackgroundClick:function(){d.ChartScrollbar.base.handleBackgroundClick.call(this);this.dragging||(this.difference=this.end-this.start,this.timeDifference=
	this.endTime-this.startTime,0>this.timeDifference&&(this.timeDifference=0))}})})();(function(){var d=window.AmCharts;d.AmBalloon=d.Class({construct:function(a){this.cname="AmBalloon";this.enabled=!0;this.fillColor="#FFFFFF";this.fillAlpha=.8;this.borderThickness=2;this.borderColor="#FFFFFF";this.borderAlpha=1;this.cornerRadius=0;this.maxWidth=220;this.horizontalPadding=8;this.verticalPadding=4;this.pointerWidth=6;this.pointerOrientation="V";this.color="#000000";this.adjustBorderColor=!0;this.show=this.follow=this.showBullet=!1;this.bulletSize=3;this.shadowAlpha=.4;this.shadowColor=
	"#000000";this.fadeOutDuration=this.animationDuration=.3;this.fixedPosition=!0;this.offsetY=6;this.offsetX=1;this.textAlign="center";this.disableMouseEvents=!0;this.deltaSignX=this.deltaSignY=1;d.isModern||(this.offsetY*=1.5);this.sdy=this.sdx=0;d.applyTheme(this,a,this.cname)},draw:function(){var a=this.pointToX,b=this.pointToY;d.isModern||(this.drop=!1);var c=this.chart;d.VML&&(this.fadeOutDuration=0);this.xAnim&&c.stopAnim(this.xAnim);this.yAnim&&c.stopAnim(this.yAnim);this.sdy=this.sdx=0;if(!isNaN(a)){var e=
	this.follow,g=c.container,f=this.set;d.remove(f);this.removeDiv();f=g.set();f.node.style.pointerEvents="none";this.set=f;this.mainSet?(this.mainSet.push(this.set),this.sdx=this.mainSet.x,this.sdy=this.mainSet.y):c.balloonsSet.push(f);if(this.show){var h=this.l,k=this.t,l=this.r,m=this.b,n=this.balloonColor,q=this.fillColor,p=this.borderColor,t=q;void 0!=n&&(this.adjustBorderColor?t=p=n:q=n);var r=this.horizontalPadding,w=this.verticalPadding,y=this.pointerWidth,x=this.pointerOrientation,u=this.cornerRadius,
	A=c.fontFamily,z=this.fontSize;void 0==z&&(z=c.fontSize);var n=document.createElement("div"),B=c.classNamePrefix;n.className=B+"-balloon-div";this.className&&(n.className=n.className+" "+B+"-balloon-div-"+this.className);B=n.style;this.disableMouseEvents&&(B.pointerEvents="none");B.position="absolute";var D=this.minWidth,C="";isNaN(D)||(C="min-width:"+(D-2*r)+"px; ");n.innerHTML='<div style="text-align:'+this.textAlign+"; "+C+"max-width:"+this.maxWidth+"px; font-size:"+z+"px; color:"+this.color+"; font-family:"+
	A+'">'+this.text+"</div>";c.chartDiv.appendChild(n);this.textDiv=n;var K=n.offsetWidth,H=n.offsetHeight;n.clientHeight&&(K=n.clientWidth,H=n.clientHeight);A=H+2*w;C=K+2*r;!isNaN(D)&&C<D&&(C=D);window.opera&&(A+=2);var Q=!1,z=this.offsetY;c.handDrawn&&(z+=c.handDrawScatter+2);"H"!=x?(D=a-C/2,b<k+A+10&&"down"!=x?(Q=!0,e&&(b+=z),z=b+y,this.deltaSignY=-1):(e&&(b-=z),z=b-A-y,this.deltaSignY=1)):(2*y>A&&(y=A/2),z=b-A/2,a<h+(l-h)/2?(D=a+y,this.deltaSignX=-1):(D=a-C-y,this.deltaSignX=1));z+A>=m&&(z=m-A);
	z<k&&(z=k);D<h&&(D=h);D+C>l&&(D=l-C);var k=z+w,m=D+r,M=this.shadowAlpha,P=this.shadowColor,r=this.borderThickness,ia=this.bulletSize,I,w=this.fillAlpha,aa=this.borderAlpha;this.showBullet&&(I=d.circle(g,ia,t,w),f.push(I));this.drop?(h=C/1.6,l=0,"V"==x&&(x="down"),"H"==x&&(x="left"),"down"==x&&(D=a+1,z=b-h-h/3),"up"==x&&(l=180,D=a+1,z=b+h+h/3),"left"==x&&(l=270,D=a+h+h/3+2,z=b),"right"==x&&(l=90,D=a-h-h/3+2,z=b),k=z-H/2+1,m=D-K/2-1,q=d.drop(g,h,l,q,w,r,p,aa)):0<u||0===y?(0<M&&(a=d.rect(g,C,A,q,0,r+
	1,P,M,u),d.isModern?a.translate(1,1):a.translate(4,4),f.push(a)),q=d.rect(g,C,A,q,w,r,p,aa,u)):(t=[],u=[],"H"!=x?(h=a-D,h>C-y&&(h=C-y),h<y&&(h=y),t=[0,h-y,a-D,h+y,C,C,0,0],u=Q?[0,0,b-z,0,0,A,A,0]:[A,A,b-z,A,A,0,0,A]):(x=b-z,x>A-y&&(x=A-y),x<y&&(x=y),u=[0,x-y,b-z,x+y,A,A,0,0],t=a<h+(l-h)/2?[0,0,D<a?0:a-D,0,0,C,C,0]:[C,C,D+C>a?C:a-D,C,C,0,0,C]),0<M&&(a=d.polygon(g,t,u,q,0,r,P,M),a.translate(1,1),f.push(a)),q=d.polygon(g,t,u,q,w,r,p,aa));this.bg=q;f.push(q);q.toFront();d.setCN(c,q,"balloon-bg");this.className&&
	d.setCN(c,q,"balloon-bg-"+this.className);g=1*this.deltaSignX;m+=this.sdx;k+=this.sdy;B.left=m+"px";B.top=k+"px";f.translate(D-g,z,1,!0);q=q.getBBox();this.bottom=z+A+1;this.yPos=q.y+z;I&&I.translate(this.pointToX-D+g,b-z);b=this.animationDuration;0<this.animationDuration&&!e&&!isNaN(this.prevX)&&(f.translate(this.prevX,this.prevY,NaN,!0),f.animate({translate:D-g+","+z},b,"easeOutSine"),n&&(B.left=this.prevTX+"px",B.top=this.prevTY+"px",this.xAnim=c.animate({node:n},"left",this.prevTX,m,b,"easeOutSine",
	"px"),this.yAnim=c.animate({node:n},"top",this.prevTY,k,b,"easeOutSine","px")));this.prevX=D-g;this.prevY=z;this.prevTX=m;this.prevTY=k}}},fixPrevious:function(){this.rPrevX=this.prevX;this.rPrevY=this.prevY;this.rPrevTX=this.prevTX;this.rPrevTY=this.prevTY},restorePrevious:function(){this.prevX=this.rPrevX;this.prevY=this.rPrevY;this.prevTX=this.rPrevTX;this.prevTY=this.rPrevTY},followMouse:function(){if(this.follow&&this.show){var a=this.chart.mouseX-this.offsetX*this.deltaSignX-this.sdx,b=this.chart.mouseY-
	this.sdy;this.pointToX=a;this.pointToY=b;if(a!=this.previousX||b!=this.previousY)if(this.previousX=a,this.previousY=b,0===this.cornerRadius)this.draw();else{var c=this.set;if(c){var d=c.getBBox(),a=a-d.width/2,g=b-d.height-10;a<this.l&&(a=this.l);a>this.r-d.width&&(a=this.r-d.width);g<this.t&&(g=b+10);c.translate(a,g);b=this.textDiv.style;b.left=a+this.horizontalPadding+"px";b.top=g+this.verticalPadding+"px"}}}},changeColor:function(a){this.balloonColor=a},setBounds:function(a,b,c,d){this.l=a;this.t=
	b;this.r=c;this.b=d;this.destroyTO&&clearTimeout(this.destroyTO)},showBalloon:function(a){if(this.text!=a||this.positionChanged)this.text=a,this.isHiding=!1,this.show=!0,this.destroyTO&&clearTimeout(this.destroyTO),a=this.chart,this.fadeAnim1&&a.stopAnim(this.fadeAnim1),this.fadeAnim2&&a.stopAnim(this.fadeAnim2),this.draw(),this.positionChanged=!1},hide:function(a){var b=this;b.text=void 0;isNaN(a)&&(a=b.fadeOutDuration);var c=b.chart;if(0<a&&!b.isHiding){b.isHiding=!0;b.destroyTO&&clearTimeout(b.destroyTO);
	b.destroyTO=setTimeout(function(){b.destroy.call(b)},1E3*a);b.follow=!1;b.show=!1;var d=b.set;d&&(d.setAttr("opacity",b.fillAlpha),b.fadeAnim1=d.animate({opacity:0},a,"easeInSine"));b.textDiv&&(b.fadeAnim2=c.animate({node:b.textDiv},"opacity",1,0,a,"easeInSine",""))}else b.show=!1,b.follow=!1,b.destroy()},setPosition:function(a,b){if(a!=this.pointToX||b!=this.pointToY)this.previousX=this.pointToX,this.previousY=this.pointToY,this.pointToX=a,this.pointToY=b,this.positionChanged=!0},followCursor:function(a){var b=
	this;b.follow=a;clearInterval(b.interval);var c=b.chart.mouseX-b.sdx,d=b.chart.mouseY-b.sdy;!isNaN(c)&&a&&(b.pointToX=c-b.offsetX*b.deltaSignX,b.pointToY=d,b.followMouse(),b.interval=setInterval(function(){b.followMouse.call(b)},40))},removeDiv:function(){if(this.textDiv){var a=this.textDiv.parentNode;a&&a.removeChild(this.textDiv)}},destroy:function(){clearInterval(this.interval);d.remove(this.set);this.removeDiv();this.set=null}})})();(function(){var d=window.AmCharts;d.AmCoordinateChart=d.Class({inherits:d.AmChart,construct:function(a){d.AmCoordinateChart.base.construct.call(this,a);this.theme=a;this.createEvents("rollOverGraphItem","rollOutGraphItem","clickGraphItem","doubleClickGraphItem","rightClickGraphItem","clickGraph","rollOverGraph","rollOutGraph");this.startAlpha=1;this.startDuration=0;this.startEffect="elastic";this.sequencedAnimation=!0;this.colors="#FF6600 #FCD202 #B0DE09 #0D8ECF #2A0CD0 #CD0D74 #CC0000 #00CC00 #0000CC #DDDDDD #999999 #333333 #990000".split(" ");
	this.balloonDateFormat="MMM DD, YYYY";this.valueAxes=[];this.graphs=[];this.guides=[];this.gridAboveGraphs=!1;d.applyTheme(this,a,"AmCoordinateChart")},initChart:function(){d.AmCoordinateChart.base.initChart.call(this);this.drawGraphs=!0;var a=this.categoryAxis;a&&(this.categoryAxis=d.processObject(a,d.CategoryAxis,this.theme));this.processValueAxes();this.createValueAxes();this.processGraphs();this.processGuides();d.VML&&(this.startAlpha=1);this.setLegendData(this.graphs);this.gridAboveGraphs&&(this.gridSet.toFront(),
	this.bulletSet.toFront(),this.balloonsSet.toFront())},createValueAxes:function(){if(0===this.valueAxes.length){var a=new d.ValueAxis;this.addValueAxis(a)}},parseData:function(){this.processValueAxes();this.processGraphs()},parseSerialData:function(a){this.chartData=[];if(a)if(0<this.processTimeout){1>this.processCount&&(this.processCount=1);var b=a.length/this.processCount;this.parseCount=Math.ceil(b)-1;for(var c=0;c<b;c++)this.delayParseSerialData(a,c)}else this.parseCount=0,this.parsePartSerialData(a,
	0,a.length,0);else this.onDataUpdated()},delayParseSerialData:function(a,b){var c=this,d=c.processCount;setTimeout(function(){c.parsePartSerialData.call(c,a,b*d,(b+1)*d,b)},c.processTimeout)},parsePartSerialData:function(a,b,c,e){c>a.length&&(c=a.length);var g=this.graphs,f={},h=this.seriesIdField;h||(h=this.categoryField);var k=!1,l,m=this.categoryAxis,n,q,p;m&&(k=m.parseDates,n=m.forceShowField,p=m.classNameField,q=m.labelColorField,l=m.categoryFunction);var t,r,w={},y;k&&(t=d.extractPeriod(m.minPeriod),
	r=t.period,t=t.count,y=d.getPeriodDuration(r,t));var x={};this.lookupTable=x;var u,A=this.dataDateFormat,z={};for(u=b;u<c;u++){var B={},D=a[u];b=D[this.categoryField];B.dataContext=D;B.category=l?l(b,D,m):String(b);n&&(B.forceShow=D[n]);p&&(B.className=D[p]);q&&(B.labelColor=D[q]);x[D[h]]=B;if(k&&(m.categoryFunction?b=m.categoryFunction(b,D,m):(!A||b instanceof Date||(b=b.toString()+" |"),b=d.getDate(b,A,m.minPeriod)),b=d.resetDateToMin(b,r,t,m.firstDayOfWeek),B.category=b,B.time=b.getTime(),isNaN(B.time)))continue;
	var C=this.valueAxes;B.axes={};B.x={};var K;for(K=0;K<C.length;K++){var H=C[K].id;B.axes[H]={};B.axes[H].graphs={};var Q;for(Q=0;Q<g.length;Q++){b=g[Q];var M=b.id,P=1.1;isNaN(b.gapPeriod)||(P=b.gapPeriod);var ia=b.periodValue;if(b.valueAxis.id==H){B.axes[H].graphs[M]={};var I={};I.index=u;var aa=D;b.dataProvider&&(aa=f);I.values=this.processValues(aa,b,ia);if(!b.connect||b.forceGap&&!isNaN(b.gapPeriod))if(z&&z[M]&&0<P&&B.time-w[M]>=y*P&&(z[M].gap=!0),b.forceGap){var P=0,ma;for(ma in I.values)P++;
	0<P&&(w[M]=B.time,z[M]=I)}else w[M]=B.time,z[M]=I;this.processFields(b,I,aa);I.category=B.category;I.serialDataItem=B;I.graph=b;B.axes[H].graphs[M]=I}}}this.chartData[u]=B}if(this.parseCount==e){for(a=0;a<g.length;a++)b=g[a],b.dataProvider&&this.parseGraphData(b);this.dataChanged=!1;this.dispatchDataUpdated=!0;this.onDataUpdated()}},processValues:function(a,b,c){var e={},g,f=!1;"candlestick"!=b.type&&"ohlc"!=b.type||""===c||(f=!0);for(var h="value error open close low high".split(" "),k=0;k<h.length;k++){var l=
	h[k];"value"!=l&&"error"!=l&&f&&(c=l.charAt(0).toUpperCase()+l.slice(1));var m=a[b[l+"Field"]+c];null!==m&&(g=Number(m),isNaN(g)||(e[l]=g),"date"==b.valueAxis.type&&void 0!==m&&(g=d.getDate(m,b.chart.dataDateFormat),e[l]=g.getTime()))}return e},parseGraphData:function(a){var b=a.dataProvider,c=a.seriesIdField;c||(c=this.seriesIdField);c||(c=this.categoryField);var d;for(d=0;d<b.length;d++){var g=b[d],f=this.lookupTable[String(g[c])],h=a.valueAxis.id;f&&(h=f.axes[h].graphs[a.id],h.serialDataItem=f,
	h.values=this.processValues(g,a,a.periodValue),this.processFields(a,h,g))}},addValueAxis:function(a){a.chart=this;this.valueAxes.push(a);this.validateData()},removeValueAxesAndGraphs:function(){var a=this.valueAxes,b;for(b=a.length-1;-1<b;b--)this.removeValueAxis(a[b])},removeValueAxis:function(a){var b=this.graphs,c;for(c=b.length-1;0<=c;c--){var d=b[c];d&&d.valueAxis==a&&this.removeGraph(d)}b=this.valueAxes;for(c=b.length-1;0<=c;c--)b[c]==a&&b.splice(c,1);this.validateData()},addGraph:function(a){this.graphs.push(a);
	this.chooseGraphColor(a,this.graphs.length-1);this.validateData()},removeGraph:function(a){var b=this.graphs,c;for(c=b.length-1;0<=c;c--)b[c]==a&&(b.splice(c,1),a.destroy());this.validateData()},handleValueAxisZoom:function(){},processValueAxes:function(){var a=this.valueAxes,b;for(b=0;b<a.length;b++){var c=a[b],c=d.processObject(c,d.ValueAxis,this.theme);a[b]=c;c.chart=this;c.init();this.listenTo(c,"axisIntZoomed",this.handleValueAxisZoom);c.id||(c.id="valueAxisAuto"+b+"_"+(new Date).getTime());
	void 0===c.usePrefixes&&(c.usePrefixes=this.usePrefixes)}},processGuides:function(){var a=this.guides,b=this.categoryAxis;if(a)for(var c=0;c<a.length;c++){var e=a[c];(void 0!==e.category||void 0!==e.date)&&b&&b.addGuide(e);e.id||(e.id="guideAuto"+c+"_"+(new Date).getTime());var g=e.valueAxis;g?(d.isString(g)&&(g=this.getValueAxisById(g)),g?g.addGuide(e):this.valueAxes[0].addGuide(e)):isNaN(e.value)||this.valueAxes[0].addGuide(e)}},processGraphs:function(){var a=this.graphs,b;this.graphsById={};for(b=
	0;b<a.length;b++){var c=a[b],c=d.processObject(c,d.AmGraph,this.theme);a[b]=c;this.chooseGraphColor(c,b);c.chart=this;c.init();d.isString(c.valueAxis)&&(c.valueAxis=this.getValueAxisById(c.valueAxis));c.valueAxis||(c.valueAxis=this.valueAxes[0]);c.id||(c.id="graphAuto"+b+"_"+(new Date).getTime());this.graphsById[c.id]=c}},formatString:function(a,b,c){var e=b.graph,g=e.valueAxis;g.duration&&b.values.value&&(g=d.formatDuration(b.values.value,g.duration,"",g.durationUnits,g.maxInterval,g.numberFormatter),
	a=a.split("[[value]]").join(g));a=d.massReplace(a,{"[[title]]":e.title,"[[description]]":b.description});a=c?d.fixNewLines(a):d.fixBrakes(a);return a=d.cleanFromEmpty(a)},getBalloonColor:function(a,b,c){var e=a.lineColor,g=a.balloonColor;c&&(g=e);c=a.fillColorsR;"object"==typeof c?e=c[0]:void 0!==c&&(e=c);b.isNegative&&(c=a.negativeLineColor,a=a.negativeFillColors,"object"==typeof a?c=a[0]:void 0!==a&&(c=a),void 0!==c&&(e=c));void 0!==b.color&&(e=b.color);void 0!==b.lineColor&&(e=b.lineColor);b=b.fillColors;
	void 0!==b&&(e=b,d.ifArray(b)&&(e=b[0]));void 0===g&&(g=e);return g},getGraphById:function(a){return d.getObjById(this.graphs,a)},getValueAxisById:function(a){return d.getObjById(this.valueAxes,a)},processFields:function(a,b,c){if(a.itemColors){var e=a.itemColors,g=b.index;b.color=g<e.length?e[g]:d.randomColor()}e="lineColor color alpha fillColors description bullet customBullet bulletSize bulletConfig url labelColor dashLength pattern gap className columnIndex".split(" ");for(g=0;g<e.length;g++){var f=
	e[g],h=a[f+"Field"];h&&(h=c[h],d.isDefined(h)&&(b[f]=h))}b.dataContext=c},chooseGraphColor:function(a,b){if(a.lineColor)a.lineColorR=a.lineColor;else{var c;c=this.colors.length>b?this.colors[b]:a.lineColorR?a.lineColorR:d.randomColor();a.lineColorR=c}a.fillColorsR=a.fillColors?a.fillColors:a.lineColorR;a.bulletBorderColorR=a.bulletBorderColor?a.bulletBorderColor:a.useLineColorForBulletBorder?a.lineColorR:a.bulletColor;a.bulletColorR=a.bulletColor?a.bulletColor:a.lineColorR;if(c=this.patterns)a.pattern=
	c[b]},handleLegendEvent:function(a){var b=a.type;if(a=a.dataItem){var c=a.hidden,d=a.showBalloon;switch(b){case "clickMarker":this.textClickEnabled&&(d?this.hideGraphsBalloon(a):this.showGraphsBalloon(a));break;case "clickLabel":d?this.hideGraphsBalloon(a):this.showGraphsBalloon(a);break;case "rollOverItem":c||this.highlightGraph(a);break;case "rollOutItem":c||this.unhighlightGraph();break;case "hideItem":this.hideGraph(a);break;case "showItem":this.showGraph(a)}}},highlightGraph:function(a){var b=
	this.graphs;if(b){var c,d=.2;this.legend&&(d=this.legend.rollOverGraphAlpha);if(1!=d)for(c=0;c<b.length;c++){var g=b[c];g!=a&&g.changeOpacity(d)}}},unhighlightGraph:function(){var a;this.legend&&(a=this.legend.rollOverGraphAlpha);if(1!=a){a=this.graphs;var b;for(b=0;b<a.length;b++)a[b].changeOpacity(1)}},showGraph:function(a){a.switchable&&(a.hidden=!1,this.dataChanged=!0,"xy"!=this.type&&(this.marginsUpdated=!1),this.chartCreated&&this.initChart())},hideGraph:function(a){a.switchable&&(this.dataChanged=
	!0,"xy"!=this.type&&(this.marginsUpdated=!1),a.hidden=!0,this.chartCreated&&this.initChart())},hideGraphsBalloon:function(a){a.showBalloon=!1;this.updateLegend()},showGraphsBalloon:function(a){a.showBalloon=!0;this.updateLegend()},updateLegend:function(){this.legend&&this.legend.invalidateSize()},resetAnimation:function(){var a=this.graphs;if(a){var b;for(b=0;b<a.length;b++)a[b].animationPlayed=!1}},animateAgain:function(){this.resetAnimation();this.validateNow()}})})();(function(){var d=window.AmCharts;d.TrendLine=d.Class({construct:function(a){this.cname="TrendLine";this.createEvents("click");this.isProtected=!1;this.dashLength=0;this.lineColor="#00CC00";this.lineThickness=this.lineAlpha=1;d.applyTheme(this,a,this.cname)},draw:function(){var a=this;a.destroy();var b=a.chart,c=b.container,e,g,f,h,k=a.categoryAxis,l=a.initialDate,m=a.initialCategory,n=a.finalDate,q=a.finalCategory,p=a.valueAxis,t=a.valueAxisX,r=a.initialXValue,w=a.finalXValue,y=a.initialValue,x=
	a.finalValue,u=p.recalculateToPercents,A=b.dataDateFormat;k&&(l&&(l=d.getDate(l,A,"fff"),a.initialDate=l,e=k.dateToCoordinate(l)),m&&(e=k.categoryToCoordinate(m)),n&&(n=d.getDate(n,A,"fff"),a.finalDate=n,g=k.dateToCoordinate(n)),q&&(g=k.categoryToCoordinate(q)));t&&!u&&(isNaN(r)||(e=t.getCoordinate(r)),isNaN(w)||(g=t.getCoordinate(w)));p&&!u&&(isNaN(y)||(f=p.getCoordinate(y)),isNaN(x)||(h=p.getCoordinate(x)));if(!(isNaN(e)||isNaN(g)||isNaN(f)||isNaN(f))){b.rotate?(k=[f,h],h=[e,g]):(k=[e,g],h=[f,h]);
	l=a.lineColor;f=d.line(c,k,h,l,a.lineAlpha,a.lineThickness,a.dashLength);e=k;g=h;q=k[1]-k[0];p=h[1]-h[0];0===q&&(q=.01);0===p&&(p=.01);m=q/Math.abs(q);n=p/Math.abs(p);p=90*Math.PI/180-Math.asin(q/(q*p/Math.abs(q*p)*Math.sqrt(Math.pow(q,2)+Math.pow(p,2))));q=Math.abs(5*Math.cos(p));p=Math.abs(5*Math.sin(p));e.push(k[1]-m*p,k[0]-m*p);g.push(h[1]+n*q,h[0]+n*q);h=d.polygon(c,e,g,l,.005,0);c=c.set([h,f]);c.translate(b.marginLeftReal,b.marginTopReal);b.trendLinesSet.push(c);d.setCN(b,f,"trend-line");d.setCN(b,
	f,"trend-line-"+a.id);a.line=f;a.set=c;if(f=a.initialImage)f=d.processObject(f,d.Image,a.theme),f.chart=b,f.draw(),f.translate(e[0]+f.offsetX,g[0]+f.offsetY),c.push(f.set);if(f=a.finalImage)f=d.processObject(f,d.Image,a.theme),f.chart=b,f.draw(),f.translate(e[1]+f.offsetX,g[1]+f.offsetY),c.push(f.set);h.mouseup(function(){a.handleLineClick()}).mouseover(function(){a.handleLineOver()}).mouseout(function(){a.handleLineOut()});h.touchend&&h.touchend(function(){a.handleLineClick()});c.clipRect(0,0,b.plotAreaWidth,
	b.plotAreaHeight)}},handleLineClick:function(){this.fire({type:"click",trendLine:this,chart:this.chart})},handleLineOver:function(){var a=this.rollOverColor;void 0!==a&&this.line.attr({stroke:a});this.balloonText&&(clearTimeout(this.chart.hoverInt),a=this.line.getBBox(),this.chart.showBalloon(this.balloonText,this.lineColor,!0,this.x+a.x+a.width/2,this.y+a.y+a.height/2))},handleLineOut:function(){this.line.attr({stroke:this.lineColor});this.balloonText&&this.chart.hideBalloon()},destroy:function(){d.remove(this.set)}})})();(function(){var d=window.AmCharts;d.Image=d.Class({construct:function(a){this.cname="Image";this.height=this.width=20;this.rotation=this.offsetY=this.offsetX=0;this.balloonColor=this.color="#000000";this.opacity=1;d.applyTheme(this,a,this.cname)},draw:function(){var a=this;a.set&&a.set.remove();var b=a.chart.container;a.set=b.set();var c,d;a.url?(c=b.image(a.url,0,0,a.width,a.height),d=1):a.svgPath&&(c=b.path(a.svgPath),c.setAttr("fill",a.color),c.setAttr("stroke",a.outlineColor),b=c.getBBox(),d=
	Math.min(a.width/b.width,a.height/b.height));c&&(c.setAttr("opacity",a.opacity),a.set.rotate(a.rotation),c.translate(-a.width/2,-a.height/2,d),a.balloonText&&c.mouseover(function(){a.chart.showBalloon(a.balloonText,a.balloonColor,!0)}).mouseout(function(){a.chart.hideBalloon()}).touchend(function(){a.chart.hideBalloon()}).touchstart(function(){a.chart.showBalloon(a.balloonText,a.balloonColor,!0)}),a.set.push(c))},translate:function(a,b){this.set&&this.set.translate(a,b)}})})();(function(){var d=window.AmCharts;d.circle=function(a,b,c,e,g,f,h,k,l){0>=b&&(b=.001);if(void 0==g||0===g)g=.01;void 0===f&&(f="#000000");void 0===h&&(h=0);e={fill:c,stroke:f,"fill-opacity":e,"stroke-width":g,"stroke-opacity":h};a=isNaN(l)?a.circle(0,0,b).attr(e):a.ellipse(0,0,b,l).attr(e);k&&a.gradient("radialGradient",[c,d.adjustLuminosity(c,-.6)]);return a};d.text=function(a,b,c,e,g,f,h,k){f||(f="middle");"right"==f&&(f="end");"left"==f&&(f="start");isNaN(k)&&(k=1);void 0!==b&&(b=String(b),d.isIE&&
	!d.isModern&&(b=b.replace("&amp;","&"),b=b.replace("&","&amp;")));c={fill:c,"font-family":e,"font-size":g+"px",opacity:k};!0===h&&(c["font-weight"]="bold");c["text-anchor"]=f;return a.text(b,c)};d.polygon=function(a,b,c,e,g,f,h,k,l,m,n){isNaN(f)&&(f=.01);isNaN(k)&&(k=g);var q=e,p=!1;"object"==typeof q&&1<q.length&&(p=!0,q=q[0]);void 0===h&&(h=q);g={fill:q,stroke:h,"fill-opacity":g,"stroke-width":f,"stroke-opacity":k};void 0!==n&&0<n&&(g["stroke-dasharray"]=n);n=d.dx;f=d.dy;a.handDrawn&&(c=d.makeHD(b,
	c,a.handDrawScatter),b=c[0],c=c[1]);h=Math.round;m&&(b[t]=d.roundTo(b[t],5),c[t]=d.roundTo(c[t],5),h=Number);k="M"+(h(b[0])+n)+","+(h(c[0])+f);for(var t=1;t<b.length;t++)m&&(b[t]=d.roundTo(b[t],5),c[t]=d.roundTo(c[t],5)),k+=" L"+(h(b[t])+n)+","+(h(c[t])+f);a=a.path(k+" Z").attr(g);p&&a.gradient("linearGradient",e,l);return a};d.rect=function(a,b,c,e,g,f,h,k,l,m,n){if(isNaN(b)||isNaN(c))return a.set();isNaN(f)&&(f=0);void 0===l&&(l=0);void 0===m&&(m=270);isNaN(g)&&(g=0);var q=e,p=!1;"object"==typeof q&&
	(q=q[0],p=!0);void 0===h&&(h=q);void 0===k&&(k=g);b=Math.round(b);c=Math.round(c);var t=0,r=0;0>b&&(b=Math.abs(b),t=-b);0>c&&(c=Math.abs(c),r=-c);t+=d.dx;r+=d.dy;g={fill:q,stroke:h,"fill-opacity":g,"stroke-opacity":k};void 0!==n&&0<n&&(g["stroke-dasharray"]=n);a=a.rect(t,r,b,c,l,f).attr(g);p&&a.gradient("linearGradient",e,m);return a};d.bullet=function(a,b,c,e,g,f,h,k,l,m,n,q,p){var t;"circle"==b&&(b="round");switch(b){case "round":t=d.circle(a,c/2,e,g,f,h,k);break;case "square":t=d.polygon(a,[-c/
	2,c/2,c/2,-c/2],[c/2,c/2,-c/2,-c/2],e,g,f,h,k,m-180,void 0,p);break;case "rectangle":t=d.polygon(a,[-c,c,c,-c],[c/2,c/2,-c/2,-c/2],e,g,f,h,k,m-180,void 0,p);break;case "diamond":t=d.polygon(a,[-c/2,0,c/2,0],[0,-c/2,0,c/2],e,g,f,h,k);break;case "triangleUp":t=d.triangle(a,c,0,e,g,f,h,k);break;case "triangleDown":t=d.triangle(a,c,180,e,g,f,h,k);break;case "triangleLeft":t=d.triangle(a,c,270,e,g,f,h,k);break;case "triangleRight":t=d.triangle(a,c,90,e,g,f,h,k);break;case "bubble":t=d.circle(a,c/2,e,g,
	f,h,k,!0);break;case "line":t=d.line(a,[-c/2,c/2],[0,0],e,g,f,h,k);break;case "yError":t=a.set();t.push(d.line(a,[0,0],[-c/2,c/2],e,g,f));t.push(d.line(a,[-l,l],[-c/2,-c/2],e,g,f));t.push(d.line(a,[-l,l],[c/2,c/2],e,g,f));break;case "xError":t=a.set(),t.push(d.line(a,[-c/2,c/2],[0,0],e,g,f)),t.push(d.line(a,[-c/2,-c/2],[-l,l],e,g,f)),t.push(d.line(a,[c/2,c/2],[-l,l],e,g,f))}t&&t.pattern(n,NaN,q);return t};d.triangle=function(a,b,c,d,g,f,h,k){if(void 0===f||0===f)f=1;void 0===h&&(h="#000");void 0===
	k&&(k=0);d={fill:d,stroke:h,"fill-opacity":g,"stroke-width":f,"stroke-opacity":k};b/=2;var l;0===c&&(l=" M"+-b+","+b+" L0,"+-b+" L"+b+","+b+" Z");180==c&&(l=" M"+-b+","+-b+" L0,"+b+" L"+b+","+-b+" Z");90==c&&(l=" M"+-b+","+-b+" L"+b+",0 L"+-b+","+b+" Z");270==c&&(l=" M"+-b+",0 L"+b+","+b+" L"+b+","+-b+" Z");return a.path(l).attr(d)};d.line=function(a,b,c,e,g,f,h,k,l,m,n){if(a.handDrawn&&!n)return d.handDrawnLine(a,b,c,e,g,f,h,k,l,m,n);f={fill:"none","stroke-width":f};void 0!==h&&0<h&&(f["stroke-dasharray"]=
	h);isNaN(g)||(f["stroke-opacity"]=g);e&&(f.stroke=e);e=Math.round;m&&(e=Number,b[0]=d.roundTo(b[0],5),c[0]=d.roundTo(c[0],5));m=d.dx;g=d.dy;h="M"+(e(b[0])+m)+","+(e(c[0])+g);for(k=1;k<b.length;k++)b[k]=d.roundTo(b[k],5),c[k]=d.roundTo(c[k],5),h+=" L"+(e(b[k])+m)+","+(e(c[k])+g);if(d.VML)return a.path(h,void 0,!0).attr(f);l&&(h+=" M0,0 L0,0");return a.path(h).attr(f)};d.makeHD=function(a,b,c){for(var d=[],g=[],f=1;f<a.length;f++)for(var h=Number(a[f-1]),k=Number(b[f-1]),l=Number(a[f]),m=Number(b[f]),
	n=Math.round(Math.sqrt(Math.pow(l-h,2)+Math.pow(m-k,2))/50)+1,l=(l-h)/n,m=(m-k)/n,q=0;q<=n;q++){var p=k+q*m+Math.random()*c;d.push(h+q*l+Math.random()*c);g.push(p)}return[d,g]};d.handDrawnLine=function(a,b,c,e,g,f,h,k,l,m){var n,q=a.set();for(n=1;n<b.length;n++)for(var p=[b[n-1],b[n]],t=[c[n-1],c[n]],t=d.makeHD(p,t,a.handDrawScatter),p=t[0],t=t[1],r=1;r<p.length;r++)q.push(d.line(a,[p[r-1],p[r]],[t[r-1],t[r]],e,g,f+Math.random()*a.handDrawThickness-a.handDrawThickness/2,h,k,l,m,!0));return q};d.doNothing=
	function(a){return a};d.drop=function(a,b,c,d,g,f,h,k){var l=1/180*Math.PI,m=c-20,n=Math.sin(m*l)*b,q=Math.cos(m*l)*b,p=Math.sin((m+40)*l)*b,t=Math.cos((m+40)*l)*b,r=.8*b,w=-b/3,y=b/3;0===c&&(w=-w,y=0);180==c&&(y=0);90==c&&(w=0);270==c&&(w=0,y=-y);c={fill:d,stroke:h,"stroke-width":f,"stroke-opacity":k,"fill-opacity":g};b="M"+n+","+q+" A"+b+","+b+",0,1,1,"+p+","+t+(" A"+r+","+r+",0,0,0,"+(Math.sin((m+20)*l)*b+y)+","+(Math.cos((m+20)*l)*b+w));b+=" A"+r+","+r+",0,0,0,"+n+","+q;return a.path(b,void 0,
	void 0,"1000,1000").attr(c)};d.wedge=function(a,b,c,e,g,f,h,k,l,m,n,q,p,t){var r=Math.round;f=r(f);h=r(h);k=r(k);var w=r(h/f*k),y=d.VML,x=359.5+f/100;359.94<x&&(x=359.94);g>=x&&(g=x);var u=1/180*Math.PI,x=b+Math.sin(e*u)*k,A=c-Math.cos(e*u)*w,z=b+Math.sin(e*u)*f,B=c-Math.cos(e*u)*h,D=b+Math.sin((e+g)*u)*f,C=c-Math.cos((e+g)*u)*h,K=b+Math.sin((e+g)*u)*k,u=c-Math.cos((e+g)*u)*w,H={fill:d.adjustLuminosity(m.fill,-.2),"stroke-opacity":0,"fill-opacity":m["fill-opacity"]},Q=0;180<Math.abs(g)&&(Q=1);e=a.set();
	var M;y&&(x=r(10*x),z=r(10*z),D=r(10*D),K=r(10*K),A=r(10*A),B=r(10*B),C=r(10*C),u=r(10*u),b=r(10*b),l=r(10*l),c=r(10*c),f*=10,h*=10,k*=10,w*=10,1>Math.abs(g)&&1>=Math.abs(D-z)&&1>=Math.abs(C-B)&&(M=!0));g="";var P;q&&(H["fill-opacity"]=0,H["stroke-opacity"]=m["stroke-opacity"]/2,H.stroke=m.stroke);if(0<l){P=" M"+x+","+(A+l)+" L"+z+","+(B+l);y?(M||(P+=" A"+(b-f)+","+(l+c-h)+","+(b+f)+","+(l+c+h)+","+z+","+(B+l)+","+D+","+(C+l)),P+=" L"+K+","+(u+l),0<k&&(M||(P+=" B"+(b-k)+","+(l+c-w)+","+(b+k)+","+
	(l+c+w)+","+K+","+(l+u)+","+x+","+(l+A)))):(P+=" A"+f+","+h+",0,"+Q+",1,"+D+","+(C+l)+" L"+K+","+(u+l),0<k&&(P+=" A"+k+","+w+",0,"+Q+",0,"+x+","+(A+l)));P+=" Z";var ia=l;y&&(ia/=10);for(var I=0;I<ia;I+=10){var aa=a.path(P,void 0,void 0,"1000,1000").attr(H);e.push(aa);aa.translate(0,-I)}P=a.path(" M"+x+","+A+" L"+x+","+(A+l)+" L"+z+","+(B+l)+" L"+z+","+B+" L"+x+","+A+" Z",void 0,void 0,"1000,1000").attr(H);l=a.path(" M"+D+","+C+" L"+D+","+(C+l)+" L"+K+","+(u+l)+" L"+K+","+u+" L"+D+","+C+" Z",void 0,
	void 0,"1000,1000").attr(H);e.push(P);e.push(l)}y?(M||(g=" A"+r(b-f)+","+r(c-h)+","+r(b+f)+","+r(c+h)+","+r(z)+","+r(B)+","+r(D)+","+r(C)),h=" M"+r(x)+","+r(A)+" L"+r(z)+","+r(B)+g+" L"+r(K)+","+r(u)):h=" M"+x+","+A+" L"+z+","+B+(" A"+f+","+h+",0,"+Q+",1,"+D+","+C)+" L"+K+","+u;0<k&&(y?M||(h+=" B"+(b-k)+","+(c-w)+","+(b+k)+","+(c+w)+","+K+","+u+","+x+","+A):h+=" A"+k+","+w+",0,"+Q+",0,"+x+","+A);a.handDrawn&&(k=d.line(a,[x,z],[A,B],m.stroke,m.thickness*Math.random()*a.handDrawThickness,m["stroke-opacity"]),
	e.push(k));a=a.path(h+" Z",void 0,void 0,"1000,1000").attr(m);if(n){k=[];for(w=0;w<n.length;w++)k.push(d.adjustLuminosity(m.fill,n[w]));"radial"!=t||d.isModern||(k=[]);0<k.length&&a.gradient(t+"Gradient",k)}d.isModern&&"radial"==t&&a.grad&&(a.grad.setAttribute("gradientUnits","userSpaceOnUse"),a.grad.setAttribute("r",f),a.grad.setAttribute("cx",b),a.grad.setAttribute("cy",c));a.pattern(q,NaN,p);e.wedge=a;e.push(a);return e};d.rgb2hex=function(a){return(a=a.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i))&&
	4===a.length?"#"+("0"+parseInt(a[1],10).toString(16)).slice(-2)+("0"+parseInt(a[2],10).toString(16)).slice(-2)+("0"+parseInt(a[3],10).toString(16)).slice(-2):""};d.adjustLuminosity=function(a,b){a&&-1!=a.indexOf("rgb")&&(a=d.rgb2hex(a));a=String(a).replace(/[^0-9a-f]/gi,"");6>a.length&&(a=String(a[0])+String(a[0])+String(a[1])+String(a[1])+String(a[2])+String(a[2]));b=b||0;var c="#",e,g;for(g=0;3>g;g++)e=parseInt(a.substr(2*g,2),16),e=Math.round(Math.min(Math.max(0,e+e*b),255)).toString(16),c+=("00"+
	e).substr(e.length);return c}})();(function(){var d=window.AmCharts;d.Bezier=d.Class({construct:function(a,b,c,e,g,f,h,k,l,m,n){var q,p;"object"==typeof h&&1<h.length&&(p=!0,q=h,h=h[0]);"object"==typeof k&&(k=k[0]);0===k&&(h="none");f={fill:h,"fill-opacity":k,"stroke-width":f};void 0!==l&&0<l&&(f["stroke-dasharray"]=l);isNaN(g)||(f["stroke-opacity"]=g);e&&(f.stroke=e);e="M"+Math.round(b[0])+","+Math.round(c[0]);g=[];for(l=0;l<b.length;l++)g.push({x:Number(b[l]),y:Number(c[l])});1<g.length&&(b=this.interpolate(g),e+=this.drawBeziers(b));
	m?e+=m:d.VML||(e+="M0,0 L0,0");this.path=a.path(e).attr(f);this.node=this.path.node;p&&this.path.gradient("linearGradient",q,n)},interpolate:function(a){var b=[];b.push({x:a[0].x,y:a[0].y});var c=a[1].x-a[0].x,e=a[1].y-a[0].y,g=d.bezierX,f=d.bezierY;b.push({x:a[0].x+c/g,y:a[0].y+e/f});var h;for(h=1;h<a.length-1;h++){var k=a[h-1],l=a[h],e=a[h+1];isNaN(e.x)&&(e=l);isNaN(l.x)&&(l=k);isNaN(k.x)&&(k=l);c=e.x-l.x;e=e.y-k.y;k=l.x-k.x;k>c&&(k=c);b.push({x:l.x-k/g,y:l.y-e/f});b.push({x:l.x,y:l.y});b.push({x:l.x+
	k/g,y:l.y+e/f})}e=a[a.length-1].y-a[a.length-2].y;c=a[a.length-1].x-a[a.length-2].x;b.push({x:a[a.length-1].x-c/g,y:a[a.length-1].y-e/f});b.push({x:a[a.length-1].x,y:a[a.length-1].y});return b},drawBeziers:function(a){var b="",c;for(c=0;c<(a.length-1)/3;c++)b+=this.drawBezierMidpoint(a[3*c],a[3*c+1],a[3*c+2],a[3*c+3]);return b},drawBezierMidpoint:function(a,b,c,d){var g=Math.round,f=this.getPointOnSegment(a,b,.75),h=this.getPointOnSegment(d,c,.75),k=(d.x-a.x)/16,l=(d.y-a.y)/16,m=this.getPointOnSegment(a,
	b,.375);a=this.getPointOnSegment(f,h,.375);a.x-=k;a.y-=l;b=this.getPointOnSegment(h,f,.375);b.x+=k;b.y+=l;c=this.getPointOnSegment(d,c,.375);k=this.getMiddle(m,a);f=this.getMiddle(f,h);h=this.getMiddle(b,c);m=" Q"+g(m.x)+","+g(m.y)+","+g(k.x)+","+g(k.y);m+=" Q"+g(a.x)+","+g(a.y)+","+g(f.x)+","+g(f.y);m+=" Q"+g(b.x)+","+g(b.y)+","+g(h.x)+","+g(h.y);return m+=" Q"+g(c.x)+","+g(c.y)+","+g(d.x)+","+g(d.y)},getMiddle:function(a,b){return{x:(a.x+b.x)/2,y:(a.y+b.y)/2}},getPointOnSegment:function(a,b,c){return{x:a.x+
	(b.x-a.x)*c,y:a.y+(b.y-a.y)*c}}})})();(function(){var d=window.AmCharts;d.AmDraw=d.Class({construct:function(a,b,c,e){d.SVG_NS="http://www.w3.org/2000/svg";d.SVG_XLINK="http://www.w3.org/1999/xlink";d.hasSVG=!!document.createElementNS&&!!document.createElementNS(d.SVG_NS,"svg").createSVGRect;1>b&&(b=10);1>c&&(c=10);this.div=a;this.width=b;this.height=c;this.rBin=document.createElement("div");d.hasSVG?(d.SVG=!0,b=this.createSvgElement("svg"),a.appendChild(b),this.container=b,this.addDefs(e),this.R=new d.SVGRenderer(this)):d.isIE&&d.VMLRenderer&&
	(d.VML=!0,d.vmlStyleSheet||(document.namespaces.add("amvml","urn:schemas-microsoft-com:vml"),31>document.styleSheets.length?(b=document.createStyleSheet(),b.addRule(".amvml","behavior:url(#default#VML); display:inline-block; antialias:true"),d.vmlStyleSheet=b):document.styleSheets[0].addRule(".amvml","behavior:url(#default#VML); display:inline-block; antialias:true")),this.container=a,this.R=new d.VMLRenderer(this,e),this.R.disableSelection(a))},createSvgElement:function(a){return document.createElementNS(d.SVG_NS,
	a)},circle:function(a,b,c,e){var g=new d.AmDObject("circle",this);g.attr({r:c,cx:a,cy:b});this.addToContainer(g.node,e);return g},ellipse:function(a,b,c,e,g){var f=new d.AmDObject("ellipse",this);f.attr({rx:c,ry:e,cx:a,cy:b});this.addToContainer(f.node,g);return f},setSize:function(a,b){0<a&&0<b&&(this.container.style.width=a+"px",this.container.style.height=b+"px")},rect:function(a,b,c,e,g,f,h){var k=new d.AmDObject("rect",this);d.VML&&(g=Math.round(100*g/Math.min(c,e)),c+=2*f,e+=2*f,k.bw=f,k.node.style.marginLeft=
	-f,k.node.style.marginTop=-f);1>c&&(c=1);1>e&&(e=1);k.attr({x:a,y:b,width:c,height:e,rx:g,ry:g,"stroke-width":f});this.addToContainer(k.node,h);return k},image:function(a,b,c,e,g,f){var h=new d.AmDObject("image",this);h.attr({x:b,y:c,width:e,height:g});this.R.path(h,a);this.addToContainer(h.node,f);return h},addToContainer:function(a,b){b||(b=this.container);b.appendChild(a)},text:function(a,b,c){return this.R.text(a,b,c)},path:function(a,b,c,e){var g=new d.AmDObject("path",this);e||(e="100,100");
	g.attr({cs:e});c?g.attr({dd:a}):g.attr({d:a});this.addToContainer(g.node,b);return g},set:function(a){return this.R.set(a)},remove:function(a){if(a){var b=this.rBin;b.appendChild(a);b.innerHTML=""}},renderFix:function(){var a=this.container,b=a.style;b.top="0px";b.left="0px";try{var c=a.getBoundingClientRect(),d=c.left-Math.round(c.left),g=c.top-Math.round(c.top);d&&(b.left=d+"px");g&&(b.top=g+"px")}catch(f){}},update:function(){this.R.update()},addDefs:function(a){if(d.hasSVG){var b=this.createSvgElement("desc"),
	c=this.container;c.setAttribute("version","1.1");c.style.position="absolute";this.setSize(this.width,this.height);if(a.accessibleTitle){var e=this.createSvgElement("text");c.appendChild(e);e.innerHTML=a.accessibleTitle;e.style.opacity=0}d.rtl&&(c.setAttribute("direction","rtl"),c.style.left="auto",c.style.right="0px");a&&(a.addCodeCredits&&b.appendChild(document.createTextNode("JavaScript chart by amCharts "+a.version)),c.appendChild(b),a.defs&&(b=this.createSvgElement("defs"),c.appendChild(b),d.parseDefs(a.defs,
	b),this.defs=b))}}})})();(function(){var d=window.AmCharts;d.AmDObject=d.Class({construct:function(a,b){this.D=b;this.R=b.R;this.node=this.R.create(this,a);this.y=this.x=0;this.scale=1},attr:function(a){this.R.attr(this,a);return this},getAttr:function(a){return this.node.getAttribute(a)},setAttr:function(a,b){this.R.setAttr(this,a,b);return this},clipRect:function(a,b,c,d){this.R.clipRect(this,a,b,c,d)},translate:function(a,b,c,d){d||(a=Math.round(a),b=Math.round(b));this.R.move(this,a,b,c);this.x=a;this.y=b;this.scale=
	c;this.angle&&this.rotate(this.angle)},rotate:function(a,b){this.R.rotate(this,a,b);this.angle=a},animate:function(a,b,c){for(var e in a)if(a.hasOwnProperty(e)){var g=e,f=a[e];c=d.getEffect(c);this.R.animate(this,g,f,b,c)}},push:function(a){if(a){var b=this.node;b.appendChild(a.node);var c=a.clipPath;c&&b.appendChild(c);(a=a.grad)&&b.appendChild(a)}},text:function(a){this.R.setText(this,a)},remove:function(){this.stop();this.R.remove(this)},clear:function(){var a=this.node;if(a.hasChildNodes())for(;1<=
	a.childNodes.length;)a.removeChild(a.firstChild)},hide:function(){this.setAttr("visibility","hidden")},show:function(){this.setAttr("visibility","visible")},getBBox:function(){return this.R.getBBox(this)},toFront:function(){var a=this.node;if(a){this.prevNextNode=a.nextSibling;var b=a.parentNode;b&&b.appendChild(a)}},toPrevious:function(){var a=this.node;a&&this.prevNextNode&&(a=a.parentNode)&&a.insertBefore(this.prevNextNode,null)},toBack:function(){var a=this.node;if(a){this.prevNextNode=a.nextSibling;
	var b=a.parentNode;if(b){var c=b.firstChild;c&&b.insertBefore(a,c)}}},mouseover:function(a){this.R.addListener(this,"mouseover",a);return this},mouseout:function(a){this.R.addListener(this,"mouseout",a);return this},click:function(a){this.R.addListener(this,"click",a);return this},dblclick:function(a){this.R.addListener(this,"dblclick",a);return this},mousedown:function(a){this.R.addListener(this,"mousedown",a);return this},mouseup:function(a){this.R.addListener(this,"mouseup",a);return this},touchmove:function(a){this.R.addListener(this,
	"touchmove",a);return this},touchstart:function(a){this.R.addListener(this,"touchstart",a);return this},touchend:function(a){this.R.addListener(this,"touchend",a);return this},keyup:function(a){this.R.addListener(this,"keyup",a);return this},focus:function(a){this.R.addListener(this,"focus",a);return this},blur:function(a){this.R.addListener(this,"blur",a);return this},contextmenu:function(a){this.node.addEventListener?this.node.addEventListener("contextmenu",a,!0):this.R.addListener(this,"contextmenu",
	a);return this},stop:function(){d.removeFromArray(this.R.animations,this.an_translate);d.removeFromArray(this.R.animations,this.an_y);d.removeFromArray(this.R.animations,this.an_x)},length:function(){return this.node.childNodes.length},gradient:function(a,b,c){this.R.gradient(this,a,b,c)},pattern:function(a,b,c){a&&this.R.pattern(this,a,b,c)}})})();(function(){var d=window.AmCharts;d.VMLRenderer=d.Class({construct:function(a,b){this.chart=b;this.D=a;this.cNames={circle:"oval",ellipse:"oval",rect:"roundrect",path:"shape"};this.styleMap={x:"left",y:"top",width:"width",height:"height","font-family":"fontFamily","font-size":"fontSize",visibility:"visibility"}},create:function(a,b){var c;if("group"==b)c=document.createElement("div"),a.type="div";else if("text"==b)c=document.createElement("div"),a.type="text";else if("image"==b)c=document.createElement("img"),
	a.type="image";else{a.type="shape";a.shapeType=this.cNames[b];c=document.createElement("amvml:"+this.cNames[b]);var d=document.createElement("amvml:stroke");c.appendChild(d);a.stroke=d;var g=document.createElement("amvml:fill");c.appendChild(g);a.fill=g;g.className="amvml";d.className="amvml";c.className="amvml"}c.style.position="absolute";c.style.top=0;c.style.left=0;return c},path:function(a,b){a.node.setAttribute("src",b)},setAttr:function(a,b,c){if(void 0!==c){var e;8===document.documentMode&&
	(e=!0);var g=a.node,f=a.type,h=g.style;"r"==b&&(h.width=2*c,h.height=2*c);"oval"==a.shapeType&&("rx"==b&&(h.width=2*c),"ry"==b&&(h.height=2*c));"roundrect"==a.shapeType&&("width"!=b&&"height"!=b||--c);"cursor"==b&&(h.cursor=c);"cx"==b&&(h.left=c-d.removePx(h.width)/2);"cy"==b&&(h.top=c-d.removePx(h.height)/2);var k=this.styleMap[b];"width"==k&&0>c&&(c=0);void 0!==k&&(h[k]=c);"text"==f&&("text-anchor"==b&&(a.anchor=c,k=g.clientWidth,"end"==c&&(h.marginLeft=-k+"px"),"middle"==c&&(h.marginLeft=-(k/2)+
	"px",h.textAlign="center"),"start"==c&&(h.marginLeft="0px")),"fill"==b&&(h.color=c),"font-weight"==b&&(h.fontWeight=c));if(h=a.children)for(k=0;k<h.length;k++)h[k].setAttr(b,c);if("shape"==f){"cs"==b&&(g.style.width="100px",g.style.height="100px",g.setAttribute("coordsize",c));"d"==b&&g.setAttribute("path",this.svgPathToVml(c));"dd"==b&&g.setAttribute("path",c);f=a.stroke;a=a.fill;"stroke"==b&&(e?f.color=c:f.setAttribute("color",c));"stroke-width"==b&&(e?f.weight=c:f.setAttribute("weight",c));"stroke-opacity"==
	b&&(e?f.opacity=c:f.setAttribute("opacity",c));"stroke-dasharray"==b&&(h="solid",0<c&&3>c&&(h="dot"),3<=c&&6>=c&&(h="dash"),6<c&&(h="longdash"),e?f.dashstyle=h:f.setAttribute("dashstyle",h));if("fill-opacity"==b||"opacity"==b)0===c?e?a.on=!1:a.setAttribute("on",!1):e?a.opacity=c:a.setAttribute("opacity",c);"fill"==b&&(e?a.color=c:a.setAttribute("color",c));"rx"==b&&(e?g.arcSize=c+"%":g.setAttribute("arcsize",c+"%"))}}},attr:function(a,b){for(var c in b)b.hasOwnProperty(c)&&this.setAttr(a,c,b[c])},
	text:function(a,b,c){var e=new d.AmDObject("text",this.D),g=e.node;g.style.whiteSpace="pre";g.innerHTML=a;this.D.addToContainer(g,c);this.attr(e,b);return e},getBBox:function(a){return this.getBox(a.node)},getBox:function(a){var b=a.offsetLeft,c=a.offsetTop,d=a.offsetWidth,g=a.offsetHeight,f;if(a.hasChildNodes()){var h,k,l;for(l=0;l<a.childNodes.length;l++){f=this.getBox(a.childNodes[l]);var m=f.x;isNaN(m)||(isNaN(h)?h=m:m<h&&(h=m));var n=f.y;isNaN(n)||(isNaN(k)?k=n:n<k&&(k=n));m=f.width+m;isNaN(m)||
	(d=Math.max(d,m));f=f.height+n;isNaN(f)||(g=Math.max(g,f))}0>h&&(b+=h);0>k&&(c+=k)}return{x:b,y:c,width:d,height:g}},setText:function(a,b){var c=a.node;c&&(c.innerHTML=b);this.setAttr(a,"text-anchor",a.anchor)},addListener:function(a,b,c){a.node["on"+b]=c},move:function(a,b,c){var e=a.node,g=e.style;"text"==a.type&&(c-=d.removePx(g.fontSize)/2-1);"oval"==a.shapeType&&(b-=d.removePx(g.width)/2,c-=d.removePx(g.height)/2);a=a.bw;isNaN(a)||(b-=a,c-=a);isNaN(b)||isNaN(c)||(e.style.left=b+"px",e.style.top=
	c+"px")},svgPathToVml:function(a){var b=a.split(" ");a="";var c,d=Math.round,g;for(g=0;g<b.length;g++){var f=b[g],h=f.substring(0,1),f=f.substring(1),k=f.split(","),l=d(k[0])+","+d(k[1]);"M"==h&&(a+=" m "+l);"L"==h&&(a+=" l "+l);"Z"==h&&(a+=" x e");if("Q"==h){var m=c.length,n=c[m-1],q=k[0],p=k[1],l=k[2],t=k[3];c=d(c[m-2]/3+2/3*q);n=d(n/3+2/3*p);q=d(2/3*q+l/3);p=d(2/3*p+t/3);a+=" c "+c+","+n+","+q+","+p+","+l+","+t}"A"==h&&(a+=" wa "+f);"B"==h&&(a+=" at "+f);c=k}return a},animate:function(a,b,c,d,
	g){var f=a.node,h=this.chart;a.animationFinished=!1;if("translate"==b){b=c.split(",");c=b[1];var k=f.offsetTop;h.animate(a,"left",f.offsetLeft,b[0],d,g,"px");h.animate(a,"top",k,c,d,g,"px")}},clipRect:function(a,b,c,d,g){a=a.node;0===b&&0===c?(a.style.width=d+"px",a.style.height=g+"px",a.style.overflow="hidden"):a.style.clip="rect("+c+"px "+(b+d)+"px "+(c+g)+"px "+b+"px)"},rotate:function(a,b,c){if(0!==Number(b)){var e=a.node;a=e.style;c||(c=this.getBGColor(e.parentNode));a.backgroundColor=c;a.paddingLeft=
	1;c=b*Math.PI/180;var g=Math.cos(c),f=Math.sin(c),h=d.removePx(a.left),k=d.removePx(a.top),l=e.offsetWidth,e=e.offsetHeight;b/=Math.abs(b);a.left=h+l/2-l/2*Math.cos(c)-b*e/2*Math.sin(c)+3;a.top=k-b*l/2*Math.sin(c)+b*e/2*Math.sin(c);a.cssText=a.cssText+"; filter:progid:DXImageTransform.Microsoft.Matrix(M11='"+g+"', M12='"+-f+"', M21='"+f+"', M22='"+g+"', sizingmethod='auto expand');"}},getBGColor:function(a){var b="#FFFFFF";if(a.style){var c=a.style.backgroundColor;""!==c?b=c:a.parentNode&&(b=this.getBGColor(a.parentNode))}return b},
	set:function(a){var b=new d.AmDObject("group",this.D);this.D.container.appendChild(b.node);if(a){var c;for(c=0;c<a.length;c++)b.push(a[c])}return b},gradient:function(a,b,c,d){var g="";"radialGradient"==b&&(b="gradientradial",c.reverse());"linearGradient"==b&&(b="gradient");var f;for(f=0;f<c.length;f++)g+=Math.round(100*f/(c.length-1))+"% "+c[f],f<c.length-1&&(g+=",");a=a.fill;90==d?d=0:270==d?d=180:180==d?d=90:0===d&&(d=270);8===document.documentMode?(a.type=b,a.angle=d):(a.setAttribute("type",b),
	a.setAttribute("angle",d));g&&(a.colors.value=g)},remove:function(a){a.clipPath&&this.D.remove(a.clipPath);this.D.remove(a.node)},disableSelection:function(a){a.onselectstart=function(){return!1};a.style.cursor="default"},pattern:function(a,b,c,e){c=a.node;a=a.fill;var g="none";b.color&&(g=b.color);c.fillColor=g;b=b.url;d.isAbsolute(b)||(b=e+b);8===document.documentMode?(a.type="tile",a.src=b):(a.setAttribute("type","tile"),a.setAttribute("src",b))},update:function(){}})})();(function(){var d=window.AmCharts;d.SVGRenderer=d.Class({construct:function(a){this.D=a;this.animations=[]},create:function(a,b){return document.createElementNS(d.SVG_NS,b)},attr:function(a,b){for(var c in b)b.hasOwnProperty(c)&&this.setAttr(a,c,b[c])},setAttr:function(a,b,c){void 0!==c&&a.node.setAttribute(b,c)},animate:function(a,b,c,e,g){a.animationFinished=!1;var f=a.node;a["an_"+b]&&d.removeFromArray(this.animations,a["an_"+b]);"translate"==b?(f=(f=f.getAttribute("transform"))?String(f).substring(10,
	f.length-1):"0,0",f=f.split(", ").join(" "),f=f.split(" ").join(","),0===f&&(f="0,0")):f=Number(f.getAttribute(b));c={obj:a,frame:0,attribute:b,from:f,to:c,time:e,effect:g};this.animations.push(c);a["an_"+b]=c},update:function(){var a,b=this.animations;for(a=b.length-1;0<=a;a--){var c=b[a],e=c.time*d.updateRate,g=c.frame+1,f=c.obj,h=c.attribute,k,l,m;if(g<=e){c.frame++;if("translate"==h){k=c.from.split(",");h=Number(k[0]);k=Number(k[1]);isNaN(k)&&(k=0);l=c.to.split(",");m=Number(l[0]);l=Number(l[1]);
	m=0===m-h?m:Math.round(d[c.effect](0,g,h,m-h,e));c=0===l-k?l:Math.round(d[c.effect](0,g,k,l-k,e));h="transform";if(isNaN(m)||isNaN(c))continue;c="translate("+m+","+c+")"}else l=Number(c.from),k=Number(c.to),m=k-l,c=d[c.effect](0,g,l,m,e),isNaN(c)&&(c=k),0===m&&this.animations.splice(a,1);this.setAttr(f,h,c)}else"translate"==h?(l=c.to.split(","),m=Number(l[0]),l=Number(l[1]),f.translate(m,l)):(k=Number(c.to),this.setAttr(f,h,k)),f.animationFinished=!0,this.animations.splice(a,1)}},getBBox:function(a){if(a=
	a.node)try{return a.getBBox()}catch(b){}return{width:0,height:0,x:0,y:0}},path:function(a,b){a.node.setAttributeNS(d.SVG_XLINK,"xlink:href",b)},clipRect:function(a,b,c,e,g){var f=a.node,h=a.clipPath;h&&this.D.remove(h);var k=f.parentNode;k&&(f=document.createElementNS(d.SVG_NS,"clipPath"),h=d.getUniqueId(),f.setAttribute("id",h),this.D.rect(b,c,e,g,0,0,f),k.appendChild(f),b="#",d.baseHref&&!d.isIE&&(b=this.removeTarget(window.location.href)+b),this.setAttr(a,"clip-path","url("+b+h+")"),this.clipPathC++,
	a.clipPath=f)},text:function(a,b,c){var e=new d.AmDObject("text",this.D);a=String(a).split("\n");var g=d.removePx(b["font-size"]),f;for(f=0;f<a.length;f++){var h=this.create(null,"tspan");h.appendChild(document.createTextNode(a[f]));h.setAttribute("y",(g+2)*f+Math.round(g/2));h.setAttribute("x",0);e.node.appendChild(h)}e.node.setAttribute("y",Math.round(g/2));this.attr(e,b);this.D.addToContainer(e.node,c);return e},setText:function(a,b){var c=a.node;c&&(c.removeChild(c.firstChild),c.appendChild(document.createTextNode(b)))},
	move:function(a,b,c,d){isNaN(b)&&(b=0);isNaN(c)&&(c=0);b="translate("+b+","+c+")";d&&(b=b+" scale("+d+")");this.setAttr(a,"transform",b)},rotate:function(a,b){var c=a.node.getAttribute("transform"),d="rotate("+b+")";c&&(d=c+" "+d);this.setAttr(a,"transform",d)},set:function(a){var b=new d.AmDObject("g",this.D);this.D.container.appendChild(b.node);if(a){var c;for(c=0;c<a.length;c++)b.push(a[c])}return b},addListener:function(a,b,c){a.node["on"+b]=c},gradient:function(a,b,c,e){var g=a.node,f=a.grad;
	f&&this.D.remove(f);b=document.createElementNS(d.SVG_NS,b);f=d.getUniqueId();b.setAttribute("id",f);if(!isNaN(e)){var h=0,k=0,l=0,m=0;90==e?l=100:270==e?m=100:180==e?h=100:0===e&&(k=100);b.setAttribute("x1",h+"%");b.setAttribute("x2",k+"%");b.setAttribute("y1",l+"%");b.setAttribute("y2",m+"%")}for(e=0;e<c.length;e++)h=document.createElementNS(d.SVG_NS,"stop"),k=100*e/(c.length-1),0===e&&(k=0),h.setAttribute("offset",k+"%"),h.setAttribute("stop-color",c[e]),b.appendChild(h);g.parentNode.appendChild(b);
	c="#";d.baseHref&&!d.isIE&&(c=this.removeTarget(window.location.href)+c);g.setAttribute("fill","url("+c+f+")");a.grad=b},removeTarget:function(a){return a.split("#")[0]},pattern:function(a,b,c,e){var g=a.node;isNaN(c)&&(c=1);var f=a.patternNode;f&&this.D.remove(f);var f=document.createElementNS(d.SVG_NS,"pattern"),h=d.getUniqueId(),k=b;b.url&&(k=b.url);d.isAbsolute(k)||-1!=k.indexOf("data:image")||(k=e+k);e=Number(b.width);isNaN(e)&&(e=4);var l=Number(b.height);isNaN(l)&&(l=4);e/=c;l/=c;c=b.x;isNaN(c)&&
	(c=0);var m=-Math.random()*Number(b.randomX);isNaN(m)||(c=m);m=b.y;isNaN(m)&&(m=0);var n=-Math.random()*Number(b.randomY);isNaN(n)||(m=n);f.setAttribute("id",h);f.setAttribute("width",e);f.setAttribute("height",l);f.setAttribute("patternUnits","userSpaceOnUse");f.setAttribute("xlink:href",k);b.color&&(n=document.createElementNS(d.SVG_NS,"rect"),n.setAttributeNS(null,"height",e),n.setAttributeNS(null,"width",l),n.setAttributeNS(null,"fill",b.color),f.appendChild(n));this.D.image(k,0,0,e,l,f).translate(c,
	m);k="#";d.baseHref&&!d.isIE&&(k=this.removeTarget(window.location.href)+k);g.setAttribute("fill","url("+k+h+")");a.patternNode=f;g.parentNode.appendChild(f)},remove:function(a){a.clipPath&&this.D.remove(a.clipPath);a.grad&&this.D.remove(a.grad);a.patternNode&&this.D.remove(a.patternNode);this.D.remove(a.node)}})})();(function(){var d=window.AmCharts;d.AmLegend=d.Class({construct:function(a){this.enabled=!0;this.cname="AmLegend";this.createEvents("rollOverMarker","rollOverItem","rollOutMarker","rollOutItem","showItem","hideItem","clickMarker","clickLabel");this.position="bottom";this.borderColor=this.color="#000000";this.borderAlpha=0;this.markerLabelGap=5;this.verticalGap=10;this.align="left";this.horizontalGap=0;this.spacing=10;this.markerDisabledColor="#AAB3B3";this.markerType="square";this.markerSize=16;this.markerBorderThickness=
	this.markerBorderAlpha=1;this.marginBottom=this.marginTop=0;this.marginLeft=this.marginRight=20;this.autoMargins=!0;this.valueWidth=50;this.switchable=!0;this.switchType="x";this.switchColor="#FFFFFF";this.rollOverColor="#CC0000";this.reversedOrder=!1;this.labelText="[[title]]";this.valueText="[[value]]";this.accessibleLabel="[[title]]";this.useMarkerColorForLabels=!1;this.rollOverGraphAlpha=1;this.textClickEnabled=!1;this.equalWidths=!0;this.backgroundColor="#FFFFFF";this.backgroundAlpha=0;this.useGraphSettings=
	!1;this.showEntries=!0;this.labelDx=0;d.applyTheme(this,a,this.cname)},setData:function(a){this.legendData=a;this.invalidateSize()},invalidateSize:function(){this.destroy();this.entries=[];this.valueLabels=[];var a=this.legendData;this.enabled&&(d.ifArray(a)||d.ifArray(this.data))&&this.drawLegend()},drawLegend:function(){var a=this.chart,b=this.position,c=this.width,e=a.divRealWidth,g=a.divRealHeight,f=this.div,h=this.legendData;this.data&&(h=this.combineLegend?this.legendData.concat(this.data):
	this.data);isNaN(this.fontSize)&&(this.fontSize=a.fontSize);this.maxColumnsReal=this.maxColumns;if("right"==b||"left"==b)this.maxColumnsReal=1,this.autoMargins&&(this.marginLeft=this.marginRight=10);else if(this.autoMargins){this.marginRight=a.marginRight;this.marginLeft=a.marginLeft;var k=a.autoMarginOffset;"bottom"==b?(this.marginBottom=k,this.marginTop=0):(this.marginTop=k,this.marginBottom=0)}c=void 0!==c?d.toCoordinate(c,e):"right"!=b&&"left"!=b?a.realWidth:0<this.ieW?this.ieW:a.realWidth;"outside"==
	b?(c=f.offsetWidth,g=f.offsetHeight,f.clientHeight&&(c=f.clientWidth,g=f.clientHeight)):(isNaN(c)||(f.style.width=c+"px"),f.className="amChartsLegend "+a.classNamePrefix+"-legend-div");this.divWidth=c;(b=this.container)?(b.container.innerHTML="",f.appendChild(b.container),b.width=c,b.height=g,b.setSize(c,g),b.addDefs(a)):b=new d.AmDraw(f,c,g,a);this.container=b;this.lx=0;this.ly=8;g=this.markerSize;g>this.fontSize&&(this.ly=g/2-1);0<g&&(this.lx+=g+this.markerLabelGap);this.titleWidth=0;if(g=this.title)g=
	d.text(this.container,g,this.color,a.fontFamily,this.fontSize,"start",!0),d.setCN(a,g,"legend-title"),g.translate(this.marginLeft,this.marginTop+this.verticalGap+this.ly+1),a=g.getBBox(),this.titleWidth=a.width+15,this.titleHeight=a.height+6;this.index=this.maxLabelWidth=0;if(this.showEntries){for(a=0;a<h.length;a++)this.createEntry(h[a]);for(a=this.index=0;a<h.length;a++)this.createValue(h[a])}this.arrangeEntries();this.updateValues()},arrangeEntries:function(){var a=this.position,b=this.marginLeft+
	this.titleWidth,c=this.marginRight,e=this.marginTop,g=this.marginBottom,f=this.horizontalGap,h=this.div,k=this.divWidth,l=this.maxColumnsReal,m=this.verticalGap,n=this.spacing,q=k-c-b,p=0,t=0,r=this.container;this.set&&this.set.remove();var w=r.set();this.set=w;var y=r.set();w.push(y);var x=this.entries,u,A;for(A=0;A<x.length;A++){u=x[A].getBBox();var z=u.width;z>p&&(p=z);u=u.height;u>t&&(t=u)}var z=t=0,B=f,D=0,C=0;for(A=0;A<x.length;A++){var K=x[A];this.reversedOrder&&(K=x[x.length-A-1]);u=K.getBBox();
	var H;this.equalWidths?H=z*(p+n+this.markerLabelGap):(H=B,B=B+u.width+f+n);H+u.width>q&&0<A&&0!==z&&(t++,H=z=0,B=H+u.width+f+n,D=D+C+m,C=0);u.height>C&&(C=u.height);K.translate(H,D);z++;!isNaN(l)&&z>=l&&(z=0,t++,D=D+C+m,B=f,C=0);y.push(K)}u=y.getBBox();l=u.height+2*m-1;"left"==a||"right"==a?(n=u.width+2*f,k=n+b+c,h.style.width=k+"px",this.ieW=k):n=k-b-c-1;c=d.polygon(this.container,[0,n,n,0],[0,0,l,l],this.backgroundColor,this.backgroundAlpha,1,this.borderColor,this.borderAlpha);d.setCN(this.chart,
	c,"legend-bg");w.push(c);w.translate(b,e);c.toBack();b=f;if("top"==a||"bottom"==a||"absolute"==a||"outside"==a)"center"==this.align?b=f+(n-u.width)/2:"right"==this.align&&(b=f+n-u.width);y.translate(b,m+1);this.titleHeight>l&&(l=this.titleHeight);a=l+e+g+1;0>a&&(a=0);a>this.chart.divRealHeight&&(h.style.top="0px");h.style.height=Math.round(a)+"px";r.setSize(this.divWidth,a)},createEntry:function(a){if(!1!==a.visibleInLegend&&!a.hideFromLegend){var b=this,c=b.chart,e=b.useGraphSettings,g=a.markerType;
	g&&(e=!1);a.legendEntryWidth=b.markerSize;g||(g=b.markerType);var f=a.color,h=a.alpha;a.legendKeyColor&&(f=a.legendKeyColor());a.legendKeyAlpha&&(h=a.legendKeyAlpha());var k;!0===a.hidden&&(k=f=b.markerDisabledColor);var l=a.pattern,m,n=a.customMarker;n||(n=b.customMarker);var q=b.container,p=b.markerSize,t=0,r=0,w=p/2;if(e){e=a.type;b.switchType=void 0;if("line"==e||"step"==e||"smoothedLine"==e||"ohlc"==e)m=q.set(),a.hidden||(f=a.lineColorR,k=a.bulletBorderColorR),t=d.line(q,[0,2*p],[p/2,p/2],f,
	a.lineAlpha,a.lineThickness,a.dashLength),d.setCN(c,t,"graph-stroke"),m.push(t),a.bullet&&(a.hidden||(f=a.bulletColorR),t=d.bullet(q,a.bullet,a.bulletSize,f,a.bulletAlpha,a.bulletBorderThickness,k,a.bulletBorderAlpha))&&(d.setCN(c,t,"graph-bullet"),t.translate(p+1,p/2),m.push(t)),w=0,t=p,r=p/3;else{a.getGradRotation&&(m=a.getGradRotation(),0===m&&(m=180));t=a.fillColorsR;!0===a.hidden&&(t=f);if(m=b.createMarker("rectangle",t,a.fillAlphas,a.lineThickness,f,a.lineAlpha,m,l,a.dashLength))w=p,m.translate(w,
	p/2);t=p}d.setCN(c,m,"graph-"+e);d.setCN(c,m,"graph-"+a.id)}else if(n)m=q.image(n,0,0,p,p);else{var y;isNaN(b.gradientRotation)||(y=180+b.gradientRotation);(m=b.createMarker(g,f,h,void 0,void 0,void 0,y,l))&&m.translate(p/2,p/2)}d.setCN(c,m,"legend-marker");b.addListeners(m,a);q=q.set([m]);b.switchable&&a.switchable&&q.setAttr("cursor","pointer");void 0!==a.id&&d.setCN(c,q,"legend-item-"+a.id);d.setCN(c,q,a.className,!0);k=b.switchType;var x;k&&"none"!=k&&0<p&&("x"==k?(x=b.createX(),x.translate(p/
	2,p/2)):x=b.createV(),x.dItem=a,!0!==a.hidden?"x"==k?x.hide():x.show():"x"!=k&&x.hide(),b.switchable||x.hide(),b.addListeners(x,a),a.legendSwitch=x,q.push(x),d.setCN(c,x,"legend-switch"));k=b.color;a.showBalloon&&b.textClickEnabled&&void 0!==b.selectedColor&&(k=b.selectedColor);b.useMarkerColorForLabels&&!l&&(k=f);!0===a.hidden&&(k=b.markerDisabledColor);f=d.massReplace(b.labelText,{"[[title]]":a.title});void 0!==b.tabIndex&&(q.setAttr("tabindex",b.tabIndex),q.setAttr("role","menuitem"),q.keyup(function(c){13==
	c.keyCode&&b.clickMarker(a,c)}));c.accessible&&b.accessibleLabel&&(l=d.massReplace(b.accessibleLabel,{"[[title]]":a.title}),c.makeAccessible(q,l));l=b.fontSize;m&&(p<=l&&(p=p/2+b.ly-l/2+(l+2-p)/2-r,m.translate(w,p),x&&x.translate(x.x,p)),a.legendEntryWidth=m.getBBox().width);var u;f&&(f=d.fixBrakes(f),a.legendTextReal=f,u=b.labelWidth,u=isNaN(u)?d.text(b.container,f,k,c.fontFamily,l,"start"):d.wrappedText(b.container,f,k,c.fontFamily,l,"start",!1,u,0),d.setCN(c,u,"legend-label"),u.translate(b.lx+
	t,b.ly),q.push(u),b.labelDx=t,c=u.getBBox().width,b.maxLabelWidth<c&&(b.maxLabelWidth=c));b.entries[b.index]=q;a.legendEntry=b.entries[b.index];a.legendMarker=m;a.legendLabel=u;b.index++}},addListeners:function(a,b){var c=this;a&&a.mouseover(function(a){c.rollOverMarker(b,a)}).mouseout(function(a){c.rollOutMarker(b,a)}).click(function(a){c.clickMarker(b,a)})},rollOverMarker:function(a,b){this.switchable&&this.dispatch("rollOverMarker",a,b);this.dispatch("rollOverItem",a,b)},rollOutMarker:function(a,
	b){this.switchable&&this.dispatch("rollOutMarker",a,b);this.dispatch("rollOutItem",a,b)},clickMarker:function(a,b){this.switchable&&(!0===a.hidden?this.dispatch("showItem",a,b):this.dispatch("hideItem",a,b));this.dispatch("clickMarker",a,b)},rollOverLabel:function(a,b){a.hidden||this.textClickEnabled&&a.legendLabel&&a.legendLabel.attr({fill:this.rollOverColor});this.dispatch("rollOverItem",a,b)},rollOutLabel:function(a,b){if(!a.hidden&&this.textClickEnabled&&a.legendLabel){var c=this.color;void 0!==
	this.selectedColor&&a.showBalloon&&(c=this.selectedColor);this.useMarkerColorForLabels&&(c=a.lineColor,void 0===c&&(c=a.color));a.legendLabel.attr({fill:c})}this.dispatch("rollOutItem",a,b)},clickLabel:function(a,b){this.textClickEnabled?a.hidden||this.dispatch("clickLabel",a,b):this.switchable&&(!0===a.hidden?this.dispatch("showItem",a,b):this.dispatch("hideItem",a,b))},dispatch:function(a,b,c){a={type:a,dataItem:b,target:this,event:c,chart:this.chart};this.chart&&this.chart.handleLegendEvent(a);
	this.fire(a)},createValue:function(a){var b=this,c=b.fontSize,e=b.chart;if(!1!==a.visibleInLegend&&!a.hideFromLegend){var g=b.maxLabelWidth;b.forceWidth&&(g=b.labelWidth);b.equalWidths||(b.valueAlign="left");"left"==b.valueAlign&&a.legendLabel&&(g=a.legendLabel.getBBox().width);var f=g;if(b.valueText&&0<b.valueWidth){var h=b.color;b.useMarkerColorForValues&&(h=a.color,a.legendKeyColor&&(h=a.legendKeyColor()));!0===a.hidden&&(h=b.markerDisabledColor);var k=b.valueText,g=g+b.lx+b.labelDx+b.markerLabelGap+
	b.valueWidth,l="end";"left"==b.valueAlign&&(g-=b.valueWidth,l="start");h=d.text(b.container,k,h,b.chart.fontFamily,c,l);d.setCN(e,h,"legend-value");h.translate(g,b.ly);b.entries[b.index].push(h);f+=b.valueWidth+2*b.markerLabelGap;h.dItem=a;b.valueLabels.push(h)}b.index++;e=b.markerSize;e<c+7&&(e=c+7,d.VML&&(e+=3));c=b.container.rect(a.legendEntryWidth,0,f,e,0,0).attr({stroke:"none",fill:"#fff","fill-opacity":.005});c.dItem=a;b.entries[b.index-1].push(c);c.mouseover(function(c){b.rollOverLabel(a,c)}).mouseout(function(c){b.rollOutLabel(a,
	c)}).click(function(c){b.clickLabel(a,c)})}},createV:function(){var a=this.markerSize;return d.polygon(this.container,[a/5,a/2,a-a/5,a/2],[a/3,a-a/5,a/5,a/1.7],this.switchColor)},createX:function(){var a=(this.markerSize-4)/2,b={stroke:this.switchColor,"stroke-width":3},c=this.container,e=d.line(c,[-a,a],[-a,a]).attr(b),a=d.line(c,[-a,a],[a,-a]).attr(b);return this.container.set([e,a])},createMarker:function(a,b,c,e,g,f,h,k,l){var m=this.markerSize,n=this.container;g||(g=this.markerBorderColor);g||
	(g=b);isNaN(e)&&(e=this.markerBorderThickness);isNaN(f)&&(f=this.markerBorderAlpha);return d.bullet(n,a,m,b,c,e,g,f,m,h,k,this.chart.path,l)},validateNow:function(){this.invalidateSize()},updateValues:function(){var a=this.valueLabels,b=this.chart,c,e=this.data;if(a)for(c=0;c<a.length;c++){var g=a[c],f=g.dItem;f.periodDataItem=void 0;f.periodPercentDataItem=void 0;var h=" ";if(e)f.value?g.text(f.value):g.text("");else{var k=null;if(void 0!==f.type){var k=f.currentDataItem,l=this.periodValueText;f.legendPeriodValueText&&
	(l=f.legendPeriodValueText);k?(h=this.valueText,f.legendValueText&&(h=f.legendValueText),h=b.formatString(h,k)):l&&b.formatPeriodString&&(l=d.massReplace(l,{"[[title]]":f.title}),h=b.formatPeriodString(l,f))}else h=b.formatString(this.valueText,f);l=f;k&&(l=k);var m=this.valueFunction;m&&(h=m(l,h,b.periodDataItem));var n;this.useMarkerColorForLabels&&!k&&f.lastDataItem&&(k=f.lastDataItem);k?n=b.getBalloonColor(f,k):f.legendKeyColor&&(n=f.legendKeyColor());f.legendColorFunction&&(n=f.legendColorFunction(l,
	h,f.periodDataItem,f.periodPercentDataItem));g.text(h);if(!f.pattern&&(this.useMarkerColorForValues&&g.setAttr("fill",n),this.useMarkerColorForLabels)){if(g=f.legendMarker)g.setAttr("fill",n),g.setAttr("stroke",n);(f=f.legendLabel)&&f.setAttr("fill",n)}}}},renderFix:function(){if(!d.VML&&this.enabled){var a=this.container;a&&a.renderFix()}},destroy:function(){this.div.innerHTML="";d.remove(this.set)}})})();(function(){var d=window.AmCharts;d.formatMilliseconds=function(a,b){if(-1!=a.indexOf("fff")){var c=b.getMilliseconds(),d=String(c);10>c&&(d="00"+c);10<=c&&100>c&&(d="0"+c);a=a.replace(/fff/g,d)}return a};d.extractPeriod=function(a){var b=d.stripNumbers(a),c=1;b!=a&&(c=Number(a.slice(0,a.indexOf(b))));return{period:b,count:c}};d.getDate=function(a,b,c){return a instanceof Date?d.newDate(a,c):b&&isNaN(a)?d.stringToDate(a,b):new Date(a)};d.daysInMonth=function(a){return(new Date(a.getYear(),a.getMonth()+
	1,0)).getDate()};d.newDate=function(a,b){return b&&-1==b.indexOf("fff")?new Date(a):new Date(a.getFullYear(),a.getMonth(),a.getDate(),a.getHours(),a.getMinutes(),a.getSeconds(),a.getMilliseconds())};d.resetDateToMin=function(a,b,c,e){void 0===e&&(e=1);var g,f,h,k,l,m,n;d.useUTC?(g=a.getUTCFullYear(),f=a.getUTCMonth(),h=a.getUTCDate(),k=a.getUTCHours(),l=a.getUTCMinutes(),m=a.getUTCSeconds(),n=a.getUTCMilliseconds(),a=a.getUTCDay()):(g=a.getFullYear(),f=a.getMonth(),h=a.getDate(),k=a.getHours(),l=
	a.getMinutes(),m=a.getSeconds(),n=a.getMilliseconds(),a=a.getDay());switch(b){case "YYYY":g=Math.floor(g/c)*c;f=0;h=1;n=m=l=k=0;break;case "MM":f=Math.floor(f/c)*c;h=1;n=m=l=k=0;break;case "WW":h=a>=e?h-a+e:h-(7+a)+e;n=m=l=k=0;break;case "DD":n=m=l=k=0;break;case "hh":k=Math.floor(k/c)*c;n=m=l=0;break;case "mm":l=Math.floor(l/c)*c;n=m=0;break;case "ss":m=Math.floor(m/c)*c;n=0;break;case "fff":n=Math.floor(n/c)*c}d.useUTC?(a=new Date,a.setUTCFullYear(g,f,h),a.setUTCHours(k,l,m,n)):a=new Date(g,f,h,
	k,l,m,n);return a};d.getPeriodDuration=function(a,b){void 0===b&&(b=1);var c;switch(a){case "YYYY":c=316224E5;break;case "MM":c=26784E5;break;case "WW":c=6048E5;break;case "DD":c=864E5;break;case "hh":c=36E5;break;case "mm":c=6E4;break;case "ss":c=1E3;break;case "fff":c=1}return c*b};d.intervals={s:{nextInterval:"ss",contains:1E3},ss:{nextInterval:"mm",contains:60,count:0},mm:{nextInterval:"hh",contains:60,count:1},hh:{nextInterval:"DD",contains:24,count:2},DD:{nextInterval:"",contains:Infinity,count:3}};
	d.getMaxInterval=function(a,b){var c=d.intervals;return a>=c[b].contains?(a=Math.round(a/c[b].contains),b=c[b].nextInterval,d.getMaxInterval(a,b)):"ss"==b?c[b].nextInterval:b};d.dayNames="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" ");d.shortDayNames="Sun Mon Tue Wed Thu Fri Sat".split(" ");d.monthNames="January February March April May June July August September October November December".split(" ");d.shortMonthNames="Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" ");
	d.getWeekNumber=function(a){a=new Date(a);a.setHours(0,0,0);a.setDate(a.getDate()+4-(a.getDay()||7));var b=new Date(a.getFullYear(),0,1);return Math.ceil(((a-b)/864E5+1)/7)};d.stringToDate=function(a,b){var c={},e=[{pattern:"YYYY",period:"year"},{pattern:"YY",period:"year"},{pattern:"MM",period:"month"},{pattern:"M",period:"month"},{pattern:"DD",period:"date"},{pattern:"D",period:"date"},{pattern:"JJ",period:"hours"},{pattern:"J",period:"hours"},{pattern:"HH",period:"hours"},{pattern:"H",period:"hours"},
	{pattern:"KK",period:"hours"},{pattern:"K",period:"hours"},{pattern:"LL",period:"hours"},{pattern:"L",period:"hours"},{pattern:"NN",period:"minutes"},{pattern:"N",period:"minutes"},{pattern:"SS",period:"seconds"},{pattern:"S",period:"seconds"},{pattern:"QQQ",period:"milliseconds"},{pattern:"QQ",period:"milliseconds"},{pattern:"Q",period:"milliseconds"}],g=!0,f=b.indexOf("AA");-1!=f&&(a.substr(f,2),"pm"==a.toLowerCase&&(g=!1));var f=b,h,k,l;for(l=0;l<e.length;l++)k=e[l].period,c[k]=0,"date"==k&&(c[k]=
	1);for(l=0;l<e.length;l++)if(h=e[l].pattern,k=e[l].period,-1!=b.indexOf(h)){var m=d.getFromDateString(h,a,f);b=b.replace(h,"");if("KK"==h||"K"==h||"LL"==h||"L"==h)g||(m+=12);c[k]=m}d.useUTC?(e=new Date,e.setUTCFullYear(c.year,c.month,c.date),e.setUTCHours(c.hours,c.minutes,c.seconds,c.milliseconds)):e=new Date(c.year,c.month,c.date,c.hours,c.minutes,c.seconds,c.milliseconds);return e};d.getFromDateString=function(a,b,c){if(void 0!==b)return c=c.indexOf(a),b=String(b),b=b.substr(c,a.length),"0"==b.charAt(0)&&
	(b=b.substr(1,b.length-1)),b=Number(b),isNaN(b)&&(b=0),-1!=a.indexOf("M")&&b--,b};d.formatDate=function(a,b,c){c||(c=d);var e,g,f,h,k,l,m,n,q=d.getWeekNumber(a);d.useUTC?(e=a.getUTCFullYear(),g=a.getUTCMonth(),f=a.getUTCDate(),h=a.getUTCDay(),k=a.getUTCHours(),l=a.getUTCMinutes(),m=a.getUTCSeconds(),n=a.getUTCMilliseconds()):(e=a.getFullYear(),g=a.getMonth(),f=a.getDate(),h=a.getDay(),k=a.getHours(),l=a.getMinutes(),m=a.getSeconds(),n=a.getMilliseconds());var p=String(e).substr(2,2),t="0"+h;b=b.replace(/W/g,
	q);q=k;24==q&&(q=0);var r=q;10>r&&(r="0"+r);b=b.replace(/JJ/g,r);b=b.replace(/J/g,q);r=k;0===r&&(r=24,-1!=b.indexOf("H")&&(f--,0===f&&(e=new Date(a),e.setDate(e.getDate()-1),g=e.getMonth(),f=e.getDate(),e=e.getFullYear())));a=g+1;9>g&&(a="0"+a);q=f;10>f&&(q="0"+f);var w=r;10>w&&(w="0"+w);b=b.replace(/HH/g,w);b=b.replace(/H/g,r);r=k;11<r&&(r-=12);w=r;10>w&&(w="0"+w);b=b.replace(/KK/g,w);b=b.replace(/K/g,r);r=k;0===r&&(r=12);12<r&&(r-=12);w=r;10>w&&(w="0"+w);b=b.replace(/LL/g,w);b=b.replace(/L/g,r);
	r=l;10>r&&(r="0"+r);b=b.replace(/NN/g,r);b=b.replace(/N/g,l);l=m;10>l&&(l="0"+l);b=b.replace(/SS/g,l);b=b.replace(/S/g,m);m=n;10>m?m="00"+m:100>m&&(m="0"+m);l=n;10>l&&(l="00"+l);b=b.replace(/A/g,"@A@");b=b.replace(/QQQ/g,m);b=b.replace(/QQ/g,l);b=b.replace(/Q/g,n);b=b.replace(/YYYY/g,"@IIII@");b=b.replace(/YY/g,"@II@");b=b.replace(/MMMM/g,"@XXXX@");b=b.replace(/MMM/g,"@XXX@");b=b.replace(/MM/g,"@XX@");b=b.replace(/M/g,"@X@");b=b.replace(/DD/g,"@RR@");b=b.replace(/D/g,"@R@");b=b.replace(/EEEE/g,"@PPPP@");
	b=b.replace(/EEE/g,"@PPP@");b=b.replace(/EE/g,"@PP@");b=b.replace(/E/g,"@P@");b=b.replace(/@IIII@/g,e);b=b.replace(/@II@/g,p);b=b.replace(/@XXXX@/g,c.monthNames[g]);b=b.replace(/@XXX@/g,c.shortMonthNames[g]);b=b.replace(/@XX@/g,a);b=b.replace(/@X@/g,g+1);b=b.replace(/@RR@/g,q);b=b.replace(/@R@/g,f);b=b.replace(/@PPPP@/g,c.dayNames[h]);b=b.replace(/@PPP@/g,c.shortDayNames[h]);b=b.replace(/@PP@/g,t);b=b.replace(/@P@/g,h);return b=12>k?b.replace(/@A@/g,c.amString):b.replace(/@A@/g,c.pmString)};d.changeDate=
	function(a,b,c,e,g){if(d.useUTC)return d.changeUTCDate(a,b,c,e,g);var f=-1;void 0===e&&(e=!0);void 0===g&&(g=!1);!0===e&&(f=1);switch(b){case "YYYY":a.setFullYear(a.getFullYear()+c*f);e||g||a.setDate(a.getDate()+1);break;case "MM":b=a.getMonth();a.setMonth(a.getMonth()+c*f);a.getMonth()>b+c*f&&a.setDate(a.getDate()-1);e||g||a.setDate(a.getDate()+1);break;case "DD":a.setDate(a.getDate()+c*f);break;case "WW":a.setDate(a.getDate()+c*f*7);break;case "hh":a.setHours(a.getHours()+c*f);break;case "mm":a.setMinutes(a.getMinutes()+
	c*f);break;case "ss":a.setSeconds(a.getSeconds()+c*f);break;case "fff":a.setMilliseconds(a.getMilliseconds()+c*f)}return a};d.changeUTCDate=function(a,b,c,d,g){var f=-1;void 0===d&&(d=!0);void 0===g&&(g=!1);!0===d&&(f=1);switch(b){case "YYYY":a.setUTCFullYear(a.getUTCFullYear()+c*f);d||g||a.setUTCDate(a.getUTCDate()+1);break;case "MM":b=a.getUTCMonth();a.setUTCMonth(a.getUTCMonth()+c*f);a.getUTCMonth()>b+c*f&&a.setUTCDate(a.getUTCDate()-1);d||g||a.setUTCDate(a.getUTCDate()+1);break;case "DD":a.setUTCDate(a.getUTCDate()+
	c*f);break;case "WW":a.setUTCDate(a.getUTCDate()+c*f*7);break;case "hh":a.setUTCHours(a.getUTCHours()+c*f);break;case "mm":a.setUTCMinutes(a.getUTCMinutes()+c*f);break;case "ss":a.setUTCSeconds(a.getUTCSeconds()+c*f);break;case "fff":a.setUTCMilliseconds(a.getUTCMilliseconds()+c*f)}return a}})();


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(250);

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(251);
	var bind = __webpack_require__(252);
	var Axios = __webpack_require__(253);
	var defaults = __webpack_require__(254);

	/**
	 * Create an instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 * @return {Axios} A new instance of Axios
	 */
	function createInstance(defaultConfig) {
	  var context = new Axios(defaultConfig);
	  var instance = bind(Axios.prototype.request, context);

	  // Copy axios.prototype to instance
	  utils.extend(instance, Axios.prototype, context);

	  // Copy context to instance
	  utils.extend(instance, context);

	  return instance;
	}

	// Create the default instance to be exported
	var axios = createInstance(defaults);

	// Expose Axios class to allow class inheritance
	axios.Axios = Axios;

	// Factory for creating new instances
	axios.create = function create(instanceConfig) {
	  return createInstance(utils.merge(defaults, instanceConfig));
	};

	// Expose Cancel & CancelToken
	axios.Cancel = __webpack_require__(271);
	axios.CancelToken = __webpack_require__(272);
	axios.isCancel = __webpack_require__(268);

	// Expose all/spread
	axios.all = function all(promises) {
	  return Promise.all(promises);
	};
	axios.spread = __webpack_require__(273);

	module.exports = axios;

	// Allow use of default import syntax in TypeScript
	module.exports.default = axios;


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var bind = __webpack_require__(252);

	/*global toString:true*/

	// utils is a library of generic helper functions non-specific to axios

	var toString = Object.prototype.toString;

	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Array, otherwise false
	 */
	function isArray(val) {
	  return toString.call(val) === '[object Array]';
	}

	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */
	function isArrayBuffer(val) {
	  return toString.call(val) === '[object ArrayBuffer]';
	}

	/**
	 * Determine if a value is a FormData
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */
	function isFormData(val) {
	  return (typeof FormData !== 'undefined') && (val instanceof FormData);
	}

	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */
	function isArrayBufferView(val) {
	  var result;
	  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
	  }
	  return result;
	}

	/**
	 * Determine if a value is a String
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a String, otherwise false
	 */
	function isString(val) {
	  return typeof val === 'string';
	}

	/**
	 * Determine if a value is a Number
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Number, otherwise false
	 */
	function isNumber(val) {
	  return typeof val === 'number';
	}

	/**
	 * Determine if a value is undefined
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */
	function isUndefined(val) {
	  return typeof val === 'undefined';
	}

	/**
	 * Determine if a value is an Object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Object, otherwise false
	 */
	function isObject(val) {
	  return val !== null && typeof val === 'object';
	}

	/**
	 * Determine if a value is a Date
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Date, otherwise false
	 */
	function isDate(val) {
	  return toString.call(val) === '[object Date]';
	}

	/**
	 * Determine if a value is a File
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	function isFile(val) {
	  return toString.call(val) === '[object File]';
	}

	/**
	 * Determine if a value is a Blob
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */
	function isBlob(val) {
	  return toString.call(val) === '[object Blob]';
	}

	/**
	 * Determine if a value is a Function
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */
	function isFunction(val) {
	  return toString.call(val) === '[object Function]';
	}

	/**
	 * Determine if a value is a Stream
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */
	function isStream(val) {
	  return isObject(val) && isFunction(val.pipe);
	}

	/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */
	function isURLSearchParams(val) {
	  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
	}

	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 * @returns {String} The String freed of excess whitespace
	 */
	function trim(str) {
	  return str.replace(/^\s*/, '').replace(/\s*$/, '');
	}

	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  typeof document.createElement -> undefined
	 */
	function isStandardBrowserEnv() {
	  return (
	    typeof window !== 'undefined' &&
	    typeof document !== 'undefined' &&
	    typeof document.createElement === 'function'
	  );
	}

	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 */
	function forEach(obj, fn) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  }

	  // Force an array if not already something iterable
	  if (typeof obj !== 'object' && !isArray(obj)) {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }

	  if (isArray(obj)) {
	    // Iterate over array values
	    for (var i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    for (var key in obj) {
	      if (Object.prototype.hasOwnProperty.call(obj, key)) {
	        fn.call(null, obj[key], key, obj);
	      }
	    }
	  }
	}

	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */
	function merge(/* obj1, obj2, obj3, ... */) {
	  var result = {};
	  function assignValue(val, key) {
	    if (typeof result[key] === 'object' && typeof val === 'object') {
	      result[key] = merge(result[key], val);
	    } else {
	      result[key] = val;
	    }
	  }

	  for (var i = 0, l = arguments.length; i < l; i++) {
	    forEach(arguments[i], assignValue);
	  }
	  return result;
	}

	/**
	 * Extends object a by mutably adding to it the properties of object b.
	 *
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to copy properties from
	 * @param {Object} thisArg The object to bind function to
	 * @return {Object} The resulting value of object a
	 */
	function extend(a, b, thisArg) {
	  forEach(b, function assignValue(val, key) {
	    if (thisArg && typeof val === 'function') {
	      a[key] = bind(val, thisArg);
	    } else {
	      a[key] = val;
	    }
	  });
	  return a;
	}

	module.exports = {
	  isArray: isArray,
	  isArrayBuffer: isArrayBuffer,
	  isFormData: isFormData,
	  isArrayBufferView: isArrayBufferView,
	  isString: isString,
	  isNumber: isNumber,
	  isObject: isObject,
	  isUndefined: isUndefined,
	  isDate: isDate,
	  isFile: isFile,
	  isBlob: isBlob,
	  isFunction: isFunction,
	  isStream: isStream,
	  isURLSearchParams: isURLSearchParams,
	  isStandardBrowserEnv: isStandardBrowserEnv,
	  forEach: forEach,
	  merge: merge,
	  extend: extend,
	  trim: trim
	};


/***/ },
/* 252 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function bind(fn, thisArg) {
	  return function wrap() {
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	    return fn.apply(thisArg, args);
	  };
	};


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var defaults = __webpack_require__(254);
	var utils = __webpack_require__(251);
	var InterceptorManager = __webpack_require__(265);
	var dispatchRequest = __webpack_require__(266);
	var isAbsoluteURL = __webpack_require__(269);
	var combineURLs = __webpack_require__(270);

	/**
	 * Create a new instance of Axios
	 *
	 * @param {Object} instanceConfig The default config for the instance
	 */
	function Axios(instanceConfig) {
	  this.defaults = instanceConfig;
	  this.interceptors = {
	    request: new InterceptorManager(),
	    response: new InterceptorManager()
	  };
	}

	/**
	 * Dispatch a request
	 *
	 * @param {Object} config The config specific for this request (merged with this.defaults)
	 */
	Axios.prototype.request = function request(config) {
	  /*eslint no-param-reassign:0*/
	  // Allow for axios('example/url'[, config]) a la fetch API
	  if (typeof config === 'string') {
	    config = utils.merge({
	      url: arguments[0]
	    }, arguments[1]);
	  }

	  config = utils.merge(defaults, this.defaults, { method: 'get' }, config);

	  // Support baseURL config
	  if (config.baseURL && !isAbsoluteURL(config.url)) {
	    config.url = combineURLs(config.baseURL, config.url);
	  }

	  // Hook up interceptors middleware
	  var chain = [dispatchRequest, undefined];
	  var promise = Promise.resolve(config);

	  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	    chain.unshift(interceptor.fulfilled, interceptor.rejected);
	  });

	  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	    chain.push(interceptor.fulfilled, interceptor.rejected);
	  });

	  while (chain.length) {
	    promise = promise.then(chain.shift(), chain.shift());
	  }

	  return promise;
	};

	// Provide aliases for supported request methods
	utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url
	    }));
	  };
	});

	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, data, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url,
	      data: data
	    }));
	  };
	});

	module.exports = Axios;


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var utils = __webpack_require__(251);
	var normalizeHeaderName = __webpack_require__(255);

	var PROTECTION_PREFIX = /^\)\]\}',?\n/;
	var DEFAULT_CONTENT_TYPE = {
	  'Content-Type': 'application/x-www-form-urlencoded'
	};

	function setContentTypeIfUnset(headers, value) {
	  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
	    headers['Content-Type'] = value;
	  }
	}

	function getDefaultAdapter() {
	  var adapter;
	  if (typeof XMLHttpRequest !== 'undefined') {
	    // For browsers use XHR adapter
	    adapter = __webpack_require__(256);
	  } else if (typeof process !== 'undefined') {
	    // For node use HTTP adapter
	    adapter = __webpack_require__(256);
	  }
	  return adapter;
	}

	var defaults = {
	  adapter: getDefaultAdapter(),

	  transformRequest: [function transformRequest(data, headers) {
	    normalizeHeaderName(headers, 'Content-Type');
	    if (utils.isFormData(data) ||
	      utils.isArrayBuffer(data) ||
	      utils.isStream(data) ||
	      utils.isFile(data) ||
	      utils.isBlob(data)
	    ) {
	      return data;
	    }
	    if (utils.isArrayBufferView(data)) {
	      return data.buffer;
	    }
	    if (utils.isURLSearchParams(data)) {
	      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
	      return data.toString();
	    }
	    if (utils.isObject(data)) {
	      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
	      return JSON.stringify(data);
	    }
	    return data;
	  }],

	  transformResponse: [function transformResponse(data) {
	    /*eslint no-param-reassign:0*/
	    if (typeof data === 'string') {
	      data = data.replace(PROTECTION_PREFIX, '');
	      try {
	        data = JSON.parse(data);
	      } catch (e) { /* Ignore */ }
	    }
	    return data;
	  }],

	  timeout: 0,

	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN',

	  maxContentLength: -1,

	  validateStatus: function validateStatus(status) {
	    return status >= 200 && status < 300;
	  }
	};

	defaults.headers = {
	  common: {
	    'Accept': 'application/json, text/plain, */*'
	  }
	};

	utils.forEach(['delete', 'get', 'head'], function forEachMehtodNoData(method) {
	  defaults.headers[method] = {};
	});

	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
	});

	module.exports = defaults;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(251);

	module.exports = function normalizeHeaderName(headers, normalizedName) {
	  utils.forEach(headers, function processHeader(value, name) {
	    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
	      headers[normalizedName] = value;
	      delete headers[name];
	    }
	  });
	};


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var utils = __webpack_require__(251);
	var settle = __webpack_require__(257);
	var buildURL = __webpack_require__(260);
	var parseHeaders = __webpack_require__(261);
	var isURLSameOrigin = __webpack_require__(262);
	var createError = __webpack_require__(258);
	var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || __webpack_require__(263);

	module.exports = function xhrAdapter(config) {
	  return new Promise(function dispatchXhrRequest(resolve, reject) {
	    var requestData = config.data;
	    var requestHeaders = config.headers;

	    if (utils.isFormData(requestData)) {
	      delete requestHeaders['Content-Type']; // Let the browser set it
	    }

	    var request = new XMLHttpRequest();
	    var loadEvent = 'onreadystatechange';
	    var xDomain = false;

	    // For IE 8/9 CORS support
	    // Only supports POST and GET calls and doesn't returns the response headers.
	    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
	    if (process.env.NODE_ENV !== 'test' &&
	        typeof window !== 'undefined' &&
	        window.XDomainRequest && !('withCredentials' in request) &&
	        !isURLSameOrigin(config.url)) {
	      request = new window.XDomainRequest();
	      loadEvent = 'onload';
	      xDomain = true;
	      request.onprogress = function handleProgress() {};
	      request.ontimeout = function handleTimeout() {};
	    }

	    // HTTP basic authentication
	    if (config.auth) {
	      var username = config.auth.username || '';
	      var password = config.auth.password || '';
	      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
	    }

	    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

	    // Set the request timeout in MS
	    request.timeout = config.timeout;

	    // Listen for ready state
	    request[loadEvent] = function handleLoad() {
	      if (!request || (request.readyState !== 4 && !xDomain)) {
	        return;
	      }

	      // The request errored out and we didn't get a response, this will be
	      // handled by onerror instead
	      // With one exception: request that using file: protocol, most browsers
	      // will return status as 0 even though it's a successful request
	      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
	        return;
	      }

	      // Prepare the response
	      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
	      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
	      var response = {
	        data: responseData,
	        // IE sends 1223 instead of 204 (https://github.com/mzabriskie/axios/issues/201)
	        status: request.status === 1223 ? 204 : request.status,
	        statusText: request.status === 1223 ? 'No Content' : request.statusText,
	        headers: responseHeaders,
	        config: config,
	        request: request
	      };

	      settle(resolve, reject, response);

	      // Clean up request
	      request = null;
	    };

	    // Handle low level network errors
	    request.onerror = function handleError() {
	      // Real errors are hidden from us by the browser
	      // onerror should only fire if it's a network error
	      reject(createError('Network Error', config));

	      // Clean up request
	      request = null;
	    };

	    // Handle timeout
	    request.ontimeout = function handleTimeout() {
	      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED'));

	      // Clean up request
	      request = null;
	    };

	    // Add xsrf header
	    // This is only done if running in a standard browser environment.
	    // Specifically not if we're in a web worker, or react-native.
	    if (utils.isStandardBrowserEnv()) {
	      var cookies = __webpack_require__(264);

	      // Add xsrf header
	      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
	          cookies.read(config.xsrfCookieName) :
	          undefined;

	      if (xsrfValue) {
	        requestHeaders[config.xsrfHeaderName] = xsrfValue;
	      }
	    }

	    // Add headers to the request
	    if ('setRequestHeader' in request) {
	      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
	        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
	          // Remove Content-Type if data is undefined
	          delete requestHeaders[key];
	        } else {
	          // Otherwise add header to the request
	          request.setRequestHeader(key, val);
	        }
	      });
	    }

	    // Add withCredentials to request if needed
	    if (config.withCredentials) {
	      request.withCredentials = true;
	    }

	    // Add responseType to request if needed
	    if (config.responseType) {
	      try {
	        request.responseType = config.responseType;
	      } catch (e) {
	        if (request.responseType !== 'json') {
	          throw e;
	        }
	      }
	    }

	    // Handle progress if needed
	    if (typeof config.onDownloadProgress === 'function') {
	      request.addEventListener('progress', config.onDownloadProgress);
	    }

	    // Not all browsers support upload events
	    if (typeof config.onUploadProgress === 'function' && request.upload) {
	      request.upload.addEventListener('progress', config.onUploadProgress);
	    }

	    if (config.cancelToken) {
	      // Handle cancellation
	      config.cancelToken.promise.then(function onCanceled(cancel) {
	        if (!request) {
	          return;
	        }

	        request.abort();
	        reject(cancel);
	        // Clean up request
	        request = null;
	      });
	    }

	    if (requestData === undefined) {
	      requestData = null;
	    }

	    // Send the request
	    request.send(requestData);
	  });
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var createError = __webpack_require__(258);

	/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 */
	module.exports = function settle(resolve, reject, response) {
	  var validateStatus = response.config.validateStatus;
	  // Note: status is not exposed by XDomainRequest
	  if (!response.status || !validateStatus || validateStatus(response.status)) {
	    resolve(response);
	  } else {
	    reject(createError(
	      'Request failed with status code ' + response.status,
	      response.config,
	      null,
	      response
	    ));
	  }
	};


/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var enhanceError = __webpack_require__(259);

	/**
	 * Create an Error with the specified message, config, error code, and response.
	 *
	 * @param {string} message The error message.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 @ @param {Object} [response] The response.
	 * @returns {Error} The created error.
	 */
	module.exports = function createError(message, config, code, response) {
	  var error = new Error(message);
	  return enhanceError(error, config, code, response);
	};


/***/ },
/* 259 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Update an Error with the specified config, error code, and response.
	 *
	 * @param {Error} error The error to update.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 @ @param {Object} [response] The response.
	 * @returns {Error} The error.
	 */
	module.exports = function enhanceError(error, config, code, response) {
	  error.config = config;
	  if (code) {
	    error.code = code;
	  }
	  error.response = response;
	  return error;
	};


/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(251);

	function encode(val) {
	  return encodeURIComponent(val).
	    replace(/%40/gi, '@').
	    replace(/%3A/gi, ':').
	    replace(/%24/g, '$').
	    replace(/%2C/gi, ',').
	    replace(/%20/g, '+').
	    replace(/%5B/gi, '[').
	    replace(/%5D/gi, ']');
	}

	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @returns {string} The formatted url
	 */
	module.exports = function buildURL(url, params, paramsSerializer) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }

	  var serializedParams;
	  if (paramsSerializer) {
	    serializedParams = paramsSerializer(params);
	  } else if (utils.isURLSearchParams(params)) {
	    serializedParams = params.toString();
	  } else {
	    var parts = [];

	    utils.forEach(params, function serialize(val, key) {
	      if (val === null || typeof val === 'undefined') {
	        return;
	      }

	      if (utils.isArray(val)) {
	        key = key + '[]';
	      }

	      if (!utils.isArray(val)) {
	        val = [val];
	      }

	      utils.forEach(val, function parseValue(v) {
	        if (utils.isDate(v)) {
	          v = v.toISOString();
	        } else if (utils.isObject(v)) {
	          v = JSON.stringify(v);
	        }
	        parts.push(encode(key) + '=' + encode(v));
	      });
	    });

	    serializedParams = parts.join('&');
	  }

	  if (serializedParams) {
	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }

	  return url;
	};


/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(251);

	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} headers Headers needing to be parsed
	 * @returns {Object} Headers parsed into an object
	 */
	module.exports = function parseHeaders(headers) {
	  var parsed = {};
	  var key;
	  var val;
	  var i;

	  if (!headers) { return parsed; }

	  utils.forEach(headers.split('\n'), function parser(line) {
	    i = line.indexOf(':');
	    key = utils.trim(line.substr(0, i)).toLowerCase();
	    val = utils.trim(line.substr(i + 1));

	    if (key) {
	      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	    }
	  });

	  return parsed;
	};


/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(251);

	module.exports = (
	  utils.isStandardBrowserEnv() ?

	  // Standard browser envs have full support of the APIs needed to test
	  // whether the request URL is of the same origin as current location.
	  (function standardBrowserEnv() {
	    var msie = /(msie|trident)/i.test(navigator.userAgent);
	    var urlParsingNode = document.createElement('a');
	    var originURL;

	    /**
	    * Parse a URL to discover it's components
	    *
	    * @param {String} url The URL to be parsed
	    * @returns {Object}
	    */
	    function resolveURL(url) {
	      var href = url;

	      if (msie) {
	        // IE needs attribute set twice to normalize properties
	        urlParsingNode.setAttribute('href', href);
	        href = urlParsingNode.href;
	      }

	      urlParsingNode.setAttribute('href', href);

	      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	      return {
	        href: urlParsingNode.href,
	        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	        host: urlParsingNode.host,
	        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	        hostname: urlParsingNode.hostname,
	        port: urlParsingNode.port,
	        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
	                  urlParsingNode.pathname :
	                  '/' + urlParsingNode.pathname
	      };
	    }

	    originURL = resolveURL(window.location.href);

	    /**
	    * Determine if a URL shares the same origin as the current location
	    *
	    * @param {String} requestURL The URL to test
	    * @returns {boolean} True if URL shares the same origin, otherwise false
	    */
	    return function isURLSameOrigin(requestURL) {
	      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
	      return (parsed.protocol === originURL.protocol &&
	            parsed.host === originURL.host);
	    };
	  })() :

	  // Non standard browser envs (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return function isURLSameOrigin() {
	      return true;
	    };
	  })()
	);


/***/ },
/* 263 */
/***/ function(module, exports) {

	'use strict';

	// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

	var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

	function E() {
	  this.message = 'String contains an invalid character';
	}
	E.prototype = new Error;
	E.prototype.code = 5;
	E.prototype.name = 'InvalidCharacterError';

	function btoa(input) {
	  var str = String(input);
	  var output = '';
	  for (
	    // initialize result and counter
	    var block, charCode, idx = 0, map = chars;
	    // if the next str index does not exist:
	    //   change the mapping table to "="
	    //   check if d has no fractional digits
	    str.charAt(idx | 0) || (map = '=', idx % 1);
	    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
	  ) {
	    charCode = str.charCodeAt(idx += 3 / 4);
	    if (charCode > 0xFF) {
	      throw new E();
	    }
	    block = block << 8 | charCode;
	  }
	  return output;
	}

	module.exports = btoa;


/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(251);

	module.exports = (
	  utils.isStandardBrowserEnv() ?

	  // Standard browser envs support document.cookie
	  (function standardBrowserEnv() {
	    return {
	      write: function write(name, value, expires, path, domain, secure) {
	        var cookie = [];
	        cookie.push(name + '=' + encodeURIComponent(value));

	        if (utils.isNumber(expires)) {
	          cookie.push('expires=' + new Date(expires).toGMTString());
	        }

	        if (utils.isString(path)) {
	          cookie.push('path=' + path);
	        }

	        if (utils.isString(domain)) {
	          cookie.push('domain=' + domain);
	        }

	        if (secure === true) {
	          cookie.push('secure');
	        }

	        document.cookie = cookie.join('; ');
	      },

	      read: function read(name) {
	        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	        return (match ? decodeURIComponent(match[3]) : null);
	      },

	      remove: function remove(name) {
	        this.write(name, '', Date.now() - 86400000);
	      }
	    };
	  })() :

	  // Non standard browser env (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return {
	      write: function write() {},
	      read: function read() { return null; },
	      remove: function remove() {}
	    };
	  })()
	);


/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(251);

	function InterceptorManager() {
	  this.handlers = [];
	}

	/**
	 * Add a new interceptor to the stack
	 *
	 * @param {Function} fulfilled The function to handle `then` for a `Promise`
	 * @param {Function} rejected The function to handle `reject` for a `Promise`
	 *
	 * @return {Number} An ID used to remove interceptor later
	 */
	InterceptorManager.prototype.use = function use(fulfilled, rejected) {
	  this.handlers.push({
	    fulfilled: fulfilled,
	    rejected: rejected
	  });
	  return this.handlers.length - 1;
	};

	/**
	 * Remove an interceptor from the stack
	 *
	 * @param {Number} id The ID that was returned by `use`
	 */
	InterceptorManager.prototype.eject = function eject(id) {
	  if (this.handlers[id]) {
	    this.handlers[id] = null;
	  }
	};

	/**
	 * Iterate over all the registered interceptors
	 *
	 * This method is particularly useful for skipping over any
	 * interceptors that may have become `null` calling `eject`.
	 *
	 * @param {Function} fn The function to call for each interceptor
	 */
	InterceptorManager.prototype.forEach = function forEach(fn) {
	  utils.forEach(this.handlers, function forEachHandler(h) {
	    if (h !== null) {
	      fn(h);
	    }
	  });
	};

	module.exports = InterceptorManager;


/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(251);
	var transformData = __webpack_require__(267);
	var isCancel = __webpack_require__(268);
	var defaults = __webpack_require__(254);

	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	function throwIfCancellationRequested(config) {
	  if (config.cancelToken) {
	    config.cancelToken.throwIfRequested();
	  }
	}

	/**
	 * Dispatch a request to the server using the configured adapter.
	 *
	 * @param {object} config The config that is to be used for the request
	 * @returns {Promise} The Promise to be fulfilled
	 */
	module.exports = function dispatchRequest(config) {
	  throwIfCancellationRequested(config);

	  // Ensure headers exist
	  config.headers = config.headers || {};

	  // Transform request data
	  config.data = transformData(
	    config.data,
	    config.headers,
	    config.transformRequest
	  );

	  // Flatten headers
	  config.headers = utils.merge(
	    config.headers.common || {},
	    config.headers[config.method] || {},
	    config.headers || {}
	  );

	  utils.forEach(
	    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
	    function cleanHeaderConfig(method) {
	      delete config.headers[method];
	    }
	  );

	  var adapter = config.adapter || defaults.adapter;

	  return adapter(config).then(function onAdapterResolution(response) {
	    throwIfCancellationRequested(config);

	    // Transform response data
	    response.data = transformData(
	      response.data,
	      response.headers,
	      config.transformResponse
	    );

	    return response;
	  }, function onAdapterRejection(reason) {
	    if (!isCancel(reason)) {
	      throwIfCancellationRequested(config);

	      // Transform response data
	      if (reason && reason.response) {
	        reason.response.data = transformData(
	          reason.response.data,
	          reason.response.headers,
	          config.transformResponse
	        );
	      }
	    }

	    return Promise.reject(reason);
	  });
	};


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(251);

	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Object|String} data The data to be transformed
	 * @param {Array} headers The headers for the request or response
	 * @param {Array|Function} fns A single function or Array of functions
	 * @returns {*} The resulting transformed data
	 */
	module.exports = function transformData(data, headers, fns) {
	  /*eslint no-param-reassign:0*/
	  utils.forEach(fns, function transform(fn) {
	    data = fn(data, headers);
	  });

	  return data;
	};


/***/ },
/* 268 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function isCancel(value) {
	  return !!(value && value.__CANCEL__);
	};


/***/ },
/* 269 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */
	module.exports = function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
	};


/***/ },
/* 270 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 * @returns {string} The combined URL
	 */
	module.exports = function combineURLs(baseURL, relativeURL) {
	  return baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '');
	};


/***/ },
/* 271 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * A `Cancel` is an object that is thrown when an operation is canceled.
	 *
	 * @class
	 * @param {string=} message The message.
	 */
	function Cancel(message) {
	  this.message = message;
	}

	Cancel.prototype.toString = function toString() {
	  return 'Cancel' + (this.message ? ': ' + this.message : '');
	};

	Cancel.prototype.__CANCEL__ = true;

	module.exports = Cancel;


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Cancel = __webpack_require__(271);

	/**
	 * A `CancelToken` is an object that can be used to request cancellation of an operation.
	 *
	 * @class
	 * @param {Function} executor The executor function.
	 */
	function CancelToken(executor) {
	  if (typeof executor !== 'function') {
	    throw new TypeError('executor must be a function.');
	  }

	  var resolvePromise;
	  this.promise = new Promise(function promiseExecutor(resolve) {
	    resolvePromise = resolve;
	  });

	  var token = this;
	  executor(function cancel(message) {
	    if (token.reason) {
	      // Cancellation has already been requested
	      return;
	    }

	    token.reason = new Cancel(message);
	    resolvePromise(token.reason);
	  });
	}

	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	CancelToken.prototype.throwIfRequested = function throwIfRequested() {
	  if (this.reason) {
	    throw this.reason;
	  }
	};

	/**
	 * Returns an object that contains a new `CancelToken` and a function that, when called,
	 * cancels the `CancelToken`.
	 */
	CancelToken.source = function source() {
	  var cancel;
	  var token = new CancelToken(function executor(c) {
	    cancel = c;
	  });
	  return {
	    token: token,
	    cancel: cancel
	  };
	};

	module.exports = CancelToken;


/***/ },
/* 273 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 * @returns {Function}
	 */
	module.exports = function spread(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	};


/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDocumentTitle = __webpack_require__(240);

	var _reactDocumentTitle2 = _interopRequireDefault(_reactDocumentTitle);

	var _reactStormpath = __webpack_require__(234);

	var _Header = __webpack_require__(246);

	var _Header2 = _interopRequireDefault(_Header);

	var _axios = __webpack_require__(249);

	var _axios2 = _interopRequireDefault(_axios);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ProfilePage = function (_React$Component) {
		_inherits(ProfilePage, _React$Component);

		function ProfilePage(props) {
			_classCallCheck(this, ProfilePage);

			var _this = _possibleConstructorReturn(this, (ProfilePage.__proto__ || Object.getPrototypeOf(ProfilePage)).call(this, props));

			_this.getRange = _this.getRange.bind(_this);
			return _this;
		}

		_createClass(ProfilePage, [{
			key: 'getRange',
			value: function getRange() {
				_axios2.default.get('/getRange/' + this.context.user.username).then(function (response) {
					console.log(response);
					console.log("hello");
				});
			}
		}, {
			key: 'componentDidMount',
			value: function componentDidMount() {
				console.log("running");
				this.getRange();
			}
		}, {
			key: 'render',
			value: function render() {

				return _react2.default.createElement(
					_reactDocumentTitle2.default,
					{ title: 'My Profile' },
					_react2.default.createElement(
						'div',
						null,
						_react2.default.createElement(
							'div',
							{ className: 'container' },
							_react2.default.createElement('img', { src: 'http://placehold.it/200x200', alt: 'image', className: 'img-circle' }),
							_react2.default.createElement(
								'div',
								{ id: 'user-info' },
								_react2.default.createElement(
									'div',
									{ className: 'col-md-6' },
									_react2.default.createElement(
										'h3',
										null,
										'Info'
									),
									_react2.default.createElement(
										'p',
										null,
										this.context.user.givenName
									),
									_react2.default.createElement(
										'p',
										null,
										'Vocal Range'
									),
									_react2.default.createElement('p', null)
								),
								_react2.default.createElement(
									'div',
									{ className: 'col-md-offset-1 col-md-5' },
									_react2.default.createElement(
										'h3',
										null,
										'About User'
									),
									_react2.default.createElement(
										'p',
										null,
										'Hello my name is user. I started this in hopes to improve my singing range.'
									)
								)
							)
						)
					)
				);
			}
		}]);

		return ProfilePage;
	}(_react2.default.Component);

	ProfilePage.contextTypes = {
		authenticated: _react2.default.PropTypes.bool,
		user: _react2.default.PropTypes.object
	};
	exports.default = ProfilePage;

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDocumentTitle = __webpack_require__(240);

	var _reactDocumentTitle2 = _interopRequireDefault(_reactDocumentTitle);

	var _Header = __webpack_require__(246);

	var _Header2 = _interopRequireDefault(_Header);

	var _reactRouter = __webpack_require__(179);

	var _reactStormpath = __webpack_require__(234);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ForgotPage = function (_React$Component) {
		_inherits(ForgotPage, _React$Component);

		function ForgotPage() {
			_classCallCheck(this, ForgotPage);

			return _possibleConstructorReturn(this, (ForgotPage.__proto__ || Object.getPrototypeOf(ForgotPage)).apply(this, arguments));
		}

		_createClass(ForgotPage, [{
			key: 'render',
			value: function render() {
				return _react2.default.createElement(
					_reactDocumentTitle2.default,
					{ title: 'Forgot Password' },
					_react2.default.createElement(
						'div',
						null,
						_react2.default.createElement(
							'div',
							{ className: 'container' },
							_react2.default.createElement(
								'div',
								{ className: 'well clearfix' },
								_react2.default.createElement(
									'h1',
									null,
									'Forgot Password'
								),
								_react2.default.createElement(_reactStormpath.ResetPasswordForm, null)
							),
							_react2.default.createElement(
								'ul',
								null,
								_react2.default.createElement(
									'li',
									null,
									_react2.default.createElement(
										_reactRouter.Link,
										{ to: '/login' },
										'Sign-in'
									)
								),
								_react2.default.createElement(
									'li',
									null,
									_react2.default.createElement(
										_reactRouter.Link,
										{ to: '/register' },
										'Sign-up'
									)
								),
								_react2.default.createElement(
									'li',
									null,
									_react2.default.createElement(
										_reactRouter.Link,
										{ to: '/landing' },
										'Return to landing page'
									)
								)
							)
						)
					)
				);
			}
		}]);

		return ForgotPage;
	}(_react2.default.Component);

	exports.default = ForgotPage;

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _tone = __webpack_require__(277);

	var _tone2 = _interopRequireDefault(_tone);

	var _vexflow = __webpack_require__(278);

	var _vexflow2 = _interopRequireDefault(_vexflow);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Header = __webpack_require__(246);

	var _Header2 = _interopRequireDefault(_Header);

	var _reactRouter = __webpack_require__(179);

	var _reactStormpath = __webpack_require__(234);

	var _reactDocumentTitle = __webpack_require__(240);

	var _reactDocumentTitle2 = _interopRequireDefault(_reactDocumentTitle);

	var _axios = __webpack_require__(249);

	var _axios2 = _interopRequireDefault(_axios);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var StaffDisplay = function (_React$Component) {
		_inherits(StaffDisplay, _React$Component);

		function StaffDisplay(props) {
			_classCallCheck(this, StaffDisplay);

			var _this = _possibleConstructorReturn(this, (StaffDisplay.__proto__ || Object.getPrototypeOf(StaffDisplay)).call(this, props));

			_this.state = {
				note: _this.props.note,
				octave: _this.props.octave
			};
			return _this;
		}

		_createClass(StaffDisplay, [{
			key: 'componentDidMount',
			value: function componentDidMount() {

				var VF = _vexflow2.default.Flow;
				var renderer;
				var context;
				var treble_staff;
				var bass_staff;

				this.drawGrandStaff = function () {
					var display = document.getElementById("myCanvas");
					var renderer = new VF.Renderer(display, VF.Renderer.Backends.CANVAS);

					renderer.resize(450, 300);

					context = renderer.getContext();
					context.clearRect(0, 0, display.width, display.height);
					context.setFont("Arial", 10, "").setBackgroundFillStyle("#eed");

					treble_staff = new VF.Stave(20, 40, 300);
					bass_staff = new VF.Stave(20, 150, 300);

					treble_staff.addClef("treble").addTimeSignature("4/4");
					bass_staff.addClef("bass").addTimeSignature("4/4");

					var brace = new VF.StaveConnector(treble_staff, bass_staff).setType(3); // 3 = brace
					var lineRight = new VF.StaveConnector(treble_staff, bass_staff).setType(6);
					var lineLeft = new VF.StaveConnector(treble_staff, bass_staff).setType(1);

					treble_staff.setContext(context).draw();
					bass_staff.setContext(context).draw();

					brace.setContext(context).draw();
					lineLeft.setContext(context).draw();
					lineRight.setContext(context).draw();
				}.bind(this);

				// console.log(this);

				this.drawNote = function (note_name, octave) {

					// var note_name = this.state.note;
					// var octave = this.state.octave;

					this.drawGrandStaff();

					var clef_name = octave < 4 ? "bass" : "treble";
					var stave = octave < 4 ? bass_staff : treble_staff;

					if (note_name.length == 2) {
						var notes = [new VF.StaveNote({ clef: clef_name, keys: [note_name + "/" + octave], duration: "w" }).addAccidental(0, new VF.Accidental("#"))];
					} else {
						var notes = [new VF.StaveNote({ clef: clef_name, keys: [note_name + "/" + octave], duration: "w" })];
					}
					var voice = new VF.Voice({ num_beats: 4, beat_value: 4 });
					voice.addTickables(notes);

					var formatter = new VF.Formatter().joinVoices([voice]).format([voice], 400);

					voice.draw(context, stave);
				}.bind(this);

				this.drawNote(this.props.note, this.props.octave);
			}
		}, {
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(nextProps) {
				if (nextProps.note != this.props.note) {
					this.drawNote(nextProps.note, nextProps.octave);
				}
			}
		}, {
			key: 'render',
			value: function render() {

				return _react2.default.createElement('canvas', { id: 'myCanvas', style: { width: '450px', height: '300px' } });
			}
		}]);

		return StaffDisplay;
	}(_react2.default.Component);

	var NoteDisplay = function (_React$Component2) {
		_inherits(NoteDisplay, _React$Component2);

		function NoteDisplay(props) {
			_classCallCheck(this, NoteDisplay);

			return _possibleConstructorReturn(this, (NoteDisplay.__proto__ || Object.getPrototypeOf(NoteDisplay)).call(this, props));
		}

		_createClass(NoteDisplay, [{
			key: 'render',
			value: function render() {
				return _react2.default.createElement(
					'div',
					null,
					this.props.display()
				);
			}
		}]);

		return NoteDisplay;
	}(_react2.default.Component);

	var FindVocalRange = function (_React$Component3) {
		_inherits(FindVocalRange, _React$Component3);

		function FindVocalRange(props) {
			_classCallCheck(this, FindVocalRange);

			var _this3 = _possibleConstructorReturn(this, (FindVocalRange.__proto__ || Object.getPrototypeOf(FindVocalRange)).call(this, props));

			_this3.state = {
				notes: ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'],
				synth: new _tone2.default.Synth().toMaster(),
				noteIndex: 0,
				octave: 4,
				isDesc: true,
				lowestnote: 'C4',
				highestnote: 'C4',
				rangeFound: false

			};
			_this3.playTone = _this3.playTone.bind(_this3);
			_this3.stopTone = _this3.stopTone.bind(_this3);
			_this3.halfstep = _this3.halfstep.bind(_this3);
			_this3.displayNote = _this3.displayNote.bind(_this3);
			_this3.goUp = _this3.goUp.bind(_this3);
			_this3.startover = _this3.startover.bind(_this3);
			_this3.postRange = _this3.postRange.bind(_this3);

			return _this3;
		}

		_createClass(FindVocalRange, [{
			key: 'playTone',
			value: function playTone() {

				var tone = this.state.notes[this.state.noteIndex] + this.state.octave;
				console.log(tone);
				this.state.synth.triggerAttack(tone);
			}
		}, {
			key: 'displayNote',
			value: function displayNote() {
				if (!this.state.rangeFound) return _react2.default.createElement(
					'p',
					null,
					this.state.notes[this.state.noteIndex] + this.state.octave
				);else return _react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'p',
						null,
						' It appears your range is from ',
						this.state.lowestnote,
						' to ',
						this.state.highestnote,
						'. Great! With this info excises will be tailored to your current range. If you feel this is inaccurate feel free to adjust or retake the test. This important we don\'t want you to strain or hurt youself so make sure you are comfortable in singing the high and lower notes. When you are satisfied Click the comfirm button to continue get started on your vocal exercises.'
					)
				);
			}
		}, {
			key: 'stopTone',
			value: function stopTone() {

				this.state.synth.triggerRelease();
			}
		}, {
			key: 'halfstep',
			value: function halfstep() {
				var tone = this.state.notes[this.state.noteIndex] + this.state.octave;

				console.log("Run halfstep");
				if (this.state.isDesc) {
					if (this.state.lowestnote != "C0") this.setState({ lowestnote: tone });

					if (this.state.noteIndex == 0) {

						this.setState({
							noteIndex: this.state.notes.length - 1,
							octave: this.state.octave - 1
						});
					} else {

						this.setState({ noteIndex: this.state.noteIndex - 1 });
					}
				} else {
					if (this.state.highestnote != "B10") this.setState({ highestnote: tone });

					if (this.state.noteIndex == this.state.notes.length - 1) {
						this.setState({
							noteIndex: 0,
							octave: this.state.octave + 1
						});
					} else {
						this.setState({ noteIndex: this.state.noteIndex + 1 });
					}
				}
			}
		}, {
			key: 'goUp',
			value: function goUp() {
				if (this.state.isDesc) {
					this.setState({
						isDesc: false,
						noteIndex: 0,
						octave: 4
					});
				} else {
					this.setState({ rangeFound: true });
				}
			}
		}, {
			key: 'startover',
			value: function startover() {
				this.setState({
					noteIndex: 0,
					octave: 4,
					isDesc: true,
					lowestnote: 'C4',
					highestnote: 'C4',
					rangeFound: false
				});
			}
		}, {
			key: 'postRange',
			value: function postRange() {
				var data = { username: this.context.user.username,
					lowestVoice: this.state.lowestnote,
					highestVoice: this.state.highestnote };

				_axios2.default.post('/setrange', data).then(function (response) {
					console.log(response);
				});
			}
		}, {
			key: 'render',
			value: function render() {

				return _react2.default.createElement(
					_reactDocumentTitle2.default,
					{ title: 'Voicercise / Find your range' },
					_react2.default.createElement(
						'div',
						null,
						_react2.default.createElement(StaffDisplay, { note: this.state.notes[this.state.noteIndex], octave: this.state.octave }),
						_react2.default.createElement(NoteDisplay, { display: this.displayNote }),
						!this.state.rangeFound ? _react2.default.createElement(
							'div',
							null,
							_react2.default.createElement(
								'button',
								{ onMouseDown: this.playTone, onMouseUp: this.stopTone },
								'Click this'
							),
							_react2.default.createElement(
								'button',
								{ onClick: this.halfstep },
								'I can sing this easy'
							),
							_react2.default.createElement(
								'button',
								{ onClick: this.goUp },
								'Can\'t sing anymore more'
							),
							_react2.default.createElement(
								'button',
								{ onClick: this.goUp },
								'To hard to sing'
							)
						) : _react2.default.createElement(
							'div',
							null,
							_react2.default.createElement(
								'button',
								{ onClick: this.startover },
								'Start over'
							),
							_react2.default.createElement(
								'button',
								{ onClick: this.postRange },
								'Confirm'
							)
						)
					)
				);
			}
		}]);

		return FindVocalRange;
	}(_react2.default.Component);

	FindVocalRange.contextTypes = {
		authenticated: _react2.default.PropTypes.bool,
		user: _react2.default.PropTypes.object
	};
	exports.default = FindVocalRange;

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;(function(root, factory){

		//UMD
		if ( true ) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return factory();
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (typeof module === "object") {
			module.exports = factory();
	 	} else {
			root.Tone = factory();
		}

	}(this, function(){

		"use strict";
		
		var Tone;
		//constructs the main Tone object
		function Main(func){
			Tone = func();
		}
		//invokes each of the modules with the main Tone object as the argument
		function Module(func){
			func(Tone);
		}	/**
		 *  Tone.js
		 *  @author Yotam Mann
		 *  @license http://opensource.org/licenses/MIT MIT License
		 *  @copyright 2014-2016 Yotam Mann
		 */
		Main(function () {
		    
		    //////////////////////////////////////////////////////////////////////////
		    //	WEB AUDIO CONTEXT
		    ///////////////////////////////////////////////////////////////////////////
		    function isUndef(val) {
		        return typeof val === 'undefined';
		    }
		    function isFunction(val) {
		        return typeof val === 'function';
		    }
		    var audioContext;
		    //polyfill for AudioContext and OfflineAudioContext
		    if (isUndef(window.AudioContext)) {
		        window.AudioContext = window.webkitAudioContext;
		    }
		    if (isUndef(window.OfflineAudioContext)) {
		        window.OfflineAudioContext = window.webkitOfflineAudioContext;
		    }
		    if (!isUndef(AudioContext)) {
		        audioContext = new AudioContext();
		    } else {
		        throw new Error('Web Audio is not supported in this browser');
		    }
		    //SHIMS////////////////////////////////////////////////////////////////////
		    if (!isFunction(AudioContext.prototype.createGain)) {
		        AudioContext.prototype.createGain = AudioContext.prototype.createGainNode;
		    }
		    if (!isFunction(AudioContext.prototype.createDelay)) {
		        AudioContext.prototype.createDelay = AudioContext.prototype.createDelayNode;
		    }
		    if (!isFunction(AudioContext.prototype.createPeriodicWave)) {
		        AudioContext.prototype.createPeriodicWave = AudioContext.prototype.createWaveTable;
		    }
		    if (!isFunction(AudioBufferSourceNode.prototype.start)) {
		        AudioBufferSourceNode.prototype.start = AudioBufferSourceNode.prototype.noteGrainOn;
		    }
		    if (!isFunction(AudioBufferSourceNode.prototype.stop)) {
		        AudioBufferSourceNode.prototype.stop = AudioBufferSourceNode.prototype.noteOff;
		    }
		    if (!isFunction(OscillatorNode.prototype.start)) {
		        OscillatorNode.prototype.start = OscillatorNode.prototype.noteOn;
		    }
		    if (!isFunction(OscillatorNode.prototype.stop)) {
		        OscillatorNode.prototype.stop = OscillatorNode.prototype.noteOff;
		    }
		    if (!isFunction(OscillatorNode.prototype.setPeriodicWave)) {
		        OscillatorNode.prototype.setPeriodicWave = OscillatorNode.prototype.setWaveTable;
		    }
		    //extend the connect function to include Tones
		    if (isUndef(AudioNode.prototype._nativeConnect)) {
		        AudioNode.prototype._nativeConnect = AudioNode.prototype.connect;
		        AudioNode.prototype.connect = function (B, outNum, inNum) {
		            if (B.input) {
		                if (Array.isArray(B.input)) {
		                    if (isUndef(inNum)) {
		                        inNum = 0;
		                    }
		                    this.connect(B.input[inNum]);
		                } else {
		                    this.connect(B.input, outNum, inNum);
		                }
		            } else {
		                try {
		                    if (B instanceof AudioNode) {
		                        this._nativeConnect(B, outNum, inNum);
		                    } else {
		                        this._nativeConnect(B, outNum);
		                    }
		                } catch (e) {
		                    throw new Error('error connecting to node: ' + B);
		                }
		            }
		        };
		    }
		    ///////////////////////////////////////////////////////////////////////////
		    //	TONE
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  @class  Tone is the base class of all other classes. It provides 
			 *          a lot of methods and functionality to all classes that extend
			 *          it. 
			 *  
			 *  @constructor
			 *  @alias Tone
			 *  @param {number} [inputs=1] the number of input nodes
			 *  @param {number} [outputs=1] the number of output nodes
			 */
		    var Tone = function (inputs, outputs) {
		        /**
				 *  the input node(s)
				 *  @type {GainNode|Array}
				 */
		        if (isUndef(inputs) || inputs === 1) {
		            this.input = this.context.createGain();
		        } else if (inputs > 1) {
		            this.input = new Array(inputs);
		        }
		        /**
				 *  the output node(s)
				 *  @type {GainNode|Array}
				 */
		        if (isUndef(outputs) || outputs === 1) {
		            this.output = this.context.createGain();
		        } else if (outputs > 1) {
		            this.output = new Array(inputs);
		        }
		    };
		    /**
			 *  Set the parameters at once. Either pass in an
			 *  object mapping parameters to values, or to set a
			 *  single parameter, by passing in a string and value.
			 *  The last argument is an optional ramp time which 
			 *  will ramp any signal values to their destination value
			 *  over the duration of the rampTime.
			 *  @param {Object|string} params
			 *  @param {number=} value
			 *  @param {Time=} rampTime
			 *  @returns {Tone} this
			 *  @example
			 * //set values using an object
			 * filter.set({
			 * 	"frequency" : 300,
			 * 	"type" : highpass
			 * });
			 *  @example
			 * filter.set("type", "highpass");
			 *  @example
			 * //ramp to the value 220 over 3 seconds. 
			 * oscillator.set({
			 * 	"frequency" : 220
			 * }, 3);
			 */
		    Tone.prototype.set = function (params, value, rampTime) {
		        if (this.isObject(params)) {
		            rampTime = value;
		        } else if (this.isString(params)) {
		            var tmpObj = {};
		            tmpObj[params] = value;
		            params = tmpObj;
		        }
		        for (var attr in params) {
		            value = params[attr];
		            var parent = this;
		            if (attr.indexOf('.') !== -1) {
		                var attrSplit = attr.split('.');
		                for (var i = 0; i < attrSplit.length - 1; i++) {
		                    parent = parent[attrSplit[i]];
		                }
		                attr = attrSplit[attrSplit.length - 1];
		            }
		            var param = parent[attr];
		            if (isUndef(param)) {
		                continue;
		            }
		            if (Tone.Signal && param instanceof Tone.Signal || Tone.Param && param instanceof Tone.Param) {
		                if (param.value !== value) {
		                    if (isUndef(rampTime)) {
		                        param.value = value;
		                    } else {
		                        param.rampTo(value, rampTime);
		                    }
		                }
		            } else if (param instanceof AudioParam) {
		                if (param.value !== value) {
		                    param.value = value;
		                }
		            } else if (param instanceof Tone) {
		                param.set(value);
		            } else if (param !== value) {
		                parent[attr] = value;
		            }
		        }
		        return this;
		    };
		    /**
			 *  Get the object's attributes. Given no arguments get
			 *  will return all available object properties and their corresponding
			 *  values. Pass in a single attribute to retrieve or an array
			 *  of attributes. The attribute strings can also include a "."
			 *  to access deeper properties.
			 *  @example
			 * osc.get();
			 * //returns {"type" : "sine", "frequency" : 440, ...etc}
			 *  @example
			 * osc.get("type");
			 * //returns { "type" : "sine"}
			 * @example
			 * //use dot notation to access deep properties
			 * synth.get(["envelope.attack", "envelope.release"]);
			 * //returns {"envelope" : {"attack" : 0.2, "release" : 0.4}}
			 *  @param {Array=|string|undefined} params the parameters to get, otherwise will return 
			 *  					                  all available.
			 *  @returns {Object}
			 */
		    Tone.prototype.get = function (params) {
		        if (isUndef(params)) {
		            params = this._collectDefaults(this.constructor);
		        } else if (this.isString(params)) {
		            params = [params];
		        }
		        var ret = {};
		        for (var i = 0; i < params.length; i++) {
		            var attr = params[i];
		            var parent = this;
		            var subRet = ret;
		            if (attr.indexOf('.') !== -1) {
		                var attrSplit = attr.split('.');
		                for (var j = 0; j < attrSplit.length - 1; j++) {
		                    var subAttr = attrSplit[j];
		                    subRet[subAttr] = subRet[subAttr] || {};
		                    subRet = subRet[subAttr];
		                    parent = parent[subAttr];
		                }
		                attr = attrSplit[attrSplit.length - 1];
		            }
		            var param = parent[attr];
		            if (this.isObject(params[attr])) {
		                subRet[attr] = param.get();
		            } else if (Tone.Signal && param instanceof Tone.Signal) {
		                subRet[attr] = param.value;
		            } else if (Tone.Param && param instanceof Tone.Param) {
		                subRet[attr] = param.value;
		            } else if (param instanceof AudioParam) {
		                subRet[attr] = param.value;
		            } else if (param instanceof Tone) {
		                subRet[attr] = param.get();
		            } else if (!isFunction(param) && !isUndef(param)) {
		                subRet[attr] = param;
		            }
		        }
		        return ret;
		    };
		    /**
			 *  collect all of the default attributes in one
			 *  @private
			 *  @param {function} constr the constructor to find the defaults from
			 *  @return {Array} all of the attributes which belong to the class
			 */
		    Tone.prototype._collectDefaults = function (constr) {
		        var ret = [];
		        if (!isUndef(constr.defaults)) {
		            ret = Object.keys(constr.defaults);
		        }
		        if (!isUndef(constr._super)) {
		            var superDefs = this._collectDefaults(constr._super);
		            //filter out repeats
		            for (var i = 0; i < superDefs.length; i++) {
		                if (ret.indexOf(superDefs[i]) === -1) {
		                    ret.push(superDefs[i]);
		                }
		            }
		        }
		        return ret;
		    };
		    /**
			 *  @returns {string} returns the name of the class as a string
			 */
		    Tone.prototype.toString = function () {
		        for (var className in Tone) {
		            var isLetter = className[0].match(/^[A-Z]$/);
		            var sameConstructor = Tone[className] === this.constructor;
		            if (isFunction(Tone[className]) && isLetter && sameConstructor) {
		                return className;
		            }
		        }
		        return 'Tone';
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	CLASS VARS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  A static pointer to the audio context accessible as Tone.context. 
			 *  @type {AudioContext}
			 */
		    Tone.context = audioContext;
		    /**
			 *  The audio context.
			 *  @type {AudioContext}
			 */
		    Tone.prototype.context = Tone.context;
		    /**
			 *  the default buffer size
			 *  @type {number}
			 *  @static
			 *  @const
			 */
		    Tone.prototype.bufferSize = 2048;
		    /**
			 *  The delay time of a single frame (128 samples according to the spec). 
			 *  @type {number}
			 *  @static
			 *  @const
			 */
		    Tone.prototype.blockTime = 128 / Tone.context.sampleRate;
		    /**
			 *  The time of a single sample
			 *  @type {number}
			 *  @static
			 *  @const
			 */
		    Tone.prototype.sampleTime = 1 / Tone.context.sampleRate;
		    ///////////////////////////////////////////////////////////////////////////
		    //	CONNECTIONS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  disconnect and dispose
			 *  @returns {Tone} this
			 */
		    Tone.prototype.dispose = function () {
		        if (!this.isUndef(this.input)) {
		            if (this.input instanceof AudioNode) {
		                this.input.disconnect();
		            }
		            this.input = null;
		        }
		        if (!this.isUndef(this.output)) {
		            if (this.output instanceof AudioNode) {
		                this.output.disconnect();
		            }
		            this.output = null;
		        }
		        return this;
		    };
		    /**
			 *  a silent connection to the DesinationNode
			 *  which will ensure that anything connected to it
			 *  will not be garbage collected
			 *  
			 *  @private
			 */
		    var _silentNode = null;
		    /**
			 *  makes a connection to ensure that the node will not be garbage collected
			 *  until 'dispose' is explicitly called
			 *
			 *  use carefully. circumvents JS and WebAudio's normal Garbage Collection behavior
			 *  @returns {Tone} this
			 */
		    Tone.prototype.noGC = function () {
		        this.output.connect(_silentNode);
		        return this;
		    };
		    AudioNode.prototype.noGC = function () {
		        this.connect(_silentNode);
		        return this;
		    };
		    /**
			 *  connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode
			 *  @param  {Tone | AudioParam | AudioNode} unit 
			 *  @param {number} [outputNum=0] optionally which output to connect from
			 *  @param {number} [inputNum=0] optionally which input to connect to
			 *  @returns {Tone} this
			 */
		    Tone.prototype.connect = function (unit, outputNum, inputNum) {
		        if (Array.isArray(this.output)) {
		            outputNum = this.defaultArg(outputNum, 0);
		            this.output[outputNum].connect(unit, 0, inputNum);
		        } else {
		            this.output.connect(unit, outputNum, inputNum);
		        }
		        return this;
		    };
		    /**
			 *  disconnect the output
			 *  @param {Number|AudioNode} output Either the output index to disconnect
			 *                                   if the output is an array, or the
			 *                                   node to disconnect from.
			 *  @returns {Tone} this
			 */
		    Tone.prototype.disconnect = function (output) {
		        if (Array.isArray(this.output)) {
		            output = this.defaultArg(output, 0);
		            this.output[output].disconnect();
		        } else if (!this.isUndef(output)) {
		            this.output.disconnect(output);
		        } else {
		            this.output.disconnect();
		        }
		        return this;
		    };
		    /**
			 *  connect together all of the arguments in series
			 *  @param {...AudioParam|Tone|AudioNode} nodes
			 *  @returns {Tone} this
			 */
		    Tone.prototype.connectSeries = function () {
		        if (arguments.length > 1) {
		            var currentUnit = arguments[0];
		            for (var i = 1; i < arguments.length; i++) {
		                var toUnit = arguments[i];
		                currentUnit.connect(toUnit);
		                currentUnit = toUnit;
		            }
		        }
		        return this;
		    };
		    /**
			 *  Connect the output of this node to the rest of the nodes in series.
			 *  @example
			 *  //connect a node to an effect, panVol and then to the master output
			 *  node.chain(effect, panVol, Tone.Master);
			 *  @param {...AudioParam|Tone|AudioNode} nodes
			 *  @returns {Tone} this
			 */
		    Tone.prototype.chain = function () {
		        if (arguments.length > 0) {
		            var currentUnit = this;
		            for (var i = 0; i < arguments.length; i++) {
		                var toUnit = arguments[i];
		                currentUnit.connect(toUnit);
		                currentUnit = toUnit;
		            }
		        }
		        return this;
		    };
		    /**
			 *  connect the output of this node to the rest of the nodes in parallel.
			 *  @param {...AudioParam|Tone|AudioNode} nodes
			 *  @returns {Tone} this
			 */
		    Tone.prototype.fan = function () {
		        if (arguments.length > 0) {
		            for (var i = 0; i < arguments.length; i++) {
		                this.connect(arguments[i]);
		            }
		        }
		        return this;
		    };
		    //give native nodes chain and fan methods
		    AudioNode.prototype.chain = Tone.prototype.chain;
		    AudioNode.prototype.fan = Tone.prototype.fan;
		    ///////////////////////////////////////////////////////////////////////////
		    //	UTILITIES / HELPERS / MATHS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  If the `given` parameter is undefined, use the `fallback`. 
			 *  If both `given` and `fallback` are object literals, it will
			 *  return a deep copy which includes all of the parameters from both 
			 *  objects. If a parameter is undefined in given, it will return
			 *  the fallback property. 
			 *  <br><br>
			 *  WARNING: if object is self referential, it will go into an an 
			 *  infinite recursive loop.
			 *  
			 *  @param  {*} given    
			 *  @param  {*} fallback 
			 *  @return {*}          
			 */
		    Tone.prototype.defaultArg = function (given, fallback) {
		        if (this.isObject(given) && this.isObject(fallback)) {
		            var ret = {};
		            //make a deep copy of the given object
		            for (var givenProp in given) {
		                ret[givenProp] = this.defaultArg(fallback[givenProp], given[givenProp]);
		            }
		            for (var fallbackProp in fallback) {
		                ret[fallbackProp] = this.defaultArg(given[fallbackProp], fallback[fallbackProp]);
		            }
		            return ret;
		        } else {
		            return isUndef(given) ? fallback : given;
		        }
		    };
		    /**
			 *  returns the args as an options object with given arguments
			 *  mapped to the names provided. 
			 *
			 *  if the args given is an array containing only one object, it is assumed
			 *  that that's already the options object and will just return it. 
			 *  
			 *  @param  {Array} values  the 'arguments' object of the function
			 *  @param  {Array} keys the names of the arguments as they
			 *                                 should appear in the options object
			 *  @param {Object=} defaults optional defaults to mixin to the returned 
			 *                            options object                              
			 *  @return {Object}       the options object with the names mapped to the arguments
			 */
		    Tone.prototype.optionsObject = function (values, keys, defaults) {
		        var options = {};
		        if (values.length === 1 && this.isObject(values[0])) {
		            options = values[0];
		        } else {
		            for (var i = 0; i < keys.length; i++) {
		                options[keys[i]] = values[i];
		            }
		        }
		        if (!this.isUndef(defaults)) {
		            return this.defaultArg(options, defaults);
		        } else {
		            return options;
		        }
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    // TYPE CHECKING
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  test if the arg is undefined
			 *  @param {*} arg the argument to test
			 *  @returns {boolean} true if the arg is undefined
			 *  @function
			 */
		    Tone.prototype.isUndef = isUndef;
		    /**
			 *  test if the arg is a function
			 *  @param {*} arg the argument to test
			 *  @returns {boolean} true if the arg is a function
			 *  @function
			 */
		    Tone.prototype.isFunction = isFunction;
		    /**
			 *  Test if the argument is a number.
			 *  @param {*} arg the argument to test
			 *  @returns {boolean} true if the arg is a number
			 */
		    Tone.prototype.isNumber = function (arg) {
		        return typeof arg === 'number';
		    };
		    /**
			 *  Test if the given argument is an object literal (i.e. `{}`);
			 *  @param {*} arg the argument to test
			 *  @returns {boolean} true if the arg is an object literal.
			 */
		    Tone.prototype.isObject = function (arg) {
		        return Object.prototype.toString.call(arg) === '[object Object]' && arg.constructor === Object;
		    };
		    /**
			 *  Test if the argument is a boolean.
			 *  @param {*} arg the argument to test
			 *  @returns {boolean} true if the arg is a boolean
			 */
		    Tone.prototype.isBoolean = function (arg) {
		        return typeof arg === 'boolean';
		    };
		    /**
			 *  Test if the argument is an Array
			 *  @param {*} arg the argument to test
			 *  @returns {boolean} true if the arg is an array
			 */
		    Tone.prototype.isArray = function (arg) {
		        return Array.isArray(arg);
		    };
		    /**
			 *  Test if the argument is a string.
			 *  @param {*} arg the argument to test
			 *  @returns {boolean} true if the arg is a string
			 */
		    Tone.prototype.isString = function (arg) {
		        return typeof arg === 'string';
		    };
		    /**
			 *  An empty function.
			 *  @static
			 */
		    Tone.noOp = function () {
		    };
		    /**
			 *  Make the property not writable. Internal use only. 
			 *  @private
			 *  @param  {string}  property  the property to make not writable
			 */
		    Tone.prototype._readOnly = function (property) {
		        if (Array.isArray(property)) {
		            for (var i = 0; i < property.length; i++) {
		                this._readOnly(property[i]);
		            }
		        } else {
		            Object.defineProperty(this, property, {
		                writable: false,
		                enumerable: true
		            });
		        }
		    };
		    /**
			 *  Make an attribute writeable. Interal use only. 
			 *  @private
			 *  @param  {string}  property  the property to make writable
			 */
		    Tone.prototype._writable = function (property) {
		        if (Array.isArray(property)) {
		            for (var i = 0; i < property.length; i++) {
		                this._writable(property[i]);
		            }
		        } else {
		            Object.defineProperty(this, property, { writable: true });
		        }
		    };
		    /**
			 * Possible play states. 
			 * @enum {string}
			 */
		    Tone.State = {
		        Started: 'started',
		        Stopped: 'stopped',
		        Paused: 'paused'
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    // GAIN CONVERSIONS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Equal power gain scale. Good for cross-fading.
			 *  @param  {NormalRange} percent (0-1)
			 *  @return {Number}         output gain (0-1)
			 */
		    Tone.prototype.equalPowerScale = function (percent) {
		        var piFactor = 0.5 * Math.PI;
		        return Math.sin(percent * piFactor);
		    };
		    /**
			 *  Convert decibels into gain.
			 *  @param  {Decibels} db
			 *  @return {Number}   
			 */
		    Tone.prototype.dbToGain = function (db) {
		        return Math.pow(2, db / 6);
		    };
		    /**
			 *  Convert gain to decibels.
			 *  @param  {Number} gain (0-1)
			 *  @return {Decibels}   
			 */
		    Tone.prototype.gainToDb = function (gain) {
		        return 20 * (Math.log(gain) / Math.LN10);
		    };
		    /**
			 *  Convert an interval (in semitones) to a frequency ratio.
			 *  @param  {Interval} interval the number of semitones above the base note
			 *  @return {number}          the frequency ratio
			 *  @example
			 * tone.intervalToFrequencyRatio(0); // 1
			 * tone.intervalToFrequencyRatio(12); // 2
			 * tone.intervalToFrequencyRatio(-12); // 0.5
			 */
		    Tone.prototype.intervalToFrequencyRatio = function (interval) {
		        return Math.pow(2, interval / 12);
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	TIMING
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Return the current time of the AudioContext clock.
			 *  @return {Number} the currentTime from the AudioContext
			 */
		    Tone.prototype.now = function () {
		        return this.context.currentTime;
		    };
		    /**
			 *  Return the current time of the AudioContext clock.
			 *  @return {Number} the currentTime from the AudioContext
			 *  @static
			 */
		    Tone.now = function () {
		        return Tone.context.currentTime;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	INHERITANCE
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  have a child inherit all of Tone's (or a parent's) prototype
			 *  to inherit the parent's properties, make sure to call 
			 *  Parent.call(this) in the child's constructor
			 *
			 *  based on closure library's inherit function
			 *
			 *  @static
			 *  @param  {function} 	child  
			 *  @param  {function=} parent (optional) parent to inherit from
			 *                             if no parent is supplied, the child
			 *                             will inherit from Tone
			 */
		    Tone.extend = function (child, parent) {
		        if (isUndef(parent)) {
		            parent = Tone;
		        }
		        function TempConstructor() {
		        }
		        TempConstructor.prototype = parent.prototype;
		        child.prototype = new TempConstructor();
		        /** @override */
		        child.prototype.constructor = child;
		        child._super = parent;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	CONTEXT
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  array of callbacks to be invoked when a new context is added
			 *  @private 
			 *  @private
			 */
		    var newContextCallbacks = [];
		    /**
			 *  invoke this callback when a new context is added
			 *  will be invoked initially with the first context
			 *  @private 
			 *  @static
			 *  @param {function(AudioContext)} callback the callback to be invoked
			 *                                           with the audio context
			 */
		    Tone._initAudioContext = function (callback) {
		        //invoke the callback with the existing AudioContext
		        callback(Tone.context);
		        //add it to the array
		        newContextCallbacks.push(callback);
		    };
		    /**
			 *  Tone automatically creates a context on init, but if you are working
			 *  with other libraries which also create an AudioContext, it can be
			 *  useful to set your own. If you are going to set your own context, 
			 *  be sure to do it at the start of your code, before creating any objects.
			 *  @static
			 *  @param {AudioContext} ctx The new audio context to set
			 */
		    Tone.setContext = function (ctx) {
		        //set the prototypes
		        Tone.prototype.context = ctx;
		        Tone.context = ctx;
		        //invoke all the callbacks
		        for (var i = 0; i < newContextCallbacks.length; i++) {
		            newContextCallbacks[i](ctx);
		        }
		    };
		    //setup the context
		    Tone._initAudioContext(function (audioContext) {
		        //set the blockTime
		        Tone.prototype.blockTime = 128 / audioContext.sampleRate;
		        Tone.prototype.sampleTime = 1 / audioContext.sampleRate;
		        _silentNode = audioContext.createGain();
		        _silentNode.gain.value = 0;
		        _silentNode.connect(audioContext.destination);
		    });
		    Tone.version = 'r8';
		    // allow optional silencing of this log
		    if (!window.TONE_SILENCE_VERSION_LOGGING) {
		        console.log('%c * Tone.js ' + Tone.version + ' * ', 'background: #000; color: #fff');
		    }
		    return Tone;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Base class for all Signals. Used Internally. 
			 *
			 *  @constructor
			 *  @extends {Tone}
			 */
		    Tone.SignalBase = function () {
		    };
		    Tone.extend(Tone.SignalBase);
		    /**
			 *  When signals connect to other signals or AudioParams, 
			 *  they take over the output value of that signal or AudioParam. 
			 *  For all other nodes, the behavior is the same as a default <code>connect</code>. 
			 *
			 *  @override
			 *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node 
			 *  @param {number} [outputNumber=0] The output number to connect from.
			 *  @param {number} [inputNumber=0] The input number to connect to.
			 *  @returns {Tone.SignalBase} this
			 */
		    Tone.SignalBase.prototype.connect = function (node, outputNumber, inputNumber) {
		        //zero it out so that the signal can have full control
		        if (Tone.Signal && Tone.Signal === node.constructor || Tone.Param && Tone.Param === node.constructor || Tone.TimelineSignal && Tone.TimelineSignal === node.constructor) {
		            //cancel changes
		            node._param.cancelScheduledValues(0);
		            //reset the value
		            node._param.value = 0;
		            //mark the value as overridden
		            node.overridden = true;
		        } else if (node instanceof AudioParam) {
		            node.cancelScheduledValues(0);
		            node.value = 0;
		        }
		        Tone.prototype.connect.call(this, node, outputNumber, inputNumber);
		        return this;
		    };
		    return Tone.SignalBase;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Wraps the native Web Audio API 
			 *         [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).
			 *
			 *  @extends {Tone.SignalBase}
			 *  @constructor
			 *  @param {function|Array|Number} mapping The function used to define the values. 
			 *                                    The mapping function should take two arguments: 
			 *                                    the first is the value at the current position 
			 *                                    and the second is the array position. 
			 *                                    If the argument is an array, that array will be
			 *                                    set as the wave shaping function. The input
			 *                                    signal is an AudioRange [-1, 1] value and the output
			 *                                    signal can take on any numerical values. 
			 *                                    
			 *  @param {Number} [bufferLen=1024] The length of the WaveShaperNode buffer.
			 *  @example
			 * var timesTwo = new Tone.WaveShaper(function(val){
			 * 	return val * 2;
			 * }, 2048);
			 *  @example
			 * //a waveshaper can also be constructed with an array of values
			 * var invert = new Tone.WaveShaper([1, -1]);
			 */
		    Tone.WaveShaper = function (mapping, bufferLen) {
		        /**
				 *  the waveshaper
				 *  @type {WaveShaperNode}
				 *  @private
				 */
		        this._shaper = this.input = this.output = this.context.createWaveShaper();
		        /**
				 *  the waveshapers curve
				 *  @type {Float32Array}
				 *  @private
				 */
		        this._curve = null;
		        if (Array.isArray(mapping)) {
		            this.curve = mapping;
		        } else if (isFinite(mapping) || this.isUndef(mapping)) {
		            this._curve = new Float32Array(this.defaultArg(mapping, 1024));
		        } else if (this.isFunction(mapping)) {
		            this._curve = new Float32Array(this.defaultArg(bufferLen, 1024));
		            this.setMap(mapping);
		        }
		    };
		    Tone.extend(Tone.WaveShaper, Tone.SignalBase);
		    /**
			 *  Uses a mapping function to set the value of the curve. 
			 *  @param {function} mapping The function used to define the values. 
			 *                            The mapping function take two arguments: 
			 *                            the first is the value at the current position 
			 *                            which goes from -1 to 1 over the number of elements
			 *                            in the curve array. The second argument is the array position. 
			 *  @returns {Tone.WaveShaper} this
			 *  @example
			 * //map the input signal from [-1, 1] to [0, 10]
			 * shaper.setMap(function(val, index){
			 * 	return (val + 1) * 5;
			 * })
			 */
		    Tone.WaveShaper.prototype.setMap = function (mapping) {
		        for (var i = 0, len = this._curve.length; i < len; i++) {
		            var normalized = i / (len - 1) * 2 - 1;
		            this._curve[i] = mapping(normalized, i);
		        }
		        this._shaper.curve = this._curve;
		        return this;
		    };
		    /**
			 * The array to set as the waveshaper curve. For linear curves
			 * array length does not make much difference, but for complex curves
			 * longer arrays will provide smoother interpolation. 
			 * @memberOf Tone.WaveShaper#
			 * @type {Array}
			 * @name curve
			 */
		    Object.defineProperty(Tone.WaveShaper.prototype, 'curve', {
		        get: function () {
		            return this._shaper.curve;
		        },
		        set: function (mapping) {
		            this._curve = new Float32Array(mapping);
		            this._shaper.curve = this._curve;
		        }
		    });
		    /**
			 * Specifies what type of oversampling (if any) should be used when 
			 * applying the shaping curve. Can either be "none", "2x" or "4x". 
			 * @memberOf Tone.WaveShaper#
			 * @type {string}
			 * @name oversample
			 */
		    Object.defineProperty(Tone.WaveShaper.prototype, 'oversample', {
		        get: function () {
		            return this._shaper.oversample;
		        },
		        set: function (oversampling) {
		            if ([
		                    'none',
		                    '2x',
		                    '4x'
		                ].indexOf(oversampling) !== -1) {
		                this._shaper.oversample = oversampling;
		            } else {
		                throw new RangeError('Tone.WaveShaper: oversampling must be either \'none\', \'2x\', or \'4x\'');
		            }
		        }
		    });
		    /**
			 *  Clean up.
			 *  @returns {Tone.WaveShaper} this
			 */
		    Tone.WaveShaper.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._shaper.disconnect();
		        this._shaper = null;
		        this._curve = null;
		        return this;
		    };
		    return Tone.WaveShaper;
		});
		Module(function (Tone) {
		    /**
			 *  @class Tone.TimeBase is a flexible encoding of time
			 *         which can be evaluated to and from a string.
			 *         Parsing code modified from https://code.google.com/p/tapdigit/
			 *         Copyright 2011 2012 Ariya Hidayat, New BSD License
			 *  @extends {Tone}
			 *  @param  {Time}  val    The time value as a number or string
			 *  @param  {String=}  units  Unit values
			 *  @example
			 * Tone.TimeBase(4, "n")
			 * Tone.TimeBase(2, "t")
			 * Tone.TimeBase("2t").add("1m")
			 * Tone.TimeBase("2t + 1m");
			 */
		    Tone.TimeBase = function (val, units) {
		        //allows it to be constructed with or without 'new'
		        if (this instanceof Tone.TimeBase) {
		            /**
					 *  Any expressions parsed from the Time
					 *  @type  {Array}
					 *  @private
					 */
		            this._expr = this._noOp;
		            if (val instanceof Tone.TimeBase) {
		                this.copy(val);
		            } else if (!this.isUndef(units) || this.isNumber(val)) {
		                //default units
		                units = this.defaultArg(units, this._defaultUnits);
		                var method = this._primaryExpressions[units].method;
		                this._expr = method.bind(this, val);
		            } else if (this.isString(val)) {
		                this.set(val);
		            } else if (this.isUndef(val)) {
		                //default expression
		                this._expr = this._defaultExpr();
		            }
		        } else {
		            return new Tone.TimeBase(val, units);
		        }
		    };
		    Tone.extend(Tone.TimeBase);
		    /**
			 *  Repalce the current time value with the value
			 *  given by the expression string.
			 *  @param  {String}  exprString
			 *  @return {Tone.TimeBase} this
			 */
		    Tone.TimeBase.prototype.set = function (exprString) {
		        this._expr = this._parseExprString(exprString);
		        return this;
		    };
		    /**
			 *  Return a clone of the TimeBase object.
			 *  @return  {Tone.TimeBase} The new cloned Tone.TimeBase
			 */
		    Tone.TimeBase.prototype.clone = function () {
		        var instance = new this.constructor();
		        instance.copy(this);
		        return instance;
		    };
		    /**
			 *  Copies the value of time to this Time
			 *  @param {Tone.TimeBase} time
			 *  @return  {TimeBase}
			 */
		    Tone.TimeBase.prototype.copy = function (time) {
		        var val = time._expr();
		        return this.set(val);
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	ABSTRACT SYNTAX TREE PARSER
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  All the primary expressions.
			 *  @private
			 *  @type  {Object}
			 */
		    Tone.TimeBase.prototype._primaryExpressions = {
		        'n': {
		            regexp: /^(\d+)n/i,
		            method: function (value) {
		                value = parseInt(value);
		                if (value === 1) {
		                    return this._beatsToUnits(this._timeSignature());
		                } else {
		                    return this._beatsToUnits(4 / value);
		                }
		            }
		        },
		        't': {
		            regexp: /^(\d+)t/i,
		            method: function (value) {
		                value = parseInt(value);
		                return this._beatsToUnits(8 / (parseInt(value) * 3));
		            }
		        },
		        'm': {
		            regexp: /^(\d+)m/i,
		            method: function (value) {
		                return this._beatsToUnits(parseInt(value) * this._timeSignature());
		            }
		        },
		        'i': {
		            regexp: /^(\d+)i/i,
		            method: function (value) {
		                return this._ticksToUnits(parseInt(value));
		            }
		        },
		        'hz': {
		            regexp: /^(\d+(?:\.\d+)?)hz/i,
		            method: function (value) {
		                return this._frequencyToUnits(parseFloat(value));
		            }
		        },
		        'tr': {
		            regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,
		            method: function (m, q, s) {
		                var total = 0;
		                if (m && m !== '0') {
		                    total += this._beatsToUnits(this._timeSignature() * parseFloat(m));
		                }
		                if (q && q !== '0') {
		                    total += this._beatsToUnits(parseFloat(q));
		                }
		                if (s && s !== '0') {
		                    total += this._beatsToUnits(parseFloat(s) / 4);
		                }
		                return total;
		            }
		        },
		        's': {
		            regexp: /^(\d+(?:\.\d+)?s)/,
		            method: function (value) {
		                return this._secondsToUnits(parseFloat(value));
		            }
		        },
		        'samples': {
		            regexp: /^(\d+)samples/,
		            method: function (value) {
		                return parseInt(value) / this.context.sampleRate;
		            }
		        },
		        'default': {
		            regexp: /^(\d+(?:\.\d+)?)/,
		            method: function (value) {
		                return this._primaryExpressions[this._defaultUnits].method.call(this, value);
		            }
		        }
		    };
		    /**
			 *  All the binary expressions that TimeBase can accept.
			 *  @private
			 *  @type  {Object}
			 */
		    Tone.TimeBase.prototype._binaryExpressions = {
		        '+': {
		            regexp: /^\+/,
		            precedence: 2,
		            method: function (lh, rh) {
		                return lh() + rh();
		            }
		        },
		        '-': {
		            regexp: /^\-/,
		            precedence: 2,
		            method: function (lh, rh) {
		                return lh() - rh();
		            }
		        },
		        '*': {
		            regexp: /^\*/,
		            precedence: 1,
		            method: function (lh, rh) {
		                return lh() * rh();
		            }
		        },
		        '/': {
		            regexp: /^\//,
		            precedence: 1,
		            method: function (lh, rh) {
		                return lh() / rh();
		            }
		        }
		    };
		    /**
			 *  All the unary expressions.
			 *  @private
			 *  @type  {Object}
			 */
		    Tone.TimeBase.prototype._unaryExpressions = {
		        'neg': {
		            regexp: /^\-/,
		            method: function (lh) {
		                return -lh();
		            }
		        }
		    };
		    /**
			 *  Syntactic glue which holds expressions together
			 *  @private
			 *  @type  {Object}
			 */
		    Tone.TimeBase.prototype._syntaxGlue = {
		        '(': { regexp: /^\(/ },
		        ')': { regexp: /^\)/ }
		    };
		    /**
			 *  tokenize the expression based on the Expressions object
			 *  @param   {string} expr 
			 *  @return  {Object}      returns two methods on the tokenized list, next and peek
			 *  @private
			 */
		    Tone.TimeBase.prototype._tokenize = function (expr) {
		        var position = -1;
		        var tokens = [];
		        while (expr.length > 0) {
		            expr = expr.trim();
		            var token = getNextToken(expr, this);
		            tokens.push(token);
		            expr = expr.substr(token.value.length);
		        }
		        function getNextToken(expr, context) {
		            var expressions = [
		                '_binaryExpressions',
		                '_unaryExpressions',
		                '_primaryExpressions',
		                '_syntaxGlue'
		            ];
		            for (var i = 0; i < expressions.length; i++) {
		                var group = context[expressions[i]];
		                for (var opName in group) {
		                    var op = group[opName];
		                    var reg = op.regexp;
		                    var match = expr.match(reg);
		                    if (match !== null) {
		                        return {
		                            method: op.method,
		                            precedence: op.precedence,
		                            regexp: op.regexp,
		                            value: match[0]
		                        };
		                    }
		                }
		            }
		            throw new SyntaxError('Tone.TimeBase: Unexpected token ' + expr);
		        }
		        return {
		            next: function () {
		                return tokens[++position];
		            },
		            peek: function () {
		                return tokens[position + 1];
		            }
		        };
		    };
		    /**
			 *  Given a token, find the value within the groupName
			 *  @param {Object} token
			 *  @param {String} groupName
			 *  @param {Number} precedence
			 *  @private
			 */
		    Tone.TimeBase.prototype._matchGroup = function (token, group, prec) {
		        var ret = false;
		        if (!this.isUndef(token)) {
		            for (var opName in group) {
		                var op = group[opName];
		                if (op.regexp.test(token.value)) {
		                    if (!this.isUndef(prec)) {
		                        if (op.precedence === prec) {
		                            return op;
		                        }
		                    } else {
		                        return op;
		                    }
		                }
		            }
		        }
		        return ret;
		    };
		    /**
			 *  Match a binary expression given the token and the precedence
			 *  @param {Lexer} lexer
			 *  @param {Number} precedence
			 *  @private
			 */
		    Tone.TimeBase.prototype._parseBinary = function (lexer, precedence) {
		        if (this.isUndef(precedence)) {
		            precedence = 2;
		        }
		        var expr;
		        if (precedence < 0) {
		            expr = this._parseUnary(lexer);
		        } else {
		            expr = this._parseBinary(lexer, precedence - 1);
		        }
		        var token = lexer.peek();
		        while (token && this._matchGroup(token, this._binaryExpressions, precedence)) {
		            token = lexer.next();
		            expr = token.method.bind(this, expr, this._parseBinary(lexer, precedence - 1));
		            token = lexer.peek();
		        }
		        return expr;
		    };
		    /**
			 *  Match a unary expression.
			 *  @param {Lexer} lexer
			 *  @private
			 */
		    Tone.TimeBase.prototype._parseUnary = function (lexer) {
		        var token, expr;
		        token = lexer.peek();
		        var op = this._matchGroup(token, this._unaryExpressions);
		        if (op) {
		            token = lexer.next();
		            expr = this._parseUnary(lexer);
		            return op.method.bind(this, expr);
		        }
		        return this._parsePrimary(lexer);
		    };
		    /**
			 *  Match a primary expression (a value).
			 *  @param {Lexer} lexer
			 *  @private
			 */
		    Tone.TimeBase.prototype._parsePrimary = function (lexer) {
		        var token, expr;
		        token = lexer.peek();
		        if (this.isUndef(token)) {
		            throw new SyntaxError('Tone.TimeBase: Unexpected end of expression');
		        }
		        if (this._matchGroup(token, this._primaryExpressions)) {
		            token = lexer.next();
		            var matching = token.value.match(token.regexp);
		            return token.method.bind(this, matching[1], matching[2], matching[3]);
		        }
		        if (token && token.value === '(') {
		            lexer.next();
		            expr = this._parseBinary(lexer);
		            token = lexer.next();
		            if (!(token && token.value === ')')) {
		                throw new SyntaxError('Expected )');
		            }
		            return expr;
		        }
		        throw new SyntaxError('Tone.TimeBase: Cannot process token ' + token.value);
		    };
		    /**
			 *  Recursively parse the string expression into a syntax tree.
			 *  @param   {string} expr 
			 *  @return  {Function} the bound method to be evaluated later
			 *  @private
			 */
		    Tone.TimeBase.prototype._parseExprString = function (exprString) {
		        if (!this.isString(exprString)) {
		            exprString = exprString.toString();
		        }
		        var lexer = this._tokenize(exprString);
		        var tree = this._parseBinary(lexer);
		        return tree;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	DEFAULTS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  The initial expression value
			 *  @return  {Number}  The initial value 0
			 *  @private
			 */
		    Tone.TimeBase.prototype._noOp = function () {
		        return 0;
		    };
		    /**
			 *  The default expression value if no arguments are given
			 *  @private
			 */
		    Tone.TimeBase.prototype._defaultExpr = function () {
		        return this._noOp;
		    };
		    /**
			 *  The default units if none are given.
			 *  @private
			 */
		    Tone.TimeBase.prototype._defaultUnits = 's';
		    ///////////////////////////////////////////////////////////////////////////
		    //	UNIT CONVERSIONS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Returns the value of a frequency in the current units
			 *  @param {Frequency} freq
			 *  @return  {Number}
			 *  @private
			 */
		    Tone.TimeBase.prototype._frequencyToUnits = function (freq) {
		        return 1 / freq;
		    };
		    /**
			 *  Return the value of the beats in the current units
			 *  @param {Number} beats
			 *  @return  {Number}
			 *  @private
			 */
		    Tone.TimeBase.prototype._beatsToUnits = function (beats) {
		        return 60 / Tone.Transport.bpm.value * beats;
		    };
		    /**
			 *  Returns the value of a second in the current units
			 *  @param {Seconds} seconds
			 *  @return  {Number}
			 *  @private
			 */
		    Tone.TimeBase.prototype._secondsToUnits = function (seconds) {
		        return seconds;
		    };
		    /**
			 *  Returns the value of a tick in the current time units
			 *  @param {Ticks} ticks
			 *  @return  {Number}
			 *  @private
			 */
		    Tone.TimeBase.prototype._ticksToUnits = function (ticks) {
		        return ticks * (this._beatsToUnits(1) / Tone.Transport.PPQ);
		    };
		    /**
			 *  Return the time signature.
			 *  @return  {Number}
			 *  @private
			 */
		    Tone.TimeBase.prototype._timeSignature = function () {
		        return Tone.Transport.timeSignature;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	EXPRESSIONS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Push an expression onto the expression list
			 *  @param  {Time}  val
			 *  @param  {String}  type
			 *  @param  {String}  units
			 *  @return  {Tone.TimeBase} 
			 *  @private
			 */
		    Tone.TimeBase.prototype._pushExpr = function (val, name, units) {
		        //create the expression
		        if (!(val instanceof Tone.TimeBase)) {
		            val = new this.constructor(val, units);
		        }
		        this._expr = this._binaryExpressions[name].method.bind(this, this._expr, val._expr);
		        return this;
		    };
		    /**
			 *  Add to the current value.
			 *  @param  {Time}  val    The value to add
			 *  @param  {String=}  units  Optional units to use with the value.
			 *  @return  {Tone.TimeBase}  this
			 *  @example
			 * Tone.TimeBase("2m").add("1m"); //"3m"
			 */
		    Tone.TimeBase.prototype.add = function (val, units) {
		        return this._pushExpr(val, '+', units);
		    };
		    /**
			 *  Subtract the value from the current time.
			 *  @param  {Time}  val    The value to subtract
			 *  @param  {String=}  units  Optional units to use with the value.
			 *  @return  {Tone.TimeBase}  this
			 *  @example
			 * Tone.TimeBase("2m").sub("1m"); //"1m"
			 */
		    Tone.TimeBase.prototype.sub = function (val, units) {
		        return this._pushExpr(val, '-', units);
		    };
		    /**
			 *  Multiply the current value by the given time.
			 *  @param  {Time}  val    The value to multiply
			 *  @param  {String=}  units  Optional units to use with the value.
			 *  @return  {Tone.TimeBase}  this
			 *  @example
			 * Tone.TimeBase("2m").mult("2"); //"4m"
			 */
		    Tone.TimeBase.prototype.mult = function (val, units) {
		        return this._pushExpr(val, '*', units);
		    };
		    /**
			 *  Divide the current value by the given time.
			 *  @param  {Time}  val    The value to divide by
			 *  @param  {String=}  units  Optional units to use with the value.
			 *  @return  {Tone.TimeBase}  this
			 *  @example
			 * Tone.TimeBase("2m").div(2); //"1m"
			 */
		    Tone.TimeBase.prototype.div = function (val, units) {
		        return this._pushExpr(val, '/', units);
		    };
		    /**
			 *  Evaluate the time value. Returns the time
			 *  in seconds.
			 *  @return  {Seconds} 
			 */
		    Tone.TimeBase.prototype.eval = function () {
		        return this._expr();
		    };
		    /**
			 *  Clean up
			 *  @return {Tone.TimeBase} this
			 */
		    Tone.TimeBase.prototype.dispose = function () {
		        this._expr = null;
		    };
		    return Tone.TimeBase;
		});
		Module(function (Tone) {
		    /**
			 *  @class Tone.Time is a primitive type for encoding Time values. 
			 *         Eventually all time values are evaluated to seconds
			 *         using the `eval` method. Tone.Time can be constructed
			 *         with or without the `new` keyword. Tone.Time can be passed
			 *         into the parameter of any method which takes time as an argument. 
			 *  @constructor
			 *  @extends {Tone.TimeBase}
			 *  @param  {String|Number}  val    The time value.
			 *  @param  {String=}  units  The units of the value.
			 *  @example
			 * var t = Tone.Time("4n");//encodes a quarter note
			 * t.mult(4); // multiply that value by 4
			 * t.toNotation(); //returns "1m"
			 */
		    Tone.Time = function (val, units) {
		        if (this instanceof Tone.Time) {
		            /**
					 *  If the current clock time should
					 *  be added to the output
					 *  @type  {Boolean}
					 *  @private
					 */
		            this._plusNow = false;
		            Tone.TimeBase.call(this, val, units);
		        } else {
		            return new Tone.Time(val, units);
		        }
		    };
		    Tone.extend(Tone.Time, Tone.TimeBase);
		    //clone the expressions so that 
		    //we can add more without modifying the original
		    Tone.Time.prototype._unaryExpressions = Object.create(Tone.TimeBase.prototype._unaryExpressions);
		    /*
			 *  Adds an additional unary expression
			 *  which quantizes values to the next subdivision
			 *  @type {Object}
			 *  @private
			 */
		    Tone.Time.prototype._unaryExpressions.quantize = {
		        regexp: /^@/,
		        method: function (rh) {
		            return Tone.Transport.nextSubdivision(rh());
		        }
		    };
		    /*
			 *  Adds an additional unary expression
			 *  which adds the current clock time.
			 *  @type {Object}
			 *  @private
			 */
		    Tone.Time.prototype._unaryExpressions.now = {
		        regexp: /^\+/,
		        method: function (lh) {
		            this._plusNow = true;
		            return lh();
		        }
		    };
		    /**
			 *  Quantize the time by the given subdivision. Optionally add a
			 *  percentage which will move the time value towards the ideal
			 *  quantized value by that percentage. 
			 *  @param  {Number|Time}  val    The subdivision to quantize to
			 *  @param  {NormalRange}  [percent=1]  Move the time value
			 *                                   towards the quantized value by
			 *                                   a percentage.
			 *  @return  {Tone.Time}  this
			 *  @example
			 * Tone.Time(21).quantize(2).eval() //returns 22
			 * Tone.Time(0.6).quantize("4n", 0.5).eval() //returns 0.55
			 */
		    Tone.Time.prototype.quantize = function (subdiv, percent) {
		        percent = this.defaultArg(percent, 1);
		        this._expr = function (expr, subdivision, percent) {
		            expr = expr();
		            subdivision = subdivision.toSeconds();
		            var multiple = Math.round(expr / subdivision);
		            var ideal = multiple * subdivision;
		            var diff = ideal - expr;
		            return expr + diff * percent;
		        }.bind(this, this._expr, new this.constructor(subdiv), percent);
		        return this;
		    };
		    /**
			 *  Adds the clock time to the time expression at the 
			 *  moment of evaluation. 
			 *  @return  {Tone.Time}  this
			 */
		    Tone.Time.prototype.addNow = function () {
		        this._plusNow = true;
		        return this;
		    };
		    /**
			 *  @override
			 *  Override the default value return when no arguments are passed in.
			 *  The default value is 'now'
			 *  @private
			 */
		    Tone.Time.prototype._defaultExpr = function () {
		        this._plusNow = true;
		        return this._noOp;
		    };
		    /**
			 *  Copies the value of time to this Time
			 *  @param {Tone.Time} time
			 *  @return  {Time}
			 */
		    Tone.Time.prototype.copy = function (time) {
		        Tone.TimeBase.prototype.copy.call(this, time);
		        this._plusNow = time._plusNow;
		        return this;
		    };
		    //CONVERSIONS//////////////////////////////////////////////////////////////
		    /**
			 *  Convert a Time to Notation. Values will be thresholded to the nearest 128th note. 
			 *  @return {Notation} 
			 *  @example
			 * //if the Transport is at 120bpm:
			 * Tone.Time(2).toNotation();//returns "1m"
			 */
		    Tone.Time.prototype.toNotation = function () {
		        var time = this.toSeconds();
		        var testNotations = [
		            '1m',
		            '2n',
		            '4n',
		            '8n',
		            '16n',
		            '32n',
		            '64n',
		            '128n'
		        ];
		        var retNotation = this._toNotationHelper(time, testNotations);
		        //try the same thing but with tripelets
		        var testTripletNotations = [
		            '1m',
		            '2n',
		            '2t',
		            '4n',
		            '4t',
		            '8n',
		            '8t',
		            '16n',
		            '16t',
		            '32n',
		            '32t',
		            '64n',
		            '64t',
		            '128n'
		        ];
		        var retTripletNotation = this._toNotationHelper(time, testTripletNotations);
		        //choose the simpler expression of the two
		        if (retTripletNotation.split('+').length < retNotation.split('+').length) {
		            return retTripletNotation;
		        } else {
		            return retNotation;
		        }
		    };
		    /**
			 *  Helper method for Tone.toNotation
			 *  @param {Number} units 
			 *  @param {Array} testNotations
			 *  @return {String}
			 *  @private
			 */
		    Tone.Time.prototype._toNotationHelper = function (units, testNotations) {
		        //the threshold is the last value in the array
		        var threshold = this._notationToUnits(testNotations[testNotations.length - 1]);
		        var retNotation = '';
		        for (var i = 0; i < testNotations.length; i++) {
		            var notationTime = this._notationToUnits(testNotations[i]);
		            //account for floating point errors (i.e. round up if the value is 0.999999)
		            var multiple = units / notationTime;
		            var floatingPointError = 0.000001;
		            if (1 - multiple % 1 < floatingPointError) {
		                multiple += floatingPointError;
		            }
		            multiple = Math.floor(multiple);
		            if (multiple > 0) {
		                if (multiple === 1) {
		                    retNotation += testNotations[i];
		                } else {
		                    retNotation += multiple.toString() + '*' + testNotations[i];
		                }
		                units -= multiple * notationTime;
		                if (units < threshold) {
		                    break;
		                } else {
		                    retNotation += ' + ';
		                }
		            }
		        }
		        if (retNotation === '') {
		            retNotation = '0';
		        }
		        return retNotation;
		    };
		    /**
			 *  Convert a notation value to the current units
			 *  @param  {Notation}  notation 
			 *  @return  {Number} 
			 *  @private
			 */
		    Tone.Time.prototype._notationToUnits = function (notation) {
		        var primaryExprs = this._primaryExpressions;
		        var notationExprs = [
		            primaryExprs.n,
		            primaryExprs.t,
		            primaryExprs.m
		        ];
		        for (var i = 0; i < notationExprs.length; i++) {
		            var expr = notationExprs[i];
		            var match = notation.match(expr.regexp);
		            if (match) {
		                return expr.method.call(this, match[1]);
		            }
		        }
		    };
		    /**
			 *  Return the time encoded as Bars:Beats:Sixteenths.
			 *  @return  {BarsBeatsSixteenths}
			 */
		    Tone.Time.prototype.toBarsBeatsSixteenths = function () {
		        var quarterTime = this._beatsToUnits(1);
		        var quarters = this.toSeconds() / quarterTime;
		        var measures = Math.floor(quarters / this._timeSignature());
		        var sixteenths = quarters % 1 * 4;
		        quarters = Math.floor(quarters) % this._timeSignature();
		        sixteenths = sixteenths.toString();
		        if (sixteenths.length > 3) {
		            sixteenths = parseFloat(sixteenths).toFixed(3);
		        }
		        var progress = [
		            measures,
		            quarters,
		            sixteenths
		        ];
		        return progress.join(':');
		    };
		    /**
			 *  Return the time in ticks.
			 *  @return  {Ticks}
			 */
		    Tone.Time.prototype.toTicks = function () {
		        var quarterTime = this._beatsToUnits(1);
		        var quarters = this.eval() / quarterTime;
		        return Math.floor(quarters * Tone.Transport.PPQ);
		    };
		    /**
			 *  Return the time in samples
			 *  @return  {Samples}  
			 */
		    Tone.Time.prototype.toSamples = function () {
		        return this.toSeconds() * this.context.sampleRate;
		    };
		    /**
			 *  Return the time as a frequency value
			 *  @return  {Frequency} 
			 *  @example
			 * Tone.Time(2).toFrequency(); //0.5
			 */
		    Tone.Time.prototype.toFrequency = function () {
		        return 1 / this.toSeconds();
		    };
		    /**
			 *  Return the time in seconds.
			 *  @return  {Seconds} 
			 */
		    Tone.Time.prototype.toSeconds = function () {
		        return this.eval();
		    };
		    /**
			 *  Return the time in milliseconds.
			 *  @return  {Milliseconds} 
			 */
		    Tone.Time.prototype.toMilliseconds = function () {
		        return this.toSeconds() * 1000;
		    };
		    /**
			 *  Return the time in seconds.
			 *  @return  {Seconds} 
			 */
		    Tone.Time.prototype.eval = function () {
		        var val = this._expr();
		        return val + (this._plusNow ? this.now() : 0);
		    };
		    return Tone.Time;
		});
		Module(function (Tone) {
		    /**
			 *  @class Tone.Frequency is a primitive type for encoding Frequency values. 
			 *         Eventually all time values are evaluated to hertz
			 *         using the `eval` method. 
			 *  @constructor
			 *  @extends {Tone.TimeBase}
			 *  @param  {String|Number}  val    The time value.
			 *  @param  {String=}  units  The units of the value.
			 *  @example
			 * Tone.Frequency("C3").eval() // 261
			 * Tone.Frequency(38, "midi").eval() //
			 * Tone.Frequency("C3").transpose(4).eval();
			 */
		    Tone.Frequency = function (val, units) {
		        if (this instanceof Tone.Frequency) {
		            Tone.TimeBase.call(this, val, units);
		        } else {
		            return new Tone.Frequency(val, units);
		        }
		    };
		    Tone.extend(Tone.Frequency, Tone.TimeBase);
		    ///////////////////////////////////////////////////////////////////////////
		    //	AUGMENT BASE EXPRESSIONS
		    ///////////////////////////////////////////////////////////////////////////
		    //clone the expressions so that 
		    //we can add more without modifying the original
		    Tone.Frequency.prototype._primaryExpressions = Object.create(Tone.TimeBase.prototype._primaryExpressions);
		    /*
			 *  midi type primary expression
			 *  @type {Object}
			 *  @private
			 */
		    Tone.Frequency.prototype._primaryExpressions.midi = {
		        regexp: /^(\d+(?:\.\d+)?midi)/,
		        method: function (value) {
		            return this.midiToFrequency(value);
		        }
		    };
		    /*
			 *  note type primary expression
			 *  @type {Object}
			 *  @private
			 */
		    Tone.Frequency.prototype._primaryExpressions.note = {
		        regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,
		        method: function (pitch, octave) {
		            var index = noteToScaleIndex[pitch.toLowerCase()];
		            var noteNumber = index + (parseInt(octave) + 1) * 12;
		            return this.midiToFrequency(noteNumber);
		        }
		    };
		    /*
			 *  BeatsBarsSixteenths type primary expression
			 *  @type {Object}
			 *  @private
			 */
		    Tone.Frequency.prototype._primaryExpressions.tr = {
		        regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,
		        method: function (m, q, s) {
		            var total = 1;
		            if (m && m !== '0') {
		                total *= this._beatsToUnits(this._timeSignature() * parseFloat(m));
		            }
		            if (q && q !== '0') {
		                total *= this._beatsToUnits(parseFloat(q));
		            }
		            if (s && s !== '0') {
		                total *= this._beatsToUnits(parseFloat(s) / 4);
		            }
		            return total;
		        }
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	EXPRESSIONS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Transposes the frequency by the given number of semitones.
			 *  @param  {Interval}  interval
			 *  @return  {Tone.Frequency} this
			 *  @example
			 * Tone.Frequency("A4").transpose(3); //"C5"
			 */
		    Tone.Frequency.prototype.transpose = function (interval) {
		        this._expr = function (expr, interval) {
		            var val = expr();
		            return val * this.intervalToFrequencyRatio(interval);
		        }.bind(this, this._expr, interval);
		        return this;
		    };
		    /**
			 *  Takes an array of semitone intervals and returns
			 *  an array of frequencies transposed by those intervals.
			 *  @param  {Array}  intervals
			 *  @return  {Tone.Frequency} this
			 *  @example
			 * Tone.Frequency("A4").harmonize([0, 3, 7]); //["A4", "C5", "E5"]
			 */
		    Tone.Frequency.prototype.harmonize = function (intervals) {
		        this._expr = function (expr, intervals) {
		            var val = expr();
		            var ret = [];
		            for (var i = 0; i < intervals.length; i++) {
		                ret[i] = val * this.intervalToFrequencyRatio(intervals[i]);
		            }
		            return ret;
		        }.bind(this, this._expr, intervals);
		        return this;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	UNIT CONVERSIONS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Return the value of the frequency as a MIDI note
			 *  @return  {MIDI}
			 *  @example
			 * Tone.Frequency("C4").toMidi(); //60
			 */
		    Tone.Frequency.prototype.toMidi = function () {
		        return this.frequencyToMidi(this.eval());
		    };
		    /**
			 *  Return the value of the frequency in Scientific Pitch Notation
			 *  @return  {Note}
			 *  @example
			 * Tone.Frequency(69, "midi").toNote(); //"A4"
			 */
		    Tone.Frequency.prototype.toNote = function () {
		        var freq = this.eval();
		        var log = Math.log(freq / Tone.Frequency.A4) / Math.LN2;
		        var noteNumber = Math.round(12 * log) + 57;
		        var octave = Math.floor(noteNumber / 12);
		        if (octave < 0) {
		            noteNumber += -12 * octave;
		        }
		        var noteName = scaleIndexToNote[noteNumber % 12];
		        return noteName + octave.toString();
		    };
		    /**
			 *  Return the duration of one cycle in seconds.
			 *  @return  {Seconds}
			 */
		    Tone.Frequency.prototype.toSeconds = function () {
		        return 1 / this.eval();
		    };
		    /**
			 *  Return the value in Hertz
			 *  @return  {Frequency}
			 */
		    Tone.Frequency.prototype.toFrequency = function () {
		        return this.eval();
		    };
		    /**
			 *  Return the duration of one cycle in ticks
			 *  @return  {Ticks}
			 */
		    Tone.Frequency.prototype.toTicks = function () {
		        var quarterTime = this._beatsToUnits(1);
		        var quarters = this.eval() / quarterTime;
		        return Math.floor(quarters * Tone.Transport.PPQ);
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	UNIT CONVERSIONS HELPERS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Returns the value of a frequency in the current units
			 *  @param {Frequency} freq
			 *  @return  {Number}
			 *  @private
			 */
		    Tone.Frequency.prototype._frequencyToUnits = function (freq) {
		        return freq;
		    };
		    /**
			 *  Returns the value of a tick in the current time units
			 *  @param {Ticks} ticks
			 *  @return  {Number}
			 *  @private
			 */
		    Tone.Frequency.prototype._ticksToUnits = function (ticks) {
		        return 1 / (ticks * 60 / (Tone.Transport.bpm.value * Tone.Transport.PPQ));
		    };
		    /**
			 *  Return the value of the beats in the current units
			 *  @param {Number} beats
			 *  @return  {Number}
			 *  @private
			 */
		    Tone.Frequency.prototype._beatsToUnits = function (beats) {
		        return 1 / Tone.TimeBase.prototype._beatsToUnits.call(this, beats);
		    };
		    /**
			 *  Returns the value of a second in the current units
			 *  @param {Seconds} seconds
			 *  @return  {Number}
			 *  @private
			 */
		    Tone.Frequency.prototype._secondsToUnits = function (seconds) {
		        return 1 / seconds;
		    };
		    /**
			 *  The default units if none are given.
			 *  @private
			 */
		    Tone.Frequency.prototype._defaultUnits = 'hz';
		    ///////////////////////////////////////////////////////////////////////////
		    //	FREQUENCY CONVERSIONS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Note to scale index
			 *  @type  {Object}
			 */
		    var noteToScaleIndex = {
		        'cbb': -2,
		        'cb': -1,
		        'c': 0,
		        'c#': 1,
		        'cx': 2,
		        'dbb': 0,
		        'db': 1,
		        'd': 2,
		        'd#': 3,
		        'dx': 4,
		        'ebb': 2,
		        'eb': 3,
		        'e': 4,
		        'e#': 5,
		        'ex': 6,
		        'fbb': 3,
		        'fb': 4,
		        'f': 5,
		        'f#': 6,
		        'fx': 7,
		        'gbb': 5,
		        'gb': 6,
		        'g': 7,
		        'g#': 8,
		        'gx': 9,
		        'abb': 7,
		        'ab': 8,
		        'a': 9,
		        'a#': 10,
		        'ax': 11,
		        'bbb': 9,
		        'bb': 10,
		        'b': 11,
		        'b#': 12,
		        'bx': 13
		    };
		    /**
			 *  scale index to note (sharps)
			 *  @type  {Array}
			 */
		    var scaleIndexToNote = [
		        'C',
		        'C#',
		        'D',
		        'D#',
		        'E',
		        'F',
		        'F#',
		        'G',
		        'G#',
		        'A',
		        'A#',
		        'B'
		    ];
		    /**
			 *  The [concert pitch](https://en.wikipedia.org/wiki/Concert_pitch)
			 *  A4's values in Hertz. 
			 *  @type {Frequency}
			 *  @static
			 */
		    Tone.Frequency.A4 = 440;
		    /**
			 *  Convert a MIDI note to frequency value. 
			 *  @param  {MIDI} midi The midi number to convert.
			 *  @return {Frequency} the corresponding frequency value
			 *  @example
			 * tone.midiToFrequency(69); // returns 440
			 */
		    Tone.Frequency.prototype.midiToFrequency = function (midi) {
		        return Tone.Frequency.A4 * Math.pow(2, (midi - 69) / 12);
		    };
		    /**
			 *  Convert a frequency value to a MIDI note.
			 *  @param {Frequency} frequency The value to frequency value to convert.
			 *  @returns  {MIDI}
			 *  @example
			 * tone.midiToFrequency(440); // returns 69
			 */
		    Tone.Frequency.prototype.frequencyToMidi = function (frequency) {
		        return 69 + 12 * Math.log(frequency / Tone.Frequency.A4) / Math.LN2;
		    };
		    return Tone.Frequency;
		});
		Module(function (Tone) {
		    /**
			 *  @class Tone.TransportTime is a the time along the Transport's
			 *         timeline. It is similar to Tone.Time, but instead of evaluating
			 *         against the AudioContext's clock, it is evaluated against
			 *         the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).
			 *  @constructor
			 *  @param  {Time}  val    The time value as a number or string
			 *  @param  {String=}  units  Unit values
			 *  @extends {Tone.Time}
			 */
		    Tone.TransportTime = function (val, units) {
		        if (this instanceof Tone.TransportTime) {
		            Tone.Time.call(this, val, units);
		        } else {
		            return new Tone.TransportTime(val, units);
		        }
		    };
		    Tone.extend(Tone.TransportTime, Tone.Time);
		    //clone the expressions so that 
		    //we can add more without modifying the original
		    Tone.TransportTime.prototype._unaryExpressions = Object.create(Tone.Time.prototype._unaryExpressions);
		    /**
			 *  Adds an additional unary expression
			 *  which quantizes values to the next subdivision
			 *  @type {Object}
			 *  @private
			 */
		    Tone.TransportTime.prototype._unaryExpressions.quantize = {
		        regexp: /^@/,
		        method: function (rh) {
		            var subdivision = this._secondsToTicks(rh());
		            var multiple = Math.ceil(Tone.Transport.ticks / subdivision);
		            return this._ticksToUnits(multiple * subdivision);
		        }
		    };
		    /**
			 *  Convert seconds into ticks
			 *  @param {Seconds} seconds
			 *  @return  {Ticks}
			 *  @private
			 */
		    Tone.TransportTime.prototype._secondsToTicks = function (seconds) {
		        var quarterTime = this._beatsToUnits(1);
		        var quarters = seconds / quarterTime;
		        return Math.round(quarters * Tone.Transport.PPQ);
		    };
		    /**
			 *  Evaluate the time expression. Returns values in ticks
			 *  @return {Ticks}
			 */
		    Tone.TransportTime.prototype.eval = function () {
		        var val = this._secondsToTicks(this._expr());
		        return val + (this._plusNow ? Tone.Transport.ticks : 0);
		    };
		    /**
			 *  Return the time in ticks.
			 *  @return  {Ticks}
			 */
		    Tone.TransportTime.prototype.toTicks = function () {
		        return this.eval();
		    };
		    /**
			 *  Return the time in seconds.
			 *  @return  {Seconds}
			 */
		    Tone.TransportTime.prototype.toSeconds = function () {
		        var val = this._expr();
		        return val + (this._plusNow ? Tone.Transport.seconds : 0);
		    };
		    /**
			 *  Return the time as a frequency value
			 *  @return  {Frequency} 
			 */
		    Tone.TransportTime.prototype.toFrequency = function () {
		        return 1 / this.toSeconds();
		    };
		    return Tone.TransportTime;
		});
		Module(function (Tone) {
		    ///////////////////////////////////////////////////////////////////////////
		    //	TYPES
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 * Units which a value can take on.
			 * @enum {String}
			 */
		    Tone.Type = {
		        /** 
				 *  Default units
				 *  @typedef {Default}
				 */
		        Default: 'number',
		        /**
				 *  Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).
				 *
				 *  <ul>
				 *  <li>Numbers, which will be taken literally as the time (in seconds).</li>
				 *  <li>Notation, ("4n", "8t") describes time in BPM and time signature relative values.</li>
				 *  <li>TransportTime, ("4:3:2") will also provide tempo and time signature relative times 
				 *  in the form BARS:QUARTERS:SIXTEENTHS.</li>
				 *  <li>Frequency, ("8hz") is converted to the length of the cycle in seconds.</li>
				 *  <li>Now-Relative, ("+1") prefix any of the above with "+" and it will be interpreted as 
				 *  "the current time plus whatever expression follows".</li>
				 *  <li>Expressions, ("3:0 + 2 - (1m / 7)") any of the above can also be combined 
				 *  into a mathematical expression which will be evaluated to compute the desired time.</li>
				 *  <li>No Argument, for methods which accept time, no argument will be interpreted as 
				 *  "now" (i.e. the currentTime).</li>
				 *  </ul>
				 *  
				 *  @typedef {Time}
				 */
		        Time: 'time',
		        /**
				 *  Frequency can be described similar to time, except ultimately the
				 *  values are converted to frequency instead of seconds. A number
				 *  is taken literally as the value in hertz. Additionally any of the 
				 *  Time encodings can be used. Note names in the form
				 *  of NOTE OCTAVE (i.e. C4) are also accepted and converted to their
				 *  frequency value. 
				 *  @typedef {Frequency}
				 */
		        Frequency: 'frequency',
		        /**
				 *  TransportTime describes a position along the Transport's timeline. It is
				 *  similar to Time in that it uses all the same encodings, but TransportTime specifically
				 *  pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable. 
				 *  [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)
				 *  @typedef {TransportTime}
				 */
		        TransportTime: 'transportTime',
		        /** 
				 *  Ticks are the basic subunit of the Transport. They are
				 *  the smallest unit of time that the Transport supports.
				 *  @typedef {Ticks}
				 */
		        Ticks: 'ticks',
		        /** 
				 *  Normal values are within the range [0, 1].
				 *  @typedef {NormalRange}
				 */
		        NormalRange: 'normalRange',
		        /** 
				 *  AudioRange values are between [-1, 1].
				 *  @typedef {AudioRange}
				 */
		        AudioRange: 'audioRange',
		        /** 
				 *  Decibels are a logarithmic unit of measurement which is useful for volume
				 *  because of the logarithmic way that we perceive loudness. 0 decibels 
				 *  means no change in volume. -10db is approximately half as loud and 10db 
				 *  is twice is loud. 
				 *  @typedef {Decibels}
				 */
		        Decibels: 'db',
		        /** 
				 *  Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.
				 *  @typedef {Interval}
				 */
		        Interval: 'interval',
		        /** 
				 *  Beats per minute. 
				 *  @typedef {BPM}
				 */
		        BPM: 'bpm',
		        /** 
				 *  The value must be greater than or equal to 0.
				 *  @typedef {Positive}
				 */
		        Positive: 'positive',
		        /** 
				 *  A cent is a hundredth of a semitone. 
				 *  @typedef {Cents}
				 */
		        Cents: 'cents',
		        /** 
				 *  Angle between 0 and 360. 
				 *  @typedef {Degrees}
				 */
		        Degrees: 'degrees',
		        /** 
				 *  A number representing a midi note.
				 *  @typedef {MIDI}
				 */
		        MIDI: 'midi',
		        /** 
				 *  A colon-separated representation of time in the form of
				 *  Bars:Beats:Sixteenths. 
				 *  @typedef {BarsBeatsSixteenths}
				 */
		        BarsBeatsSixteenths: 'barsBeatsSixteenths',
		        /** 
				 *  Sampling is the reduction of a continuous signal to a discrete signal.
				 *  Audio is typically sampled 44100 times per second. 
				 *  @typedef {Samples}
				 */
		        Samples: 'samples',
		        /** 
				 *  Hertz are a frequency representation defined as one cycle per second.
				 *  @typedef {Hertz}
				 */
		        Hertz: 'hertz',
		        /** 
				 *  A frequency represented by a letter name, 
				 *  accidental and octave. This system is known as
				 *  [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).
				 *  @typedef {Note}
				 */
		        Note: 'note',
		        /** 
				 *  One millisecond is a thousandth of a second. 
				 *  @typedef {Milliseconds}
				 */
		        Milliseconds: 'milliseconds',
		        /** 
				 *  Seconds are the time unit of the AudioContext. In the end, 
				 *  all values need to be evaluated to seconds. 
				 *  @typedef {Seconds}
				 */
		        Seconds: 'seconds',
		        /** 
				 *  A string representing a duration relative to a measure. 
				 *  <ul>
				 *  	<li>"4n" = quarter note</li>
				 *   	<li>"2m" = two measures</li>
				 *    	<li>"8t" = eighth-note triplet</li>
				 *  </ul>
				 *  @typedef {Notation}
				 */
		        Notation: 'notation'
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    // AUGMENT TONE's PROTOTYPE
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Convert Time into seconds.
			 *  
			 *  Unlike the method which it overrides, this takes into account 
			 *  transporttime and musical notation.
			 *
			 *  Time : 1.40
			 *  Notation: 4n|1m|2t
			 *  Now Relative: +3n
			 *  Math: 3n+16n or even complicated expressions ((3n*2)/6 + 1)
			 *
			 *  @param  {Time} time 
			 *  @return {Seconds} 
			 */
		    Tone.prototype.toSeconds = function (time) {
		        if (this.isNumber(time)) {
		            return time;
		        } else if (this.isUndef(time)) {
		            return this.now();
		        } else if (this.isString(time)) {
		            return new Tone.Time(time).toSeconds();
		        } else if (time instanceof Tone.TimeBase) {
		            return time.toSeconds();
		        }
		    };
		    /**
			 *  Convert a frequency representation into a number.
			 *  @param  {Frequency} freq 
			 *  @return {Hertz}      the frequency in hertz
			 */
		    Tone.prototype.toFrequency = function (freq) {
		        if (this.isNumber(freq)) {
		            return freq;
		        } else if (this.isString(freq) || this.isUndef(freq)) {
		            return new Tone.Frequency(freq).eval();
		        } else if (freq instanceof Tone.TimeBase) {
		            return freq.toFrequency();
		        }
		    };
		    /**
			 *  Convert a time representation into ticks.
			 *  @param  {Time} time
			 *  @return {Ticks}  the time in ticks
			 */
		    Tone.prototype.toTicks = function (time) {
		        if (this.isNumber(time) || this.isString(time)) {
		            return new Tone.TransportTime(time).toTicks();
		        } else if (this.isUndef(time)) {
		            return Tone.Transport.ticks;
		        } else if (time instanceof Tone.TimeBase) {
		            return time.toTicks();
		        }
		    };
		    return Tone;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Param wraps the native Web Audio's AudioParam to provide
			 *         additional unit conversion functionality. It also
			 *         serves as a base-class for classes which have a single,
			 *         automatable parameter. 
			 *  @extends {Tone}
			 *  @param  {AudioParam}  param  The parameter to wrap.
			 *  @param  {Tone.Type} units The units of the audio param.
			 *  @param  {Boolean} convert If the param should be converted.
			 */
		    Tone.Param = function () {
		        var options = this.optionsObject(arguments, [
		            'param',
		            'units',
		            'convert'
		        ], Tone.Param.defaults);
		        /**
				 *  The native parameter to control
				 *  @type  {AudioParam}
				 *  @private
				 */
		        this._param = this.input = options.param;
		        /**
				 *  The units of the parameter
				 *  @type {Tone.Type}
				 */
		        this.units = options.units;
		        /**
				 *  If the value should be converted or not
				 *  @type {Boolean}
				 */
		        this.convert = options.convert;
		        /**
				 *  True if the signal value is being overridden by 
				 *  a connected signal.
				 *  @readOnly
				 *  @type  {boolean}
				 *  @private
				 */
		        this.overridden = false;
		        /**
				 *  If there is an LFO, this is where it is held.
				 *  @type  {Tone.LFO}
				 *  @private
				 */
		        this._lfo = null;
		        if (this.isObject(options.lfo)) {
		            this.value = options.lfo;
		        } else if (!this.isUndef(options.value)) {
		            this.value = options.value;
		        }
		    };
		    Tone.extend(Tone.Param);
		    /**
			 *  Defaults
			 *  @type  {Object}
			 *  @const
			 */
		    Tone.Param.defaults = {
		        'units': Tone.Type.Default,
		        'convert': true,
		        'param': undefined
		    };
		    /**
			 * The current value of the parameter. 
			 * @memberOf Tone.Param#
			 * @type {Number}
			 * @name value
			 */
		    Object.defineProperty(Tone.Param.prototype, 'value', {
		        get: function () {
		            return this._toUnits(this._param.value);
		        },
		        set: function (value) {
		            if (this.isObject(value)) {
		                //throw an error if the LFO needs to be included
		                if (this.isUndef(Tone.LFO)) {
		                    throw new Error('Include \'Tone.LFO\' to use an LFO as a Param value.');
		                }
		                //remove the old one
		                if (this._lfo) {
		                    this._lfo.dispose();
		                }
		                this._lfo = new Tone.LFO(value).start();
		                this._lfo.connect(this.input);
		            } else {
		                var convertedVal = this._fromUnits(value);
		                this._param.cancelScheduledValues(0);
		                this._param.value = convertedVal;
		            }
		        }
		    });
		    /**
			 *  Convert the given value from the type specified by Tone.Param.units
			 *  into the destination value (such as Gain or Frequency).
			 *  @private
			 *  @param  {*} val the value to convert
			 *  @return {number}     the number which the value should be set to
			 */
		    Tone.Param.prototype._fromUnits = function (val) {
		        if (this.convert || this.isUndef(this.convert)) {
		            switch (this.units) {
		            case Tone.Type.Time:
		                return this.toSeconds(val);
		            case Tone.Type.Frequency:
		                return this.toFrequency(val);
		            case Tone.Type.Decibels:
		                return this.dbToGain(val);
		            case Tone.Type.NormalRange:
		                return Math.min(Math.max(val, 0), 1);
		            case Tone.Type.AudioRange:
		                return Math.min(Math.max(val, -1), 1);
		            case Tone.Type.Positive:
		                return Math.max(val, 0);
		            default:
		                return val;
		            }
		        } else {
		            return val;
		        }
		    };
		    /**
			 * Convert the parameters value into the units specified by Tone.Param.units.
			 * @private
			 * @param  {number} val the value to convert
			 * @return {number}
			 */
		    Tone.Param.prototype._toUnits = function (val) {
		        if (this.convert || this.isUndef(this.convert)) {
		            switch (this.units) {
		            case Tone.Type.Decibels:
		                return this.gainToDb(val);
		            default:
		                return val;
		            }
		        } else {
		            return val;
		        }
		    };
		    /**
			 *  the minimum output value
			 *  @type {Number}
			 *  @private
			 */
		    Tone.Param.prototype._minOutput = 0.00001;
		    /**
			 *  Schedules a parameter value change at the given time.
			 *  @param {*}	value The value to set the signal.
			 *  @param {Time}  time The time when the change should occur.
			 *  @returns {Tone.Param} this
			 *  @example
			 * //set the frequency to "G4" in exactly 1 second from now. 
			 * freq.setValueAtTime("G4", "+1");
			 */
		    Tone.Param.prototype.setValueAtTime = function (value, time) {
		        value = this._fromUnits(value);
		        time = this.toSeconds(time);
		        if (time <= this.now() + this.blockTime) {
		            this._param.value = value;
		        } else {
		            this._param.setValueAtTime(value, time);
		        }
		        return this;
		    };
		    /**
			 *  Creates a schedule point with the current value at the current time.
			 *  This is useful for creating an automation anchor point in order to 
			 *  schedule changes from the current value. 
			 *
			 *  @param {number=} now (Optionally) pass the now value in. 
			 *  @returns {Tone.Param} this
			 */
		    Tone.Param.prototype.setRampPoint = function (now) {
		        now = this.defaultArg(now, this.now());
		        var currentVal = this._param.value;
		        // exponentialRampToValueAt cannot ever ramp from or to 0
		        // More info: https://bugzilla.mozilla.org/show_bug.cgi?id=1125600#c2
		        if (currentVal === 0) {
		            currentVal = this._minOutput;
		        }
		        this._param.setValueAtTime(currentVal, now);
		        return this;
		    };
		    /**
			 *  Schedules a linear continuous change in parameter value from the 
			 *  previous scheduled parameter value to the given value.
			 *  
			 *  @param  {number} value   
			 *  @param  {Time} endTime 
			 *  @returns {Tone.Param} this
			 */
		    Tone.Param.prototype.linearRampToValueAtTime = function (value, endTime) {
		        value = this._fromUnits(value);
		        this._param.linearRampToValueAtTime(value, this.toSeconds(endTime));
		        return this;
		    };
		    /**
			 *  Schedules an exponential continuous change in parameter value from 
			 *  the previous scheduled parameter value to the given value.
			 *  
			 *  @param  {number} value   
			 *  @param  {Time} endTime 
			 *  @returns {Tone.Param} this
			 */
		    Tone.Param.prototype.exponentialRampToValueAtTime = function (value, endTime) {
		        value = this._fromUnits(value);
		        value = Math.max(this._minOutput, value);
		        this._param.exponentialRampToValueAtTime(value, this.toSeconds(endTime));
		        return this;
		    };
		    /**
			 *  Schedules an exponential continuous change in parameter value from 
			 *  the current time and current value to the given value over the 
			 *  duration of the rampTime.
			 *  
			 *  @param  {number} value   The value to ramp to.
			 *  @param  {Time} rampTime the time that it takes the 
			 *                               value to ramp from it's current value
			 *  @param {Time}	[startTime=now] 	When the ramp should start. 
			 *  @returns {Tone.Param} this
			 *  @example
			 * //exponentially ramp to the value 2 over 4 seconds. 
			 * signal.exponentialRampToValue(2, 4);
			 */
		    Tone.Param.prototype.exponentialRampToValue = function (value, rampTime, startTime) {
		        startTime = this.toSeconds(startTime);
		        this.setRampPoint(startTime);
		        this.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));
		        return this;
		    };
		    /**
			 *  Schedules an linear continuous change in parameter value from 
			 *  the current time and current value to the given value over the 
			 *  duration of the rampTime.
			 *  
			 *  @param  {number} value   The value to ramp to.
			 *  @param  {Time} rampTime the time that it takes the 
			 *                               value to ramp from it's current value
			 *  @param {Time}	[startTime=now] 	When the ramp should start. 
			 *  @returns {Tone.Param} this
			 *  @example
			 * //linearly ramp to the value 4 over 3 seconds. 
			 * signal.linearRampToValue(4, 3);
			 */
		    Tone.Param.prototype.linearRampToValue = function (value, rampTime, startTime) {
		        startTime = this.toSeconds(startTime);
		        this.setRampPoint(startTime);
		        this.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));
		        return this;
		    };
		    /**
			 *  Start exponentially approaching the target value at the given time with
			 *  a rate having the given time constant.
			 *  @param {number} value        
			 *  @param {Time} startTime    
			 *  @param {number} timeConstant 
			 *  @returns {Tone.Param} this 
			 */
		    Tone.Param.prototype.setTargetAtTime = function (value, startTime, timeConstant) {
		        value = this._fromUnits(value);
		        // The value will never be able to approach without timeConstant > 0.
		        // http://www.w3.org/TR/webaudio/#dfn-setTargetAtTime, where the equation
		        // is described. 0 results in a division by 0.
		        value = Math.max(this._minOutput, value);
		        timeConstant = Math.max(this._minOutput, timeConstant);
		        this._param.setTargetAtTime(value, this.toSeconds(startTime), timeConstant);
		        return this;
		    };
		    /**
			 *  Sets an array of arbitrary parameter values starting at the given time
			 *  for the given duration.
			 *  	
			 *  @param {Array} values    
			 *  @param {Time} startTime 
			 *  @param {Time} duration  
			 *  @returns {Tone.Param} this
			 */
		    Tone.Param.prototype.setValueCurveAtTime = function (values, startTime, duration) {
		        for (var i = 0; i < values.length; i++) {
		            values[i] = this._fromUnits(values[i]);
		        }
		        this._param.setValueCurveAtTime(values, this.toSeconds(startTime), this.toSeconds(duration));
		        return this;
		    };
		    /**
			 *  Cancels all scheduled parameter changes with times greater than or 
			 *  equal to startTime.
			 *  
			 *  @param  {Time} startTime
			 *  @returns {Tone.Param} this
			 */
		    Tone.Param.prototype.cancelScheduledValues = function (startTime) {
		        this._param.cancelScheduledValues(this.toSeconds(startTime));
		        return this;
		    };
		    /**
			 *  Ramps to the given value over the duration of the rampTime. 
			 *  Automatically selects the best ramp type (exponential or linear)
			 *  depending on the `units` of the signal
			 *  
			 *  @param  {number} value   
			 *  @param  {Time} rampTime 	The time that it takes the 
			 *                              value to ramp from it's current value
			 *  @param {Time}	[startTime=now] 	When the ramp should start. 
			 *  @returns {Tone.Param} this
			 *  @example
			 * //ramp to the value either linearly or exponentially 
			 * //depending on the "units" value of the signal
			 * signal.rampTo(0, 10);
			 *  @example
			 * //schedule it to ramp starting at a specific time
			 * signal.rampTo(0, 10, 5)
			 */
		    Tone.Param.prototype.rampTo = function (value, rampTime, startTime) {
		        rampTime = this.defaultArg(rampTime, 0);
		        if (this.units === Tone.Type.Frequency || this.units === Tone.Type.BPM) {
		            this.exponentialRampToValue(value, rampTime, startTime);
		        } else {
		            this.linearRampToValue(value, rampTime, startTime);
		        }
		        return this;
		    };
		    /**
			 *  The LFO created by the signal instance. If none
			 *  was created, this is null.
			 *  @type {Tone.LFO}
			 *  @readOnly
			 *  @memberOf Tone.Param#
			 *  @name lfo
			 */
		    Object.defineProperty(Tone.Param.prototype, 'lfo', {
		        get: function () {
		            return this._lfo;
		        }
		    });
		    /**
			 *  Clean up
			 *  @returns {Tone.Param} this
			 */
		    Tone.Param.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._param = null;
		        if (this._lfo) {
		            this._lfo.dispose();
		            this._lfo = null;
		        }
		        return this;
		    };
		    return Tone.Param;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class A thin wrapper around the Native Web Audio GainNode.
			 *         The GainNode is a basic building block of the Web Audio
			 *         API and is useful for routing audio and adjusting gains. 
			 *  @extends {Tone}
			 *  @param  {Number=}  gain  The initial gain of the GainNode
			 *  @param {Tone.Type=} units The units of the gain parameter. 
			 */
		    Tone.Gain = function () {
		        var options = this.optionsObject(arguments, [
		            'gain',
		            'units'
		        ], Tone.Gain.defaults);
		        /**
				 *  The GainNode
				 *  @type  {GainNode}
				 *  @private
				 */
		        this.input = this.output = this._gainNode = this.context.createGain();
		        /**
				 *  The gain parameter of the gain node.
				 *  @type {Tone.Param}
				 *  @signal
				 */
		        this.gain = new Tone.Param({
		            'param': this._gainNode.gain,
		            'units': options.units,
		            'value': options.gain,
		            'convert': options.convert
		        });
		        this._readOnly('gain');
		    };
		    Tone.extend(Tone.Gain);
		    /**
			 *  The defaults
			 *  @const
			 *  @type  {Object}
			 */
		    Tone.Gain.defaults = {
		        'gain': 1,
		        'convert': true
		    };
		    /**
			 *  Clean up.
			 *  @return  {Tone.Gain}  this
			 */
		    Tone.Gain.prototype.dispose = function () {
		        Tone.Param.prototype.dispose.call(this);
		        this._gainNode.disconnect();
		        this._gainNode = null;
		        this._writable('gain');
		        this.gain.dispose();
		        this.gain = null;
		    };
		    //STATIC///////////////////////////////////////////////////////////////////
		    /**
			 *  Create input and outputs for this object.
			 *  @param  {Number}  input   The number of inputs
			 *  @param  {Number=}  outputs  The number of outputs
			 *  @return  {Tone}  this
			 *  @internal
			 */
		    Tone.prototype.createInsOuts = function (inputs, outputs) {
		        if (inputs === 1) {
		            this.input = new Tone.Gain();
		        } else if (inputs > 1) {
		            this.input = new Array(inputs);
		        }
		        if (outputs === 1) {
		            this.output = new Tone.Gain();
		        } else if (outputs > 1) {
		            this.output = new Array(inputs);
		        }
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    return Tone.Gain;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  A signal is an audio-rate value. Tone.Signal is a core component of the library.
			 *          Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal
			 *          has all of the methods available to native Web Audio 
			 *          [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)
			 *          as well as additional conveniences. Read more about working with signals 
			 *          [here](https://github.com/Tonejs/Tone.js/wiki/Signals).
			 *
			 *  @constructor
			 *  @extends {Tone.Param}
			 *  @param {Number|AudioParam} [value] Initial value of the signal. If an AudioParam
			 *                                     is passed in, that parameter will be wrapped
			 *                                     and controlled by the Signal. 
			 *  @param {string} [units=Number] unit The units the signal is in. 
			 *  @example
			 * var signal = new Tone.Signal(10);
			 */
		    Tone.Signal = function () {
		        var options = this.optionsObject(arguments, [
		            'value',
		            'units'
		        ], Tone.Signal.defaults);
		        /**
				 * The node where the constant signal value is scaled.
				 * @type {GainNode}
				 * @private
				 */
		        this.output = this._gain = this.context.createGain();
		        options.param = this._gain.gain;
		        Tone.Param.call(this, options);
		        /**
				 * The node where the value is set.
				 * @type {Tone.Param}
				 * @private
				 */
		        this.input = this._param = this._gain.gain;
		        //connect the const output to the node output
		        Tone.Signal._constant.chain(this._gain);
		    };
		    Tone.extend(Tone.Signal, Tone.Param);
		    /**
			 *  The default values
			 *  @type  {Object}
			 *  @static
			 *  @const
			 */
		    Tone.Signal.defaults = {
		        'value': 0,
		        'units': Tone.Type.Default,
		        'convert': true
		    };
		    /**
			 *  When signals connect to other signals or AudioParams, 
			 *  they take over the output value of that signal or AudioParam. 
			 *  For all other nodes, the behavior is the same as a default <code>connect</code>. 
			 *
			 *  @override
			 *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node 
			 *  @param {number} [outputNumber=0] The output number to connect from.
			 *  @param {number} [inputNumber=0] The input number to connect to.
			 *  @returns {Tone.SignalBase} this
			 *  @method
			 */
		    Tone.Signal.prototype.connect = Tone.SignalBase.prototype.connect;
		    /**
			 *  dispose and disconnect
			 *  @returns {Tone.Signal} this
			 */
		    Tone.Signal.prototype.dispose = function () {
		        Tone.Param.prototype.dispose.call(this);
		        this._param = null;
		        this._gain.disconnect();
		        this._gain = null;
		        return this;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	STATIC
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Generates a constant output of 1.
			 *  @static
			 *  @private
			 *  @const
			 *  @type {AudioBufferSourceNode}
			 */
		    Tone.Signal._constant = null;
		    /**
			 *  initializer function
			 */
		    Tone._initAudioContext(function (audioContext) {
		        var buffer = audioContext.createBuffer(1, 128, audioContext.sampleRate);
		        var arr = buffer.getChannelData(0);
		        for (var i = 0; i < arr.length; i++) {
		            arr[i] = 1;
		        }
		        Tone.Signal._constant = audioContext.createBufferSource();
		        Tone.Signal._constant.channelCount = 1;
		        Tone.Signal._constant.channelCountMode = 'explicit';
		        Tone.Signal._constant.buffer = buffer;
		        Tone.Signal._constant.loop = true;
		        Tone.Signal._constant.start(0);
		        Tone.Signal._constant.noGC();
		    });
		    return Tone.Signal;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class A Timeline class for scheduling and maintaining state
			 *         along a timeline. All events must have a "time" property. 
			 *         Internally, events are stored in time order for fast 
			 *         retrieval.
			 *  @extends {Tone}
			 *  @param {Positive} [memory=Infinity] The number of previous events that are retained.
			 */
		    Tone.Timeline = function () {
		        var options = this.optionsObject(arguments, ['memory'], Tone.Timeline.defaults);
		        /**
				 *  The array of scheduled timeline events
				 *  @type  {Array}
				 *  @private
				 */
		        this._timeline = [];
		        /**
				 *  An array of items to remove from the list. 
				 *  @type {Array}
				 *  @private
				 */
		        this._toRemove = [];
		        /**
				 *  Flag if the tieline is mid iteration
				 *  @private
				 *  @type {Boolean}
				 */
		        this._iterating = false;
		        /**
				 *  The memory of the timeline, i.e.
				 *  how many events in the past it will retain
				 *  @type {Positive}
				 */
		        this.memory = options.memory;
		    };
		    Tone.extend(Tone.Timeline);
		    /**
			 *  the default parameters
			 *  @static
			 *  @const
			 */
		    Tone.Timeline.defaults = { 'memory': Infinity };
		    /**
			 *  The number of items in the timeline.
			 *  @type {Number}
			 *  @memberOf Tone.Timeline#
			 *  @name length
			 *  @readOnly
			 */
		    Object.defineProperty(Tone.Timeline.prototype, 'length', {
		        get: function () {
		            return this._timeline.length;
		        }
		    });
		    /**
			 *  Insert an event object onto the timeline. Events must have a "time" attribute.
			 *  @param  {Object}  event  The event object to insert into the 
			 *                           timeline. 
			 *  @returns {Tone.Timeline} this
			 */
		    Tone.Timeline.prototype.addEvent = function (event) {
		        //the event needs to have a time attribute
		        if (this.isUndef(event.time)) {
		            throw new Error('Tone.Timeline: events must have a time attribute');
		        }
		        if (this._timeline.length) {
		            var index = this._search(event.time);
		            this._timeline.splice(index + 1, 0, event);
		        } else {
		            this._timeline.push(event);
		        }
		        //if the length is more than the memory, remove the previous ones
		        if (this.length > this.memory) {
		            var diff = this.length - this.memory;
		            this._timeline.splice(0, diff);
		        }
		        return this;
		    };
		    /**
			 *  Remove an event from the timeline.
			 *  @param  {Object}  event  The event object to remove from the list.
			 *  @returns {Tone.Timeline} this
			 */
		    Tone.Timeline.prototype.removeEvent = function (event) {
		        if (this._iterating) {
		            this._toRemove.push(event);
		        } else {
		            var index = this._timeline.indexOf(event);
		            if (index !== -1) {
		                this._timeline.splice(index, 1);
		            }
		        }
		        return this;
		    };
		    /**
			 *  Get the nearest event whose time is less than or equal to the given time.
			 *  @param  {Number}  time  The time to query.
			 *  @returns {Object} The event object set after that time.
			 */
		    Tone.Timeline.prototype.getEvent = function (time) {
		        var index = this._search(time);
		        if (index !== -1) {
		            return this._timeline[index];
		        } else {
		            return null;
		        }
		    };
		    /**
			 *  Get the event which is scheduled after the given time.
			 *  @param  {Number}  time  The time to query.
			 *  @returns {Object} The event object after the given time
			 */
		    Tone.Timeline.prototype.getEventAfter = function (time) {
		        var index = this._search(time);
		        if (index + 1 < this._timeline.length) {
		            return this._timeline[index + 1];
		        } else {
		            return null;
		        }
		    };
		    /**
			 *  Get the event before the event at the given time.
			 *  @param  {Number}  time  The time to query.
			 *  @returns {Object} The event object before the given time
			 */
		    Tone.Timeline.prototype.getEventBefore = function (time) {
		        var len = this._timeline.length;
		        //if it's after the last item, return the last item
		        if (len > 0 && this._timeline[len - 1].time < time) {
		            return this._timeline[len - 1];
		        }
		        var index = this._search(time);
		        if (index - 1 >= 0) {
		            return this._timeline[index - 1];
		        } else {
		            return null;
		        }
		    };
		    /**
			 *  Cancel events after the given time
			 *  @param  {Number}  time  The time to query.
			 *  @returns {Tone.Timeline} this
			 */
		    Tone.Timeline.prototype.cancel = function (after) {
		        if (this._timeline.length > 1) {
		            var index = this._search(after);
		            if (index >= 0) {
		                if (this._timeline[index].time === after) {
		                    //get the first item with that time
		                    for (var i = index; i >= 0; i--) {
		                        if (this._timeline[i].time === after) {
		                            index = i;
		                        } else {
		                            break;
		                        }
		                    }
		                    this._timeline = this._timeline.slice(0, index);
		                } else {
		                    this._timeline = this._timeline.slice(0, index + 1);
		                }
		            } else {
		                this._timeline = [];
		            }
		        } else if (this._timeline.length === 1) {
		            //the first item's time
		            if (this._timeline[0].time >= after) {
		                this._timeline = [];
		            }
		        }
		        return this;
		    };
		    /**
			 *  Cancel events before or equal to the given time.
			 *  @param  {Number}  time  The time to cancel before.
			 *  @returns {Tone.Timeline} this
			 */
		    Tone.Timeline.prototype.cancelBefore = function (time) {
		        if (this._timeline.length) {
		            var index = this._search(time);
		            if (index >= 0) {
		                this._timeline = this._timeline.slice(index + 1);
		            }
		        }
		        return this;
		    };
		    /**
			 *  Does a binary serach on the timeline array and returns the 
			 *  nearest event index whose time is after or equal to the given time.
			 *  If a time is searched before the first index in the timeline, -1 is returned.
			 *  If the time is after the end, the index of the last item is returned.
			 *  @param  {Number}  time  
			 *  @return  {Number} the index in the timeline array 
			 *  @private
			 */
		    Tone.Timeline.prototype._search = function (time) {
		        var beginning = 0;
		        var len = this._timeline.length;
		        var end = len;
		        if (len > 0 && this._timeline[len - 1].time <= time) {
		            return len - 1;
		        }
		        while (beginning < end) {
		            // calculate the midpoint for roughly equal partition
		            var midPoint = Math.floor(beginning + (end - beginning) / 2);
		            var event = this._timeline[midPoint];
		            var nextEvent = this._timeline[midPoint + 1];
		            if (event.time === time) {
		                //choose the last one that has the same time
		                for (var i = midPoint; i < this._timeline.length; i++) {
		                    var testEvent = this._timeline[i];
		                    if (testEvent.time === time) {
		                        midPoint = i;
		                    }
		                }
		                return midPoint;
		            } else if (event.time < time && nextEvent.time > time) {
		                return midPoint;
		            } else if (event.time > time) {
		                //search lower
		                end = midPoint;
		            } else if (event.time < time) {
		                //search upper
		                beginning = midPoint + 1;
		            }
		        }
		        return -1;
		    };
		    /**
			 *  Internal iterator. Applies extra safety checks for 
			 *  removing items from the array. 
			 *  @param  {Function}  callback 
			 *  @param  {Number=}    lowerBound     
			 *  @param  {Number=}    upperBound    
			 *  @private
			 */
		    Tone.Timeline.prototype._iterate = function (callback, lowerBound, upperBound) {
		        this._iterating = true;
		        lowerBound = this.defaultArg(lowerBound, 0);
		        upperBound = this.defaultArg(upperBound, this._timeline.length - 1);
		        for (var i = lowerBound; i <= upperBound; i++) {
		            callback(this._timeline[i]);
		        }
		        this._iterating = false;
		        if (this._toRemove.length > 0) {
		            for (var j = 0; j < this._toRemove.length; j++) {
		                var index = this._timeline.indexOf(this._toRemove[j]);
		                if (index !== -1) {
		                    this._timeline.splice(index, 1);
		                }
		            }
		            this._toRemove = [];
		        }
		    };
		    /**
			 *  Iterate over everything in the array
			 *  @param  {Function}  callback The callback to invoke with every item
			 *  @returns {Tone.Timeline} this
			 */
		    Tone.Timeline.prototype.forEach = function (callback) {
		        this._iterate(callback);
		        return this;
		    };
		    /**
			 *  Iterate over everything in the array at or before the given time.
			 *  @param  {Number}  time The time to check if items are before
			 *  @param  {Function}  callback The callback to invoke with every item
			 *  @returns {Tone.Timeline} this
			 */
		    Tone.Timeline.prototype.forEachBefore = function (time, callback) {
		        //iterate over the items in reverse so that removing an item doesn't break things
		        var upperBound = this._search(time);
		        if (upperBound !== -1) {
		            this._iterate(callback, 0, upperBound);
		        }
		        return this;
		    };
		    /**
			 *  Iterate over everything in the array after the given time.
			 *  @param  {Number}  time The time to check if items are before
			 *  @param  {Function}  callback The callback to invoke with every item
			 *  @returns {Tone.Timeline} this
			 */
		    Tone.Timeline.prototype.forEachAfter = function (time, callback) {
		        //iterate over the items in reverse so that removing an item doesn't break things
		        var lowerBound = this._search(time);
		        this._iterate(callback, lowerBound + 1);
		        return this;
		    };
		    /**
			 *  Iterate over everything in the array at or after the given time. Similar to 
			 *  forEachAfter, but includes the item(s) at the given time.
			 *  @param  {Number}  time The time to check if items are before
			 *  @param  {Function}  callback The callback to invoke with every item
			 *  @returns {Tone.Timeline} this
			 */
		    Tone.Timeline.prototype.forEachFrom = function (time, callback) {
		        //iterate over the items in reverse so that removing an item doesn't break things
		        var lowerBound = this._search(time);
		        //work backwards until the event time is less than time
		        while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {
		            lowerBound--;
		        }
		        this._iterate(callback, lowerBound + 1);
		        return this;
		    };
		    /**
			 *  Iterate over everything in the array at the given time
			 *  @param  {Number}  time The time to check if items are before
			 *  @param  {Function}  callback The callback to invoke with every item
			 *  @returns {Tone.Timeline} this
			 */
		    Tone.Timeline.prototype.forEachAtTime = function (time, callback) {
		        //iterate over the items in reverse so that removing an item doesn't break things
		        var upperBound = this._search(time);
		        if (upperBound !== -1) {
		            this._iterate(function (event) {
		                if (event.time === time) {
		                    callback(event);
		                }
		            }, 0, upperBound);
		        }
		        return this;
		    };
		    /**
			 *  Clean up.
			 *  @return  {Tone.Timeline}  this
			 */
		    Tone.Timeline.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._timeline = null;
		        this._toRemove = null;
		    };
		    return Tone.Timeline;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class A signal which adds the method getValueAtTime. 
			 *         Code and inspiration from https://github.com/jsantell/web-audio-automation-timeline
			 *  @extends {Tone.Param}
			 *  @param {Number=} value The initial value of the signal
			 *  @param {String=} units The conversion units of the signal.
			 */
		    Tone.TimelineSignal = function () {
		        var options = this.optionsObject(arguments, [
		            'value',
		            'units'
		        ], Tone.Signal.defaults);
		        /**
				 *  The scheduled events
				 *  @type {Tone.Timeline}
				 *  @private
				 */
		        this._events = new Tone.Timeline(10);
		        //constructors
		        Tone.Signal.apply(this, options);
		        options.param = this._param;
		        Tone.Param.call(this, options);
		        /**
				 *  The initial scheduled value
				 *  @type {Number}
				 *  @private
				 */
		        this._initial = this._fromUnits(this._param.value);
		    };
		    Tone.extend(Tone.TimelineSignal, Tone.Param);
		    /**
			 *  The event types of a schedulable signal.
			 *  @enum {String}
			 *  @private
			 */
		    Tone.TimelineSignal.Type = {
		        Linear: 'linear',
		        Exponential: 'exponential',
		        Target: 'target',
		        Curve: 'curve',
		        Set: 'set'
		    };
		    /**
			 * The current value of the signal. 
			 * @memberOf Tone.TimelineSignal#
			 * @type {Number}
			 * @name value
			 */
		    Object.defineProperty(Tone.TimelineSignal.prototype, 'value', {
		        get: function () {
		            var now = this.now();
		            var val = this.getValueAtTime(now);
		            return this._toUnits(val);
		        },
		        set: function (value) {
		            var convertedVal = this._fromUnits(value);
		            this._initial = convertedVal;
		            this.cancelScheduledValues();
		            this._param.value = convertedVal;
		        }
		    });
		    ///////////////////////////////////////////////////////////////////////////
		    //	SCHEDULING
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Schedules a parameter value change at the given time.
			 *  @param {*}	value The value to set the signal.
			 *  @param {Time}  time The time when the change should occur.
			 *  @returns {Tone.TimelineSignal} this
			 *  @example
			 * //set the frequency to "G4" in exactly 1 second from now. 
			 * freq.setValueAtTime("G4", "+1");
			 */
		    Tone.TimelineSignal.prototype.setValueAtTime = function (value, startTime) {
		        value = this._fromUnits(value);
		        startTime = this.toSeconds(startTime);
		        this._events.addEvent({
		            'type': Tone.TimelineSignal.Type.Set,
		            'value': value,
		            'time': startTime
		        });
		        //invoke the original event
		        this._param.setValueAtTime(value, startTime);
		        return this;
		    };
		    /**
			 *  Schedules a linear continuous change in parameter value from the 
			 *  previous scheduled parameter value to the given value.
			 *  
			 *  @param  {number} value   
			 *  @param  {Time} endTime 
			 *  @returns {Tone.TimelineSignal} this
			 */
		    Tone.TimelineSignal.prototype.linearRampToValueAtTime = function (value, endTime) {
		        value = this._fromUnits(value);
		        endTime = this.toSeconds(endTime);
		        this._events.addEvent({
		            'type': Tone.TimelineSignal.Type.Linear,
		            'value': value,
		            'time': endTime
		        });
		        this._param.linearRampToValueAtTime(value, endTime);
		        return this;
		    };
		    /**
			 *  Schedules an exponential continuous change in parameter value from 
			 *  the previous scheduled parameter value to the given value.
			 *  
			 *  @param  {number} value   
			 *  @param  {Time} endTime 
			 *  @returns {Tone.TimelineSignal} this
			 */
		    Tone.TimelineSignal.prototype.exponentialRampToValueAtTime = function (value, endTime) {
		        //get the previous event and make sure it's not starting from 0
		        endTime = this.toSeconds(endTime);
		        var beforeEvent = this._searchBefore(endTime);
		        if (beforeEvent && beforeEvent.value === 0) {
		            //reschedule that event
		            this.setValueAtTime(this._minOutput, beforeEvent.time);
		        }
		        value = this._fromUnits(value);
		        var setValue = Math.max(value, this._minOutput);
		        this._events.addEvent({
		            'type': Tone.TimelineSignal.Type.Exponential,
		            'value': setValue,
		            'time': endTime
		        });
		        //if the ramped to value is 0, make it go to the min output, and then set to 0.
		        if (value < this._minOutput) {
		            this._param.exponentialRampToValueAtTime(this._minOutput, endTime - this.sampleTime);
		            this.setValueAtTime(0, endTime);
		        } else {
		            this._param.exponentialRampToValueAtTime(value, endTime);
		        }
		        return this;
		    };
		    /**
			 *  Start exponentially approaching the target value at the given time with
			 *  a rate having the given time constant.
			 *  @param {number} value        
			 *  @param {Time} startTime    
			 *  @param {number} timeConstant 
			 *  @returns {Tone.TimelineSignal} this 
			 */
		    Tone.TimelineSignal.prototype.setTargetAtTime = function (value, startTime, timeConstant) {
		        value = this._fromUnits(value);
		        value = Math.max(this._minOutput, value);
		        timeConstant = Math.max(this._minOutput, timeConstant);
		        startTime = this.toSeconds(startTime);
		        this._events.addEvent({
		            'type': Tone.TimelineSignal.Type.Target,
		            'value': value,
		            'time': startTime,
		            'constant': timeConstant
		        });
		        this._param.setTargetAtTime(value, startTime, timeConstant);
		        return this;
		    };
		    /**
			 *  Set an array of arbitrary values starting at the given time for the given duration.
			 *  @param {Float32Array} values        
			 *  @param {Time} startTime    
			 *  @param {Time} duration
			 *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value
			 *  @returns {Tone.TimelineSignal} this 
			 */
		    Tone.TimelineSignal.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {
		        scaling = this.defaultArg(scaling, 1);
		        //copy the array
		        var floats = new Array(values.length);
		        for (var i = 0; i < floats.length; i++) {
		            floats[i] = this._fromUnits(values[i]) * scaling;
		        }
		        startTime = this.toSeconds(startTime);
		        duration = this.toSeconds(duration);
		        this._events.addEvent({
		            'type': Tone.TimelineSignal.Type.Curve,
		            'value': floats,
		            'time': startTime,
		            'duration': duration
		        });
		        //set the first value
		        this._param.setValueAtTime(floats[0], startTime);
		        //schedule a lienar ramp for each of the segments
		        for (var j = 1; j < floats.length; j++) {
		            var segmentTime = startTime + j / (floats.length - 1) * duration;
		            this._param.linearRampToValueAtTime(floats[j], segmentTime);
		        }
		        return this;
		    };
		    /**
			 *  Cancels all scheduled parameter changes with times greater than or 
			 *  equal to startTime.
			 *  
			 *  @param  {Time} startTime
			 *  @returns {Tone.TimelineSignal} this
			 */
		    Tone.TimelineSignal.prototype.cancelScheduledValues = function (after) {
		        after = this.toSeconds(after);
		        this._events.cancel(after);
		        this._param.cancelScheduledValues(after);
		        return this;
		    };
		    /**
			 *  Sets the computed value at the given time. This provides
			 *  a point from which a linear or exponential curve
			 *  can be scheduled after. Will cancel events after 
			 *  the given time and shorten the currently scheduled
			 *  linear or exponential ramp so that it ends at `time` .
			 *  This is to avoid discontinuities and clicks in envelopes. 
			 *  @param {Time} time When to set the ramp point
			 *  @returns {Tone.TimelineSignal} this
			 */
		    Tone.TimelineSignal.prototype.setRampPoint = function (time) {
		        time = this.toSeconds(time);
		        //get the value at the given time
		        var val = this._toUnits(this.getValueAtTime(time));
		        //if there is an event at the given time
		        //and that even is not a "set"
		        var before = this._searchBefore(time);
		        if (before && before.time === time) {
		            //remove everything after
		            this.cancelScheduledValues(time + this.sampleTime);
		        } else if (before && before.type === Tone.TimelineSignal.Type.Curve && before.time + before.duration > time) {
		            //if the curve is still playing
		            //cancel the curve
		            this.cancelScheduledValues(time);
		            this.linearRampToValueAtTime(val, time);
		        } else {
		            //reschedule the next event to end at the given time
		            var after = this._searchAfter(time);
		            if (after) {
		                //cancel the next event(s)
		                this.cancelScheduledValues(time);
		                if (after.type === Tone.TimelineSignal.Type.Linear) {
		                    this.linearRampToValueAtTime(val, time);
		                } else if (after.type === Tone.TimelineSignal.Type.Exponential) {
		                    this.exponentialRampToValueAtTime(val, time);
		                }
		            }
		            this.setValueAtTime(val, time);
		        }
		        return this;
		    };
		    /**
			 *  Do a linear ramp to the given value between the start and finish times.
			 *  @param {Number} value The value to ramp to.
			 *  @param {Time} start The beginning anchor point to do the linear ramp
			 *  @param {Time} finish The ending anchor point by which the value of
			 *                       the signal will equal the given value.
			 *  @returns {Tone.TimelineSignal} this
			 */
		    Tone.TimelineSignal.prototype.linearRampToValueBetween = function (value, start, finish) {
		        this.setRampPoint(start);
		        this.linearRampToValueAtTime(value, finish);
		        return this;
		    };
		    /**
			 *  Do a exponential ramp to the given value between the start and finish times.
			 *  @param {Number} value The value to ramp to.
			 *  @param {Time} start The beginning anchor point to do the exponential ramp
			 *  @param {Time} finish The ending anchor point by which the value of
			 *                       the signal will equal the given value.
			 *  @returns {Tone.TimelineSignal} this
			 */
		    Tone.TimelineSignal.prototype.exponentialRampToValueBetween = function (value, start, finish) {
		        this.setRampPoint(start);
		        this.exponentialRampToValueAtTime(value, finish);
		        return this;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	GETTING SCHEDULED VALUES
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Returns the value before or equal to the given time
			 *  @param  {Number}  time  The time to query
			 *  @return  {Object}  The event at or before the given time.
			 *  @private
			 */
		    Tone.TimelineSignal.prototype._searchBefore = function (time) {
		        return this._events.getEvent(time);
		    };
		    /**
			 *  The event after the given time
			 *  @param  {Number}  time  The time to query.
			 *  @return  {Object}  The next event after the given time
			 *  @private
			 */
		    Tone.TimelineSignal.prototype._searchAfter = function (time) {
		        return this._events.getEventAfter(time);
		    };
		    /**
			 *  Get the scheduled value at the given time. This will
			 *  return the unconverted (raw) value.
			 *  @param  {Number}  time  The time in seconds.
			 *  @return  {Number}  The scheduled value at the given time.
			 */
		    Tone.TimelineSignal.prototype.getValueAtTime = function (time) {
		        time = this.toSeconds(time);
		        var after = this._searchAfter(time);
		        var before = this._searchBefore(time);
		        var value = this._initial;
		        //if it was set by
		        if (before === null) {
		            value = this._initial;
		        } else if (before.type === Tone.TimelineSignal.Type.Target) {
		            var previous = this._events.getEventBefore(before.time);
		            var previouVal;
		            if (previous === null) {
		                previouVal = this._initial;
		            } else {
		                previouVal = previous.value;
		            }
		            value = this._exponentialApproach(before.time, previouVal, before.value, before.constant, time);
		        } else if (before.type === Tone.TimelineSignal.Type.Curve) {
		            value = this._curveInterpolate(before.time, before.value, before.duration, time);
		        } else if (after === null) {
		            value = before.value;
		        } else if (after.type === Tone.TimelineSignal.Type.Linear) {
		            value = this._linearInterpolate(before.time, before.value, after.time, after.value, time);
		        } else if (after.type === Tone.TimelineSignal.Type.Exponential) {
		            value = this._exponentialInterpolate(before.time, before.value, after.time, after.value, time);
		        } else {
		            value = before.value;
		        }
		        return value;
		    };
		    /**
			 *  When signals connect to other signals or AudioParams, 
			 *  they take over the output value of that signal or AudioParam. 
			 *  For all other nodes, the behavior is the same as a default <code>connect</code>. 
			 *
			 *  @override
			 *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node 
			 *  @param {number} [outputNumber=0] The output number to connect from.
			 *  @param {number} [inputNumber=0] The input number to connect to.
			 *  @returns {Tone.TimelineSignal} this
			 *  @method
			 */
		    Tone.TimelineSignal.prototype.connect = Tone.SignalBase.prototype.connect;
		    ///////////////////////////////////////////////////////////////////////////
		    //	AUTOMATION CURVE CALCULATIONS
		    //	MIT License, copyright (c) 2014 Jordan Santell
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Calculates the the value along the curve produced by setTargetAtTime
			 *  @private
			 */
		    Tone.TimelineSignal.prototype._exponentialApproach = function (t0, v0, v1, timeConstant, t) {
		        return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);
		    };
		    /**
			 *  Calculates the the value along the curve produced by linearRampToValueAtTime
			 *  @private
			 */
		    Tone.TimelineSignal.prototype._linearInterpolate = function (t0, v0, t1, v1, t) {
		        return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));
		    };
		    /**
			 *  Calculates the the value along the curve produced by exponentialRampToValueAtTime
			 *  @private
			 */
		    Tone.TimelineSignal.prototype._exponentialInterpolate = function (t0, v0, t1, v1, t) {
		        v0 = Math.max(this._minOutput, v0);
		        return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));
		    };
		    /**
			 *  Calculates the the value along the curve produced by setValueCurveAtTime
			 *  @private
			 */
		    Tone.TimelineSignal.prototype._curveInterpolate = function (start, curve, duration, time) {
		        var len = curve.length;
		        // If time is after duration, return the last curve value
		        if (time >= start + duration) {
		            return curve[len - 1];
		        } else if (time <= start) {
		            return curve[0];
		        } else {
		            var progress = (time - start) / duration;
		            var lowerIndex = Math.floor((len - 1) * progress);
		            var upperIndex = Math.ceil((len - 1) * progress);
		            var lowerVal = curve[lowerIndex];
		            var upperVal = curve[upperIndex];
		            if (upperIndex === lowerIndex) {
		                return lowerVal;
		            } else {
		                return this._linearInterpolate(lowerIndex, lowerVal, upperIndex, upperVal, progress * (len - 1));
		            }
		        }
		    };
		    /**
			 *  Clean up.
			 *  @return {Tone.TimelineSignal} this
			 */
		    Tone.TimelineSignal.prototype.dispose = function () {
		        Tone.Signal.prototype.dispose.call(this);
		        Tone.Param.prototype.dispose.call(this);
		        this._events.dispose();
		        this._events = null;
		    };
		    return Tone.TimelineSignal;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Pow applies an exponent to the incoming signal. The incoming signal
			 *         must be AudioRange.
			 *
			 *  @extends {Tone.SignalBase}
			 *  @constructor
			 *  @param {Positive} exp The exponent to apply to the incoming signal, must be at least 2. 
			 *  @example
			 * var pow = new Tone.Pow(2);
			 * var sig = new Tone.Signal(0.5).connect(pow);
			 * //output of pow is 0.25. 
			 */
		    Tone.Pow = function (exp) {
		        /**
				 * the exponent
				 * @private
				 * @type {number}
				 */
		        this._exp = this.defaultArg(exp, 1);
		        /**
				 *  @type {WaveShaperNode}
				 *  @private
				 */
		        this._expScaler = this.input = this.output = new Tone.WaveShaper(this._expFunc(this._exp), 8192);
		    };
		    Tone.extend(Tone.Pow, Tone.SignalBase);
		    /**
			 * The value of the exponent.
			 * @memberOf Tone.Pow#
			 * @type {number}
			 * @name value
			 */
		    Object.defineProperty(Tone.Pow.prototype, 'value', {
		        get: function () {
		            return this._exp;
		        },
		        set: function (exp) {
		            this._exp = exp;
		            this._expScaler.setMap(this._expFunc(this._exp));
		        }
		    });
		    /**
			 *  the function which maps the waveshaper
			 *  @param   {number} exp
			 *  @return {function}
			 *  @private
			 */
		    Tone.Pow.prototype._expFunc = function (exp) {
		        return function (val) {
		            return Math.pow(Math.abs(val), exp);
		        };
		    };
		    /**
			 *  Clean up.
			 *  @returns {Tone.Pow} this
			 */
		    Tone.Pow.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._expScaler.dispose();
		        this._expScaler = null;
		        return this;
		    };
		    return Tone.Pow;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)
			 *          envelope generator. Tone.Envelope outputs a signal which 
			 *          can be connected to an AudioParam or Tone.Signal. 
			 *          <img src="https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg">
			 *
			 *  @constructor
			 *  @extends {Tone}
			 *  @param {Time} [attack] The amount of time it takes for the envelope to go from 
			 *                         0 to it's maximum value. 
			 *  @param {Time} [decay]	The period of time after the attack that it takes for the envelope
			 *                       	to fall to the sustain value. 
			 *  @param {NormalRange} [sustain]	The percent of the maximum value that the envelope rests at until
			 *                                	the release is triggered. 
			 *  @param {Time} [release]	The amount of time after the release is triggered it takes to reach 0. 
			 *  @example
			 * //an amplitude envelope
			 * var gainNode = Tone.context.createGain();
			 * var env = new Tone.Envelope({
			 * 	"attack" : 0.1,
			 * 	"decay" : 0.2,
			 * 	"sustain" : 1,
			 * 	"release" : 0.8,
			 * });
			 * env.connect(gainNode.gain);
			 */
		    Tone.Envelope = function () {
		        //get all of the defaults
		        var options = this.optionsObject(arguments, [
		            'attack',
		            'decay',
		            'sustain',
		            'release'
		        ], Tone.Envelope.defaults);
		        /** 
				 *  When triggerAttack is called, the attack time is the amount of
				 *  time it takes for the envelope to reach it's maximum value. 
				 *  @type {Time}
				 */
		        this.attack = options.attack;
		        /**
				 *  After the attack portion of the envelope, the value will fall
				 *  over the duration of the decay time to it's sustain value. 
				 *  @type {Time}
				 */
		        this.decay = options.decay;
		        /**
				 * 	The sustain value is the value 
				 * 	which the envelope rests at after triggerAttack is
				 * 	called, but before triggerRelease is invoked. 
				 *  @type {NormalRange}
				 */
		        this.sustain = options.sustain;
		        /**
				 *  After triggerRelease is called, the envelope's
				 *  value will fall to it's miminum value over the
				 *  duration of the release time. 
				 *  @type {Time}
				 */
		        this.release = options.release;
		        /**
				 *  the next time the envelope is at standby
				 *  @type {number}
				 *  @private
				 */
		        this._attackCurve = 'linear';
		        /**
				 *  the next time the envelope is at standby
				 *  @type {number}
				 *  @private
				 */
		        this._releaseCurve = 'exponential';
		        /**
				 *  the signal
				 *  @type {Tone.TimelineSignal}
				 *  @private
				 */
		        this._sig = this.output = new Tone.TimelineSignal();
		        this._sig.setValueAtTime(0, 0);
		        //set the attackCurve initially
		        this.attackCurve = options.attackCurve;
		        this.releaseCurve = options.releaseCurve;
		    };
		    Tone.extend(Tone.Envelope);
		    /**
			 *  the default parameters
			 *  @static
			 *  @const
			 */
		    Tone.Envelope.defaults = {
		        'attack': 0.01,
		        'decay': 0.1,
		        'sustain': 0.5,
		        'release': 1,
		        'attackCurve': 'linear',
		        'releaseCurve': 'exponential'
		    };
		    /**
			 * Read the current value of the envelope. Useful for 
			 * syncronizing visual output to the envelope. 
			 * @memberOf Tone.Envelope#
			 * @type {Number}
			 * @name value
			 * @readOnly
			 */
		    Object.defineProperty(Tone.Envelope.prototype, 'value', {
		        get: function () {
		            return this.getValueAtTime(this.now());
		        }
		    });
		    /**
			 * The shape of the attack. 
			 * Can be any of these strings:
			 * <ul>
			 *   <li>linear</li>
			 *   <li>exponential</li>
			 *   <li>sine</li>
			 *   <li>ease</li>
			 *   <li>bounce</li>
			 *   <li>ripple</li>
			 *   <li>step</li>
			 * </ul>
			 * Can also be an array which describes the curve. Values
			 * in the array are evenly subdivided and linearly
			 * interpolated over the duration of the attack. 
			 * @memberOf Tone.Envelope#
			 * @type {String|Array}
			 * @name attackCurve
			 * @example
			 * env.attackCurve = "linear";
			 * @example
			 * //can also be an array
			 * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]
			 */
		    Object.defineProperty(Tone.Envelope.prototype, 'attackCurve', {
		        get: function () {
		            if (this.isString(this._attackCurve)) {
		                return this._attackCurve;
		            } else if (this.isArray(this._attackCurve)) {
		                //look up the name in the curves array
		                for (var type in Tone.Envelope.Type) {
		                    if (Tone.Envelope.Type[type].In === this._attackCurve) {
		                        return type;
		                    }
		                }
		                //otherwise just return the array
		                return this._attackCurve;
		            }
		        },
		        set: function (curve) {
		            //check if it's a valid type
		            if (Tone.Envelope.Type.hasOwnProperty(curve)) {
		                var curveDef = Tone.Envelope.Type[curve];
		                if (this.isObject(curveDef)) {
		                    this._attackCurve = curveDef.In;
		                } else {
		                    this._attackCurve = curveDef;
		                }
		            } else if (this.isArray(curve)) {
		                this._attackCurve = curve;
		            } else {
		                throw new Error('Tone.Envelope: invalid curve: ' + curve);
		            }
		        }
		    });
		    /**
			 * The shape of the release. See the attack curve types. 
			 * @memberOf Tone.Envelope#
			 * @type {String|Array}
			 * @name releaseCurve
			 * @example
			 * env.releaseCurve = "linear";
			 */
		    Object.defineProperty(Tone.Envelope.prototype, 'releaseCurve', {
		        get: function () {
		            if (this.isString(this._releaseCurve)) {
		                return this._releaseCurve;
		            } else if (this.isArray(this._releaseCurve)) {
		                //look up the name in the curves array
		                for (var type in Tone.Envelope.Type) {
		                    if (Tone.Envelope.Type[type].Out === this._releaseCurve) {
		                        return type;
		                    }
		                }
		                //otherwise just return the array
		                return this._releaseCurve;
		            }
		        },
		        set: function (curve) {
		            //check if it's a valid type
		            if (Tone.Envelope.Type.hasOwnProperty(curve)) {
		                var curveDef = Tone.Envelope.Type[curve];
		                if (this.isObject(curveDef)) {
		                    this._releaseCurve = curveDef.Out;
		                } else {
		                    this._releaseCurve = curveDef;
		                }
		            } else if (this.isArray(curve)) {
		                this._releaseCurve = curve;
		            } else {
		                throw new Error('Tone.Envelope: invalid curve: ' + curve);
		            }
		        }
		    });
		    /**
			 *  Trigger the attack/decay portion of the ADSR envelope. 
			 *  @param  {Time} [time=now] When the attack should start.
			 *  @param {NormalRange} [velocity=1] The velocity of the envelope scales the vales.
			 *                               number between 0-1
			 *  @returns {Tone.Envelope} this
			 *  @example
			 *  //trigger the attack 0.5 seconds from now with a velocity of 0.2
			 *  env.triggerAttack("+0.5", 0.2);
			 */
		    Tone.Envelope.prototype.triggerAttack = function (time, velocity) {
		        time = this.toSeconds(time);
		        var originalAttack = this.toSeconds(this.attack);
		        var attack = originalAttack;
		        var decay = this.toSeconds(this.decay);
		        velocity = this.defaultArg(velocity, 1);
		        //check if it's not a complete attack
		        var currentValue = this.getValueAtTime(time);
		        if (currentValue > 0) {
		            //subtract the current value from the attack time
		            var attackRate = 1 / attack;
		            var remainingDistance = 1 - currentValue;
		            //the attack is now the remaining time
		            attack = remainingDistance / attackRate;
		        }
		        //attack
		        if (this._attackCurve === 'linear') {
		            this._sig.linearRampToValue(velocity, attack, time);
		        } else if (this._attackCurve === 'exponential') {
		            this._sig.exponentialRampToValue(velocity, attack, time);
		        } else if (attack > 0) {
		            this._sig.setRampPoint(time);
		            var curve = this._attackCurve;
		            //take only a portion of the curve
		            if (attack < originalAttack) {
		                var percentComplete = 1 - attack / originalAttack;
		                var sliceIndex = Math.floor(percentComplete * this._attackCurve.length);
		                curve = this._attackCurve.slice(sliceIndex);
		                //the first index is the current value
		                curve[0] = currentValue;
		            }
		            this._sig.setValueCurveAtTime(curve, time, attack, velocity);
		        }
		        //decay
		        this._sig.exponentialRampToValue(velocity * this.sustain, decay, attack + time);
		        return this;
		    };
		    /**
			 *  Triggers the release of the envelope.
			 *  @param  {Time} [time=now] When the release portion of the envelope should start. 
			 *  @returns {Tone.Envelope} this
			 *  @example
			 *  //trigger release immediately
			 *  env.triggerRelease();
			 */
		    Tone.Envelope.prototype.triggerRelease = function (time) {
		        time = this.toSeconds(time);
		        var currentValue = this.getValueAtTime(time);
		        if (currentValue > 0) {
		            var release = this.toSeconds(this.release);
		            if (this._releaseCurve === 'linear') {
		                this._sig.linearRampToValue(0, release, time);
		            } else if (this._releaseCurve === 'exponential') {
		                this._sig.exponentialRampToValue(0, release, time);
		            } else {
		                var curve = this._releaseCurve;
		                if (this.isArray(curve)) {
		                    this._sig.setRampPoint(time);
		                    this._sig.setValueCurveAtTime(curve, time, release, currentValue);
		                }
		            }
		        }
		        return this;
		    };
		    /**
			 *  Get the scheduled value at the given time. This will
			 *  return the unconverted (raw) value.
			 *  @param  {Number}  time  The time in seconds.
			 *  @return  {Number}  The scheduled value at the given time.
			 */
		    Tone.Envelope.prototype.getValueAtTime = function (time) {
		        return this._sig.getValueAtTime(time);
		    };
		    /**
			 *  triggerAttackRelease is shorthand for triggerAttack, then waiting
			 *  some duration, then triggerRelease. 
			 *  @param {Time} duration The duration of the sustain.
			 *  @param {Time} [time=now] When the attack should be triggered.
			 *  @param {number} [velocity=1] The velocity of the envelope. 
			 *  @returns {Tone.Envelope} this
			 *  @example
			 * //trigger the attack and then the release after 0.6 seconds.
			 * env.triggerAttackRelease(0.6);
			 */
		    Tone.Envelope.prototype.triggerAttackRelease = function (duration, time, velocity) {
		        time = this.toSeconds(time);
		        this.triggerAttack(time, velocity);
		        this.triggerRelease(time + this.toSeconds(duration));
		        return this;
		    };
		    /**
			 *  Cancels all scheduled envelope changes after the given time.
			 *  @param  {Time} after
			 *  @returns {Tone.Envelope} this
			 */
		    Tone.Envelope.prototype.cancel = function (after) {
		        this._sig.cancelScheduledValues(after);
		        return this;
		    };
		    /**
			 *  Borrows the connect method from Tone.Signal. 
			 *  @function
			 *  @private
			 */
		    Tone.Envelope.prototype.connect = Tone.Signal.prototype.connect;
		    /**
		 	 *  Generate some complex envelope curves. 
		 	 */
		    (function _createCurves() {
		        var curveLen = 128;
		        var i, k;
		        //cosine curve
		        var cosineCurve = [];
		        for (i = 0; i < curveLen; i++) {
		            cosineCurve[i] = Math.sin(i / (curveLen - 1) * (Math.PI / 2));
		        }
		        //ripple curve
		        var rippleCurve = [];
		        var rippleCurveFreq = 6.4;
		        for (i = 0; i < curveLen - 1; i++) {
		            k = i / (curveLen - 1);
		            var sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;
		            rippleCurve[i] = sineWave / 10 + k * 0.83;
		        }
		        rippleCurve[curveLen - 1] = 1;
		        //stairs curve
		        var stairsCurve = [];
		        var steps = 5;
		        for (i = 0; i < curveLen; i++) {
		            stairsCurve[i] = Math.ceil(i / (curveLen - 1) * steps) / steps;
		        }
		        //in-out easing curve
		        var sineCurve = [];
		        for (i = 0; i < curveLen; i++) {
		            k = i / (curveLen - 1);
		            sineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));
		        }
		        //a bounce curve
		        var bounceCurve = [];
		        for (i = 0; i < curveLen; i++) {
		            k = i / (curveLen - 1);
		            var freq = Math.pow(k, 3) * 4 + 0.2;
		            var val = Math.cos(freq * Math.PI * 2 * k);
		            bounceCurve[i] = Math.abs(val * (1 - k));
		        }
		        /**
				 *  Invert a value curve to make it work for the release
				 *  @private
				 */
		        function invertCurve(curve) {
		            var out = new Array(curve.length);
		            for (var j = 0; j < curve.length; j++) {
		                out[j] = 1 - curve[j];
		            }
		            return out;
		        }
		        /**
				 *  reverse the curve
				 *  @private
				 */
		        function reverseCurve(curve) {
		            return curve.slice(0).reverse();
		        }
		        /**
				 *  attack and release curve arrays
				 *  @type  {Object}
				 *  @private
				 */
		        Tone.Envelope.Type = {
		            'linear': 'linear',
		            'exponential': 'exponential',
		            'bounce': {
		                In: invertCurve(bounceCurve),
		                Out: bounceCurve
		            },
		            'cosine': {
		                In: cosineCurve,
		                Out: reverseCurve(cosineCurve)
		            },
		            'step': {
		                In: stairsCurve,
		                Out: invertCurve(stairsCurve)
		            },
		            'ripple': {
		                In: rippleCurve,
		                Out: invertCurve(rippleCurve)
		            },
		            'sine': {
		                In: sineCurve,
		                Out: invertCurve(sineCurve)
		            }
		        };
		    }());
		    /**
			 *  Disconnect and dispose.
			 *  @returns {Tone.Envelope} this
			 */
		    Tone.Envelope.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._sig.dispose();
		        this._sig = null;
		        this._attackCurve = null;
		        this._releaseCurve = null;
		        return this;
		    };
		    return Tone.Envelope;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.AmplitudeEnvelope is a Tone.Envelope connected to a gain node. 
			 *          Unlike Tone.Envelope, which outputs the envelope's value, Tone.AmplitudeEnvelope accepts
			 *          an audio signal as the input and will apply the envelope to the amplitude
			 *          of the signal. Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).
			 *  
			 *  @constructor
			 *  @extends {Tone.Envelope}
			 *  @param {Time|Object} [attack] The amount of time it takes for the envelope to go from 
			 *                               0 to it's maximum value. 
			 *  @param {Time} [decay]	The period of time after the attack that it takes for the envelope
			 *                       	to fall to the sustain value. 
			 *  @param {NormalRange} [sustain]	The percent of the maximum value that the envelope rests at until
			 *                                	the release is triggered. 
			 *  @param {Time} [release]	The amount of time after the release is triggered it takes to reach 0. 
			 *  @example
			 * var ampEnv = new Tone.AmplitudeEnvelope({
			 * 	"attack": 0.1,
			 * 	"decay": 0.2,
			 * 	"sustain": 1.0,
			 * 	"release": 0.8
			 * }).toMaster();
			 * //create an oscillator and connect it
			 * var osc = new Tone.Oscillator().connect(ampEnv).start();
			 * //trigger the envelopes attack and release "8t" apart
			 * ampEnv.triggerAttackRelease("8t");
			 */
		    Tone.AmplitudeEnvelope = function () {
		        Tone.Envelope.apply(this, arguments);
		        /**
				 *  the input node
				 *  @type {GainNode}
				 *  @private
				 */
		        this.input = this.output = new Tone.Gain();
		        this._sig.connect(this.output.gain);
		    };
		    Tone.extend(Tone.AmplitudeEnvelope, Tone.Envelope);
		    /**
			 *  Clean up
			 *  @return  {Tone.AmplitudeEnvelope}  this
			 */
		    Tone.AmplitudeEnvelope.prototype.dispose = function () {
		        this.input.dispose();
		        this.input = null;
		        Tone.Envelope.prototype.dispose.call(this);
		        return this;
		    };
		    return Tone.AmplitudeEnvelope;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Wrapper around the native Web Audio's 
			 *          [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).
			 *          Extracts FFT or Waveform data from the incoming signal.
			 *  @extends {Tone}
			 *  @param {String=} type The return type of the analysis, either "fft", or "waveform". 
			 *  @param {Number=} size The size of the FFT. Value must be a power of 
			 *                       two in the range 32 to 32768.
			 */
		    Tone.Analyser = function () {
		        var options = this.optionsObject(arguments, [
		            'type',
		            'size'
		        ], Tone.Analyser.defaults);
		        /**
				 *  The analyser node.
				 *  @private
				 *  @type {AnalyserNode}
				 */
		        this._analyser = this.input = this.output = this.context.createAnalyser();
		        /**
				 *  The analysis type
				 *  @type {String}
				 *  @private
				 */
		        this._type = options.type;
		        /**
				 *  The return type of the analysis
				 *  @type {String}
				 *  @private
				 */
		        this._returnType = options.returnType;
		        /**
				 *  The buffer that the FFT data is written to
				 *  @type {TypedArray}
				 *  @private
				 */
		        this._buffer = null;
		        //set the values initially
		        this.size = options.size;
		        this.type = options.type;
		        this.returnType = options.returnType;
		        this.minDecibels = options.minDecibels;
		        this.maxDecibels = options.maxDecibels;
		    };
		    Tone.extend(Tone.Analyser);
		    /**
			 *  The default values.
			 *  @type {Object}
			 *  @const
			 */
		    Tone.Analyser.defaults = {
		        'size': 1024,
		        'returnType': 'byte',
		        'type': 'fft',
		        'smoothing': 0.8,
		        'maxDecibels': -30,
		        'minDecibels': -100
		    };
		    /**
			 *  Possible return types of Tone.Analyser.analyse()
			 *  @enum {String}
			 */
		    Tone.Analyser.Type = {
		        Waveform: 'waveform',
		        FFT: 'fft'
		    };
		    /**
			 *  Possible return types of Tone.Analyser.analyse(). 
			 *  byte values are between [0,255]. float values are between 
			 *  [-1, 1] when the type is set to "waveform" and between 
			 *  [minDecibels,maxDecibels] when the type is "fft".
			 *  @enum {String}
			 */
		    Tone.Analyser.ReturnType = {
		        Byte: 'byte',
		        Float: 'float'
		    };
		    /**
			 *  Run the analysis given the current settings and return the 
			 *  result as a TypedArray. 
			 *  @returns {TypedArray}
			 */
		    Tone.Analyser.prototype.analyse = function () {
		        if (this._type === Tone.Analyser.Type.FFT) {
		            if (this._returnType === Tone.Analyser.ReturnType.Byte) {
		                this._analyser.getByteFrequencyData(this._buffer);
		            } else {
		                this._analyser.getFloatFrequencyData(this._buffer);
		            }
		        } else if (this._type === Tone.Analyser.Type.Waveform) {
		            if (this._returnType === Tone.Analyser.ReturnType.Byte) {
		                this._analyser.getByteTimeDomainData(this._buffer);
		            } else {
		                if (this.isFunction(AnalyserNode.prototype.getFloatTimeDomainData)) {
		                    this._analyser.getFloatTimeDomainData(this._buffer);
		                } else {
		                    var uint8 = new Uint8Array(this._buffer.length);
		                    this._analyser.getByteTimeDomainData(uint8);
		                    //referenced https://github.com/mohayonao/get-float-time-domain-data 
		                    // POLYFILL
		                    for (var i = 0; i < uint8.length; i++) {
		                        this._buffer[i] = (uint8[i] - 128) * 0.0078125;
		                    }
		                }
		            }
		        }
		        return this._buffer;
		    };
		    /**
			 *  The size of analysis. This must be a power of two in the range 32 to 32768.
			 *  @memberOf Tone.Analyser#
			 *  @type {Number}
			 *  @name size
			 */
		    Object.defineProperty(Tone.Analyser.prototype, 'size', {
		        get: function () {
		            return this._analyser.frequencyBinCount;
		        },
		        set: function (size) {
		            this._analyser.fftSize = size * 2;
		            this.type = this._type;
		        }
		    });
		    /**
			 *  The return type of Tone.Analyser.analyse(), either "byte" or "float". 
			 *  When the type is set to "byte" the range of values returned in the array
			 *  are between 0-255. "float" values are between 
			 *  [-1, 1] when the type is set to "waveform" and between 
			 *  [minDecibels,maxDecibels] when the type is "fft".
			 *  @memberOf Tone.Analyser#
			 *  @type {String}
			 *  @name type
			 */
		    Object.defineProperty(Tone.Analyser.prototype, 'returnType', {
		        get: function () {
		            return this._returnType;
		        },
		        set: function (type) {
		            if (type === Tone.Analyser.ReturnType.Byte) {
		                this._buffer = new Uint8Array(this._analyser.frequencyBinCount);
		            } else if (type === Tone.Analyser.ReturnType.Float) {
		                this._buffer = new Float32Array(this._analyser.frequencyBinCount);
		            } else {
		                throw new TypeError('Tone.Analayser: invalid return type: ' + type);
		            }
		            this._returnType = type;
		        }
		    });
		    /**
			 *  The analysis function returned by Tone.Analyser.analyse(), either "fft" or "waveform". 
			 *  @memberOf Tone.Analyser#
			 *  @type {String}
			 *  @name type
			 */
		    Object.defineProperty(Tone.Analyser.prototype, 'type', {
		        get: function () {
		            return this._type;
		        },
		        set: function (type) {
		            if (type !== Tone.Analyser.Type.Waveform && type !== Tone.Analyser.Type.FFT) {
		                throw new TypeError('Tone.Analyser: invalid type: ' + type);
		            }
		            this._type = type;
		        }
		    });
		    /**
			 *  0 represents no time averaging with the last analysis frame.
			 *  @memberOf Tone.Analyser#
			 *  @type {NormalRange}
			 *  @name smoothing
			 */
		    Object.defineProperty(Tone.Analyser.prototype, 'smoothing', {
		        get: function () {
		            return this._analyser.smoothingTimeConstant;
		        },
		        set: function (val) {
		            this._analyser.smoothingTimeConstant = val;
		        }
		    });
		    /**
			 *  The smallest decibel value which is analysed by the FFT. 
			 *  @memberOf Tone.Analyser#
			 *  @type {Decibels}
			 *  @name minDecibels
			 */
		    Object.defineProperty(Tone.Analyser.prototype, 'minDecibels', {
		        get: function () {
		            return this._analyser.minDecibels;
		        },
		        set: function (val) {
		            this._analyser.minDecibels = val;
		        }
		    });
		    /**
			 *  The largest decibel value which is analysed by the FFT. 
			 *  @memberOf Tone.Analyser#
			 *  @type {Decibels}
			 *  @name maxDecibels
			 */
		    Object.defineProperty(Tone.Analyser.prototype, 'maxDecibels', {
		        get: function () {
		            return this._analyser.maxDecibels;
		        },
		        set: function (val) {
		            this._analyser.maxDecibels = val;
		        }
		    });
		    /**
			 *  Clean up.
			 *  @return  {Tone.Analyser}  this
			 */
		    Tone.Analyser.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._analyser.disconnect();
		        this._analyser = null;
		        this._buffer = null;
		    };
		    return Tone.Analyser;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Compressor is a thin wrapper around the Web Audio 
			 *         [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).
			 *         Compression reduces the volume of loud sounds or amplifies quiet sounds 
			 *         by narrowing or "compressing" an audio signal's dynamic range. 
			 *         Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).
			 *
			 *  @extends {Tone}
			 *  @constructor
			 *  @param {Decibels|Object} [threshold] The value above which the compression starts to be applied.
			 *  @param {Positive} [ratio] The gain reduction ratio.
			 *  @example
			 * var comp = new Tone.Compressor(-30, 3);
			 */
		    Tone.Compressor = function () {
		        var options = this.optionsObject(arguments, [
		            'threshold',
		            'ratio'
		        ], Tone.Compressor.defaults);
		        /**
				 *  the compressor node
				 *  @type {DynamicsCompressorNode}
				 *  @private
				 */
		        this._compressor = this.input = this.output = this.context.createDynamicsCompressor();
		        /**
				 *  the threshold vaue
				 *  @type {Decibels}
				 *  @signal
				 */
		        this.threshold = this._compressor.threshold;
		        /**
				 *  The attack parameter
				 *  @type {Time}
				 *  @signal
				 */
		        this.attack = new Tone.Param(this._compressor.attack, Tone.Type.Time);
		        /**
				 *  The release parameter
				 *  @type {Time}
				 *  @signal
				 */
		        this.release = new Tone.Param(this._compressor.release, Tone.Type.Time);
		        /**
				 *  The knee parameter
				 *  @type {Decibels}
				 *  @signal
				 */
		        this.knee = this._compressor.knee;
		        /**
				 *  The ratio value
				 *  @type {Number}
				 *  @signal
				 */
		        this.ratio = this._compressor.ratio;
		        //set the defaults
		        this._readOnly([
		            'knee',
		            'release',
		            'attack',
		            'ratio',
		            'threshold'
		        ]);
		        this.set(options);
		    };
		    Tone.extend(Tone.Compressor);
		    /**
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.Compressor.defaults = {
		        'ratio': 12,
		        'threshold': -24,
		        'release': 0.25,
		        'attack': 0.003,
		        'knee': 30
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.Compressor} this
			 */
		    Tone.Compressor.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._writable([
		            'knee',
		            'release',
		            'attack',
		            'ratio',
		            'threshold'
		        ]);
		        this._compressor.disconnect();
		        this._compressor = null;
		        this.attack.dispose();
		        this.attack = null;
		        this.release.dispose();
		        this.release = null;
		        this.threshold = null;
		        this.ratio = null;
		        this.knee = null;
		        return this;
		    };
		    return Tone.Compressor;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Add a signal and a number or two signals. When no value is
			 *         passed into the constructor, Tone.Add will sum <code>input[0]</code>
			 *         and <code>input[1]</code>. If a value is passed into the constructor, 
			 *         the it will be added to the input.
			 *  
			 *  @constructor
			 *  @extends {Tone.Signal}
			 *  @param {number=} value If no value is provided, Tone.Add will sum the first
			 *                         and second inputs. 
			 *  @example
			 * var signal = new Tone.Signal(2);
			 * var add = new Tone.Add(2);
			 * signal.connect(add);
			 * //the output of add equals 4
			 *  @example
			 * //if constructed with no arguments
			 * //it will add the first and second inputs
			 * var add = new Tone.Add();
			 * var sig0 = new Tone.Signal(3).connect(add, 0, 0);
			 * var sig1 = new Tone.Signal(4).connect(add, 0, 1);
			 * //the output of add equals 7. 
			 */
		    Tone.Add = function (value) {
		        this.createInsOuts(2, 0);
		        /**
				 *  the summing node
				 *  @type {GainNode}
				 *  @private
				 */
		        this._sum = this.input[0] = this.input[1] = this.output = new Tone.Gain();
		        /**
				 *  @private
				 *  @type {Tone.Signal}
				 */
		        this._param = this.input[1] = new Tone.Signal(value);
		        this._param.connect(this._sum);
		    };
		    Tone.extend(Tone.Add, Tone.Signal);
		    /**
			 *  Clean up.
			 *  @returns {Tone.Add} this
			 */
		    Tone.Add.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._sum.dispose();
		        this._sum = null;
		        this._param.dispose();
		        this._param = null;
		        return this;
		    };
		    return Tone.Add;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Multiply two incoming signals. Or, if a number is given in the constructor, 
			 *          multiplies the incoming signal by that value. 
			 *
			 *  @constructor
			 *  @extends {Tone.Signal}
			 *  @param {number=} value Constant value to multiple. If no value is provided,
			 *                         it will return the product of the first and second inputs
			 *  @example
			 * var mult = new Tone.Multiply();
			 * var sigA = new Tone.Signal(3);
			 * var sigB = new Tone.Signal(4);
			 * sigA.connect(mult, 0, 0);
			 * sigB.connect(mult, 0, 1);
			 * //output of mult is 12.
			 *  @example
			 * var mult = new Tone.Multiply(10);
			 * var sig = new Tone.Signal(2).connect(mult);
			 * //the output of mult is 20. 
			 */
		    Tone.Multiply = function (value) {
		        this.createInsOuts(2, 0);
		        /**
				 *  the input node is the same as the output node
				 *  it is also the GainNode which handles the scaling of incoming signal
				 *  
				 *  @type {GainNode}
				 *  @private
				 */
		        this._mult = this.input[0] = this.output = new Tone.Gain();
		        /**
				 *  the scaling parameter
				 *  @type {AudioParam}
				 *  @private
				 */
		        this._param = this.input[1] = this.output.gain;
		        this._param.value = this.defaultArg(value, 0);
		    };
		    Tone.extend(Tone.Multiply, Tone.Signal);
		    /**
			 *  clean up
			 *  @returns {Tone.Multiply} this
			 */
		    Tone.Multiply.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._mult.dispose();
		        this._mult = null;
		        this._param = null;
		        return this;
		    };
		    return Tone.Multiply;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Negate the incoming signal. i.e. an input signal of 10 will output -10
			 *
			 *  @constructor
			 *  @extends {Tone.SignalBase}
			 *  @example
			 * var neg = new Tone.Negate();
			 * var sig = new Tone.Signal(-2).connect(neg);
			 * //output of neg is positive 2. 
			 */
		    Tone.Negate = function () {
		        /**
				 *  negation is done by multiplying by -1
				 *  @type {Tone.Multiply}
				 *  @private
				 */
		        this._multiply = this.input = this.output = new Tone.Multiply(-1);
		    };
		    Tone.extend(Tone.Negate, Tone.SignalBase);
		    /**
			 *  clean up
			 *  @returns {Tone.Negate} this
			 */
		    Tone.Negate.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._multiply.dispose();
		        this._multiply = null;
		        return this;
		    };
		    return Tone.Negate;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Subtract the signal connected to <code>input[1]</code> from the signal connected 
			 *         to <code>input[0]</code>. If an argument is provided in the constructor, the 
			 *         signals <code>.value</code> will be subtracted from the incoming signal.
			 *
			 *  @extends {Tone.Signal}
			 *  @constructor
			 *  @param {number=} value The value to subtract from the incoming signal. If the value
			 *                         is omitted, it will subtract the second signal from the first.
			 *  @example
			 * var sub = new Tone.Subtract(1);
			 * var sig = new Tone.Signal(4).connect(sub);
			 * //the output of sub is 3. 
			 *  @example
			 * var sub = new Tone.Subtract();
			 * var sigA = new Tone.Signal(10);
			 * var sigB = new Tone.Signal(2.5);
			 * sigA.connect(sub, 0, 0);
			 * sigB.connect(sub, 0, 1);
			 * //output of sub is 7.5
			 */
		    Tone.Subtract = function (value) {
		        this.createInsOuts(2, 0);
		        /**
				 *  the summing node
				 *  @type {GainNode}
				 *  @private
				 */
		        this._sum = this.input[0] = this.output = new Tone.Gain();
		        /**
				 *  negate the input of the second input before connecting it
				 *  to the summing node.
				 *  @type {Tone.Negate}
				 *  @private
				 */
		        this._neg = new Tone.Negate();
		        /**
				 *  the node where the value is set
				 *  @private
				 *  @type {Tone.Signal}
				 */
		        this._param = this.input[1] = new Tone.Signal(value);
		        this._param.chain(this._neg, this._sum);
		    };
		    Tone.extend(Tone.Subtract, Tone.Signal);
		    /**
			 *  Clean up.
			 *  @returns {Tone.SignalBase} this
			 */
		    Tone.Subtract.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._neg.dispose();
		        this._neg = null;
		        this._sum.disconnect();
		        this._sum = null;
		        this._param.dispose();
		        this._param = null;
		        return this;
		    };
		    return Tone.Subtract;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  GreaterThanZero outputs 1 when the input is strictly greater than zero
			 *  
			 *  @constructor
			 *  @extends {Tone.SignalBase}
			 *  @example
			 * var gt0 = new Tone.GreaterThanZero();
			 * var sig = new Tone.Signal(0.01).connect(gt0);
			 * //the output of gt0 is 1. 
			 * sig.value = 0;
			 * //the output of gt0 is 0. 
			 */
		    Tone.GreaterThanZero = function () {
		        /**
				 *  @type {Tone.WaveShaper}
				 *  @private
				 */
		        this._thresh = this.output = new Tone.WaveShaper(function (val) {
		            if (val <= 0) {
		                return 0;
		            } else {
		                return 1;
		            }
		        }, 127);
		        /**
				 *  scale the first thresholded signal by a large value.
				 *  this will help with values which are very close to 0
				 *  @type {Tone.Multiply}
				 *  @private
				 */
		        this._scale = this.input = new Tone.Multiply(10000);
		        //connections
		        this._scale.connect(this._thresh);
		    };
		    Tone.extend(Tone.GreaterThanZero, Tone.SignalBase);
		    /**
			 *  dispose method
			 *  @returns {Tone.GreaterThanZero} this
			 */
		    Tone.GreaterThanZero.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._scale.dispose();
		        this._scale = null;
		        this._thresh.dispose();
		        this._thresh = null;
		        return this;
		    };
		    return Tone.GreaterThanZero;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Output 1 if the signal is greater than the value, otherwise outputs 0.
			 *          can compare two signals or a signal and a number. 
			 *  
			 *  @constructor
			 *  @extends {Tone.Signal}
			 *  @param {number} [value=0] the value to compare to the incoming signal
			 *  @example
			 * var gt = new Tone.GreaterThan(2);
			 * var sig = new Tone.Signal(4).connect(gt);
			 * //output of gt is equal 1. 
			 */
		    Tone.GreaterThan = function (value) {
		        this.createInsOuts(2, 0);
		        /**
				 *  subtract the amount from the incoming signal
				 *  @type {Tone.Subtract}
				 *  @private
				 */
		        this._param = this.input[0] = new Tone.Subtract(value);
		        this.input[1] = this._param.input[1];
		        /**
				 *  compare that amount to zero
				 *  @type {Tone.GreaterThanZero}
				 *  @private
				 */
		        this._gtz = this.output = new Tone.GreaterThanZero();
		        //connect
		        this._param.connect(this._gtz);
		    };
		    Tone.extend(Tone.GreaterThan, Tone.Signal);
		    /**
			 *  dispose method
			 *  @returns {Tone.GreaterThan} this
			 */
		    Tone.GreaterThan.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._param.dispose();
		        this._param = null;
		        this._gtz.dispose();
		        this._gtz = null;
		        return this;
		    };
		    return Tone.GreaterThan;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Return the absolute value of an incoming signal. 
			 *  
			 *  @constructor
			 *  @extends {Tone.SignalBase}
			 *  @example
			 * var signal = new Tone.Signal(-1);
			 * var abs = new Tone.Abs();
			 * signal.connect(abs);
			 * //the output of abs is 1. 
			 */
		    Tone.Abs = function () {
		        /**
				 *  @type {Tone.LessThan}
				 *  @private
				 */
		        this._abs = this.input = this.output = new Tone.WaveShaper(function (val) {
		            if (val === 0) {
		                return 0;
		            } else {
		                return Math.abs(val);
		            }
		        }, 127);
		    };
		    Tone.extend(Tone.Abs, Tone.SignalBase);
		    /**
			 *  dispose method
			 *  @returns {Tone.Abs} this
			 */
		    Tone.Abs.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._abs.dispose();
		        this._abs = null;
		        return this;
		    };
		    return Tone.Abs;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Signal-rate modulo operator. Only works in AudioRange [-1, 1] and for modulus
			 *         values in the NormalRange. 
			 *
			 *  @constructor
			 *  @extends {Tone.SignalBase}
			 *  @param {NormalRange} modulus The modulus to apply.
			 *  @example
			 * var mod = new Tone.Modulo(0.2)
			 * var sig = new Tone.Signal(0.5).connect(mod);
			 * //mod outputs 0.1
			 */
		    Tone.Modulo = function (modulus) {
		        this.createInsOuts(1, 0);
		        /**
				 *  A waveshaper gets the integer multiple of 
				 *  the input signal and the modulus.
				 *  @private
				 *  @type {Tone.WaveShaper}
				 */
		        this._shaper = new Tone.WaveShaper(Math.pow(2, 16));
		        /**
				 *  the integer multiple is multiplied by the modulus
				 *  @type  {Tone.Multiply}
				 *  @private
				 */
		        this._multiply = new Tone.Multiply();
		        /**
				 *  and subtracted from the input signal
				 *  @type  {Tone.Subtract}
				 *  @private
				 */
		        this._subtract = this.output = new Tone.Subtract();
		        /**
				 *  the modulus signal
				 *  @type  {Tone.Signal}
				 *  @private
				 */
		        this._modSignal = new Tone.Signal(modulus);
		        //connections
		        this.input.fan(this._shaper, this._subtract);
		        this._modSignal.connect(this._multiply, 0, 0);
		        this._shaper.connect(this._multiply, 0, 1);
		        this._multiply.connect(this._subtract, 0, 1);
		        this._setWaveShaper(modulus);
		    };
		    Tone.extend(Tone.Modulo, Tone.SignalBase);
		    /**
			 *  @param  {number}  mod  the modulus to apply
			 *  @private
			 */
		    Tone.Modulo.prototype._setWaveShaper = function (mod) {
		        this._shaper.setMap(function (val) {
		            var multiple = Math.floor((val + 0.0001) / mod);
		            return multiple;
		        });
		    };
		    /**
			 * The modulus value.
			 * @memberOf Tone.Modulo#
			 * @type {NormalRange}
			 * @name value
			 */
		    Object.defineProperty(Tone.Modulo.prototype, 'value', {
		        get: function () {
		            return this._modSignal.value;
		        },
		        set: function (mod) {
		            this._modSignal.value = mod;
		            this._setWaveShaper(mod);
		        }
		    });
		    /**
			 * clean up
			 *  @returns {Tone.Modulo} this
			 */
		    Tone.Modulo.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._shaper.dispose();
		        this._shaper = null;
		        this._multiply.dispose();
		        this._multiply = null;
		        this._subtract.dispose();
		        this._subtract = null;
		        this._modSignal.dispose();
		        this._modSignal = null;
		        return this;
		    };
		    return Tone.Modulo;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1]. 
			 *         See Tone.GainToAudio.
			 *
			 *  @extends {Tone.SignalBase}
			 *  @constructor
			 *  @example
			 *  var a2g = new Tone.AudioToGain();
			 */
		    Tone.AudioToGain = function () {
		        /**
				 *  @type {WaveShaperNode}
				 *  @private
				 */
		        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {
		            return (x + 1) / 2;
		        });
		    };
		    Tone.extend(Tone.AudioToGain, Tone.SignalBase);
		    /**
			 *  clean up
			 *  @returns {Tone.AudioToGain} this
			 */
		    Tone.AudioToGain.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._norm.dispose();
		        this._norm = null;
		        return this;
		    };
		    return Tone.AudioToGain;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Evaluate an expression at audio rate. <br><br>
			 *         Parsing code modified from https://code.google.com/p/tapdigit/
			 *         Copyright 2011 2012 Ariya Hidayat, New BSD License
			 *
			 *  @extends {Tone.SignalBase}
			 *  @constructor
			 *  @param {string} expr the expression to generate
			 *  @example
			 * //adds the signals from input[0] and input[1].
			 * var expr = new Tone.Expr("$0 + $1");
			 */
		    Tone.Expr = function () {
		        var expr = this._replacements(Array.prototype.slice.call(arguments));
		        var inputCount = this._parseInputs(expr);
		        /**
				 *  hold onto all of the nodes for disposal
				 *  @type {Array}
				 *  @private
				 */
		        this._nodes = [];
		        /**
				 *  The inputs. The length is determined by the expression. 
				 *  @type {Array}
				 */
		        this.input = new Array(inputCount);
		        //create a gain for each input
		        for (var i = 0; i < inputCount; i++) {
		            this.input[i] = this.context.createGain();
		        }
		        //parse the syntax tree
		        var tree = this._parseTree(expr);
		        //evaluate the results
		        var result;
		        try {
		            result = this._eval(tree);
		        } catch (e) {
		            this._disposeNodes();
		            throw new Error('Tone.Expr: Could evaluate expression: ' + expr);
		        }
		        /**
				 *  The output node is the result of the expression
				 *  @type {Tone}
				 */
		        this.output = result;
		    };
		    Tone.extend(Tone.Expr, Tone.SignalBase);
		    //some helpers to cut down the amount of code
		    function applyBinary(Constructor, args, self) {
		        var op = new Constructor();
		        self._eval(args[0]).connect(op, 0, 0);
		        self._eval(args[1]).connect(op, 0, 1);
		        return op;
		    }
		    function applyUnary(Constructor, args, self) {
		        var op = new Constructor();
		        self._eval(args[0]).connect(op, 0, 0);
		        return op;
		    }
		    function getNumber(arg) {
		        return arg ? parseFloat(arg) : undefined;
		    }
		    function literalNumber(arg) {
		        return arg && arg.args ? parseFloat(arg.args) : undefined;
		    }
		    /*
			 *  the Expressions that Tone.Expr can parse.
			 *
			 *  each expression belongs to a group and contains a regexp 
			 *  for selecting the operator as well as that operators method
			 *  
			 *  @type {Object}
			 *  @private
			 */
		    Tone.Expr._Expressions = {
		        //values
		        'value': {
		            'signal': {
		                regexp: /^\d+\.\d+|^\d+/,
		                method: function (arg) {
		                    var sig = new Tone.Signal(getNumber(arg));
		                    return sig;
		                }
		            },
		            'input': {
		                regexp: /^\$\d/,
		                method: function (arg, self) {
		                    return self.input[getNumber(arg.substr(1))];
		                }
		            }
		        },
		        //syntactic glue
		        'glue': {
		            '(': { regexp: /^\(/ },
		            ')': { regexp: /^\)/ },
		            ',': { regexp: /^,/ }
		        },
		        //functions
		        'func': {
		            'abs': {
		                regexp: /^abs/,
		                method: applyUnary.bind(this, Tone.Abs)
		            },
		            'mod': {
		                regexp: /^mod/,
		                method: function (args, self) {
		                    var modulus = literalNumber(args[1]);
		                    var op = new Tone.Modulo(modulus);
		                    self._eval(args[0]).connect(op);
		                    return op;
		                }
		            },
		            'pow': {
		                regexp: /^pow/,
		                method: function (args, self) {
		                    var exp = literalNumber(args[1]);
		                    var op = new Tone.Pow(exp);
		                    self._eval(args[0]).connect(op);
		                    return op;
		                }
		            },
		            'a2g': {
		                regexp: /^a2g/,
		                method: function (args, self) {
		                    var op = new Tone.AudioToGain();
		                    self._eval(args[0]).connect(op);
		                    return op;
		                }
		            }
		        },
		        //binary expressions
		        'binary': {
		            '+': {
		                regexp: /^\+/,
		                precedence: 1,
		                method: applyBinary.bind(this, Tone.Add)
		            },
		            '-': {
		                regexp: /^\-/,
		                precedence: 1,
		                method: function (args, self) {
		                    //both unary and binary op
		                    if (args.length === 1) {
		                        return applyUnary(Tone.Negate, args, self);
		                    } else {
		                        return applyBinary(Tone.Subtract, args, self);
		                    }
		                }
		            },
		            '*': {
		                regexp: /^\*/,
		                precedence: 0,
		                method: applyBinary.bind(this, Tone.Multiply)
		            }
		        },
		        //unary expressions
		        'unary': {
		            '-': {
		                regexp: /^\-/,
		                method: applyUnary.bind(this, Tone.Negate)
		            },
		            '!': {
		                regexp: /^\!/,
		                method: applyUnary.bind(this, Tone.NOT)
		            }
		        }
		    };
		    /**
			 *  @param   {string} expr the expression string
			 *  @return  {number}      the input count
			 *  @private
			 */
		    Tone.Expr.prototype._parseInputs = function (expr) {
		        var inputArray = expr.match(/\$\d/g);
		        var inputMax = 0;
		        if (inputArray !== null) {
		            for (var i = 0; i < inputArray.length; i++) {
		                var inputNum = parseInt(inputArray[i].substr(1)) + 1;
		                inputMax = Math.max(inputMax, inputNum);
		            }
		        }
		        return inputMax;
		    };
		    /**
			 *  @param   {Array} args 	an array of arguments
			 *  @return  {string} the results of the replacements being replaced
			 *  @private
			 */
		    Tone.Expr.prototype._replacements = function (args) {
		        var expr = args.shift();
		        for (var i = 0; i < args.length; i++) {
		            expr = expr.replace(/\%/i, args[i]);
		        }
		        return expr;
		    };
		    /**
			 *  tokenize the expression based on the Expressions object
			 *  @param   {string} expr 
			 *  @return  {Object}      returns two methods on the tokenized list, next and peek
			 *  @private
			 */
		    Tone.Expr.prototype._tokenize = function (expr) {
		        var position = -1;
		        var tokens = [];
		        while (expr.length > 0) {
		            expr = expr.trim();
		            var token = getNextToken(expr);
		            tokens.push(token);
		            expr = expr.substr(token.value.length);
		        }
		        function getNextToken(expr) {
		            for (var type in Tone.Expr._Expressions) {
		                var group = Tone.Expr._Expressions[type];
		                for (var opName in group) {
		                    var op = group[opName];
		                    var reg = op.regexp;
		                    var match = expr.match(reg);
		                    if (match !== null) {
		                        return {
		                            type: type,
		                            value: match[0],
		                            method: op.method
		                        };
		                    }
		                }
		            }
		            throw new SyntaxError('Tone.Expr: Unexpected token ' + expr);
		        }
		        return {
		            next: function () {
		                return tokens[++position];
		            },
		            peek: function () {
		                return tokens[position + 1];
		            }
		        };
		    };
		    /**
			 *  recursively parse the string expression into a syntax tree
			 *  
			 *  @param   {string} expr 
			 *  @return  {Object}
			 *  @private
			 */
		    Tone.Expr.prototype._parseTree = function (expr) {
		        var lexer = this._tokenize(expr);
		        var isUndef = this.isUndef.bind(this);
		        function matchSyntax(token, syn) {
		            return !isUndef(token) && token.type === 'glue' && token.value === syn;
		        }
		        function matchGroup(token, groupName, prec) {
		            var ret = false;
		            var group = Tone.Expr._Expressions[groupName];
		            if (!isUndef(token)) {
		                for (var opName in group) {
		                    var op = group[opName];
		                    if (op.regexp.test(token.value)) {
		                        if (!isUndef(prec)) {
		                            if (op.precedence === prec) {
		                                return true;
		                            }
		                        } else {
		                            return true;
		                        }
		                    }
		                }
		            }
		            return ret;
		        }
		        function parseExpression(precedence) {
		            if (isUndef(precedence)) {
		                precedence = 5;
		            }
		            var expr;
		            if (precedence < 0) {
		                expr = parseUnary();
		            } else {
		                expr = parseExpression(precedence - 1);
		            }
		            var token = lexer.peek();
		            while (matchGroup(token, 'binary', precedence)) {
		                token = lexer.next();
		                expr = {
		                    operator: token.value,
		                    method: token.method,
		                    args: [
		                        expr,
		                        parseExpression(precedence - 1)
		                    ]
		                };
		                token = lexer.peek();
		            }
		            return expr;
		        }
		        function parseUnary() {
		            var token, expr;
		            token = lexer.peek();
		            if (matchGroup(token, 'unary')) {
		                token = lexer.next();
		                expr = parseUnary();
		                return {
		                    operator: token.value,
		                    method: token.method,
		                    args: [expr]
		                };
		            }
		            return parsePrimary();
		        }
		        function parsePrimary() {
		            var token, expr;
		            token = lexer.peek();
		            if (isUndef(token)) {
		                throw new SyntaxError('Tone.Expr: Unexpected termination of expression');
		            }
		            if (token.type === 'func') {
		                token = lexer.next();
		                return parseFunctionCall(token);
		            }
		            if (token.type === 'value') {
		                token = lexer.next();
		                return {
		                    method: token.method,
		                    args: token.value
		                };
		            }
		            if (matchSyntax(token, '(')) {
		                lexer.next();
		                expr = parseExpression();
		                token = lexer.next();
		                if (!matchSyntax(token, ')')) {
		                    throw new SyntaxError('Expected )');
		                }
		                return expr;
		            }
		            throw new SyntaxError('Tone.Expr: Parse error, cannot process token ' + token.value);
		        }
		        function parseFunctionCall(func) {
		            var token, args = [];
		            token = lexer.next();
		            if (!matchSyntax(token, '(')) {
		                throw new SyntaxError('Tone.Expr: Expected ( in a function call "' + func.value + '"');
		            }
		            token = lexer.peek();
		            if (!matchSyntax(token, ')')) {
		                args = parseArgumentList();
		            }
		            token = lexer.next();
		            if (!matchSyntax(token, ')')) {
		                throw new SyntaxError('Tone.Expr: Expected ) in a function call "' + func.value + '"');
		            }
		            return {
		                method: func.method,
		                args: args,
		                name: name
		            };
		        }
		        function parseArgumentList() {
		            var token, expr, args = [];
		            while (true) {
		                expr = parseExpression();
		                if (isUndef(expr)) {
		                    // TODO maybe throw exception?
		                    break;
		                }
		                args.push(expr);
		                token = lexer.peek();
		                if (!matchSyntax(token, ',')) {
		                    break;
		                }
		                lexer.next();
		            }
		            return args;
		        }
		        return parseExpression();
		    };
		    /**
			 *  recursively evaluate the expression tree
			 *  @param   {Object} tree 
			 *  @return  {AudioNode}      the resulting audio node from the expression
			 *  @private
			 */
		    Tone.Expr.prototype._eval = function (tree) {
		        if (!this.isUndef(tree)) {
		            var node = tree.method(tree.args, this);
		            this._nodes.push(node);
		            return node;
		        }
		    };
		    /**
			 *  dispose all the nodes
			 *  @private
			 */
		    Tone.Expr.prototype._disposeNodes = function () {
		        for (var i = 0; i < this._nodes.length; i++) {
		            var node = this._nodes[i];
		            if (this.isFunction(node.dispose)) {
		                node.dispose();
		            } else if (this.isFunction(node.disconnect)) {
		                node.disconnect();
		            }
		            node = null;
		            this._nodes[i] = null;
		        }
		        this._nodes = null;
		    };
		    /**
			 *  clean up
			 */
		    Tone.Expr.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._disposeNodes();
		    };
		    return Tone.Expr;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Convert an incoming signal between 0, 1 to an equal power gain scale.
			 *
			 *  @extends {Tone.SignalBase}
			 *  @constructor
			 *  @example
			 * var eqPowGain = new Tone.EqualPowerGain();
			 */
		    Tone.EqualPowerGain = function () {
		        /**
				 *  @type {Tone.WaveShaper}
				 *  @private
				 */
		        this._eqPower = this.input = this.output = new Tone.WaveShaper(function (val) {
		            if (Math.abs(val) < 0.001) {
		                //should output 0 when input is 0
		                return 0;
		            } else {
		                return this.equalPowerScale(val);
		            }
		        }.bind(this), 4096);
		    };
		    Tone.extend(Tone.EqualPowerGain, Tone.SignalBase);
		    /**
			 *  clean up
			 *  @returns {Tone.EqualPowerGain} this
			 */
		    Tone.EqualPowerGain.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._eqPower.dispose();
		        this._eqPower = null;
		        return this;
		    };
		    return Tone.EqualPowerGain;
		});
		Module(function (Tone) {
		    
		    /**
			 * @class  Tone.Crossfade provides equal power fading between two inputs. 
			 *         More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).
			 *
			 * @constructor
			 * @extends {Tone}
			 * @param {NormalRange} [initialFade=0.5]
			 * @example
			 * var crossFade = new Tone.CrossFade(0.5);
			 * //connect effect A to crossfade from
			 * //effect output 0 to crossfade input 0
			 * effectA.connect(crossFade, 0, 0);
			 * //connect effect B to crossfade from
			 * //effect output 0 to crossfade input 1
			 * effectB.connect(crossFade, 0, 1);
			 * crossFade.fade.value = 0;
			 * // ^ only effectA is output
			 * crossFade.fade.value = 1;
			 * // ^ only effectB is output
			 * crossFade.fade.value = 0.5;
			 * // ^ the two signals are mixed equally. 
			 */
		    Tone.CrossFade = function (initialFade) {
		        this.createInsOuts(2, 1);
		        /**
				 *  Alias for <code>input[0]</code>. 
				 *  @type {Tone.Gain}
				 */
		        this.a = this.input[0] = new Tone.Gain();
		        /**
				 *  Alias for <code>input[1]</code>. 
				 *  @type {Tone.Gain}
				 */
		        this.b = this.input[1] = new Tone.Gain();
		        /**
				 * 	The mix between the two inputs. A fade value of 0
				 * 	will output 100% <code>input[0]</code> and 
				 * 	a value of 1 will output 100% <code>input[1]</code>. 
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.fade = new Tone.Signal(this.defaultArg(initialFade, 0.5), Tone.Type.NormalRange);
		        /**
				 *  equal power gain cross fade
				 *  @private
				 *  @type {Tone.EqualPowerGain}
				 */
		        this._equalPowerA = new Tone.EqualPowerGain();
		        /**
				 *  equal power gain cross fade
				 *  @private
				 *  @type {Tone.EqualPowerGain}
				 */
		        this._equalPowerB = new Tone.EqualPowerGain();
		        /**
				 *  invert the incoming signal
				 *  @private
				 *  @type {Tone}
				 */
		        this._invert = new Tone.Expr('1 - $0');
		        //connections
		        this.a.connect(this.output);
		        this.b.connect(this.output);
		        this.fade.chain(this._equalPowerB, this.b.gain);
		        this.fade.chain(this._invert, this._equalPowerA, this.a.gain);
		        this._readOnly('fade');
		    };
		    Tone.extend(Tone.CrossFade);
		    /**
			 *  clean up
			 *  @returns {Tone.CrossFade} this
			 */
		    Tone.CrossFade.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._writable('fade');
		        this._equalPowerA.dispose();
		        this._equalPowerA = null;
		        this._equalPowerB.dispose();
		        this._equalPowerB = null;
		        this.fade.dispose();
		        this.fade = null;
		        this._invert.dispose();
		        this._invert = null;
		        this.a.dispose();
		        this.a = null;
		        this.b.dispose();
		        this.b = null;
		        return this;
		    };
		    return Tone.CrossFade;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Filter is a filter which allows for all of the same native methods
			 *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface). 
			 *          Tone.Filter has the added ability to set the filter rolloff at -12 
			 *          (default), -24 and -48. 
			 *
			 *  @constructor
			 *  @extends {Tone}
			 *  @param {Frequency|Object} [frequency] The cutoff frequency of the filter.
			 *  @param {string=} type The type of filter.
			 *  @param {number=} rolloff The drop in decibels per octave after the cutoff frequency.
			 *                            3 choices: -12, -24, and -48
			 *  @example
			 *  var filter = new Tone.Filter(200, "highpass");
			 */
		    Tone.Filter = function () {
		        this.createInsOuts(1, 1);
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'type',
		            'rolloff'
		        ], Tone.Filter.defaults);
		        /**
				 *  the filter(s)
				 *  @type {Array}
				 *  @private
				 */
		        this._filters = [];
		        /**
				 *  The cutoff frequency of the filter. 
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
		        /**
				 *  The detune parameter
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = new Tone.Signal(0, Tone.Type.Cents);
		        /**
				 *  The gain of the filter, only used in certain filter types
				 *  @type {Number}
				 *  @signal
				 */
		        this.gain = new Tone.Signal({
		            'value': options.gain,
		            'convert': false
		        });
		        /**
				 *  The Q or Quality of the filter
				 *  @type {Positive}
				 *  @signal
				 */
		        this.Q = new Tone.Signal(options.Q);
		        /**
				 *  the type of the filter
				 *  @type {string}
				 *  @private
				 */
		        this._type = options.type;
		        /**
				 *  the rolloff value of the filter
				 *  @type {number}
				 *  @private
				 */
		        this._rolloff = options.rolloff;
		        //set the rolloff;
		        this.rolloff = options.rolloff;
		        this._readOnly([
		            'detune',
		            'frequency',
		            'gain',
		            'Q'
		        ]);
		    };
		    Tone.extend(Tone.Filter);
		    /**
			 *  the default parameters
			 *
			 *  @static
			 *  @type {Object}
			 */
		    Tone.Filter.defaults = {
		        'type': 'lowpass',
		        'frequency': 350,
		        'rolloff': -12,
		        'Q': 1,
		        'gain': 0
		    };
		    /**
			 * The type of the filter. Types: "lowpass", "highpass", 
			 * "bandpass", "lowshelf", "highshelf", "notch", "allpass", or "peaking". 
			 * @memberOf Tone.Filter#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.Filter.prototype, 'type', {
		        get: function () {
		            return this._type;
		        },
		        set: function (type) {
		            var types = [
		                'lowpass',
		                'highpass',
		                'bandpass',
		                'lowshelf',
		                'highshelf',
		                'notch',
		                'allpass',
		                'peaking'
		            ];
		            if (types.indexOf(type) === -1) {
		                throw new TypeError('Tone.Filter: invalid type ' + type);
		            }
		            this._type = type;
		            for (var i = 0; i < this._filters.length; i++) {
		                this._filters[i].type = type;
		            }
		        }
		    });
		    /**
			 * The rolloff of the filter which is the drop in db
			 * per octave. Implemented internally by cascading filters.
			 * Only accepts the values -12, -24, -48 and -96.
			 * @memberOf Tone.Filter#
			 * @type {number}
			 * @name rolloff
			 */
		    Object.defineProperty(Tone.Filter.prototype, 'rolloff', {
		        get: function () {
		            return this._rolloff;
		        },
		        set: function (rolloff) {
		            rolloff = parseInt(rolloff, 10);
		            var possibilities = [
		                -12,
		                -24,
		                -48,
		                -96
		            ];
		            var cascadingCount = possibilities.indexOf(rolloff);
		            //check the rolloff is valid
		            if (cascadingCount === -1) {
		                throw new RangeError('Tone.Filter: rolloff can only be -12, -24, -48 or -96');
		            }
		            cascadingCount += 1;
		            this._rolloff = rolloff;
		            //first disconnect the filters and throw them away
		            this.input.disconnect();
		            for (var i = 0; i < this._filters.length; i++) {
		                this._filters[i].disconnect();
		                this._filters[i] = null;
		            }
		            this._filters = new Array(cascadingCount);
		            for (var count = 0; count < cascadingCount; count++) {
		                var filter = this.context.createBiquadFilter();
		                filter.type = this._type;
		                this.frequency.connect(filter.frequency);
		                this.detune.connect(filter.detune);
		                this.Q.connect(filter.Q);
		                this.gain.connect(filter.gain);
		                this._filters[count] = filter;
		            }
		            //connect them up
		            var connectionChain = [this.input].concat(this._filters).concat([this.output]);
		            this.connectSeries.apply(this, connectionChain);
		        }
		    });
		    /**
			 *  Clean up. 
			 *  @return {Tone.Filter} this
			 */
		    Tone.Filter.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        for (var i = 0; i < this._filters.length; i++) {
		            this._filters[i].disconnect();
		            this._filters[i] = null;
		        }
		        this._filters = null;
		        this._writable([
		            'detune',
		            'frequency',
		            'gain',
		            'Q'
		        ]);
		        this.frequency.dispose();
		        this.Q.dispose();
		        this.frequency = null;
		        this.Q = null;
		        this.detune.dispose();
		        this.detune = null;
		        this.gain.dispose();
		        this.gain = null;
		        return this;
		    };
		    return Tone.Filter;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Split the incoming signal into three bands (low, mid, high)
			 *         with two crossover frequency controls. 
			 *
			 *  @extends {Tone}
			 *  @constructor
			 *  @param {Frequency|Object} [lowFrequency] the low/mid crossover frequency
			 *  @param {Frequency} [highFrequency] the mid/high crossover frequency
			 */
		    Tone.MultibandSplit = function () {
		        var options = this.optionsObject(arguments, [
		            'lowFrequency',
		            'highFrequency'
		        ], Tone.MultibandSplit.defaults);
		        /**
				 *  the input
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this.input = new Tone.Gain();
		        /**
				 *  the outputs
				 *  @type {Array}
				 *  @private
				 */
		        this.output = new Array(3);
		        /**
				 *  The low band. Alias for <code>output[0]</code>
				 *  @type {Tone.Filter}
				 */
		        this.low = this.output[0] = new Tone.Filter(0, 'lowpass');
		        /**
				 *  the lower filter of the mid band
				 *  @type {Tone.Filter}
				 *  @private
				 */
		        this._lowMidFilter = new Tone.Filter(0, 'highpass');
		        /**
				 *  The mid band output. Alias for <code>output[1]</code>
				 *  @type {Tone.Filter}
				 */
		        this.mid = this.output[1] = new Tone.Filter(0, 'lowpass');
		        /**
				 *  The high band output. Alias for <code>output[2]</code>
				 *  @type {Tone.Filter}
				 */
		        this.high = this.output[2] = new Tone.Filter(0, 'highpass');
		        /**
				 *  The low/mid crossover frequency.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.lowFrequency = new Tone.Signal(options.lowFrequency, Tone.Type.Frequency);
		        /**
				 *  The mid/high crossover frequency.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.highFrequency = new Tone.Signal(options.highFrequency, Tone.Type.Frequency);
		        /**
				 *  The quality of all the filters
				 *  @type {Number}
				 *  @signal
				 */
		        this.Q = new Tone.Signal(options.Q);
		        this.input.fan(this.low, this.high);
		        this.input.chain(this._lowMidFilter, this.mid);
		        //the frequency control signal
		        this.lowFrequency.connect(this.low.frequency);
		        this.lowFrequency.connect(this._lowMidFilter.frequency);
		        this.highFrequency.connect(this.mid.frequency);
		        this.highFrequency.connect(this.high.frequency);
		        //the Q value
		        this.Q.connect(this.low.Q);
		        this.Q.connect(this._lowMidFilter.Q);
		        this.Q.connect(this.mid.Q);
		        this.Q.connect(this.high.Q);
		        this._readOnly([
		            'high',
		            'mid',
		            'low',
		            'highFrequency',
		            'lowFrequency'
		        ]);
		    };
		    Tone.extend(Tone.MultibandSplit);
		    /**
			 *  @private
			 *  @static
			 *  @type {Object}
			 */
		    Tone.MultibandSplit.defaults = {
		        'lowFrequency': 400,
		        'highFrequency': 2500,
		        'Q': 1
		    };
		    /**
			 *  Clean up.
			 *  @returns {Tone.MultibandSplit} this
			 */
		    Tone.MultibandSplit.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._writable([
		            'high',
		            'mid',
		            'low',
		            'highFrequency',
		            'lowFrequency'
		        ]);
		        this.low.dispose();
		        this.low = null;
		        this._lowMidFilter.dispose();
		        this._lowMidFilter = null;
		        this.mid.dispose();
		        this.mid = null;
		        this.high.dispose();
		        this.high = null;
		        this.lowFrequency.dispose();
		        this.lowFrequency = null;
		        this.highFrequency.dispose();
		        this.highFrequency = null;
		        this.Q.dispose();
		        this.Q = null;
		        return this;
		    };
		    return Tone.MultibandSplit;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.EQ3 is a three band EQ with control over low, mid, and high gain as
			 *         well as the low and high crossover frequencies.
			 *
			 *  @constructor
			 *  @extends {Tone}
			 *  
			 *  @param {Decibels|Object} [lowLevel] The gain applied to the lows.
			 *  @param {Decibels} [midLevel] The gain applied to the mid.
			 *  @param {Decibels} [highLevel] The gain applied to the high.
			 *  @example
			 * var eq = new Tone.EQ3(-10, 3, -20);
			 */
		    Tone.EQ3 = function () {
		        var options = this.optionsObject(arguments, [
		            'low',
		            'mid',
		            'high'
		        ], Tone.EQ3.defaults);
		        /**
				 *  the output node
				 *  @type {GainNode}
				 *  @private
				 */
		        this.output = new Tone.Gain();
		        /**
				 *  the multiband split
				 *  @type {Tone.MultibandSplit}
				 *  @private
				 */
		        this._multibandSplit = this.input = new Tone.MultibandSplit({
		            'lowFrequency': options.lowFrequency,
		            'highFrequency': options.highFrequency
		        });
		        /**
				 *  The gain for the lower signals
				 *  @type  {Tone.Gain}
				 *  @private
				 */
		        this._lowGain = new Tone.Gain(options.low, Tone.Type.Decibels);
		        /**
				 *  The gain for the mid signals
				 *  @type  {Tone.Gain}
				 *  @private
				 */
		        this._midGain = new Tone.Gain(options.mid, Tone.Type.Decibels);
		        /**
				 * The gain in decibels of the high part
				 * @type {Tone.Gain}
				 * @private
				 */
		        this._highGain = new Tone.Gain(options.high, Tone.Type.Decibels);
		        /**
				 * The gain in decibels of the low part
				 * @type {Decibels}
				 * @signal
				 */
		        this.low = this._lowGain.gain;
		        /**
				 * The gain in decibels of the mid part
				 * @type {Decibels}
				 * @signal
				 */
		        this.mid = this._midGain.gain;
		        /**
				 * The gain in decibels of the high part
				 * @type {Decibels}
				 * @signal
				 */
		        this.high = this._highGain.gain;
		        /**
				 *  The Q value for all of the filters. 
				 *  @type {Positive}
				 *  @signal
				 */
		        this.Q = this._multibandSplit.Q;
		        /**
				 *  The low/mid crossover frequency. 
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.lowFrequency = this._multibandSplit.lowFrequency;
		        /**
				 *  The mid/high crossover frequency. 
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.highFrequency = this._multibandSplit.highFrequency;
		        //the frequency bands
		        this._multibandSplit.low.chain(this._lowGain, this.output);
		        this._multibandSplit.mid.chain(this._midGain, this.output);
		        this._multibandSplit.high.chain(this._highGain, this.output);
		        this._readOnly([
		            'low',
		            'mid',
		            'high',
		            'lowFrequency',
		            'highFrequency'
		        ]);
		    };
		    Tone.extend(Tone.EQ3);
		    /**
			 *  the default values
			 */
		    Tone.EQ3.defaults = {
		        'low': 0,
		        'mid': 0,
		        'high': 0,
		        'lowFrequency': 400,
		        'highFrequency': 2500
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.EQ3} this
			 */
		    Tone.EQ3.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._writable([
		            'low',
		            'mid',
		            'high',
		            'lowFrequency',
		            'highFrequency'
		        ]);
		        this._multibandSplit.dispose();
		        this._multibandSplit = null;
		        this.lowFrequency = null;
		        this.highFrequency = null;
		        this._lowGain.dispose();
		        this._lowGain = null;
		        this._midGain.dispose();
		        this._midGain = null;
		        this._highGain.dispose();
		        this._highGain = null;
		        this.low = null;
		        this.mid = null;
		        this.high = null;
		        this.Q = null;
		        return this;
		    };
		    return Tone.EQ3;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Performs a linear scaling on an input signal.
			 *          Scales a NormalRange input to between
			 *          outputMin and outputMax.
			 *
			 *  @constructor
			 *  @extends {Tone.SignalBase}
			 *  @param {number} [outputMin=0] The output value when the input is 0. 
			 *  @param {number} [outputMax=1]	The output value when the input is 1. 
			 *  @example
			 * var scale = new Tone.Scale(50, 100);
			 * var signal = new Tone.Signal(0.5).connect(scale);
			 * //the output of scale equals 75
			 */
		    Tone.Scale = function (outputMin, outputMax) {
		        /** 
				 *  @private
				 *  @type {number}
				 */
		        this._outputMin = this.defaultArg(outputMin, 0);
		        /** 
				 *  @private
				 *  @type {number}
				 */
		        this._outputMax = this.defaultArg(outputMax, 1);
		        /** 
				 *  @private
				 *  @type {Tone.Multiply}
				 *  @private
				 */
		        this._scale = this.input = new Tone.Multiply(1);
		        /** 
				 *  @private
				 *  @type {Tone.Add}
				 *  @private
				 */
		        this._add = this.output = new Tone.Add(0);
		        this._scale.connect(this._add);
		        this._setRange();
		    };
		    Tone.extend(Tone.Scale, Tone.SignalBase);
		    /**
			 * The minimum output value. This number is output when 
			 * the value input value is 0. 
			 * @memberOf Tone.Scale#
			 * @type {number}
			 * @name min
			 */
		    Object.defineProperty(Tone.Scale.prototype, 'min', {
		        get: function () {
		            return this._outputMin;
		        },
		        set: function (min) {
		            this._outputMin = min;
		            this._setRange();
		        }
		    });
		    /**
			 * The maximum output value. This number is output when 
			 * the value input value is 1. 
			 * @memberOf Tone.Scale#
			 * @type {number}
			 * @name max
			 */
		    Object.defineProperty(Tone.Scale.prototype, 'max', {
		        get: function () {
		            return this._outputMax;
		        },
		        set: function (max) {
		            this._outputMax = max;
		            this._setRange();
		        }
		    });
		    /**
			 *  set the values
			 *  @private
			 */
		    Tone.Scale.prototype._setRange = function () {
		        this._add.value = this._outputMin;
		        this._scale.value = this._outputMax - this._outputMin;
		    };
		    /**
			 *  Clean up.
			 *  @returns {Tone.Scale} this
			 */
		    Tone.Scale.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._add.dispose();
		        this._add = null;
		        this._scale.dispose();
		        this._scale = null;
		        return this;
		    };
		    return Tone.Scale;
		});
		Module(function (Tone) {
		    /**
			 *  @class  Performs an exponential scaling on an input signal.
			 *          Scales a NormalRange value [0,1] exponentially
			 *          to the output range of outputMin to outputMax.
			 *
			 *  @constructor
			 *  @extends {Tone.SignalBase}
			 *  @param {number} [outputMin=0] The output value when the input is 0. 
			 *  @param {number} [outputMax=1]	The output value when the input is 1. 
			 *  @param {number} [exponent=2] The exponent which scales the incoming signal.
			 *  @example
			 * var scaleExp = new Tone.ScaleExp(0, 100, 2);
			 * var signal = new Tone.Signal(0.5).connect(scaleExp);
			 */
		    Tone.ScaleExp = function (outputMin, outputMax, exponent) {
		        /**
				 *  scale the input to the output range
				 *  @type {Tone.Scale}
				 *  @private
				 */
		        this._scale = this.output = new Tone.Scale(outputMin, outputMax);
		        /**
				 *  @private
				 *  @type {Tone.Pow}
				 *  @private
				 */
		        this._exp = this.input = new Tone.Pow(this.defaultArg(exponent, 2));
		        this._exp.connect(this._scale);
		    };
		    Tone.extend(Tone.ScaleExp, Tone.SignalBase);
		    /**
			 * Instead of interpolating linearly between the <code>min</code> and 
			 * <code>max</code> values, setting the exponent will interpolate between
			 * the two values with an exponential curve. 
			 * @memberOf Tone.ScaleExp#
			 * @type {number}
			 * @name exponent
			 */
		    Object.defineProperty(Tone.ScaleExp.prototype, 'exponent', {
		        get: function () {
		            return this._exp.value;
		        },
		        set: function (exp) {
		            this._exp.value = exp;
		        }
		    });
		    /**
			 * The minimum output value. This number is output when 
			 * the value input value is 0. 
			 * @memberOf Tone.ScaleExp#
			 * @type {number}
			 * @name min
			 */
		    Object.defineProperty(Tone.ScaleExp.prototype, 'min', {
		        get: function () {
		            return this._scale.min;
		        },
		        set: function (min) {
		            this._scale.min = min;
		        }
		    });
		    /**
			 * The maximum output value. This number is output when 
			 * the value input value is 1. 
			 * @memberOf Tone.ScaleExp#
			 * @type {number}
			 * @name max
			 */
		    Object.defineProperty(Tone.ScaleExp.prototype, 'max', {
		        get: function () {
		            return this._scale.max;
		        },
		        set: function (max) {
		            this._scale.max = max;
		        }
		    });
		    /**
			 *  Clean up.
			 *  @returns {Tone.ScaleExp} this
			 */
		    Tone.ScaleExp.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._scale.dispose();
		        this._scale = null;
		        this._exp.dispose();
		        this._exp = null;
		        return this;
		    };
		    return Tone.ScaleExp;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface). 
			 *  @extends {Tone}
			 *  @param {Time=} delayTime The delay applied to the incoming signal.
			 *  @param {Time=} maxDelay The maximum delay time. 
			 */
		    Tone.Delay = function () {
		        var options = this.optionsObject(arguments, [
		            'delayTime',
		            'maxDelay'
		        ], Tone.Delay.defaults);
		        /**
				 *  The native delay node
				 *  @type {DelayNode}
				 *  @private
				 */
		        this._delayNode = this.input = this.output = this.context.createDelay(this.toSeconds(options.maxDelay));
		        /**
				 *  The amount of time the incoming signal is
				 *  delayed. 
				 *  @type {Tone.Param}
				 *  @signal
				 */
		        this.delayTime = new Tone.Param({
		            'param': this._delayNode.delayTime,
		            'units': Tone.Type.Time,
		            'value': options.delayTime
		        });
		        this._readOnly('delayTime');
		    };
		    Tone.extend(Tone.Delay);
		    /**
			 *  The defaults
			 *  @const
			 *  @type  {Object}
			 */
		    Tone.Delay.defaults = {
		        'maxDelay': 1,
		        'delayTime': 0
		    };
		    /**
			 *  Clean up.
			 *  @return  {Tone.Delay}  this
			 */
		    Tone.Delay.prototype.dispose = function () {
		        Tone.Param.prototype.dispose.call(this);
		        this._delayNode.disconnect();
		        this._delayNode = null;
		        this._writable('delayTime');
		        this.delayTime = null;
		        return this;
		    };
		    return Tone.Delay;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Comb filters are basic building blocks for physical modeling. Read more
			 *         about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).
			 *
			 *  @extends {Tone}
			 *  @constructor
			 *  @param {Time|Object} [delayTime] The delay time of the filter. 
			 *  @param {NormalRange=} resonance The amount of feedback the filter has. 
			 */
		    Tone.FeedbackCombFilter = function () {
		        var options = this.optionsObject(arguments, [
		            'delayTime',
		            'resonance'
		        ], Tone.FeedbackCombFilter.defaults);
		        /**
				 *  the delay node
				 *  @type {DelayNode}
				 *  @private
				 */
		        this._delay = this.input = this.output = new Tone.Delay(options.delayTime);
		        /**
				 *  The amount of delay of the comb filter. 
				 *  @type {Time}
				 *  @signal
				 */
		        this.delayTime = this._delay.delayTime;
		        /**
				 *  the feedback node
				 *  @type {GainNode}
				 *  @private
				 */
		        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);
		        /**
				 *  The amount of feedback of the delayed signal. 
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.resonance = this._feedback.gain;
		        this._delay.chain(this._feedback, this._delay);
		        this._readOnly([
		            'resonance',
		            'delayTime'
		        ]);
		    };
		    Tone.extend(Tone.FeedbackCombFilter);
		    /**
			 *  the default parameters
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.FeedbackCombFilter.defaults = {
		        'delayTime': 0.1,
		        'resonance': 0.5
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.FeedbackCombFilter} this
			 */
		    Tone.FeedbackCombFilter.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._writable([
		            'resonance',
		            'delayTime'
		        ]);
		        this._delay.dispose();
		        this._delay = null;
		        this.delayTime = null;
		        this._feedback.dispose();
		        this._feedback = null;
		        this.resonance = null;
		        return this;
		    };
		    return Tone.FeedbackCombFilter;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Follower is a  crude envelope follower which will follow 
			 *          the amplitude of an incoming signal. 
			 *          Take care with small (< 0.02) attack or decay values 
			 *          as follower has some ripple which is exaggerated
			 *          at these values. Read more about envelope followers (also known 
			 *          as envelope detectors) on [Wikipedia](https://en.wikipedia.org/wiki/Envelope_detector).
			 *  
			 *  @constructor
			 *  @extends {Tone}
			 *  @param {Time|Object} [attack] The rate at which the follower rises.
			 *  @param {Time=} release The rate at which the folower falls. 
			 *  @example
			 * var follower = new Tone.Follower(0.2, 0.4);
			 */
		    Tone.Follower = function () {
		        this.createInsOuts(1, 1);
		        var options = this.optionsObject(arguments, [
		            'attack',
		            'release'
		        ], Tone.Follower.defaults);
		        /**
				 *  @type {Tone.Abs}
				 *  @private
				 */
		        this._abs = new Tone.Abs();
		        /**
				 *  the lowpass filter which smooths the input
				 *  @type {BiquadFilterNode}
				 *  @private
				 */
		        this._filter = this.context.createBiquadFilter();
		        this._filter.type = 'lowpass';
		        this._filter.frequency.value = 0;
		        this._filter.Q.value = -100;
		        /**
				 *  @type {WaveShaperNode}
				 *  @private
				 */
		        this._frequencyValues = new Tone.WaveShaper();
		        /**
				 *  @type {Tone.Subtract}
				 *  @private
				 */
		        this._sub = new Tone.Subtract();
		        /**
				 *  @type {Tone.Delay}
				 *  @private
				 */
		        this._delay = new Tone.Delay(this.blockTime);
		        /**
				 *  this keeps it far from 0, even for very small differences
				 *  @type {Tone.Multiply}
				 *  @private
				 */
		        this._mult = new Tone.Multiply(10000);
		        /**
				 *  @private
				 *  @type {number}
				 */
		        this._attack = options.attack;
		        /**
				 *  @private
				 *  @type {number}
				 */
		        this._release = options.release;
		        //the smoothed signal to get the values
		        this.input.chain(this._abs, this._filter, this.output);
		        //the difference path
		        this._abs.connect(this._sub, 0, 1);
		        this._filter.chain(this._delay, this._sub);
		        //threshold the difference and use the thresh to set the frequency
		        this._sub.chain(this._mult, this._frequencyValues, this._filter.frequency);
		        //set the attack and release values in the table
		        this._setAttackRelease(this._attack, this._release);
		    };
		    Tone.extend(Tone.Follower);
		    /**
			 *  @static
			 *  @type {Object}
			 */
		    Tone.Follower.defaults = {
		        'attack': 0.05,
		        'release': 0.5
		    };
		    /**
			 *  sets the attack and release times in the wave shaper
			 *  @param   {Time} attack  
			 *  @param   {Time} release 
			 *  @private
			 */
		    Tone.Follower.prototype._setAttackRelease = function (attack, release) {
		        var minTime = this.blockTime;
		        attack = Tone.Time(attack).toFrequency();
		        release = Tone.Time(release).toFrequency();
		        attack = Math.max(attack, minTime);
		        release = Math.max(release, minTime);
		        this._frequencyValues.setMap(function (val) {
		            if (val <= 0) {
		                return attack;
		            } else {
		                return release;
		            }
		        });
		    };
		    /**
			 * The attack time.
			 * @memberOf Tone.Follower#
			 * @type {Time}
			 * @name attack
			 */
		    Object.defineProperty(Tone.Follower.prototype, 'attack', {
		        get: function () {
		            return this._attack;
		        },
		        set: function (attack) {
		            this._attack = attack;
		            this._setAttackRelease(this._attack, this._release);
		        }
		    });
		    /**
			 * The release time.
			 * @memberOf Tone.Follower#
			 * @type {Time}
			 * @name release
			 */
		    Object.defineProperty(Tone.Follower.prototype, 'release', {
		        get: function () {
		            return this._release;
		        },
		        set: function (release) {
		            this._release = release;
		            this._setAttackRelease(this._attack, this._release);
		        }
		    });
		    /**
			 *  Borrows the connect method from Signal so that the output can be used
			 *  as a Tone.Signal control signal.
			 *  @function
			 */
		    Tone.Follower.prototype.connect = Tone.Signal.prototype.connect;
		    /**
			 *  dispose
			 *  @returns {Tone.Follower} this
			 */
		    Tone.Follower.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._filter.disconnect();
		        this._filter = null;
		        this._frequencyValues.disconnect();
		        this._frequencyValues = null;
		        this._delay.dispose();
		        this._delay = null;
		        this._sub.disconnect();
		        this._sub = null;
		        this._abs.dispose();
		        this._abs = null;
		        this._mult.dispose();
		        this._mult = null;
		        this._curve = null;
		        return this;
		    };
		    return Tone.Follower;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.ScaledEnvelop is an envelope which can be scaled 
			 *         to any range. It's useful for applying an envelope 
			 *         to a frequency or any other non-NormalRange signal 
			 *         parameter. 
			 *
			 *  @extends {Tone.Envelope}
			 *  @constructor
			 *  @param {Time|Object} [attack]	the attack time in seconds
			 *  @param {Time} [decay]	the decay time in seconds
			 *  @param {number} [sustain] 	a percentage (0-1) of the full amplitude
			 *  @param {Time} [release]	the release time in seconds
			 *  @example
			 *  var scaledEnv = new Tone.ScaledEnvelope({
			 *  	"attack" : 0.2,
			 *  	"min" : 200,
			 *  	"max" : 2000
			 *  });
			 *  scaledEnv.connect(oscillator.frequency);
			 */
		    Tone.ScaledEnvelope = function () {
		        //get all of the defaults
		        var options = this.optionsObject(arguments, [
		            'attack',
		            'decay',
		            'sustain',
		            'release'
		        ], Tone.Envelope.defaults);
		        Tone.Envelope.call(this, options);
		        options = this.defaultArg(options, Tone.ScaledEnvelope.defaults);
		        /** 
				 *  scale the incoming signal by an exponent
				 *  @type {Tone.Pow}
				 *  @private
				 */
		        this._exp = this.output = new Tone.Pow(options.exponent);
		        /**
				 *  scale the signal to the desired range
				 *  @type {Tone.Multiply}
				 *  @private
				 */
		        this._scale = this.output = new Tone.Scale(options.min, options.max);
		        this._sig.chain(this._exp, this._scale);
		    };
		    Tone.extend(Tone.ScaledEnvelope, Tone.Envelope);
		    /**
			 *  the default parameters
			 *  @static
			 */
		    Tone.ScaledEnvelope.defaults = {
		        'min': 0,
		        'max': 1,
		        'exponent': 1
		    };
		    /**
			 * The envelope's min output value. This is the value which it
			 * starts at. 
			 * @memberOf Tone.ScaledEnvelope#
			 * @type {number}
			 * @name min
			 */
		    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'min', {
		        get: function () {
		            return this._scale.min;
		        },
		        set: function (min) {
		            this._scale.min = min;
		        }
		    });
		    /**
			 * The envelope's max output value. In other words, the value
			 * at the peak of the attack portion of the envelope. 
			 * @memberOf Tone.ScaledEnvelope#
			 * @type {number}
			 * @name max
			 */
		    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'max', {
		        get: function () {
		            return this._scale.max;
		        },
		        set: function (max) {
		            this._scale.max = max;
		        }
		    });
		    /**
			 * The envelope's exponent value. 
			 * @memberOf Tone.ScaledEnvelope#
			 * @type {number}
			 * @name exponent
			 */
		    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'exponent', {
		        get: function () {
		            return this._exp.value;
		        },
		        set: function (exp) {
		            this._exp.value = exp;
		        }
		    });
		    /**
			 *  clean up
			 *  @returns {Tone.ScaledEnvelope} this
			 */
		    Tone.ScaledEnvelope.prototype.dispose = function () {
		        Tone.Envelope.prototype.dispose.call(this);
		        this._scale.dispose();
		        this._scale = null;
		        this._exp.dispose();
		        this._exp = null;
		        return this;
		    };
		    return Tone.ScaledEnvelope;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.FrequencyEnvelope is a Tone.ScaledEnvelope, but instead of `min` and `max`
			 *         it's got a `baseFrequency` and `octaves` parameter. 
			 *
			 *  @extends {Tone.Envelope}
			 *  @constructor
			 *  @param {Time|Object} [attack]	the attack time in seconds
			 *  @param {Time} [decay]	the decay time in seconds
			 *  @param {number} [sustain] 	a percentage (0-1) of the full amplitude
			 *  @param {Time} [release]	the release time in seconds
			 *  @example
			 *  var env = new Tone.FrequencyEnvelope({
			 *  	"attack" : 0.2,
			 *  	"baseFrequency" : "C2",
			 *  	"octaves" : 4
			 *  });
			 *  scaledEnv.connect(oscillator.frequency);
			 */
		    Tone.FrequencyEnvelope = function () {
		        var options = this.optionsObject(arguments, [
		            'attack',
		            'decay',
		            'sustain',
		            'release'
		        ], Tone.Envelope.defaults);
		        Tone.ScaledEnvelope.call(this, options);
		        options = this.defaultArg(options, Tone.FrequencyEnvelope.defaults);
		        /**
				 *  Stores the octave value
				 *  @type {Positive}
				 *  @private
				 */
		        this._octaves = options.octaves;
		        //setup
		        this.baseFrequency = options.baseFrequency;
		        this.octaves = options.octaves;
		    };
		    Tone.extend(Tone.FrequencyEnvelope, Tone.Envelope);
		    /**
			 *  the default parameters
			 *  @static
			 */
		    Tone.FrequencyEnvelope.defaults = {
		        'baseFrequency': 200,
		        'octaves': 4,
		        'exponent': 2
		    };
		    /**
			 * The envelope's mininum output value. This is the value which it
			 * starts at. 
			 * @memberOf Tone.FrequencyEnvelope#
			 * @type {Frequency}
			 * @name baseFrequency
			 */
		    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'baseFrequency', {
		        get: function () {
		            return this._scale.min;
		        },
		        set: function (min) {
		            this._scale.min = this.toFrequency(min);
		            //also update the octaves
		            this.octaves = this._octaves;
		        }
		    });
		    /**
			 * The number of octaves above the baseFrequency that the
			 * envelope will scale to.
			 * @memberOf Tone.FrequencyEnvelope#
			 * @type {Positive}
			 * @name octaves
			 */
		    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'octaves', {
		        get: function () {
		            return this._octaves;
		        },
		        set: function (octaves) {
		            this._octaves = octaves;
		            this._scale.max = this.baseFrequency * Math.pow(2, octaves);
		        }
		    });
		    /**
			 * The envelope's exponent value. 
			 * @memberOf Tone.FrequencyEnvelope#
			 * @type {number}
			 * @name exponent
			 */
		    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'exponent', {
		        get: function () {
		            return this._exp.value;
		        },
		        set: function (exp) {
		            this._exp.value = exp;
		        }
		    });
		    /**
			 *  clean up
			 *  @returns {Tone.FrequencyEnvelope} this
			 */
		    Tone.FrequencyEnvelope.prototype.dispose = function () {
		        Tone.ScaledEnvelope.prototype.dispose.call(this);
		        return this;
		    };
		    return Tone.FrequencyEnvelope;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Gate only passes a signal through when the incoming 
			 *          signal exceeds a specified threshold. To do this, Gate uses 
			 *          a Tone.Follower to follow the amplitude of the incoming signal. 
			 *          A common implementation of this class is a [Noise Gate](https://en.wikipedia.org/wiki/Noise_gate).
			 *  
			 *  @constructor
			 *  @extends {Tone}
			 *  @param {Decibels|Object} [threshold] The threshold above which the gate will open. 
			 *  @param {Time=} attack The follower's attack time
			 *  @param {Time=} release The follower's release time
			 *  @example
			 * var gate = new Tone.Gate(-30, 0.2, 0.3).toMaster();
			 * var mic = new Tone.Microphone().connect(gate);
			 * //the gate will only pass through the incoming 
			 * //signal when it's louder than -30db
			 */
		    Tone.Gate = function () {
		        this.createInsOuts(1, 1);
		        var options = this.optionsObject(arguments, [
		            'threshold',
		            'attack',
		            'release'
		        ], Tone.Gate.defaults);
		        /**
				 *  @type {Tone.Follower}
				 *  @private
				 */
		        this._follower = new Tone.Follower(options.attack, options.release);
		        /**
				 *  @type {Tone.GreaterThan}
				 *  @private
				 */
		        this._gt = new Tone.GreaterThan(this.dbToGain(options.threshold));
		        //the connections
		        this.input.connect(this.output);
		        //the control signal
		        this.input.chain(this._gt, this._follower, this.output.gain);
		    };
		    Tone.extend(Tone.Gate);
		    /**
			 *  @const
			 *  @static
			 *  @type {Object}
			 */
		    Tone.Gate.defaults = {
		        'attack': 0.1,
		        'release': 0.1,
		        'threshold': -40
		    };
		    /**
			 * The threshold of the gate in decibels
			 * @memberOf Tone.Gate#
			 * @type {Decibels}
			 * @name threshold
			 */
		    Object.defineProperty(Tone.Gate.prototype, 'threshold', {
		        get: function () {
		            return this.gainToDb(this._gt.value);
		        },
		        set: function (thresh) {
		            this._gt.value = this.dbToGain(thresh);
		        }
		    });
		    /**
			 * The attack speed of the gate
			 * @memberOf Tone.Gate#
			 * @type {Time}
			 * @name attack
			 */
		    Object.defineProperty(Tone.Gate.prototype, 'attack', {
		        get: function () {
		            return this._follower.attack;
		        },
		        set: function (attackTime) {
		            this._follower.attack = attackTime;
		        }
		    });
		    /**
			 * The release speed of the gate
			 * @memberOf Tone.Gate#
			 * @type {Time}
			 * @name release
			 */
		    Object.defineProperty(Tone.Gate.prototype, 'release', {
		        get: function () {
		            return this._follower.release;
		        },
		        set: function (releaseTime) {
		            this._follower.release = releaseTime;
		        }
		    });
		    /**
			 *  Clean up. 
			 *  @returns {Tone.Gate} this
			 */
		    Tone.Gate.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._follower.dispose();
		        this._gt.dispose();
		        this._follower = null;
		        this._gt = null;
		        return this;
		    };
		    return Tone.Gate;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  A Timeline State. Provides the methods: <code>setStateAtTime("state", time)</code>
			 *          and <code>getStateAtTime(time)</code>.
			 *
			 *  @extends {Tone.Timeline}
			 *  @param {String} initial The initial state of the TimelineState. 
			 *                          Defaults to <code>undefined</code>
			 */
		    Tone.TimelineState = function (initial) {
		        Tone.Timeline.call(this);
		        /**
				 *  The initial state
				 *  @private
				 *  @type {String}
				 */
		        this._initial = initial;
		    };
		    Tone.extend(Tone.TimelineState, Tone.Timeline);
		    /**
			 *  Returns the scheduled state scheduled before or at
			 *  the given time.
			 *  @param  {Number}  time  The time to query.
			 *  @return  {String}  The name of the state input in setStateAtTime.
			 */
		    Tone.TimelineState.prototype.getStateAtTime = function (time) {
		        var event = this.getEvent(time);
		        if (event !== null) {
		            return event.state;
		        } else {
		            return this._initial;
		        }
		    };
		    /**
			 *  Returns the scheduled state scheduled before or at
			 *  the given time.
			 *  @param  {String}  state The name of the state to set.
			 *  @param  {Number}  time  The time to query.
			 */
		    Tone.TimelineState.prototype.setStateAtTime = function (state, time) {
		        this.addEvent({
		            'state': state,
		            'time': time
		        });
		    };
		    return Tone.TimelineState;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Emitter gives classes which extend it
			 *         the ability to listen for and emit events. 
			 *         Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).
			 *         MIT (c) 2011 Jerome Etienne.
			 *         
			 *  @extends {Tone}
			 */
		    Tone.Emitter = function () {
		        /**
				 *  Contains all of the events.
				 *  @private
				 *  @type  {Object}
				 */
		        this._events = {};
		    };
		    Tone.extend(Tone.Emitter);
		    /**
			 *  Bind a callback to a specific event.
			 *  @param  {String}    event     The name of the event to listen for.
			 *  @param  {Function}  callback  The callback to invoke when the
			 *                                event is emitted
			 *  @return  {Tone.Emitter}    this
			 */
		    Tone.Emitter.prototype.on = function (event, callback) {
		        //split the event
		        var events = event.split(/\W+/);
		        for (var i = 0; i < events.length; i++) {
		            var eventName = events[i];
		            if (!this._events.hasOwnProperty(eventName)) {
		                this._events[eventName] = [];
		            }
		            this._events[eventName].push(callback);
		        }
		        return this;
		    };
		    /**
			 *  Remove the event listener.
			 *  @param  {String}    event     The event to stop listening to.
			 *  @param  {Function=}  callback  The callback which was bound to 
			 *                                the event with Tone.Emitter.on.
			 *                                If no callback is given, all callbacks
			 *                                events are removed.
			 *  @return  {Tone.Emitter}    this
			 */
		    Tone.Emitter.prototype.off = function (event, callback) {
		        var events = event.split(/\W+/);
		        for (var ev = 0; ev < events.length; ev++) {
		            event = events[ev];
		            if (this._events.hasOwnProperty(event)) {
		                if (Tone.prototype.isUndef(callback)) {
		                    this._events[event] = [];
		                } else {
		                    var eventList = this._events[event];
		                    for (var i = 0; i < eventList.length; i++) {
		                        if (eventList[i] === callback) {
		                            eventList.splice(i, 1);
		                        }
		                    }
		                }
		            }
		        }
		        return this;
		    };
		    /**
			 *  Invoke all of the callbacks bound to the event
			 *  with any arguments passed in. 
			 *  @param  {String}  event  The name of the event.
			 *  @param {*...} args The arguments to pass to the functions listening.
			 *  @return  {Tone.Emitter}  this
			 */
		    Tone.Emitter.prototype.emit = function (event) {
		        if (this._events) {
		            var args = Array.prototype.slice.call(arguments, 1);
		            if (this._events.hasOwnProperty(event)) {
		                var eventList = this._events[event];
		                for (var i = 0, len = eventList.length; i < len; i++) {
		                    eventList[i].apply(this, args);
		                }
		            }
		        }
		        return this;
		    };
		    /**
			 *  Add Emitter functions (on/off/emit) to the object
			 *  @param  {Object|Function}  object  The object or class to extend.
			 */
		    Tone.Emitter.mixin = function (object) {
		        var functions = [
		            'on',
		            'off',
		            'emit'
		        ];
		        object._events = {};
		        for (var i = 0; i < functions.length; i++) {
		            var func = functions[i];
		            var emitterFunc = Tone.Emitter.prototype[func];
		            object[func] = emitterFunc;
		        }
		    };
		    /**
			 *  Clean up
			 *  @return  {Tone.Emitter}  this
			 */
		    Tone.Emitter.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._events = null;
		        return this;
		    };
		    return Tone.Emitter;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  A sample accurate clock which provides a callback at the given rate. 
			 *          While the callback is not sample-accurate (it is still susceptible to
			 *          loose JS timing), the time passed in as the argument to the callback
			 *          is precise. For most applications, it is better to use Tone.Transport
			 *          instead of the Clock by itself since you can synchronize multiple callbacks.
			 *
			 * 	@constructor
			 *  @extends {Tone.Emitter}
			 * 	@param {function} callback The callback to be invoked with the time of the audio event
			 * 	@param {Frequency} frequency The rate of the callback
			 * 	@example
			 * //the callback will be invoked approximately once a second
			 * //and will print the time exactly once a second apart.
			 * var clock = new Tone.Clock(function(time){
			 * 	console.log(time);
			 * }, 1);
			 */
		    Tone.Clock = function () {
		        Tone.Emitter.call(this);
		        var options = this.optionsObject(arguments, [
		            'callback',
		            'frequency'
		        ], Tone.Clock.defaults);
		        /**
				 *  The callback function to invoke at the scheduled tick.
				 *  @type  {Function}
				 */
		        this.callback = options.callback;
		        /**
				 *  The internal lookahead value
				 *  @type {Number|String}
				 *  @private
				 */
		        this._lookAhead = 'auto';
		        /**
				 *  The lookahead value which was automatically
				 *  computed using a time-based averaging.
				 *  @type {Number}
				 *  @private
				 */
		        this._computedLookAhead = UPDATE_RATE / 1000;
		        /**
				 *  The next time the callback is scheduled.
				 *  @type {Number}
				 *  @private
				 */
		        this._nextTick = -1;
		        /**
				 *  The last time the callback was invoked
				 *  @type  {Number}
				 *  @private
				 */
		        this._lastUpdate = -1;
		        /**
				 *  The rate the callback function should be invoked. 
				 *  @type  {BPM}
				 *  @signal
				 */
		        this.frequency = new Tone.TimelineSignal(options.frequency, Tone.Type.Frequency);
		        /**
				 *  The number of times the callback was invoked. Starts counting at 0
				 *  and increments after the callback was invoked. 
				 *  @type {Ticks}
				 *  @readOnly
				 */
		        this.ticks = 0;
		        /**
				 *  The state timeline
				 *  @type {Tone.TimelineState}
				 *  @private
				 */
		        this._state = new Tone.TimelineState(Tone.State.Stopped);
		        /**
				 *  The loop function bound to its context. 
				 *  This is necessary to remove the event in the end.
				 *  @type {Function}
				 *  @private
				 */
		        this._boundLoop = this._loop.bind(this);
		        //bind a callback to the worker thread
		        Tone.Clock._worker.addEventListener('message', this._boundLoop);
		        this._readOnly('frequency');
		    };
		    Tone.extend(Tone.Clock, Tone.Emitter);
		    /**
			 *  The defaults
			 *  @const
			 *  @type  {Object}
			 */
		    Tone.Clock.defaults = {
		        'callback': Tone.noOp,
		        'frequency': 1,
		        'lookAhead': 'auto'
		    };
		    /**
			 *  Returns the playback state of the source, either "started", "stopped" or "paused".
			 *  @type {Tone.State}
			 *  @readOnly
			 *  @memberOf Tone.Clock#
			 *  @name state
			 */
		    Object.defineProperty(Tone.Clock.prototype, 'state', {
		        get: function () {
		            return this._state.getStateAtTime(this.now());
		        }
		    });
		    /**
			 *  The time which the clock will schedule events in advance
			 *  of the current time. Scheduling notes in advance improves
			 *  performance and decreases the chance for clicks caused
			 *  by scheduling events in the past. If set to "auto",
			 *  this value will be automatically computed based on the 
			 *  rate of the update (~0.02 seconds). Larger values
			 *  will yeild better performance, but at the cost of latency. 
			 *  Values less than 0.016 are not recommended.
			 *  @type {Number|String}
			 *  @memberOf Tone.Clock#
			 *  @name lookAhead
			 */
		    Object.defineProperty(Tone.Clock.prototype, 'lookAhead', {
		        get: function () {
		            return this._lookAhead;
		        },
		        set: function (val) {
		            if (val === 'auto') {
		                this._lookAhead = 'auto';
		            } else {
		                this._lookAhead = this.toSeconds(val);
		            }
		        }
		    });
		    /**
			 *  Start the clock at the given time. Optionally pass in an offset
			 *  of where to start the tick counter from.
			 *  @param  {Time}  time    The time the clock should start
			 *  @param  {Ticks=}  offset  Where the tick counter starts counting from.
			 *  @return  {Tone.Clock}  this
			 */
		    Tone.Clock.prototype.start = function (time, offset) {
		        time = this.toSeconds(time);
		        if (this._state.getStateAtTime(time) !== Tone.State.Started) {
		            this._state.addEvent({
		                'state': Tone.State.Started,
		                'time': time,
		                'offset': offset
		            });
		        }
		        return this;
		    };
		    /**
			 *  Stop the clock. Stopping the clock resets the tick counter to 0.
			 *  @param {Time} [time=now] The time when the clock should stop.
			 *  @returns {Tone.Clock} this
			 *  @example
			 * clock.stop();
			 */
		    Tone.Clock.prototype.stop = function (time) {
		        time = this.toSeconds(time);
		        this._state.cancel(time);
		        this._state.setStateAtTime(Tone.State.Stopped, time);
		        return this;
		    };
		    /**
			 *  Pause the clock. Pausing does not reset the tick counter.
			 *  @param {Time} [time=now] The time when the clock should stop.
			 *  @returns {Tone.Clock} this
			 */
		    Tone.Clock.prototype.pause = function (time) {
		        time = this.toSeconds(time);
		        if (this._state.getStateAtTime(time) === Tone.State.Started) {
		            this._state.setStateAtTime(Tone.State.Paused, time);
		        }
		        return this;
		    };
		    /**
			 *  The scheduling loop.
			 *  @param  {Number}  time  The current page time starting from 0
			 *                          when the page was loaded.
			 *  @private
			 */
		    Tone.Clock.prototype._loop = function () {
		        //compute the look ahead
		        if (this._lookAhead === 'auto') {
		            var time = this.now();
		            if (this._lastUpdate !== -1) {
		                var diff = time - this._lastUpdate;
		                //max size on the diff
		                diff = Math.min(10 * UPDATE_RATE / 1000, diff);
		                //averaging
		                this._computedLookAhead = (9 * this._computedLookAhead + diff) / 10;
		            }
		            this._lastUpdate = time;
		        } else {
		            this._computedLookAhead = this._lookAhead;
		        }
		        //get the frequency value to compute the value of the next loop
		        var now = this.now();
		        //if it's started
		        var lookAhead = this._computedLookAhead * 2;
		        var event = this._state.getEvent(now + lookAhead);
		        var state = Tone.State.Stopped;
		        if (event) {
		            state = event.state;
		            //if it was stopped and now started
		            if (this._nextTick === -1 && state === Tone.State.Started) {
		                this._nextTick = event.time;
		                if (!this.isUndef(event.offset)) {
		                    this.ticks = event.offset;
		                }
		                this.emit('start', event.time, this.ticks);
		            }
		        }
		        if (state === Tone.State.Started) {
		            while (now + lookAhead > this._nextTick) {
		                var tickTime = this._nextTick;
		                this._nextTick += 1 / this.frequency.getValueAtTime(this._nextTick);
		                this.callback(tickTime);
		                this.ticks++;
		            }
		        } else if (state === Tone.State.Stopped) {
		            if (event && this.ticks !== 0) {
		                this.emit('stop', event.time);
		            }
		            this._nextTick = -1;
		            this.ticks = 0;
		        } else if (state === Tone.State.Paused) {
		            if (this._nextTick !== -1) {
		                this.emit('pause', event.time);
		            }
		            this._nextTick = -1;
		        }
		    };
		    /**
			 *  Returns the scheduled state at the given time.
			 *  @param  {Time}  time  The time to query.
			 *  @return  {String}  The name of the state input in setStateAtTime.
			 *  @example
			 * clock.start("+0.1");
			 * clock.getStateAtTime("+0.1"); //returns "started"
			 */
		    Tone.Clock.prototype.getStateAtTime = function (time) {
		        time = this.toSeconds(time);
		        return this._state.getStateAtTime(time);
		    };
		    /**
			 *  Clean up
			 *  @returns {Tone.Clock} this
			 */
		    Tone.Clock.prototype.dispose = function () {
		        Tone.Emitter.prototype.dispose.call(this);
		        Tone.TimelineState.prototype.dispose.call(this);
		        Tone.Clock._worker.removeEventListener('message', this._boundLoop);
		        this._writable('frequency');
		        this.frequency.dispose();
		        this.frequency = null;
		        this._boundLoop = null;
		        this._nextTick = Infinity;
		        this.callback = null;
		        this._state.dispose();
		        this._state = null;
		    };
		    //URL Shim
		    window.URL = window.URL || window.webkitURL;
		    /**
			 *  The update rate in Milliseconds
			 *  @const
			 *  @type  {Number}
			 *  @private
			 */
		    var UPDATE_RATE = 20;
		    /**
			 *  The script which runs in a web worker
			 *  @type {Blob}
			 *  @private
			 */
		    var blob = new Blob(['setInterval(function(){self.postMessage(\'tick\')}, ' + UPDATE_RATE + ')']);
		    /**
			 *  Create a blob url from the Blob
			 *  @type  {URL}
			 *  @private
			 */
		    var blobUrl = URL.createObjectURL(blob);
		    /**
			 *  The Worker which generates a regular callback
			 *  @type {Worker}
			 *  @private
			 *  @static
			 */
		    Tone.Clock._worker = new Worker(blobUrl);
		    return Tone.Clock;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Similar to Tone.Timeline, but all events represent
			 *         intervals with both "time" and "duration" times. The 
			 *         events are placed in a tree structure optimized
			 *         for querying an intersection point with the timeline
			 *         events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)
			 *         to represent the data.
			 *  @extends {Tone}
			 */
		    Tone.IntervalTimeline = function () {
		        /**
				 *  The root node of the inteval tree
				 *  @type  {IntervalNode}
				 *  @private
				 */
		        this._root = null;
		        /**
				 *  Keep track of the length of the timeline.
				 *  @type  {Number}
				 *  @private
				 */
		        this._length = 0;
		    };
		    Tone.extend(Tone.IntervalTimeline);
		    /**
			 *  The event to add to the timeline. All events must 
			 *  have a time and duration value
			 *  @param  {Object}  event  The event to add to the timeline
			 *  @return  {Tone.IntervalTimeline}  this
			 */
		    Tone.IntervalTimeline.prototype.addEvent = function (event) {
		        if (this.isUndef(event.time) || this.isUndef(event.duration)) {
		            throw new Error('Tone.IntervalTimeline: events must have time and duration parameters');
		        }
		        var node = new IntervalNode(event.time, event.time + event.duration, event);
		        if (this._root === null) {
		            this._root = node;
		        } else {
		            this._root.insert(node);
		        }
		        this._length++;
		        // Restructure tree to be balanced
		        while (node !== null) {
		            node.updateHeight();
		            node.updateMax();
		            this._rebalance(node);
		            node = node.parent;
		        }
		        return this;
		    };
		    /**
			 *  Remove an event from the timeline.
			 *  @param  {Object}  event  The event to remove from the timeline
			 *  @return  {Tone.IntervalTimeline}  this
			 */
		    Tone.IntervalTimeline.prototype.removeEvent = function (event) {
		        if (this._root !== null) {
		            var results = [];
		            this._root.search(event.time, results);
		            for (var i = 0; i < results.length; i++) {
		                var node = results[i];
		                if (node.event === event) {
		                    this._removeNode(node);
		                    this._length--;
		                    break;
		                }
		            }
		        }
		        return this;
		    };
		    /**
			 *  The number of items in the timeline.
			 *  @type {Number}
			 *  @memberOf Tone.IntervalTimeline#
			 *  @name length
			 *  @readOnly
			 */
		    Object.defineProperty(Tone.IntervalTimeline.prototype, 'length', {
		        get: function () {
		            return this._length;
		        }
		    });
		    /**
			 *  Remove events whose time time is after the given time
			 *  @param  {Number}  time  The time to query.
			 *  @returns {Tone.IntervalTimeline} this
			 */
		    Tone.IntervalTimeline.prototype.cancel = function (after) {
		        this.forEachAfter(after, function (event) {
		            this.removeEvent(event);
		        }.bind(this));
		        return this;
		    };
		    /**
			 *  Set the root node as the given node
			 *  @param {IntervalNode} node
			 *  @private
			 */
		    Tone.IntervalTimeline.prototype._setRoot = function (node) {
		        this._root = node;
		        if (this._root !== null) {
		            this._root.parent = null;
		        }
		    };
		    /**
			 *  Replace the references to the node in the node's parent
			 *  with the replacement node.
			 *  @param  {IntervalNode}  node        
			 *  @param  {IntervalNode}  replacement 
			 *  @private
			 */
		    Tone.IntervalTimeline.prototype._replaceNodeInParent = function (node, replacement) {
		        if (node.parent !== null) {
		            if (node.isLeftChild()) {
		                node.parent.left = replacement;
		            } else {
		                node.parent.right = replacement;
		            }
		            this._rebalance(node.parent);
		        } else {
		            this._setRoot(replacement);
		        }
		    };
		    /**
			 *  Remove the node from the tree and replace it with 
			 *  a successor which follows the schema.
			 *  @param  {IntervalNode}  node
			 *  @private
			 */
		    Tone.IntervalTimeline.prototype._removeNode = function (node) {
		        if (node.left === null && node.right === null) {
		            this._replaceNodeInParent(node, null);
		        } else if (node.right === null) {
		            this._replaceNodeInParent(node, node.left);
		        } else if (node.left === null) {
		            this._replaceNodeInParent(node, node.right);
		        } else {
		            var balance = node.getBalance();
		            var replacement, temp;
		            if (balance > 0) {
		                if (node.left.right === null) {
		                    replacement = node.left;
		                    replacement.right = node.right;
		                    temp = replacement;
		                } else {
		                    replacement = node.left.right;
		                    while (replacement.right !== null) {
		                        replacement = replacement.right;
		                    }
		                    replacement.parent.right = replacement.left;
		                    temp = replacement.parent;
		                    replacement.left = node.left;
		                    replacement.right = node.right;
		                }
		            } else {
		                if (node.right.left === null) {
		                    replacement = node.right;
		                    replacement.left = node.left;
		                    temp = replacement;
		                } else {
		                    replacement = node.right.left;
		                    while (replacement.left !== null) {
		                        replacement = replacement.left;
		                    }
		                    replacement.parent = replacement.parent;
		                    replacement.parent.left = replacement.right;
		                    temp = replacement.parent;
		                    replacement.left = node.left;
		                    replacement.right = node.right;
		                }
		            }
		            if (node.parent !== null) {
		                if (node.isLeftChild()) {
		                    node.parent.left = replacement;
		                } else {
		                    node.parent.right = replacement;
		                }
		            } else {
		                this._setRoot(replacement);
		            }
		            // this._replaceNodeInParent(node, replacement);
		            this._rebalance(temp);
		        }
		        node.dispose();
		    };
		    /**
			 *  Rotate the tree to the left
			 *  @param  {IntervalNode}  node
			 *  @private
			 */
		    Tone.IntervalTimeline.prototype._rotateLeft = function (node) {
		        var parent = node.parent;
		        var isLeftChild = node.isLeftChild();
		        // Make node.right the new root of this sub tree (instead of node)
		        var pivotNode = node.right;
		        node.right = pivotNode.left;
		        pivotNode.left = node;
		        if (parent !== null) {
		            if (isLeftChild) {
		                parent.left = pivotNode;
		            } else {
		                parent.right = pivotNode;
		            }
		        } else {
		            this._setRoot(pivotNode);
		        }
		    };
		    /**
			 *  Rotate the tree to the right
			 *  @param  {IntervalNode}  node
			 *  @private
			 */
		    Tone.IntervalTimeline.prototype._rotateRight = function (node) {
		        var parent = node.parent;
		        var isLeftChild = node.isLeftChild();
		        // Make node.left the new root of this sub tree (instead of node)
		        var pivotNode = node.left;
		        node.left = pivotNode.right;
		        pivotNode.right = node;
		        if (parent !== null) {
		            if (isLeftChild) {
		                parent.left = pivotNode;
		            } else {
		                parent.right = pivotNode;
		            }
		        } else {
		            this._setRoot(pivotNode);
		        }
		    };
		    /**
			 *  Balance the BST
			 *  @param  {IntervalNode}  node
			 *  @private
			 */
		    Tone.IntervalTimeline.prototype._rebalance = function (node) {
		        var balance = node.getBalance();
		        if (balance > 1) {
		            if (node.left.getBalance() < 0) {
		                this._rotateLeft(node.left);
		            } else {
		                this._rotateRight(node);
		            }
		        } else if (balance < -1) {
		            if (node.right.getBalance() > 0) {
		                this._rotateRight(node.right);
		            } else {
		                this._rotateLeft(node);
		            }
		        }
		    };
		    /**
			 *  Get an event whose time and duration span the give time. Will
			 *  return the match whose "time" value is closest to the given time.
			 *  @param  {Object}  event  The event to add to the timeline
			 *  @return  {Object}  The event which spans the desired time
			 */
		    Tone.IntervalTimeline.prototype.getEvent = function (time) {
		        if (this._root !== null) {
		            var results = [];
		            this._root.search(time, results);
		            if (results.length > 0) {
		                var max = results[0];
		                for (var i = 1; i < results.length; i++) {
		                    if (results[i].low > max.low) {
		                        max = results[i];
		                    }
		                }
		                return max.event;
		            }
		        }
		        return null;
		    };
		    /**
			 *  Iterate over everything in the timeline.
			 *  @param  {Function}  callback The callback to invoke with every item
			 *  @returns {Tone.IntervalTimeline} this
			 */
		    Tone.IntervalTimeline.prototype.forEach = function (callback) {
		        if (this._root !== null) {
		            var allNodes = [];
		            if (this._root !== null) {
		                this._root.traverse(function (node) {
		                    allNodes.push(node);
		                });
		            }
		            for (var i = 0; i < allNodes.length; i++) {
		                var ev = allNodes[i].event;
		                if (ev) {
		                    callback(ev);
		                }
		            }
		        }
		        return this;
		    };
		    /**
			 *  Iterate over everything in the array in which the given time
			 *  overlaps with the time and duration time of the event.
			 *  @param  {Number}  time The time to check if items are overlapping
			 *  @param  {Function}  callback The callback to invoke with every item
			 *  @returns {Tone.IntervalTimeline} this
			 */
		    Tone.IntervalTimeline.prototype.forEachAtTime = function (time, callback) {
		        if (this._root !== null) {
		            var results = [];
		            this._root.search(time, results);
		            for (var i = results.length - 1; i >= 0; i--) {
		                var ev = results[i].event;
		                if (ev) {
		                    callback(ev);
		                }
		            }
		        }
		        return this;
		    };
		    /**
			 *  Iterate over everything in the array in which the time is greater
			 *  than the given time.
			 *  @param  {Number}  time The time to check if items are before
			 *  @param  {Function}  callback The callback to invoke with every item
			 *  @returns {Tone.IntervalTimeline} this
			 */
		    Tone.IntervalTimeline.prototype.forEachAfter = function (time, callback) {
		        if (this._root !== null) {
		            var results = [];
		            this._root.searchAfter(time, results);
		            for (var i = results.length - 1; i >= 0; i--) {
		                var ev = results[i].event;
		                if (ev) {
		                    callback(ev);
		                }
		            }
		        }
		        return this;
		    };
		    /**
			 *  Clean up
			 *  @return  {Tone.IntervalTimeline}  this
			 */
		    Tone.IntervalTimeline.prototype.dispose = function () {
		        var allNodes = [];
		        if (this._root !== null) {
		            this._root.traverse(function (node) {
		                allNodes.push(node);
		            });
		        }
		        for (var i = 0; i < allNodes.length; i++) {
		            allNodes[i].dispose();
		        }
		        allNodes = null;
		        this._root = null;
		        return this;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	INTERVAL NODE HELPER
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Represents a node in the binary search tree, with the addition
			 *  of a "high" value which keeps track of the highest value of
			 *  its children. 
			 *  References: 
			 *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/
			 *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf
			 *  @param {Number} low
			 *  @param {Number} high
			 *  @private
			 */
		    var IntervalNode = function (low, high, event) {
		        //the event container
		        this.event = event;
		        //the low value
		        this.low = low;
		        //the high value
		        this.high = high;
		        //the high value for this and all child nodes
		        this.max = this.high;
		        //the nodes to the left
		        this._left = null;
		        //the nodes to the right
		        this._right = null;
		        //the parent node
		        this.parent = null;
		        //the number of child nodes
		        this.height = 0;
		    };
		    /** 
			 *  Insert a node into the correct spot in the tree
			 *  @param  {IntervalNode}  node
			 */
		    IntervalNode.prototype.insert = function (node) {
		        if (node.low <= this.low) {
		            if (this.left === null) {
		                this.left = node;
		            } else {
		                this.left.insert(node);
		            }
		        } else {
		            if (this.right === null) {
		                this.right = node;
		            } else {
		                this.right.insert(node);
		            }
		        }
		    };
		    /**
			 *  Search the tree for nodes which overlap 
			 *  with the given point
			 *  @param  {Number}  point  The point to query
			 *  @param  {Array}  results  The array to put the results
			 */
		    IntervalNode.prototype.search = function (point, results) {
		        // If p is to the right of the rightmost point of any interval
		        // in this node and all children, there won't be any matches.
		        if (point > this.max) {
		            return;
		        }
		        // Search left children
		        if (this.left !== null) {
		            this.left.search(point, results);
		        }
		        // Check this node
		        if (this.low <= point && this.high > point) {
		            results.push(this);
		        }
		        // If p is to the left of the time of this interval,
		        // then it can't be in any child to the right.
		        if (this.low > point) {
		            return;
		        }
		        // Search right children
		        if (this.right !== null) {
		            this.right.search(point, results);
		        }
		    };
		    /**
			 *  Search the tree for nodes which are less 
			 *  than the given point
			 *  @param  {Number}  point  The point to query
			 *  @param  {Array}  results  The array to put the results
			 */
		    IntervalNode.prototype.searchAfter = function (point, results) {
		        // Check this node
		        if (this.low >= point) {
		            results.push(this);
		            if (this.left !== null) {
		                this.left.searchAfter(point, results);
		            }
		        }
		        // search the right side
		        if (this.right !== null) {
		            this.right.searchAfter(point, results);
		        }
		    };
		    /**
			 *  Invoke the callback on this element and both it's branches
			 *  @param  {Function}  callback
			 */
		    IntervalNode.prototype.traverse = function (callback) {
		        callback(this);
		        if (this.left !== null) {
		            this.left.traverse(callback);
		        }
		        if (this.right !== null) {
		            this.right.traverse(callback);
		        }
		    };
		    /**
			 *  Update the height of the node
			 */
		    IntervalNode.prototype.updateHeight = function () {
		        if (this.left !== null && this.right !== null) {
		            this.height = Math.max(this.left.height, this.right.height) + 1;
		        } else if (this.right !== null) {
		            this.height = this.right.height + 1;
		        } else if (this.left !== null) {
		            this.height = this.left.height + 1;
		        } else {
		            this.height = 0;
		        }
		    };
		    /**
			 *  Update the height of the node
			 */
		    IntervalNode.prototype.updateMax = function () {
		        this.max = this.high;
		        if (this.left !== null) {
		            this.max = Math.max(this.max, this.left.max);
		        }
		        if (this.right !== null) {
		            this.max = Math.max(this.max, this.right.max);
		        }
		    };
		    /**
			 *  The balance is how the leafs are distributed on the node
			 *  @return  {Number}  Negative numbers are balanced to the right
			 */
		    IntervalNode.prototype.getBalance = function () {
		        var balance = 0;
		        if (this.left !== null && this.right !== null) {
		            balance = this.left.height - this.right.height;
		        } else if (this.left !== null) {
		            balance = this.left.height + 1;
		        } else if (this.right !== null) {
		            balance = -(this.right.height + 1);
		        }
		        return balance;
		    };
		    /**
			 *  @returns {Boolean} true if this node is the left child
			 *  of its parent
			 */
		    IntervalNode.prototype.isLeftChild = function () {
		        return this.parent !== null && this.parent.left === this;
		    };
		    /**
			 *  get/set the left node
			 *  @type {IntervalNode}
			 */
		    Object.defineProperty(IntervalNode.prototype, 'left', {
		        get: function () {
		            return this._left;
		        },
		        set: function (node) {
		            this._left = node;
		            if (node !== null) {
		                node.parent = this;
		            }
		            this.updateHeight();
		            this.updateMax();
		        }
		    });
		    /**
			 *  get/set the right node
			 *  @type {IntervalNode}
			 */
		    Object.defineProperty(IntervalNode.prototype, 'right', {
		        get: function () {
		            return this._right;
		        },
		        set: function (node) {
		            this._right = node;
		            if (node !== null) {
		                node.parent = this;
		            }
		            this.updateHeight();
		            this.updateMax();
		        }
		    });
		    /**
			 *  null out references.
			 */
		    IntervalNode.prototype.dispose = function () {
		        this.parent = null;
		        this._left = null;
		        this._right = null;
		        this.event = null;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	END INTERVAL NODE HELPER
		    ///////////////////////////////////////////////////////////////////////////
		    return Tone.IntervalTimeline;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Transport for timing musical events.
			 *          Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)
			 *          Tone.Transport timing events pass in the exact time of the scheduled event
			 *          in the argument of the callback function. Pass that time value to the object
			 *          you're scheduling. <br><br>
			 *          A single transport is created for you when the library is initialized. 
			 *          <br><br>
			 *          The transport emits the events: "start", "stop", "pause", and "loop" which are
			 *          called with the time of that event as the argument. 
			 *
			 *  @extends {Tone.Emitter}
			 *  @singleton
			 *  @example
			 * //repeated event every 8th note
			 * Tone.Transport.scheduleRepeat(function(time){
			 * 	//do something with the time
			 * }, "8n");
			 *  @example
			 * //schedule an event on the 16th measure
			 * Tone.Transport.schedule(function(time){
			 * 	//do something with the time
			 * }, "16:0:0");
			 */
		    Tone.Transport = function () {
		        Tone.Emitter.call(this);
		        ///////////////////////////////////////////////////////////////////////
		        //	LOOPING
		        //////////////////////////////////////////////////////////////////////
		        /** 
				 * 	If the transport loops or not.
				 *  @type {boolean}
				 */
		        this.loop = false;
		        /** 
				 * 	The loop start position in ticks
				 *  @type {Ticks}
				 *  @private
				 */
		        this._loopStart = 0;
		        /** 
				 * 	The loop end position in ticks
				 *  @type {Ticks}
				 *  @private
				 */
		        this._loopEnd = 0;
		        ///////////////////////////////////////////////////////////////////////
		        //	CLOCK/TEMPO
		        //////////////////////////////////////////////////////////////////////
		        /**
				 *  Pulses per quarter is the number of ticks per quarter note.
				 *  @private
				 *  @type  {Number}
				 */
		        this._ppq = TransportConstructor.defaults.PPQ;
		        /**
				 *  watches the main oscillator for timing ticks
				 *  initially starts at 120bpm
				 *  @private
				 *  @type {Tone.Clock}
				 */
		        this._clock = new Tone.Clock({
		            'callback': this._processTick.bind(this),
		            'frequency': 0
		        });
		        this._bindClockEvents();
		        /**
				 *  The Beats Per Minute of the Transport. 
				 *  @type {BPM}
				 *  @signal
				 *  @example
				 * Tone.Transport.bpm.value = 80;
				 * //ramp the bpm to 120 over 10 seconds
				 * Tone.Transport.bpm.rampTo(120, 10);
				 */
		        this.bpm = this._clock.frequency;
		        this.bpm._toUnits = this._toUnits.bind(this);
		        this.bpm._fromUnits = this._fromUnits.bind(this);
		        this.bpm.units = Tone.Type.BPM;
		        this.bpm.value = TransportConstructor.defaults.bpm;
		        this._readOnly('bpm');
		        /**
				 *  The time signature, or more accurately the numerator
				 *  of the time signature over a denominator of 4. 
				 *  @type {Number}
				 *  @private
				 */
		        this._timeSignature = TransportConstructor.defaults.timeSignature;
		        ///////////////////////////////////////////////////////////////////////
		        //	TIMELINE EVENTS
		        //////////////////////////////////////////////////////////////////////
		        /**
				 *  All the events in an object to keep track by ID
				 *  @type {Object}
				 *  @private
				 */
		        this._scheduledEvents = {};
		        /**
				 *  The event ID counter
				 *  @type {Number}
				 *  @private
				 */
		        this._eventID = 0;
		        /**
				 * 	The scheduled events.
				 *  @type {Tone.Timeline}
				 *  @private
				 */
		        this._timeline = new Tone.Timeline();
		        /**
				 *  Repeated events
				 *  @type {Array}
				 *  @private
				 */
		        this._repeatedEvents = new Tone.IntervalTimeline();
		        /**
				 *  Events that occur once
				 *  @type {Array}
				 *  @private
				 */
		        this._onceEvents = new Tone.Timeline();
		        /** 
				 *  All of the synced Signals
				 *  @private 
				 *  @type {Array}
				 */
		        this._syncedSignals = [];
		        ///////////////////////////////////////////////////////////////////////
		        //	SWING
		        //////////////////////////////////////////////////////////////////////
		        /**
				 *  The subdivision of the swing
				 *  @type  {Ticks}
				 *  @private
				 */
		        this._swingTicks = TransportConstructor.defaults.PPQ / 2;
		        //8n
		        /**
				 *  The swing amount
				 *  @type {NormalRange}
				 *  @private
				 */
		        this._swingAmount = 0;
		    };
		    Tone.extend(Tone.Transport, Tone.Emitter);
		    /**
			 *  the defaults
			 *  @type {Object}
			 *  @const
			 *  @static
			 */
		    Tone.Transport.defaults = {
		        'bpm': 120,
		        'swing': 0,
		        'swingSubdivision': '8n',
		        'timeSignature': 4,
		        'loopStart': 0,
		        'loopEnd': '4m',
		        'PPQ': 192
		    };
		    ///////////////////////////////////////////////////////////////////////////////
		    //	TICKS
		    ///////////////////////////////////////////////////////////////////////////////
		    /**
			 *  called on every tick
			 *  @param   {number} tickTime clock relative tick time
			 *  @private
			 */
		    Tone.Transport.prototype._processTick = function (tickTime) {
		        var ticks = this._clock.ticks;
		        //handle swing
		        if (this._swingAmount > 0 && ticks % this._ppq !== 0 && //not on a downbeat
		            ticks % (this._swingTicks * 2) !== 0) {
		            //add some swing
		            var progress = ticks % (this._swingTicks * 2) / (this._swingTicks * 2);
		            var amount = Math.sin(progress * Math.PI) * this._swingAmount;
		            tickTime += Tone.Time(this._swingTicks * 2 / 3, 'i').eval() * amount;
		        }
		        //do the loop test
		        if (this.loop) {
		            if (ticks === this._loopEnd) {
		                this.emit('stop', tickTime);
		                this._clock.ticks = this._loopStart;
		                ticks = this._loopStart;
		                this.emit('start', tickTime, this.seconds);
		                this.emit('loop', tickTime);
		            }
		        }
		        //process the single occurrence events
		        this._onceEvents.forEachBefore(ticks, function (event) {
		            event.callback(tickTime);
		        });
		        //and clear the single occurrence timeline
		        this._onceEvents.cancelBefore(ticks);
		        //fire the next tick events if their time has come
		        this._timeline.forEachAtTime(ticks, function (event) {
		            event.callback(tickTime);
		        });
		        //process the repeated events
		        this._repeatedEvents.forEachAtTime(ticks, function (event) {
		            if ((ticks - event.time) % event.interval === 0) {
		                event.callback(tickTime);
		            }
		        });
		    };
		    ///////////////////////////////////////////////////////////////////////////////
		    //	SCHEDULABLE EVENTS
		    ///////////////////////////////////////////////////////////////////////////////
		    /**
			 *  Schedule an event along the timeline.
			 *  @param {Function} callback The callback to be invoked at the time.
			 *  @param {TransportTime}  time The time to invoke the callback at.
			 *  @return {Number} The id of the event which can be used for canceling the event. 
			 *  @example
			 * //trigger the callback when the Transport reaches the desired time
			 * Tone.Transport.schedule(function(time){
			 * 	envelope.triggerAttack(time);
			 * }, "128i");
			 */
		    Tone.Transport.prototype.schedule = function (callback, time) {
		        var event = {
		            'time': this.toTicks(time),
		            'callback': callback
		        };
		        var id = this._eventID++;
		        this._scheduledEvents[id.toString()] = {
		            'event': event,
		            'timeline': this._timeline
		        };
		        this._timeline.addEvent(event);
		        return id;
		    };
		    /**
			 *  Schedule a repeated event along the timeline. The event will fire
			 *  at the `interval` starting at the `startTime` and for the specified
			 *  `duration`. 
			 *  @param  {Function}  callback   The callback to invoke.
			 *  @param  {Time}    interval   The duration between successive
			 *                               callbacks.
			 *  @param  {TimelinePosition=}    startTime  When along the timeline the events should
			 *                               start being invoked.
			 *  @param {Time} [duration=Infinity] How long the event should repeat. 
			 *  @return  {Number}    The ID of the scheduled event. Use this to cancel
			 *                           the event. 
			 *  @example
			 * //a callback invoked every eighth note after the first measure
			 * Tone.Transport.scheduleRepeat(callback, "8n", "1m");
			 */
		    Tone.Transport.prototype.scheduleRepeat = function (callback, interval, startTime, duration) {
		        if (interval <= 0) {
		            throw new Error('Tone.Transport: repeat events must have an interval larger than 0');
		        }
		        var event = {
		            'time': this.toTicks(startTime),
		            'duration': this.toTicks(this.defaultArg(duration, Infinity)),
		            'interval': this.toTicks(interval),
		            'callback': callback
		        };
		        var id = this._eventID++;
		        this._scheduledEvents[id.toString()] = {
		            'event': event,
		            'timeline': this._repeatedEvents
		        };
		        this._repeatedEvents.addEvent(event);
		        return id;
		    };
		    /**
			 *  Schedule an event that will be removed after it is invoked. 
			 *  Note that if the given time is less than the current transport time, 
			 *  the event will be invoked immediately. 
			 *  @param {Function} callback The callback to invoke once.
			 *  @param {TransportTime} time The time the callback should be invoked.
			 *  @returns {Number} The ID of the scheduled event. 
			 */
		    Tone.Transport.prototype.scheduleOnce = function (callback, time) {
		        var event = {
		            'time': this.toTicks(time),
		            'callback': callback
		        };
		        var id = this._eventID++;
		        this._scheduledEvents[id.toString()] = {
		            'event': event,
		            'timeline': this._onceEvents
		        };
		        this._onceEvents.addEvent(event);
		        return id;
		    };
		    /**
			 *  Clear the passed in event id from the timeline
			 *  @param {Number} eventId The id of the event.
			 *  @returns {Tone.Transport} this
			 */
		    Tone.Transport.prototype.clear = function (eventId) {
		        if (this._scheduledEvents.hasOwnProperty(eventId)) {
		            var item = this._scheduledEvents[eventId.toString()];
		            item.timeline.removeEvent(item.event);
		            delete this._scheduledEvents[eventId.toString()];
		        }
		        return this;
		    };
		    /**
			 *  Remove scheduled events from the timeline after
			 *  the given time. Repeated events will be removed
			 *  if their startTime is after the given time
			 *  @param {TransportTime} [after=0] Clear all events after
			 *                          this time. 
			 *  @returns {Tone.Transport} this
			 */
		    Tone.Transport.prototype.cancel = function (after) {
		        after = this.defaultArg(after, 0);
		        after = this.toTicks(after);
		        this._timeline.cancel(after);
		        this._onceEvents.cancel(after);
		        this._repeatedEvents.cancel(after);
		        return this;
		    };
		    ///////////////////////////////////////////////////////////////////////////////
		    //	START/STOP/PAUSE
		    ///////////////////////////////////////////////////////////////////////////////
		    /**
			 *  Bind start/stop/pause events from the clock and emit them.
			 */
		    Tone.Transport.prototype._bindClockEvents = function () {
		        this._clock.on('start', function (time, offset) {
		            offset = Tone.Time(this._clock.ticks, 'i').toSeconds();
		            this.emit('start', time, offset);
		        }.bind(this));
		        this._clock.on('stop', function (time) {
		            this.emit('stop', time);
		        }.bind(this));
		        this._clock.on('pause', function (time) {
		            this.emit('pause', time);
		        }.bind(this));
		    };
		    /**
			 *  Returns the playback state of the source, either "started", "stopped", or "paused"
			 *  @type {Tone.State}
			 *  @readOnly
			 *  @memberOf Tone.Transport#
			 *  @name state
			 */
		    Object.defineProperty(Tone.Transport.prototype, 'state', {
		        get: function () {
		            return this._clock.getStateAtTime(this.now());
		        }
		    });
		    /**
			 *  Start the transport and all sources synced to the transport.
			 *  @param  {Time} [time=now] The time when the transport should start.
			 *  @param  {TransportTime=} offset The timeline offset to start the transport.
			 *  @returns {Tone.Transport} this
			 *  @example
			 * //start the transport in one second starting at beginning of the 5th measure. 
			 * Tone.Transport.start("+1", "4:0:0");
			 */
		    Tone.Transport.prototype.start = function (time, offset) {
		        //start the clock
		        if (!this.isUndef(offset)) {
		            offset = this.toTicks(offset);
		        }
		        this._clock.start(time, offset);
		        return this;
		    };
		    /**
			 *  Stop the transport and all sources synced to the transport.
			 *  @param  {Time} [time=now] The time when the transport should stop. 
			 *  @returns {Tone.Transport} this
			 *  @example
			 * Tone.Transport.stop();
			 */
		    Tone.Transport.prototype.stop = function (time) {
		        this._clock.stop(time);
		        return this;
		    };
		    /**
			 *  Pause the transport and all sources synced to the transport.
			 *  @param  {Time} [time=now]
			 *  @returns {Tone.Transport} this
			 */
		    Tone.Transport.prototype.pause = function (time) {
		        this._clock.pause(time);
		        return this;
		    };
		    ///////////////////////////////////////////////////////////////////////////////
		    //	SETTERS/GETTERS
		    ///////////////////////////////////////////////////////////////////////////////
		    /**
			 *  The time signature as just the numerator over 4. 
			 *  For example 4/4 would be just 4 and 6/8 would be 3.
			 *  @memberOf Tone.Transport#
			 *  @type {Number|Array}
			 *  @name timeSignature
			 *  @example
			 * //common time
			 * Tone.Transport.timeSignature = 4;
			 * // 7/8
			 * Tone.Transport.timeSignature = [7, 8];
			 * //this will be reduced to a single number
			 * Tone.Transport.timeSignature; //returns 3.5
			 */
		    Object.defineProperty(Tone.Transport.prototype, 'timeSignature', {
		        get: function () {
		            return this._timeSignature;
		        },
		        set: function (timeSig) {
		            if (this.isArray(timeSig)) {
		                timeSig = timeSig[0] / timeSig[1] * 4;
		            }
		            this._timeSignature = timeSig;
		        }
		    });
		    /**
			 * When the Tone.Transport.loop = true, this is the starting position of the loop.
			 * @memberOf Tone.Transport#
			 * @type {TransportTime}
			 * @name loopStart
			 */
		    Object.defineProperty(Tone.Transport.prototype, 'loopStart', {
		        get: function () {
		            return Tone.TransportTime(this._loopStart, 'i').toSeconds();
		        },
		        set: function (startPosition) {
		            this._loopStart = this.toTicks(startPosition);
		        }
		    });
		    /**
			 * When the Tone.Transport.loop = true, this is the ending position of the loop.
			 * @memberOf Tone.Transport#
			 * @type {TransportTime}
			 * @name loopEnd
			 */
		    Object.defineProperty(Tone.Transport.prototype, 'loopEnd', {
		        get: function () {
		            return Tone.TransportTime(this._loopEnd, 'i').toSeconds();
		        },
		        set: function (endPosition) {
		            this._loopEnd = this.toTicks(endPosition);
		        }
		    });
		    /**
			 *  Set the loop start and stop at the same time. 
			 *  @param {TransportTime} startPosition 
			 *  @param {TransportTime} endPosition   
			 *  @returns {Tone.Transport} this
			 *  @example
			 * //loop over the first measure
			 * Tone.Transport.setLoopPoints(0, "1m");
			 * Tone.Transport.loop = true;
			 */
		    Tone.Transport.prototype.setLoopPoints = function (startPosition, endPosition) {
		        this.loopStart = startPosition;
		        this.loopEnd = endPosition;
		        return this;
		    };
		    /**
			 *  The swing value. Between 0-1 where 1 equal to 
			 *  the note + half the subdivision.
			 *  @memberOf Tone.Transport#
			 *  @type {NormalRange}
			 *  @name swing
			 */
		    Object.defineProperty(Tone.Transport.prototype, 'swing', {
		        get: function () {
		            return this._swingAmount;
		        },
		        set: function (amount) {
		            //scale the values to a normal range
		            this._swingAmount = amount;
		        }
		    });
		    /**
			 *  Set the subdivision which the swing will be applied to. 
			 *  The default values is a 16th note. Value must be less 
			 *  than a quarter note.
			 *  
			 *  @memberOf Tone.Transport#
			 *  @type {Time}
			 *  @name swingSubdivision
			 */
		    Object.defineProperty(Tone.Transport.prototype, 'swingSubdivision', {
		        get: function () {
		            return Tone.Time(this._swingTicks, 'i').toNotation();
		        },
		        set: function (subdivision) {
		            this._swingTicks = this.toTicks(subdivision);
		        }
		    });
		    /**
			 *  The Transport's position in Bars:Beats:Sixteenths.
			 *  Setting the value will jump to that position right away. 
			 *  @memberOf Tone.Transport#
			 *  @type {BarsBeatsSixteenths}
			 *  @name position
			 */
		    Object.defineProperty(Tone.Transport.prototype, 'position', {
		        get: function () {
		            return Tone.TransportTime(this.ticks, 'i').toBarsBeatsSixteenths();
		        },
		        set: function (progress) {
		            var ticks = this.toTicks(progress);
		            this.ticks = ticks;
		        }
		    });
		    /**
			 *  The Transport's position in seconds
			 *  Setting the value will jump to that position right away. 
			 *  @memberOf Tone.Transport#
			 *  @type {Seconds}
			 *  @name seconds
			 */
		    Object.defineProperty(Tone.Transport.prototype, 'seconds', {
		        get: function () {
		            return Tone.TransportTime(this.ticks, 'i').toSeconds();
		        },
		        set: function (progress) {
		            var ticks = this.toTicks(progress);
		            this.ticks = ticks;
		        }
		    });
		    /**
			 *  The Transport's loop position as a normalized value. Always
			 *  returns 0 if the transport if loop is not true. 
			 *  @memberOf Tone.Transport#
			 *  @name progress
			 *  @type {NormalRange}
			 */
		    Object.defineProperty(Tone.Transport.prototype, 'progress', {
		        get: function () {
		            if (this.loop) {
		                return (this.ticks - this._loopStart) / (this._loopEnd - this._loopStart);
		            } else {
		                return 0;
		            }
		        }
		    });
		    /**
			 *  The transports current tick position.
			 *  
			 *  @memberOf Tone.Transport#
			 *  @type {Ticks}
			 *  @name ticks
			 */
		    Object.defineProperty(Tone.Transport.prototype, 'ticks', {
		        get: function () {
		            return this._clock.ticks;
		        },
		        set: function (t) {
		            var now = this.now();
		            //stop everything synced to the transport
		            if (this.state === Tone.State.Started) {
		                this.emit('stop', now);
		                this._clock.ticks = t;
		                //restart it with the new time
		                this.emit('start', now, this.seconds);
		            } else {
		                this._clock.ticks = t;
		            }
		        }
		    });
		    /**
			 *  Pulses Per Quarter note. This is the smallest resolution
			 *  the Transport timing supports. This should be set once
			 *  on initialization and not set again. Changing this value 
			 *  after other objects have been created can cause problems. 
			 *  
			 *  @memberOf Tone.Transport#
			 *  @type {Number}
			 *  @name PPQ
			 */
		    Object.defineProperty(Tone.Transport.prototype, 'PPQ', {
		        get: function () {
		            return this._ppq;
		        },
		        set: function (ppq) {
		            var bpm = this.bpm.value;
		            this._ppq = ppq;
		            this.bpm.value = bpm;
		        }
		    });
		    /**
			 *  Convert from BPM to frequency (factoring in PPQ)
			 *  @param  {BPM}  bpm The BPM value to convert to frequency
			 *  @return  {Frequency}  The BPM as a frequency with PPQ factored in.
			 *  @private
			 */
		    Tone.Transport.prototype._fromUnits = function (bpm) {
		        return 1 / (60 / bpm / this.PPQ);
		    };
		    /**
			 *  Convert from frequency (with PPQ) into BPM
			 *  @param  {Frequency}  freq The clocks frequency to convert to BPM
			 *  @return  {BPM}  The frequency value as BPM.
			 *  @private
			 */
		    Tone.Transport.prototype._toUnits = function (freq) {
		        return freq / this.PPQ * 60;
		    };
		    ///////////////////////////////////////////////////////////////////////////////
		    //	SYNCING
		    ///////////////////////////////////////////////////////////////////////////////
		    /**
			 *  Returns the time aligned to the next subdivision
			 *  of the Transport. If the Transport is not started,
			 *  it will return 0.
			 *  Note: this will not work precisely during tempo ramps.
			 *  @param  {Time}  subdivision  The subdivision to quantize to
			 *  @return  {Number}  The context time of the next subdivision.
			 *  @example
			 * Tone.Transport.start(); //the transport must be started
			 * Tone.Transport.nextSubdivision("4n");
			 */
		    Tone.Transport.prototype.nextSubdivision = function (subdivision) {
		        subdivision = this.toSeconds(subdivision);
		        //if the transport's not started, return 0
		        var now;
		        if (this.state === Tone.State.Started) {
		            now = this._clock._nextTick;
		        } else {
		            return 0;
		        }
		        var transportPos = Tone.Time(this.ticks, 'i').eval();
		        var remainingTime = subdivision - transportPos % subdivision;
		        if (remainingTime === 0) {
		            remainingTime = subdivision;
		        }
		        return now + remainingTime;
		    };
		    /**
			 *  Attaches the signal to the tempo control signal so that 
			 *  any changes in the tempo will change the signal in the same
			 *  ratio. 
			 *  
			 *  @param  {Tone.Signal} signal 
			 *  @param {number=} ratio Optionally pass in the ratio between
			 *                         the two signals. Otherwise it will be computed
			 *                         based on their current values. 
			 *  @returns {Tone.Transport} this
			 */
		    Tone.Transport.prototype.syncSignal = function (signal, ratio) {
		        if (!ratio) {
		            //get the sync ratio
		            if (signal._param.value !== 0) {
		                ratio = signal._param.value / this.bpm._param.value;
		            } else {
		                ratio = 0;
		            }
		        }
		        var ratioSignal = new Tone.Gain(ratio);
		        this.bpm.chain(ratioSignal, signal._param);
		        this._syncedSignals.push({
		            'ratio': ratioSignal,
		            'signal': signal,
		            'initial': signal._param.value
		        });
		        signal._param.value = 0;
		        return this;
		    };
		    /**
			 *  Unsyncs a previously synced signal from the transport's control. 
			 *  See Tone.Transport.syncSignal.
			 *  @param  {Tone.Signal} signal 
			 *  @returns {Tone.Transport} this
			 */
		    Tone.Transport.prototype.unsyncSignal = function (signal) {
		        for (var i = this._syncedSignals.length - 1; i >= 0; i--) {
		            var syncedSignal = this._syncedSignals[i];
		            if (syncedSignal.signal === signal) {
		                syncedSignal.ratio.dispose();
		                syncedSignal.signal._param.value = syncedSignal.initial;
		                this._syncedSignals.splice(i, 1);
		            }
		        }
		        return this;
		    };
		    /**
			 *  Clean up. 
			 *  @returns {Tone.Transport} this
			 *  @private
			 */
		    Tone.Transport.prototype.dispose = function () {
		        Tone.Emitter.prototype.dispose.call(this);
		        this._clock.dispose();
		        this._clock = null;
		        this._writable('bpm');
		        this.bpm = null;
		        this._timeline.dispose();
		        this._timeline = null;
		        this._onceEvents.dispose();
		        this._onceEvents = null;
		        this._repeatedEvents.dispose();
		        this._repeatedEvents = null;
		        return this;
		    };
		    ///////////////////////////////////////////////////////////////////////////////
		    //	INITIALIZATION
		    ///////////////////////////////////////////////////////////////////////////////
		    var TransportConstructor = Tone.Transport;
		    Tone._initAudioContext(function () {
		        if (typeof Tone.Transport === 'function') {
		            //a single transport object
		            Tone.Transport = new Tone.Transport();
		        } else {
		            //stop the clock
		            Tone.Transport.stop();
		            //get the previous values
		            var prevSettings = Tone.Transport.get();
		            //destory the old transport
		            Tone.Transport.dispose();
		            //make new Transport insides
		            TransportConstructor.call(Tone.Transport);
		            //set the previous config
		            Tone.Transport.set(prevSettings);
		        }
		    });
		    return Tone.Transport;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Volume is a simple volume node, useful for creating a volume fader. 
			 *
			 *  @extends {Tone}
			 *  @constructor
			 *  @param {Decibels} [volume=0] the initial volume
			 *  @example
			 * var vol = new Tone.Volume(-12);
			 * instrument.chain(vol, Tone.Master);
			 */
		    Tone.Volume = function () {
		        var options = this.optionsObject(arguments, ['volume'], Tone.Volume.defaults);
		        /**
				 * the output node
				 * @type {GainNode}
				 * @private
				 */
		        this.output = this.input = new Tone.Gain(options.volume, Tone.Type.Decibels);
		        /**
				 * The unmuted volume
				 * @type {Decibels}
				 * @private
				 */
		        this._unmutedVolume = 0;
		        /**
				 *  if the volume is muted
				 *  @type {Boolean}
				 *  @private
				 */
		        this._muted = false;
		        /**
				 *  The volume control in decibels. 
				 *  @type {Decibels}
				 *  @signal
				 */
		        this.volume = this.output.gain;
		        this._readOnly('volume');
		        //set the mute initially
		        this.mute = options.mute;
		    };
		    Tone.extend(Tone.Volume);
		    /**
			 *  Defaults
			 *  @type  {Object}
			 *  @const
			 *  @static
			 */
		    Tone.Volume.defaults = {
		        'volume': 0,
		        'mute': false
		    };
		    /**
			 * Mute the output. 
			 * @memberOf Tone.Volume#
			 * @type {boolean}
			 * @name mute
			 * @example
			 * //mute the output
			 * volume.mute = true;
			 */
		    Object.defineProperty(Tone.Volume.prototype, 'mute', {
		        get: function () {
		            return this._muted;
		        },
		        set: function (mute) {
		            if (!this._muted && mute) {
		                this._unmutedVolume = this.volume.value;
		                //maybe it should ramp here?
		                this.volume.value = -Infinity;
		            } else if (this._muted && !mute) {
		                this.volume.value = this._unmutedVolume;
		            }
		            this._muted = mute;
		        }
		    });
		    /**
			 *  clean up
			 *  @returns {Tone.Volume} this
			 */
		    Tone.Volume.prototype.dispose = function () {
		        this.input.dispose();
		        Tone.prototype.dispose.call(this);
		        this._writable('volume');
		        this.volume.dispose();
		        this.volume = null;
		        return this;
		    };
		    return Tone.Volume;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  A single master output which is connected to the
			 *          AudioDestinationNode (aka your speakers). 
			 *          It provides useful conveniences such as the ability 
			 *          to set the volume and mute the entire application. 
			 *          It also gives you the ability to apply master effects to your application. 
			 *          <br><br>
			 *          Like Tone.Transport, A single Tone.Master is created
			 *          on initialization and you do not need to explicitly construct one.
			 *
			 *  @constructor
			 *  @extends {Tone}
			 *  @singleton
			 *  @example
			 * //the audio will go from the oscillator to the speakers
			 * oscillator.connect(Tone.Master);
			 * //a convenience for connecting to the master output is also provided:
			 * oscillator.toMaster();
			 * //the above two examples are equivalent.
			 */
		    Tone.Master = function () {
		        this.createInsOuts(1, 1);
		        /**
				 *  The private volume node
				 *  @type  {Tone.Volume}
				 *  @private
				 */
		        this._volume = this.output = new Tone.Volume();
		        /**
				 * The volume of the master output.
				 * @type {Decibels}
				 * @signal
				 */
		        this.volume = this._volume.volume;
		        this._readOnly('volume');
		        //connections
		        this.input.chain(this.output, this.context.destination);
		    };
		    Tone.extend(Tone.Master);
		    /**
			 *  @type {Object}
			 *  @const
			 */
		    Tone.Master.defaults = {
		        'volume': 0,
		        'mute': false
		    };
		    /**
			 * Mute the output. 
			 * @memberOf Tone.Master#
			 * @type {boolean}
			 * @name mute
			 * @example
			 * //mute the output
			 * Tone.Master.mute = true;
			 */
		    Object.defineProperty(Tone.Master.prototype, 'mute', {
		        get: function () {
		            return this._volume.mute;
		        },
		        set: function (mute) {
		            this._volume.mute = mute;
		        }
		    });
		    /**
			 *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously 
			 *  chained in the master effects chain. 
			 *  @param {AudioNode|Tone...} args All arguments will be connected in a row
			 *                                  and the Master will be routed through it.
			 *  @return  {Tone.Master}  this
			 *  @example
			 * //some overall compression to keep the levels in check
			 * var masterCompressor = new Tone.Compressor({
			 * 	"threshold" : -6,
			 * 	"ratio" : 3,
			 * 	"attack" : 0.5,
			 * 	"release" : 0.1
			 * });
			 * //give a little boost to the lows
			 * var lowBump = new Tone.Filter(200, "lowshelf");
			 * //route everything through the filter 
			 * //and compressor before going to the speakers
			 * Tone.Master.chain(lowBump, masterCompressor);
			 */
		    Tone.Master.prototype.chain = function () {
		        this.input.disconnect();
		        this.input.chain.apply(this.input, arguments);
		        arguments[arguments.length - 1].connect(this.output);
		    };
		    /**
			 *  Clean up
			 *  @return  {Tone.Master}  this
			 */
		    Tone.Master.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._writable('volume');
		        this._volume.dispose();
		        this._volume = null;
		        this.volume = null;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	AUGMENT TONE's PROTOTYPE
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Connect 'this' to the master output. Shorthand for this.connect(Tone.Master)
			 *  @returns {Tone} this
			 *  @example
			 * //connect an oscillator to the master output
			 * var osc = new Tone.Oscillator().toMaster();
			 */
		    Tone.prototype.toMaster = function () {
		        this.connect(Tone.Master);
		        return this;
		    };
		    /**
			 *  Also augment AudioNode's prototype to include toMaster
			 *  as a convenience
			 *  @returns {AudioNode} this
			 */
		    AudioNode.prototype.toMaster = function () {
		        this.connect(Tone.Master);
		        return this;
		    };
		    var MasterConstructor = Tone.Master;
		    /**
			 *  initialize the module and listen for new audio contexts
			 */
		    Tone._initAudioContext(function () {
		        //a single master output
		        if (!Tone.prototype.isUndef(Tone.Master)) {
		            Tone.Master = new MasterConstructor();
		        } else {
		            MasterConstructor.prototype.dispose.call(Tone.Master);
		            MasterConstructor.call(Tone.Master);
		        }
		    });
		    return Tone.Master;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Base class for sources. Sources have start/stop methods
			 *          and the ability to be synced to the 
			 *          start/stop of Tone.Transport. 
			 *
			 *  @constructor
			 *  @extends {Tone}
			 *  @example
			 * //Multiple state change events can be chained together,
			 * //but must be set in the correct order and with ascending times
			 * 
			 * // OK
			 * state.start().stop("+0.2");
			 * // AND
			 * state.start().stop("+0.2").start("+0.4").stop("+0.7")
			 *
			 * // BAD
			 * state.stop("+0.2").start();
			 * // OR
			 * state.start("+0.3").stop("+0.2");
			 * 
			 */
		    Tone.Source = function (options) {
		        // this.createInsOuts(0, 1);
		        options = this.defaultArg(options, Tone.Source.defaults);
		        /**
				 *  The output volume node
				 *  @type  {Tone.Volume}
				 *  @private
				 */
		        this._volume = this.output = new Tone.Volume(options.volume);
		        /**
				 * The volume of the output in decibels.
				 * @type {Decibels}
				 * @signal
				 * @example
				 * source.volume.value = -6;
				 */
		        this.volume = this._volume.volume;
		        this._readOnly('volume');
		        /**
				 * 	Keep track of the scheduled state.
				 *  @type {Tone.TimelineState}
				 *  @private
				 */
		        this._state = new Tone.TimelineState(Tone.State.Stopped);
		        this._state.memory = 10;
		        /**
				 *  The synced `start` callback function from the transport
				 *  @type {Function}
				 *  @private
				 */
		        this._synced = false;
		        /**
				 *  Keep track of all of the scheduled event ids
				 *  @type  {Array}
				 *  @private
				 */
		        this._scheduled = [];
		        //make the output explicitly stereo
		        this._volume.output.output.channelCount = 2;
		        this._volume.output.output.channelCountMode = 'explicit';
		        //mute initially
		        this.mute = options.mute;
		    };
		    Tone.extend(Tone.Source);
		    /**
			 *  The default parameters
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.Source.defaults = {
		        'volume': 0,
		        'mute': false
		    };
		    /**
			 *  Returns the playback state of the source, either "started" or "stopped".
			 *  @type {Tone.State}
			 *  @readOnly
			 *  @memberOf Tone.Source#
			 *  @name state
			 */
		    Object.defineProperty(Tone.Source.prototype, 'state', {
		        get: function () {
		            if (this._synced) {
		                if (Tone.Transport.state === Tone.State.Started) {
		                    return this._state.getStateAtTime(Tone.Transport.seconds);
		                } else {
		                    return Tone.State.Stopped;
		                }
		            } else {
		                return this._state.getStateAtTime(this.now());
		            }
		        }
		    });
		    /**
			 * Mute the output. 
			 * @memberOf Tone.Source#
			 * @type {boolean}
			 * @name mute
			 * @example
			 * //mute the output
			 * source.mute = true;
			 */
		    Object.defineProperty(Tone.Source.prototype, 'mute', {
		        get: function () {
		            return this._volume.mute;
		        },
		        set: function (mute) {
		            this._volume.mute = mute;
		        }
		    });
		    //overwrite these functions
		    Tone.Source.prototype._start = Tone.noOp;
		    Tone.Source.prototype._stop = Tone.noOp;
		    /**
			 *  Start the source at the specified time. If no time is given, 
			 *  start the source now.
			 *  @param  {Time} [time=now] When the source should be started.
			 *  @returns {Tone.Source} this
			 *  @example
			 * source.start("+0.5"); //starts the source 0.5 seconds from now
			 */
		    Tone.Source.prototype.start = function (time, offset, duration) {
		        if (this.isUndef(time) && this._synced) {
		            time = Tone.Transport.seconds;
		        } else {
		            time = this.toSeconds(time);
		        }
		        //if it's started, stop it and restart it
		        if (this._state.getStateAtTime(time) === Tone.State.Started) {
		            this.stop(time);
		        }
		        this._state.setStateAtTime(Tone.State.Started, time);
		        if (this._synced) {
		            // add the offset time to the event
		            var event = this._state.getEvent(time);
		            event.offset = this.defaultArg(offset, 0);
		            event.duration = duration;
		            var sched = Tone.Transport.schedule(function (t) {
		                this._start(t, offset, duration);
		            }.bind(this), time);
		            this._scheduled.push(sched);
		        } else {
		            this._start.apply(this, arguments);
		        }
		        return this;
		    };
		    /**
			 *  Stop the source at the specified time. If no time is given, 
			 *  stop the source now.
			 *  @param  {Time} [time=now] When the source should be stopped. 
			 *  @returns {Tone.Source} this
			 *  @example
			 * source.stop(); // stops the source immediately
			 */
		    Tone.Source.prototype.stop = function (time) {
		        if (this.isUndef(time) && this._synced) {
		            time = Tone.Transport.seconds;
		        } else {
		            time = this.toSeconds(time);
		        }
		        this._state.cancel(time);
		        this._state.setStateAtTime(Tone.State.Stopped, time);
		        if (!this._synced) {
		            this._stop.apply(this, arguments);
		        } else {
		            var sched = Tone.Transport.schedule(this._stop.bind(this), time);
		            this._scheduled.push(sched);
		        }
		        return this;
		    };
		    /**
			 *  Sync the source to the Transport so that all subsequent
			 *  calls to `start` and `stop` are synced to the TransportTime
			 *  instead of the AudioContext time. 
			 *
			 *  @returns {Tone.Source} this
			 *  @example
			 * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline
			 * source.sync().start(0).stop(0.3);
			 * //start the transport.
			 * Tone.Transport.start();
			 *
			 *  @example
			 * //start the transport with an offset and the sync'ed sources
			 * //will start in the correct position
			 * source.sync().start(0.1);
			 * //the source will be invoked with an offset of 0.4
			 * Tone.Transport.start("+0.5", 0.5);
			 */
		    Tone.Source.prototype.sync = function () {
		        this._synced = true;
		        Tone.Transport.on('start', function (time, offset) {
		            if (offset > 0) {
		                // get the playback state at that time
		                var stateEvent = this._state.getEvent(offset);
		                // listen for start events which may occur in the middle of the sync'ed time
		                if (stateEvent && stateEvent.state === Tone.State.Started && stateEvent.time !== offset) {
		                    // get the offset
		                    var startOffset = offset - this.toSeconds(stateEvent.time);
		                    var duration;
		                    if (stateEvent.duration) {
		                        duration = this.toSeconds(stateEvent.duration) - startOffset;
		                    }
		                    this._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);
		                }
		            }
		        }.bind(this));
		        Tone.Transport.on('stop pause', function (time) {
		            if (this._state.getStateAtTime(Tone.Transport.seconds) === Tone.State.Started) {
		                this._stop(time);
		            }
		        }.bind(this));
		        return this;
		    };
		    /**
			 *  Unsync the source to the Transport. See Tone.Source.sync
			 *  @returns {Tone.Source} this
			 */
		    Tone.Source.prototype.unsync = function () {
		        this._synced = false;
		        Tone.Transport.off('start stop pause');
		        // clear all of the scheduled ids
		        for (var i = 0; i < this._scheduled.length; i++) {
		            var id = this._scheduled[i];
		            Tone.Transport.clear(id);
		        }
		        this._scheduled = [];
		        this._state.cancel(0);
		        return this;
		    };
		    /**
			 *	Clean up.
			 *  @return {Tone.Source} this
			 */
		    Tone.Source.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this.unsync();
		        this._scheduled = null;
		        this._writable('volume');
		        this._volume.dispose();
		        this._volume = null;
		        this.volume = null;
		        this._state.dispose();
		        this._state = null;
		    };
		    return Tone.Source;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Oscillator supports a number of features including
			 *         phase rotation, multiple oscillator types (see Tone.Oscillator.type), 
			 *         and Transport syncing (see Tone.Oscillator.syncFrequency).
			 *
			 *  @constructor
			 *  @extends {Tone.Source}
			 *  @param {Frequency} [frequency] Starting frequency
			 *  @param {string} [type] The oscillator type. Read more about type below.
			 *  @example
			 * //make and start a 440hz sine tone
			 * var osc = new Tone.Oscillator(440, "sine").toMaster().start();
			 */
		    Tone.Oscillator = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'type'
		        ], Tone.Oscillator.defaults);
		        Tone.Source.call(this, options);
		        /**
				 *  the main oscillator
				 *  @type {OscillatorNode}
				 *  @private
				 */
		        this._oscillator = null;
		        /**
				 *  The frequency control.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
		        /**
				 *  The detune control signal.
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
		        /**
				 *  the periodic wave
				 *  @type {PeriodicWave}
				 *  @private
				 */
		        this._wave = null;
		        /**
				 *  The partials of the oscillator
				 *  @type {Array}
				 *  @private
				 */
		        this._partials = this.defaultArg(options.partials, [1]);
		        /**
				 *  the phase of the oscillator
				 *  between 0 - 360
				 *  @type {number}
				 *  @private
				 */
		        this._phase = options.phase;
		        /**
				 *  the type of the oscillator
				 *  @type {string}
				 *  @private
				 */
		        this._type = null;
		        //setup
		        this.type = options.type;
		        this.phase = this._phase;
		        this._readOnly([
		            'frequency',
		            'detune'
		        ]);
		    };
		    Tone.extend(Tone.Oscillator, Tone.Source);
		    /**
			 *  the default parameters
			 *  @type {Object}
			 */
		    Tone.Oscillator.defaults = {
		        'type': 'sine',
		        'frequency': 440,
		        'detune': 0,
		        'phase': 0,
		        'partials': []
		    };
		    /**
			 *  The Oscillator types
			 *  @enum {String}
			 */
		    Tone.Oscillator.Type = {
		        Sine: 'sine',
		        Triangle: 'triangle',
		        Sawtooth: 'sawtooth',
		        Square: 'square',
		        Custom: 'custom'
		    };
		    /**
			 *  start the oscillator
			 *  @param  {Time} [time=now] 
			 *  @private
			 */
		    Tone.Oscillator.prototype._start = function (time) {
		        //new oscillator with previous values
		        this._oscillator = this.context.createOscillator();
		        this._oscillator.setPeriodicWave(this._wave);
		        //connect the control signal to the oscillator frequency & detune
		        this._oscillator.connect(this.output);
		        this.frequency.connect(this._oscillator.frequency);
		        this.detune.connect(this._oscillator.detune);
		        //start the oscillator
		        this._oscillator.start(this.toSeconds(time));
		    };
		    /**
			 *  stop the oscillator
			 *  @private
			 *  @param  {Time} [time=now] (optional) timing parameter
			 *  @returns {Tone.Oscillator} this
			 */
		    Tone.Oscillator.prototype._stop = function (time) {
		        if (this._oscillator) {
		            this._oscillator.stop(this.toSeconds(time));
		            this._oscillator = null;
		        }
		        return this;
		    };
		    /**
			 *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,
			 *  will also affect the oscillators frequency. 
			 *  @returns {Tone.Oscillator} this
			 *  @example
			 * Tone.Transport.bpm.value = 120;
			 * osc.frequency.value = 440;
			 * //the ration between the bpm and the frequency will be maintained
			 * osc.syncFrequency();
			 * Tone.Transport.bpm.value = 240; 
			 * // the frequency of the oscillator is doubled to 880
			 */
		    Tone.Oscillator.prototype.syncFrequency = function () {
		        Tone.Transport.syncSignal(this.frequency);
		        return this;
		    };
		    /**
			 *  Unsync the oscillator's frequency from the Transport. 
			 *  See Tone.Oscillator.syncFrequency
			 *  @returns {Tone.Oscillator} this
			 */
		    Tone.Oscillator.prototype.unsyncFrequency = function () {
		        Tone.Transport.unsyncSignal(this.frequency);
		        return this;
		    };
		    /**
			 * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of
			 * setting the first x number of partials of the oscillator. For example: "sine4" would
			 * set be the first 4 partials of the sine wave and "triangle8" would set the first
			 * 8 partials of the triangle wave.
			 * <br><br> 
			 * Uses PeriodicWave internally even for native types so that it can set the phase. 
			 * PeriodicWave equations are from the 
			 * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).
			 *  
			 * @memberOf Tone.Oscillator#
			 * @type {string}
			 * @name type
			 * @example
			 * //set it to a square wave
			 * osc.type = "square";
			 * @example
			 * //set the first 6 partials of a sawtooth wave
			 * osc.type = "sawtooth6";
			 */
		    Object.defineProperty(Tone.Oscillator.prototype, 'type', {
		        get: function () {
		            return this._type;
		        },
		        set: function (type) {
		            var coefs = this._getRealImaginary(type, this._phase);
		            var periodicWave = this.context.createPeriodicWave(coefs[0], coefs[1]);
		            this._wave = periodicWave;
		            if (this._oscillator !== null) {
		                this._oscillator.setPeriodicWave(this._wave);
		            }
		            this._type = type;
		        }
		    });
		    /**
			 *  Returns the real and imaginary components based 
			 *  on the oscillator type.
			 *  @returns {Array} [real, imaginary]
			 *  @private
			 */
		    Tone.Oscillator.prototype._getRealImaginary = function (type, phase) {
		        var fftSize = 4096;
		        var periodicWaveSize = fftSize / 2;
		        var real = new Float32Array(periodicWaveSize);
		        var imag = new Float32Array(periodicWaveSize);
		        var partialCount = 1;
		        if (type === Tone.Oscillator.Type.Custom) {
		            partialCount = this._partials.length + 1;
		            periodicWaveSize = partialCount;
		        } else {
		            var partial = /^(sine|triangle|square|sawtooth)(\d+)$/.exec(type);
		            if (partial) {
		                partialCount = parseInt(partial[2]) + 1;
		                type = partial[1];
		                partialCount = Math.max(partialCount, 2);
		                periodicWaveSize = partialCount;
		            }
		        }
		        for (var n = 1; n < periodicWaveSize; ++n) {
		            var piFactor = 2 / (n * Math.PI);
		            var b;
		            switch (type) {
		            case Tone.Oscillator.Type.Sine:
		                b = n <= partialCount ? 1 : 0;
		                break;
		            case Tone.Oscillator.Type.Square:
		                b = n & 1 ? 2 * piFactor : 0;
		                break;
		            case Tone.Oscillator.Type.Sawtooth:
		                b = piFactor * (n & 1 ? 1 : -1);
		                break;
		            case Tone.Oscillator.Type.Triangle:
		                if (n & 1) {
		                    b = 2 * (piFactor * piFactor) * (n - 1 >> 1 & 1 ? -1 : 1);
		                } else {
		                    b = 0;
		                }
		                break;
		            case Tone.Oscillator.Type.Custom:
		                b = this._partials[n - 1];
		                break;
		            default:
		                throw new TypeError('Tone.Oscillator: invalid type: ' + type);
		            }
		            if (b !== 0) {
		                real[n] = -b * Math.sin(phase * n);
		                imag[n] = b * Math.cos(phase * n);
		            } else {
		                real[n] = 0;
		                imag[n] = 0;
		            }
		        }
		        return [
		            real,
		            imag
		        ];
		    };
		    /**
			 *  Compute the inverse FFT for a given phase.	
			 *  @param  {Float32Array}  real
			 *  @param  {Float32Array}  imag 
			 *  @param  {NormalRange}  phase 
			 *  @return  {AudioRange}
			 *  @private
			 */
		    Tone.Oscillator.prototype._inverseFFT = function (real, imag, phase) {
		        var sum = 0;
		        var len = real.length;
		        for (var i = 0; i < len; i++) {
		            sum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);
		        }
		        return sum;
		    };
		    /**
			 *  Returns the initial value of the oscillator.
			 *  @return  {AudioRange}
			 *  @private
			 */
		    Tone.Oscillator.prototype._getInitialValue = function () {
		        var coefs = this._getRealImaginary(this._type, 0);
		        var real = coefs[0];
		        var imag = coefs[1];
		        var maxValue = 0;
		        var twoPi = Math.PI * 2;
		        //check for peaks in 8 places
		        for (var i = 0; i < 8; i++) {
		            maxValue = Math.max(this._inverseFFT(real, imag, i / 8 * twoPi), maxValue);
		        }
		        return -this._inverseFFT(real, imag, this._phase) / maxValue;
		    };
		    /**
			 * The partials of the waveform. A partial represents 
			 * the amplitude at a harmonic. The first harmonic is the 
			 * fundamental frequency, the second is the octave and so on
			 * following the harmonic series. 
			 * Setting this value will automatically set the type to "custom". 
			 * The value is an empty array when the type is not "custom". 
			 * @memberOf Tone.Oscillator#
			 * @type {Array}
			 * @name partials
			 * @example
			 * osc.partials = [1, 0.2, 0.01];
			 */
		    Object.defineProperty(Tone.Oscillator.prototype, 'partials', {
		        get: function () {
		            if (this._type !== Tone.Oscillator.Type.Custom) {
		                return [];
		            } else {
		                return this._partials;
		            }
		        },
		        set: function (partials) {
		            this._partials = partials;
		            this.type = Tone.Oscillator.Type.Custom;
		        }
		    });
		    /**
			 * The phase of the oscillator in degrees. 
			 * @memberOf Tone.Oscillator#
			 * @type {Degrees}
			 * @name phase
			 * @example
			 * osc.phase = 180; //flips the phase of the oscillator
			 */
		    Object.defineProperty(Tone.Oscillator.prototype, 'phase', {
		        get: function () {
		            return this._phase * (180 / Math.PI);
		        },
		        set: function (phase) {
		            this._phase = phase * Math.PI / 180;
		            //reset the type
		            this.type = this._type;
		        }
		    });
		    /**
			 *  Dispose and disconnect.
			 *  @return {Tone.Oscillator} this
			 */
		    Tone.Oscillator.prototype.dispose = function () {
		        Tone.Source.prototype.dispose.call(this);
		        if (this._oscillator !== null) {
		            this._oscillator.disconnect();
		            this._oscillator = null;
		        }
		        this._wave = null;
		        this._writable([
		            'frequency',
		            'detune'
		        ]);
		        this.frequency.dispose();
		        this.frequency = null;
		        this.detune.dispose();
		        this.detune = null;
		        this._partials = null;
		        return this;
		    };
		    return Tone.Oscillator;
		});
		Module(function (Tone) {
		    /**
			 *  @class Tone.Zero outputs 0's at audio-rate. The reason this has to be
			 *         it's own class is that many browsers optimize out Tone.Signal
			 *         with a value of 0 and will not process nodes further down the graph. 
			 *  @extends {Tone}
			 */
		    Tone.Zero = function () {
		        /**
				 *  The gain node
				 *  @type  {Tone.Gain}
				 *  @private
				 */
		        this._gain = this.input = this.output = new Tone.Gain();
		        Tone.Zero._zeros.connect(this._gain);
		    };
		    Tone.extend(Tone.Zero);
		    /**
			 *  clean up
			 *  @return  {Tone.Zero}  this
			 */
		    Tone.Zero.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._gain.dispose();
		        this._gain = null;
		        return this;
		    };
		    /**
			 *  Generates a constant output of 0. This is so 
			 *  the processing graph doesn't optimize out this
			 *  segment of the graph. 
			 *  @static
			 *  @private
			 *  @const
			 *  @type {AudioBufferSourceNode}
			 */
		    Tone.Zero._zeros = null;
		    /**
			 *  initializer function
			 */
		    Tone._initAudioContext(function (audioContext) {
		        var buffer = audioContext.createBuffer(1, 128, audioContext.sampleRate);
		        var arr = buffer.getChannelData(0);
		        for (var i = 0; i < arr.length; i++) {
		            arr[i] = 0;
		        }
		        Tone.Zero._zeros = audioContext.createBufferSource();
		        Tone.Zero._zeros.channelCount = 1;
		        Tone.Zero._zeros.channelCountMode = 'explicit';
		        Tone.Zero._zeros.buffer = buffer;
		        Tone.Zero._zeros.loop = true;
		        Tone.Zero._zeros.start(0);
		        Tone.Zero._zeros.noGC();
		    });
		    return Tone.Zero;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  LFO stands for low frequency oscillator. Tone.LFO produces an output signal 
			 *          which can be attached to an AudioParam or Tone.Signal 
			 *          in order to modulate that parameter with an oscillator. The LFO can 
			 *          also be synced to the transport to start/stop and change when the tempo changes.
			 *
			 *  @constructor
			 *  @extends {Tone.Oscillator}
			 *  @param {Frequency|Object} [frequency] The frequency of the oscillation. Typically, LFOs will be
			 *                               in the frequency range of 0.1 to 10 hertz. 
			 *  @param {number=} min The minimum output value of the LFO. 
			 *  @param {number=} max The maximum value of the LFO. 
			 *  @example
			 * var lfo = new Tone.LFO("4n", 400, 4000);
			 * lfo.connect(filter.frequency);
			 */
		    Tone.LFO = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'min',
		            'max'
		        ], Tone.LFO.defaults);
		        /** 
				 *  The oscillator. 
				 *  @type {Tone.Oscillator}
				 *  @private
				 */
		        this._oscillator = new Tone.Oscillator({
		            'frequency': options.frequency,
		            'type': options.type
		        });
		        /**
				 *  the lfo's frequency
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = this._oscillator.frequency;
		        /**
				 * The amplitude of the LFO, which controls the output range between
				 * the min and max output. For example if the min is -10 and the max 
				 * is 10, setting the amplitude to 0.5 would make the LFO modulate
				 * between -5 and 5. 
				 * @type {Number}
				 * @signal
				 */
		        this.amplitude = this._oscillator.volume;
		        this.amplitude.units = Tone.Type.NormalRange;
		        this.amplitude.value = options.amplitude;
		        /**
				 *  The signal which is output when the LFO is stopped
				 *  @type  {Tone.Signal}
				 *  @private
				 */
		        this._stoppedSignal = new Tone.Signal(0, Tone.Type.AudioRange);
		        /**
				 *  Just outputs zeros.
				 *  @type {Tone.Zero}
				 *  @private
				 */
		        this._zeros = new Tone.Zero();
		        /**
				 *  The value that the LFO outputs when it's stopped
				 *  @type {AudioRange}
				 *  @private
				 */
		        this._stoppedValue = 0;
		        /**
				 *  @type {Tone.AudioToGain} 
				 *  @private
				 */
		        this._a2g = new Tone.AudioToGain();
		        /**
				 *  @type {Tone.Scale} 
				 *  @private
				 */
		        this._scaler = this.output = new Tone.Scale(options.min, options.max);
		        /**
				 *  the units of the LFO (used for converting)
				 *  @type {Tone.Type} 
				 *  @private
				 */
		        this._units = Tone.Type.Default;
		        this.units = options.units;
		        //connect it up
		        this._oscillator.chain(this._a2g, this._scaler);
		        this._zeros.connect(this._a2g);
		        this._stoppedSignal.connect(this._a2g);
		        this._readOnly([
		            'amplitude',
		            'frequency'
		        ]);
		        this.phase = options.phase;
		    };
		    Tone.extend(Tone.LFO, Tone.Oscillator);
		    /**
			 *  the default parameters
			 *
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.LFO.defaults = {
		        'type': 'sine',
		        'min': 0,
		        'max': 1,
		        'phase': 0,
		        'frequency': '4n',
		        'amplitude': 1,
		        'units': Tone.Type.Default
		    };
		    /**
			 *  Start the LFO. 
			 *  @param  {Time} [time=now] the time the LFO will start
			 *  @returns {Tone.LFO} this
			 */
		    Tone.LFO.prototype.start = function (time) {
		        time = this.toSeconds(time);
		        this._stoppedSignal.setValueAtTime(0, time);
		        this._oscillator.start(time);
		        return this;
		    };
		    /**
			 *  Stop the LFO. 
			 *  @param  {Time} [time=now] the time the LFO will stop
			 *  @returns {Tone.LFO} this
			 */
		    Tone.LFO.prototype.stop = function (time) {
		        time = this.toSeconds(time);
		        this._stoppedSignal.setValueAtTime(this._stoppedValue, time);
		        this._oscillator.stop(time);
		        return this;
		    };
		    /**
			 *  Sync the start/stop/pause to the transport 
			 *  and the frequency to the bpm of the transport
			 *  @returns {Tone.LFO} this
			 *  @example
			 *  lfo.frequency.value = "8n";
			 *  lfo.sync().start(0)
			 *  //the rate of the LFO will always be an eighth note, 
			 *  //even as the tempo changes
			 */
		    Tone.LFO.prototype.sync = function () {
		        this._oscillator.sync();
		        this._oscillator.syncFrequency();
		        return this;
		    };
		    /**
			 *  unsync the LFO from transport control
			 *  @returns {Tone.LFO} this
			 */
		    Tone.LFO.prototype.unsync = function () {
		        this._oscillator.unsync();
		        this._oscillator.unsyncFrequency();
		        return this;
		    };
		    /**
			 * The miniumum output of the LFO.
			 * @memberOf Tone.LFO#
			 * @type {number}
			 * @name min
			 */
		    Object.defineProperty(Tone.LFO.prototype, 'min', {
		        get: function () {
		            return this._toUnits(this._scaler.min);
		        },
		        set: function (min) {
		            min = this._fromUnits(min);
		            this._scaler.min = min;
		        }
		    });
		    /**
			 * The maximum output of the LFO.
			 * @memberOf Tone.LFO#
			 * @type {number}
			 * @name max
			 */
		    Object.defineProperty(Tone.LFO.prototype, 'max', {
		        get: function () {
		            return this._toUnits(this._scaler.max);
		        },
		        set: function (max) {
		            max = this._fromUnits(max);
		            this._scaler.max = max;
		        }
		    });
		    /**
			 * The type of the oscillator: sine, square, sawtooth, triangle. 
			 * @memberOf Tone.LFO#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.LFO.prototype, 'type', {
		        get: function () {
		            return this._oscillator.type;
		        },
		        set: function (type) {
		            this._oscillator.type = type;
		            this._stoppedValue = this._oscillator._getInitialValue();
		            this._stoppedSignal.value = this._stoppedValue;
		        }
		    });
		    /**
			 * The phase of the LFO.
			 * @memberOf Tone.LFO#
			 * @type {number}
			 * @name phase
			 */
		    Object.defineProperty(Tone.LFO.prototype, 'phase', {
		        get: function () {
		            return this._oscillator.phase;
		        },
		        set: function (phase) {
		            this._oscillator.phase = phase;
		            this._stoppedValue = this._oscillator._getInitialValue();
		            this._stoppedSignal.value = this._stoppedValue;
		        }
		    });
		    /**
			 * The output units of the LFO.
			 * @memberOf Tone.LFO#
			 * @type {Tone.Type}
			 * @name units
			 */
		    Object.defineProperty(Tone.LFO.prototype, 'units', {
		        get: function () {
		            return this._units;
		        },
		        set: function (val) {
		            var currentMin = this.min;
		            var currentMax = this.max;
		            //convert the min and the max
		            this._units = val;
		            this.min = currentMin;
		            this.max = currentMax;
		        }
		    });
		    /**
			 * Mute the output. 
			 * @memberOf Tone.LFO#
			 * @type {Boolean}
			 * @name mute
			 */
		    Object.defineProperty(Tone.LFO.prototype, 'mute', {
		        get: function () {
		            return this._oscillator.mute;
		        },
		        set: function (mute) {
		            this._oscillator.mute = mute;
		        }
		    });
		    /**
			 *  Returns the playback state of the source, either "started" or "stopped".
			 *  @type {Tone.State}
			 *  @readOnly
			 *  @memberOf Tone.LFO#
			 *  @name state
			 */
		    Object.defineProperty(Tone.LFO.prototype, 'state', {
		        get: function () {
		            return this._oscillator.state;
		        }
		    });
		    /**
			 *  Connect the output of the LFO to an AudioParam, AudioNode, or Tone Node. 
			 *  Tone.LFO will automatically convert to the destination units of the 
			 *  will get the units from the connected node.
			 *  @param  {Tone | AudioParam | AudioNode} node 
			 *  @param {number} [outputNum=0] optionally which output to connect from
			 *  @param {number} [inputNum=0] optionally which input to connect to
			 *  @returns {Tone.LFO} this
			 *  @private
			 */
		    Tone.LFO.prototype.connect = function (node) {
		        if (node.constructor === Tone.Signal || node.constructor === Tone.Param || node.constructor === Tone.TimelineSignal) {
		            this.convert = node.convert;
		            this.units = node.units;
		        }
		        Tone.Signal.prototype.connect.apply(this, arguments);
		        return this;
		    };
		    /**
			 *  private method borrowed from Param converts 
			 *  units from their destination value
			 *  @function
			 *  @private
			 */
		    Tone.LFO.prototype._fromUnits = Tone.Param.prototype._fromUnits;
		    /**
			 *  private method borrowed from Param converts 
			 *  units to their destination value
			 *  @function
			 *  @private
			 */
		    Tone.LFO.prototype._toUnits = Tone.Param.prototype._toUnits;
		    /**
			 *  disconnect and dispose
			 *  @returns {Tone.LFO} this
			 */
		    Tone.LFO.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._writable([
		            'amplitude',
		            'frequency'
		        ]);
		        this._oscillator.dispose();
		        this._oscillator = null;
		        this._stoppedSignal.dispose();
		        this._stoppedSignal = null;
		        this._zeros.dispose();
		        this._zeros = null;
		        this._scaler.dispose();
		        this._scaler = null;
		        this._a2g.dispose();
		        this._a2g = null;
		        this.frequency = null;
		        this.amplitude = null;
		        return this;
		    };
		    return Tone.LFO;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Limiter will limit the loudness of an incoming signal. 
			 *         It is composed of a Tone.Compressor with a fast attack 
			 *         and release. Limiters are commonly used to safeguard against 
			 *         signal clipping. Unlike a compressor, limiters do not provide 
			 *         smooth gain reduction and almost completely prevent 
			 *         additional gain above the threshold.
			 *
			 *  @extends {Tone}
			 *  @constructor
			 *  @param {number} threshold The theshold above which the limiting is applied. 
			 *  @example
			 *  var limiter = new Tone.Limiter(-6);
			 */
		    Tone.Limiter = function () {
		        var options = this.optionsObject(arguments, ['threshold'], Tone.Limiter.defaults);
		        /**
				 *  the compressor
				 *  @private
				 *  @type {Tone.Compressor}
				 */
		        this._compressor = this.input = this.output = new Tone.Compressor({
		            'attack': 0.001,
		            'decay': 0.001,
		            'threshold': options.threshold
		        });
		        /**
				 * The threshold of of the limiter
				 * @type {Decibel}
				 * @signal
				 */
		        this.threshold = this._compressor.threshold;
		        this._readOnly('threshold');
		    };
		    Tone.extend(Tone.Limiter);
		    /**
			 *  The default value
			 *  @type {Object}
			 *  @const
			 *  @static
			 */
		    Tone.Limiter.defaults = { 'threshold': -12 };
		    /**
			 *  Clean up.
			 *  @returns {Tone.Limiter} this
			 */
		    Tone.Limiter.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._compressor.dispose();
		        this._compressor = null;
		        this._writable('threshold');
		        this.threshold = null;
		        return this;
		    };
		    return Tone.Limiter;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Lowpass is a lowpass feedback comb filter. It is similar to 
			 *         Tone.FeedbackCombFilter, but includes a lowpass filter.
			 *
			 *  @extends {Tone}
			 *  @constructor
			 *  @param {Time|Object} [delayTime] The delay time of the comb filter
			 *  @param {NormalRange=} resonance The resonance (feedback) of the comb filter
			 *  @param {Frequency=} dampening The cutoff of the lowpass filter dampens the
			 *                                signal as it is fedback. 
			 */
		    Tone.LowpassCombFilter = function () {
		        this.createInsOuts(1, 1);
		        var options = this.optionsObject(arguments, [
		            'delayTime',
		            'resonance',
		            'dampening'
		        ], Tone.LowpassCombFilter.defaults);
		        /**
				 *  the delay node
				 *  @type {DelayNode}
				 *  @private
				 */
		        this._delay = this.input = new Tone.Delay(options.delayTime);
		        /**
				 *  The delayTime of the comb filter. 
				 *  @type {Time}
				 *  @signal
				 */
		        this.delayTime = this._delay.delayTime;
		        /**
				 *  the lowpass filter
				 *  @type  {BiquadFilterNode}
				 *  @private
				 */
		        this._lowpass = this.output = this.context.createBiquadFilter();
		        this._lowpass.Q.value = -3.0102999566398125;
		        this._lowpass.type = 'lowpass';
		        /**
				 *  The dampening control of the feedback
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.dampening = new Tone.Param({
		            'param': this._lowpass.frequency,
		            'units': Tone.Type.Frequency,
		            'value': options.dampening
		        });
		        /**
				 *  the feedback gain
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);
		        /**
				 *  The amount of feedback of the delayed signal. 
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.resonance = this._feedback.gain;
		        //connections
		        this._delay.chain(this._lowpass, this._feedback, this._delay);
		        this._readOnly([
		            'dampening',
		            'resonance',
		            'delayTime'
		        ]);
		    };
		    Tone.extend(Tone.LowpassCombFilter);
		    /**
			 *  the default parameters
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.LowpassCombFilter.defaults = {
		        'delayTime': 0.1,
		        'resonance': 0.5,
		        'dampening': 3000
		    };
		    /**
			 *  Clean up. 
			 *  @returns {Tone.LowpassCombFilter} this
			 */
		    Tone.LowpassCombFilter.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._writable([
		            'dampening',
		            'resonance',
		            'delayTime'
		        ]);
		        this.dampening.dispose();
		        this.dampening = null;
		        this.resonance.dispose();
		        this.resonance = null;
		        this._delay.dispose();
		        this._delay = null;
		        this.delayTime = null;
		        this._lowpass.disconnect();
		        this._lowpass = null;
		        this._feedback.disconnect();
		        this._feedback = null;
		        return this;
		    };
		    return Tone.LowpassCombFilter;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Merge brings two signals into the left and right 
			 *          channels of a single stereo channel.
			 *
			 *  @constructor
			 *  @extends {Tone}
			 *  @example
			 * var merge = new Tone.Merge().toMaster();
			 * //routing a sine tone in the left channel
			 * //and noise in the right channel
			 * var osc = new Tone.Oscillator().connect(merge.left);
			 * var noise = new Tone.Noise().connect(merge.right);
			 * //starting our oscillators
			 * noise.start();
			 * osc.start();
			 */
		    Tone.Merge = function () {
		        this.createInsOuts(2, 0);
		        /**
				 *  The left input channel.
				 *  Alias for <code>input[0]</code>
				 *  @type {GainNode}
				 */
		        this.left = this.input[0] = new Tone.Gain();
		        /**
				 *  The right input channel.
				 *  Alias for <code>input[1]</code>.
				 *  @type {GainNode}
				 */
		        this.right = this.input[1] = new Tone.Gain();
		        /**
				 *  the merger node for the two channels
				 *  @type {ChannelMergerNode}
				 *  @private
				 */
		        this._merger = this.output = this.context.createChannelMerger(2);
		        //connections
		        this.left.connect(this._merger, 0, 0);
		        this.right.connect(this._merger, 0, 1);
		        this.left.channelCount = 1;
		        this.right.channelCount = 1;
		        this.left.channelCountMode = 'explicit';
		        this.right.channelCountMode = 'explicit';
		    };
		    Tone.extend(Tone.Merge);
		    /**
			 *  Clean up.
			 *  @returns {Tone.Merge} this
			 */
		    Tone.Merge.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this.left.dispose();
		        this.left = null;
		        this.right.dispose();
		        this.right = null;
		        this._merger.disconnect();
		        this._merger = null;
		        return this;
		    };
		    return Tone.Merge;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)
			 *          of an input signal with some averaging applied. It can also get the raw 
			 *          value of the input signal.
			 *
			 *  @constructor
			 *  @extends {Tone}
			 *  @param {String} type Either "level" or "signal". 
			 *  @param {Number} smoothing The amount of smoothing applied between frames.
			 *  @example
			 * var meter = new Tone.Meter();
			 * var mic = new Tone.Microphone().start();
			 * //connect mic to the meter
			 * mic.connect(meter);
			 * //the current level of the mic input
			 * var level = meter.value;
			 */
		    Tone.Meter = function () {
		        var options = this.optionsObject(arguments, [
		            'type',
		            'smoothing'
		        ], Tone.Meter.defaults);
		        /**
				 *  The type of the meter, either "level" or "signal". 
				 *  A "level" meter will return the volume level (rms) of the 
				 *  input signal and a "signal" meter will return
				 *  the signal value of the input. 
				 *  @type  {String}
				 */
		        this.type = options.type;
		        /**
				 *  The analyser node which computes the levels.
				 *  @private
				 *  @type  {Tone.Analyser}
				 */
		        this.input = this.output = this._analyser = new Tone.Analyser('waveform', 512);
		        this._analyser.returnType = 'float';
		        /**
				 *  The amount of carryover between the current and last frame. 
				 *  Only applied meter for "level" type.
				 *  @type  {Number}
				 */
		        this.smoothing = options.smoothing;
		        /**
				 *  The last computed value
				 *  @type {Number}
				 *  @private
				 */
		        this._lastValue = 0;
		    };
		    Tone.extend(Tone.Meter);
		    /**
			 *  @private
			 *  @enum {String}
			 */
		    Tone.Meter.Type = {
		        Level: 'level',
		        Signal: 'signal'
		    };
		    /**
			 *  The defaults
			 *  @type {Object}
			 *  @static
			 *  @const
			 */
		    Tone.Meter.defaults = {
		        'smoothing': 0.8,
		        'type': Tone.Meter.Type.Level
		    };
		    /**
			 * The current value of the meter. A value of 1 is
			 * "unity".
			 * @memberOf Tone.Meter#
			 * @type {Number}
			 * @name value
			 * @readOnly
			 */
		    Object.defineProperty(Tone.Meter.prototype, 'value', {
		        get: function () {
		            var signal = this._analyser.analyse();
		            if (this.type === Tone.Meter.Type.Level) {
		                //rms
		                var sum = 0;
		                for (var i = 0; i < signal.length; i++) {
		                    sum += Math.pow(signal[i], 2);
		                }
		                var rms = Math.sqrt(sum / signal.length);
		                //smooth it
		                rms = Math.max(rms, this._lastValue * this.smoothing);
		                this._lastValue = rms;
		                //scale it
		                var unity = 0.35;
		                var val = rms / unity;
		                //scale the output curve
		                return Math.sqrt(val);
		            } else {
		                return signal[0];
		            }
		        }
		    });
		    /**
			 *  Clean up.
			 *  @returns {Tone.Meter} this
			 */
		    Tone.Meter.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._analyser.dispose();
		        this._analyser = null;
		        return this;
		    };
		    return Tone.Meter;
		});
		Module(function (Tone) {
		    
		    /**
			 *	@class  Tone.Split splits an incoming signal into left and right channels.
			 *	
			 *  @constructor
			 *  @extends {Tone}
			 *  @example
			 * var split = new Tone.Split();
			 * stereoSignal.connect(split);
			 */
		    Tone.Split = function () {
		        this.createInsOuts(0, 2);
		        /** 
				 *  @type {ChannelSplitterNode}
				 *  @private
				 */
		        this._splitter = this.input = this.context.createChannelSplitter(2);
		        /** 
				 *  Left channel output. 
				 *  Alias for <code>output[0]</code>
				 *  @type {Tone.Gain}
				 */
		        this.left = this.output[0] = new Tone.Gain();
		        /**
				 *  Right channel output.
				 *  Alias for <code>output[1]</code>
				 *  @type {Tone.Gain}
				 */
		        this.right = this.output[1] = new Tone.Gain();
		        //connections
		        this._splitter.connect(this.left, 0, 0);
		        this._splitter.connect(this.right, 1, 0);
		    };
		    Tone.extend(Tone.Split);
		    /**
			 *  Clean up. 
			 *  @returns {Tone.Split} this
			 */
		    Tone.Split.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._splitter.disconnect();
		        this.left.dispose();
		        this.left = null;
		        this.right.dispose();
		        this.right = null;
		        this._splitter = null;
		        return this;
		    };
		    return Tone.Split;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Mid/Side processing separates the the 'mid' signal 
			 *         (which comes out of both the left and the right channel) 
			 *         and the 'side' (which only comes out of the the side channels). <br><br>
			 *         <code>
			 *         Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right<br>
			 *         Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ<br>
			 *         </code>
			 *
			 *  @extends {Tone}
			 *  @constructor
			 */
		    Tone.MidSideSplit = function () {
		        this.createInsOuts(0, 2);
		        /**
				 *  split the incoming signal into left and right channels
				 *  @type  {Tone.Split}
				 *  @private
				 */
		        this._split = this.input = new Tone.Split();
		        /**
				 *  The mid send. Connect to mid processing. Alias for
				 *  <code>output[0]</code>
				 *  @type {Tone.Expr}
				 */
		        this.mid = this.output[0] = new Tone.Expr('($0 + $1) * $2');
		        /**
				 *  The side output. Connect to side processing. Alias for
				 *  <code>output[1]</code>
				 *  @type {Tone.Expr}
				 */
		        this.side = this.output[1] = new Tone.Expr('($0 - $1) * $2');
		        this._split.connect(this.mid, 0, 0);
		        this._split.connect(this.mid, 1, 1);
		        this._split.connect(this.side, 0, 0);
		        this._split.connect(this.side, 1, 1);
		        sqrtTwo.connect(this.mid, 0, 2);
		        sqrtTwo.connect(this.side, 0, 2);
		    };
		    Tone.extend(Tone.MidSideSplit);
		    /**
			 *  a constant signal equal to 1 / sqrt(2)
			 *  @type {Number}
			 *  @signal
			 *  @private
			 *  @static
			 */
		    var sqrtTwo = null;
		    Tone._initAudioContext(function () {
		        sqrtTwo = new Tone.Signal(1 / Math.sqrt(2));
		    });
		    /**
			 *  clean up
			 *  @returns {Tone.MidSideSplit} this
			 */
		    Tone.MidSideSplit.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this.mid.dispose();
		        this.mid = null;
		        this.side.dispose();
		        this.side = null;
		        this._split.dispose();
		        this._split = null;
		        return this;
		    };
		    return Tone.MidSideSplit;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Mid/Side processing separates the the 'mid' signal 
			 *         (which comes out of both the left and the right channel) 
			 *         and the 'side' (which only comes out of the the side channels). 
			 *         MidSideMerge merges the mid and side signal after they've been seperated
			 *         by Tone.MidSideSplit.<br><br>
			 *         <code>
			 *         Left = (Mid+Side)/sqrt(2);   // obtain left signal from mid and side<br>
			 *         Right = (Mid-Side)/sqrt(2);   // obtain right signal from mid and side<br>
			 *         </code>
			 *
			 *  @extends {Tone.StereoEffect}
			 *  @constructor
			 */
		    Tone.MidSideMerge = function () {
		        this.createInsOuts(2, 0);
		        /**
				 *  The mid signal input. Alias for
				 *  <code>input[0]</code>
				 *  @type  {Tone.Gain}
				 */
		        this.mid = this.input[0] = new Tone.Gain();
		        /**
				 *  recombine the mid/side into Left
				 *  @type {Tone.Expr}
				 *  @private
				 */
		        this._left = new Tone.Expr('($0 + $1) * $2');
		        /**
				 *  The side signal input. Alias for
				 *  <code>input[1]</code>
				 *  @type  {Tone.Gain}
				 */
		        this.side = this.input[1] = new Tone.Gain();
		        /**
				 *  recombine the mid/side into Right
				 *  @type {Tone.Expr}
				 *  @private
				 */
		        this._right = new Tone.Expr('($0 - $1) * $2');
		        /**
				 *  Merge the left/right signal back into a stereo signal.
				 *  @type {Tone.Merge}
				 *  @private
				 */
		        this._merge = this.output = new Tone.Merge();
		        this.mid.connect(this._left, 0, 0);
		        this.side.connect(this._left, 0, 1);
		        this.mid.connect(this._right, 0, 0);
		        this.side.connect(this._right, 0, 1);
		        this._left.connect(this._merge, 0, 0);
		        this._right.connect(this._merge, 0, 1);
		        sqrtTwo.connect(this._left, 0, 2);
		        sqrtTwo.connect(this._right, 0, 2);
		    };
		    Tone.extend(Tone.MidSideMerge);
		    /**
			 *  A constant signal equal to 1 / sqrt(2).
			 *  @type {Number}
			 *  @signal
			 *  @private
			 *  @static
			 */
		    var sqrtTwo = null;
		    Tone._initAudioContext(function () {
		        sqrtTwo = new Tone.Signal(1 / Math.sqrt(2));
		    });
		    /**
			 *  clean up
			 *  @returns {Tone.MidSideMerge} this
			 */
		    Tone.MidSideMerge.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this.mid.dispose();
		        this.mid = null;
		        this.side.dispose();
		        this.side = null;
		        this._left.dispose();
		        this._left = null;
		        this._right.dispose();
		        this._right = null;
		        this._merge.dispose();
		        this._merge = null;
		        return this;
		    };
		    return Tone.MidSideMerge;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.MidSideCompressor applies two different compressors to the mid
			 *         and side signal components. See Tone.MidSideSplit. 
			 *
			 *  @extends {Tone}
			 *  @param {Object} options The options that are passed to the mid and side
			 *                          compressors. 
			 *  @constructor
			 */
		    Tone.MidSideCompressor = function (options) {
		        options = this.defaultArg(options, Tone.MidSideCompressor.defaults);
		        /**
				 *  the mid/side split
				 *  @type  {Tone.MidSideSplit}
				 *  @private
				 */
		        this._midSideSplit = this.input = new Tone.MidSideSplit();
		        /**
				 *  the mid/side recombination
				 *  @type  {Tone.MidSideMerge}
				 *  @private
				 */
		        this._midSideMerge = this.output = new Tone.MidSideMerge();
		        /**
				 *  The compressor applied to the mid signal
				 *  @type  {Tone.Compressor}
				 */
		        this.mid = new Tone.Compressor(options.mid);
		        /**
				 *  The compressor applied to the side signal
				 *  @type  {Tone.Compressor}
				 */
		        this.side = new Tone.Compressor(options.side);
		        this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);
		        this._midSideSplit.side.chain(this.side, this._midSideMerge.side);
		        this._readOnly([
		            'mid',
		            'side'
		        ]);
		    };
		    Tone.extend(Tone.MidSideCompressor);
		    /**
			 *  @const
			 *  @static
			 *  @type {Object}
			 */
		    Tone.MidSideCompressor.defaults = {
		        'mid': {
		            'ratio': 3,
		            'threshold': -24,
		            'release': 0.03,
		            'attack': 0.02,
		            'knee': 16
		        },
		        'side': {
		            'ratio': 6,
		            'threshold': -30,
		            'release': 0.25,
		            'attack': 0.03,
		            'knee': 10
		        }
		    };
		    /**
			 *  Clean up.
			 *  @returns {Tone.MidSideCompressor} this
			 */
		    Tone.MidSideCompressor.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._writable([
		            'mid',
		            'side'
		        ]);
		        this.mid.dispose();
		        this.mid = null;
		        this.side.dispose();
		        this.side = null;
		        this._midSideSplit.dispose();
		        this._midSideSplit = null;
		        this._midSideMerge.dispose();
		        this._midSideMerge = null;
		        return this;
		    };
		    return Tone.MidSideCompressor;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Mono coerces the incoming mono or stereo signal into a mono signal
			 *         where both left and right channels have the same value. This can be useful 
			 *         for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).
			 *
			 *  @extends {Tone}
			 *  @constructor
			 */
		    Tone.Mono = function () {
		        this.createInsOuts(1, 0);
		        /**
				 *  merge the signal
				 *  @type {Tone.Merge}
				 *  @private
				 */
		        this._merge = this.output = new Tone.Merge();
		        this.input.connect(this._merge, 0, 0);
		        this.input.connect(this._merge, 0, 1);
		        this.input.gain.value = this.dbToGain(-10);
		    };
		    Tone.extend(Tone.Mono);
		    /**
			 *  clean up
			 *  @returns {Tone.Mono} this
			 */
		    Tone.Mono.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._merge.dispose();
		        this._merge = null;
		        return this;
		    };
		    return Tone.Mono;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class A compressor with seperate controls over low/mid/high dynamics
			 *
			 *  @extends {Tone}
			 *  @constructor
			 *  @param {Object} options The low/mid/high compressor settings.
			 *  @example
			 *  var multiband = new Tone.MultibandCompressor({
			 *  	"lowFrequency" : 200,
			 *  	"highFrequency" : 1300
			 *  	"low" : {
			 *  		"threshold" : -12
			 *  	}
			 *  })
			 */
		    Tone.MultibandCompressor = function (options) {
		        options = this.defaultArg(arguments, Tone.MultibandCompressor.defaults);
		        /**
				 *  split the incoming signal into high/mid/low
				 *  @type {Tone.MultibandSplit}
				 *  @private
				 */
		        this._splitter = this.input = new Tone.MultibandSplit({
		            'lowFrequency': options.lowFrequency,
		            'highFrequency': options.highFrequency
		        });
		        /**
				 *  low/mid crossover frequency.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.lowFrequency = this._splitter.lowFrequency;
		        /**
				 *  mid/high crossover frequency.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.highFrequency = this._splitter.highFrequency;
		        /**
				 *  the output
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this.output = new Tone.Gain();
		        /**
				 *  The compressor applied to the low frequencies.
				 *  @type {Tone.Compressor}
				 */
		        this.low = new Tone.Compressor(options.low);
		        /**
				 *  The compressor applied to the mid frequencies.
				 *  @type {Tone.Compressor}
				 */
		        this.mid = new Tone.Compressor(options.mid);
		        /**
				 *  The compressor applied to the high frequencies.
				 *  @type {Tone.Compressor}
				 */
		        this.high = new Tone.Compressor(options.high);
		        //connect the compressor
		        this._splitter.low.chain(this.low, this.output);
		        this._splitter.mid.chain(this.mid, this.output);
		        this._splitter.high.chain(this.high, this.output);
		        this._readOnly([
		            'high',
		            'mid',
		            'low',
		            'highFrequency',
		            'lowFrequency'
		        ]);
		    };
		    Tone.extend(Tone.MultibandCompressor);
		    /**
			 *  @const
			 *  @static
			 *  @type {Object}
			 */
		    Tone.MultibandCompressor.defaults = {
		        'low': Tone.Compressor.defaults,
		        'mid': Tone.Compressor.defaults,
		        'high': Tone.Compressor.defaults,
		        'lowFrequency': 250,
		        'highFrequency': 2000
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.MultibandCompressor} this
			 */
		    Tone.MultibandCompressor.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._splitter.dispose();
		        this._writable([
		            'high',
		            'mid',
		            'low',
		            'highFrequency',
		            'lowFrequency'
		        ]);
		        this.low.dispose();
		        this.mid.dispose();
		        this.high.dispose();
		        this._splitter = null;
		        this.low = null;
		        this.mid = null;
		        this.high = null;
		        this.lowFrequency = null;
		        this.highFrequency = null;
		        return this;
		    };
		    return Tone.MultibandCompressor;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Panner is an equal power Left/Right Panner and does not
			 *          support 3D. Panner uses the StereoPannerNode when available. 
			 *  
			 *  @constructor
			 *  @extends {Tone}
			 *  @param {NormalRange} [initialPan=0] The initail panner value (defaults to 0 = center)
			 *  @example
			 *  //pan the input signal hard right. 
			 *  var panner = new Tone.Panner(1);
			 */
		    Tone.Panner = function (initialPan) {
		        if (this._hasStereoPanner) {
		            /**
					 *  the panner node
					 *  @type {StereoPannerNode}
					 *  @private
					 */
		            this._panner = this.input = this.output = this.context.createStereoPanner();
		            /**
					 *  The pan control. -1 = hard left, 1 = hard right. 
					 *  @type {NormalRange}
					 *  @signal
					 */
		            this.pan = this._panner.pan;
		        } else {
		            /**
					 *  the dry/wet knob
					 *  @type {Tone.CrossFade}
					 *  @private
					 */
		            this._crossFade = new Tone.CrossFade();
		            /**
					 *  @type {Tone.Merge}
					 *  @private
					 */
		            this._merger = this.output = new Tone.Merge();
		            /**
					 *  @type {Tone.Split}
					 *  @private
					 */
		            this._splitter = this.input = new Tone.Split();
		            /**
					 *  The pan control. -1 = hard left, 1 = hard right. 
					 *  @type {AudioRange}
					 *  @signal
					 */
		            this.pan = new Tone.Signal(0, Tone.Type.AudioRange);
		            /**
					 *  always sends 0
					 *  @type {Tone.Zero}
					 *  @private
					 */
		            this._zero = new Tone.Zero();
		            /**
					 *  The analog to gain conversion
					 *  @type  {Tone.AudioToGain}
					 *  @private
					 */
		            this._a2g = new Tone.AudioToGain();
		            //CONNECTIONS:
		            this._zero.connect(this._a2g);
		            this.pan.chain(this._a2g, this._crossFade.fade);
		            //left channel is a, right channel is b
		            this._splitter.connect(this._crossFade, 0, 0);
		            this._splitter.connect(this._crossFade, 1, 1);
		            //merge it back together
		            this._crossFade.a.connect(this._merger, 0, 0);
		            this._crossFade.b.connect(this._merger, 0, 1);
		        }
		        //initial value
		        this.pan.value = this.defaultArg(initialPan, 0);
		        this._readOnly('pan');
		    };
		    Tone.extend(Tone.Panner);
		    /**
			 *  indicates if the panner is using the new StereoPannerNode internally
			 *  @type  {boolean}
			 *  @private
			 */
		    Tone.Panner.prototype._hasStereoPanner = Tone.prototype.isFunction(Tone.context.createStereoPanner);
		    /**
			 *  Clean up.
			 *  @returns {Tone.Panner} this
			 */
		    Tone.Panner.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._writable('pan');
		        if (this._hasStereoPanner) {
		            this._panner.disconnect();
		            this._panner = null;
		            this.pan = null;
		        } else {
		            this._zero.dispose();
		            this._zero = null;
		            this._crossFade.dispose();
		            this._crossFade = null;
		            this._splitter.dispose();
		            this._splitter = null;
		            this._merger.dispose();
		            this._merger = null;
		            this.pan.dispose();
		            this.pan = null;
		            this._a2g.dispose();
		            this._a2g = null;
		        }
		        return this;
		    };
		    return Tone.Panner;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  A spatialized panner node which supports equalpower or HRTF panning.
			 *          Tries to normalize the API across various browsers. See Tone.Listener
			 *  
			 *  @constructor
			 *  @extends {Tone}
			 *  @param {Number} positionX The initial x position.
			 *  @param {Number} positionY The initial y position.
			 *  @param {Number} positionZ The initial z position.
			 */
		    Tone.Panner3D = function () {
		        var options = this.optionsObject(arguments, [
		            'positionX',
		            'positionY',
		            'positionZ'
		        ], Tone.Panner3D.defaults);
		        /**
				 *  The panner node
				 *  @type {PannerNode}
				 *  @private
				 */
		        this._panner = this.input = this.output = this.context.createPanner();
		        //set some values
		        this._panner.panningModel = options.panningModel;
		        this._panner.maxDistance = options.maxDistance;
		        this._panner.distanceModel = options.distanceModel;
		        this._panner.coneOuterGain = options.coneOuterGain;
		        this._panner.coneOuterAngle = options.coneOuterAngle;
		        this._panner.coneInnerAngle = options.coneInnerAngle;
		        this._panner.refDistance = options.refDistance;
		        this._panner.rolloffFactor = options.rolloffFactor;
		        /**
				 *  Holds the current orientation
				 *  @type  {Array}
				 *  @private
				 */
		        this._orientation = [
		            options.orientationX,
		            options.orientationY,
		            options.orientationZ
		        ];
		        /**
				 *  Holds the current position
				 *  @type  {Array}
				 *  @private
				 */
		        this._position = [
		            options.positionX,
		            options.positionY,
		            options.positionZ
		        ];
		        // set the default position/orientation
		        this.orientationX = options.orientationX;
		        this.orientationY = options.orientationY;
		        this.orientationZ = options.orientationZ;
		        this.positionX = options.positionX;
		        this.positionY = options.positionY;
		        this.positionZ = options.positionZ;
		    };
		    Tone.extend(Tone.Panner3D);
		    /**
			 *  the default parameters
			 *  @static
			 *  @const
			 *  @type {Object}
			 *  Defaults according to the specification
			 */
		    Tone.Panner3D.defaults = {
		        'positionX': 0,
		        'positionY': 0,
		        'positionZ': 0,
		        'orientationX': 0,
		        'orientationY': 0,
		        'orientationZ': 0,
		        'panningModel': 'equalpower',
		        'maxDistance': 10000,
		        'distanceModel': 'inverse',
		        'coneOuterGain': 0,
		        'coneOuterAngle': 360,
		        'coneInnerAngle': 360,
		        'refDistance': 1,
		        'rolloffFactor': 1
		    };
		    Tone.Panner3D.prototype._rampTimeConstant = 0.3;
		    /**
			 *  Sets the position of the source in 3d space.	
			 *  @param  {Number}  x
			 *  @param  {Number}  y
			 *  @param  {Number}  z
			 *  @return {Tone.Panner3D} this
			 */
		    Tone.Panner3D.prototype.setPosition = function (x, y, z) {
		        if (this._panner.positionX) {
		            var now = this.now();
		            this._panner.positionX.setTargetAtTime(x, now, this._rampTimeConstant);
		            this._panner.positionY.setTargetAtTime(y, now, this._rampTimeConstant);
		            this._panner.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);
		        } else {
		            this._panner.setPosition(x, y, z);
		        }
		        this._position = Array.prototype.slice.call(arguments);
		        return this;
		    };
		    /**
			 *  Sets the orientation of the source in 3d space.	
			 *  @param  {Number}  x
			 *  @param  {Number}  y
			 *  @param  {Number}  z
			 *  @return {Tone.Panner3D} this
			 */
		    Tone.Panner3D.prototype.setOrientation = function (x, y, z) {
		        if (this._panner.orientationX) {
		            var now = this.now();
		            this._panner.orientationX.setTargetAtTime(x, now, this._rampTimeConstant);
		            this._panner.orientationY.setTargetAtTime(y, now, this._rampTimeConstant);
		            this._panner.orientationZ.setTargetAtTime(z, now, this._rampTimeConstant);
		        } else {
		            this._panner.setOrientation(x, y, z);
		        }
		        this._orientation = Array.prototype.slice.call(arguments);
		        return this;
		    };
		    /**
			 *  The x position of the panner object.
			 *  @type {Number}
			 *  @memberOf Tone.Panner3D#
			 *  @name positionX
			 */
		    Object.defineProperty(Tone.Panner3D.prototype, 'positionX', {
		        set: function (pos) {
		            this._position[0] = pos;
		            this.setPosition.apply(this, this._position);
		        },
		        get: function () {
		            return this._position[0];
		        }
		    });
		    /**
			 *  The y position of the panner object.
			 *  @type {Number}
			 *  @memberOf Tone.Panner3D#
			 *  @name positionY
			 */
		    Object.defineProperty(Tone.Panner3D.prototype, 'positionY', {
		        set: function (pos) {
		            this._position[1] = pos;
		            this.setPosition.apply(this, this._position);
		        },
		        get: function () {
		            return this._position[1];
		        }
		    });
		    /**
			 *  The z position of the panner object.
			 *  @type {Number}
			 *  @memberOf Tone.Panner3D#
			 *  @name positionZ
			 */
		    Object.defineProperty(Tone.Panner3D.prototype, 'positionZ', {
		        set: function (pos) {
		            this._position[2] = pos;
		            this.setPosition.apply(this, this._position);
		        },
		        get: function () {
		            return this._position[2];
		        }
		    });
		    /**
			 *  The x orientation of the panner object.
			 *  @type {Number}
			 *  @memberOf Tone.Panner3D#
			 *  @name orientationX
			 */
		    Object.defineProperty(Tone.Panner3D.prototype, 'orientationX', {
		        set: function (pos) {
		            this._orientation[0] = pos;
		            this.setOrientation.apply(this, this._orientation);
		        },
		        get: function () {
		            return this._orientation[0];
		        }
		    });
		    /**
			 *  The y orientation of the panner object.
			 *  @type {Number}
			 *  @memberOf Tone.Panner3D#
			 *  @name orientationY
			 */
		    Object.defineProperty(Tone.Panner3D.prototype, 'orientationY', {
		        set: function (pos) {
		            this._orientation[1] = pos;
		            this.setOrientation.apply(this, this._orientation);
		        },
		        get: function () {
		            return this._orientation[1];
		        }
		    });
		    /**
			 *  The z orientation of the panner object.
			 *  @type {Number}
			 *  @memberOf Tone.Panner3D#
			 *  @name orientationZ
			 */
		    Object.defineProperty(Tone.Panner3D.prototype, 'orientationZ', {
		        set: function (pos) {
		            this._orientation[2] = pos;
		            this.setOrientation.apply(this, this._orientation);
		        },
		        get: function () {
		            return this._orientation[2];
		        }
		    });
		    /**
			 *  Proxy a property on the panner to an exposed public propery
			 *  @param  {String}  prop
			 *  @private
			 */
		    Tone.Panner3D._aliasProperty = function (prop) {
		        Object.defineProperty(Tone.Panner3D.prototype, prop, {
		            set: function (val) {
		                this._panner[prop] = val;
		            },
		            get: function () {
		                return this._panner[prop];
		            }
		        });
		    };
		    /**
			 *  The panning model. Either "equalpower" or "HRTF".
			 *  @type {String}
			 *  @memberOf Tone.Panner3D#
			 *  @name panningModel
			 */
		    Tone.Panner3D._aliasProperty('panningModel');
		    /**
			 *  A reference distance for reducing volume as source move further from the listener
			 *  @type {Number}
			 *  @memberOf Tone.Panner3D#
			 *  @name refDistance
			 */
		    Tone.Panner3D._aliasProperty('refDistance');
		    /**
			 *  Describes how quickly the volume is reduced as source moves away from listener.
			 *  @type {Number}
			 *  @memberOf Tone.Panner3D#
			 *  @name rolloffFactor
			 */
		    Tone.Panner3D._aliasProperty('rolloffFactor');
		    /**
			 *  The distance model used by,  "linear", "inverse", or "exponential".
			 *  @type {String}
			 *  @memberOf Tone.Panner3D#
			 *  @name distanceModel
			 */
		    Tone.Panner3D._aliasProperty('distanceModel');
		    /**
			 *  The angle, in degrees, inside of which there will be no volume reduction
			 *  @type {Degrees}
			 *  @memberOf Tone.Panner3D#
			 *  @name coneInnerAngle
			 */
		    Tone.Panner3D._aliasProperty('coneInnerAngle');
		    /**
			 *  The angle, in degrees, outside of which the volume will be reduced 
			 *  to a constant value of coneOuterGain
			 *  @type {Degrees}
			 *  @memberOf Tone.Panner3D#
			 *  @name coneOuterAngle
			 */
		    Tone.Panner3D._aliasProperty('coneOuterAngle');
		    /**
			 *  The gain outside of the coneOuterAngle
			 *  @type {Gain}
			 *  @memberOf Tone.Panner3D#
			 *  @name coneOuterGain
			 */
		    Tone.Panner3D._aliasProperty('coneOuterGain');
		    /**
			 *  The maximum distance between source and listener, 
			 *  after which the volume will not be reduced any further.
			 *  @type {Positive}
			 *  @memberOf Tone.Panner3D#
			 *  @name maxDistance
			 */
		    Tone.Panner3D._aliasProperty('maxDistance');
		    /**
			 *  Clean up.
			 *  @returns {Tone.Panner3D} this
			 */
		    Tone.Panner3D.prototype.dispose = function () {
		        this._panner.disconnect();
		        this._panner = null;
		        this._orientation = null;
		        this._position = null;
		        return this;
		    };
		    return Tone.Panner3D;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.PanVol is a Tone.Panner and Tone.Volume in one.
			 *
			 *  @extends {Tone}
			 *  @constructor
			 *  @param {AudioRange} pan the initial pan
			 *  @param {number} volume The output volume. 
			 *  @example
			 * //pan the incoming signal left and drop the volume
			 * var panVol = new Tone.PanVol(0.25, -12);
			 */
		    Tone.PanVol = function () {
		        var options = this.optionsObject(arguments, [
		            'pan',
		            'volume'
		        ], Tone.PanVol.defaults);
		        /**
				 *  The panning node
				 *  @type {Tone.Panner}
				 *  @private
				 */
		        this._panner = this.input = new Tone.Panner(options.pan);
		        /**
				 *  The L/R panning control.
				 *  @type {AudioRange}
				 *  @signal
				 */
		        this.pan = this._panner.pan;
		        /**
				 *  The volume node
				 *  @type {Tone.Volume}
				 */
		        this._volume = this.output = new Tone.Volume(options.volume);
		        /**
				 *  The volume control in decibels. 
				 *  @type {Decibels}
				 *  @signal
				 */
		        this.volume = this._volume.volume;
		        //connections
		        this._panner.connect(this._volume);
		        this._readOnly([
		            'pan',
		            'volume'
		        ]);
		    };
		    Tone.extend(Tone.PanVol);
		    /**
			 *  The defaults
			 *  @type  {Object}
			 *  @const
			 *  @static
			 */
		    Tone.PanVol.defaults = {
		        'pan': 0.5,
		        'volume': 0
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.PanVol} this
			 */
		    Tone.PanVol.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._writable([
		            'pan',
		            'volume'
		        ]);
		        this._panner.dispose();
		        this._panner = null;
		        this.pan = null;
		        this._volume.dispose();
		        this._volume = null;
		        this.volume = null;
		        return this;
		    };
		    return Tone.PanVol;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.CtrlInterpolate will interpolate between given values based
			 *         on the "index" property. Passing in an array or object literal
			 *         will interpolate each of the parameters. Note (i.e. "C3")
			 *         and Time (i.e. "4n + 2") can be interpolated. All other values are
			 *         assumed to be numbers. 
			 *  @example
			 * var interp = new Tone.CtrlInterpolate([0, 2, 9, 4]);
			 * interp.index = 0.75;
			 * interp.value; //returns 1.5
			 *
			 *  @example
			 * var interp = new Tone.CtrlInterpolate([
			 * 	[2, 4, 5],
			 * 	[9, 3, 2],
			 * ]);
			 * @param {Array} values The array of values to interpolate over
			 * @param {Positive} index The initial interpolation index.
			 * @extends {Tone}
			 */
		    Tone.CtrlInterpolate = function () {
		        var options = this.optionsObject(arguments, [
		            'values',
		            'index'
		        ], Tone.CtrlInterpolate.defaults);
		        /**
				 *  The values to interpolate between
				 *  @type  {Array}
				 */
		        this.values = options.values;
		        /**
				 *  The interpolated index between values. For example: a value of 1.5
				 *  would interpolate equally between the value at index 1
				 *  and the value at index 2. 
				 *  @example
				 * interp.index = 0; 
				 * interp.value; //returns the value at 0
				 * interp.index = 0.5;
				 * interp.value; //returns the value between indices 0 and 1. 
				 *  @type  {Positive}
				 */
		        this.index = options.index;
		    };
		    Tone.extend(Tone.CtrlInterpolate);
		    /**
			 *  The defaults
			 *  @const
			 *  @type  {Object}
			 */
		    Tone.CtrlInterpolate.defaults = {
		        'index': 0,
		        'values': []
		    };
		    /**
			 *  The current interpolated value based on the index
			 *  @readOnly
			 *  @memberOf Tone.CtrlInterpolate#
			 *  @type {*}
			 *  @name value
			 */
		    Object.defineProperty(Tone.CtrlInterpolate.prototype, 'value', {
		        get: function () {
		            var index = this.index;
		            index = Math.min(index, this.values.length - 1);
		            var lowerPosition = Math.floor(index);
		            var lower = this.values[lowerPosition];
		            var upper = this.values[Math.ceil(index)];
		            return this._interpolate(index - lowerPosition, lower, upper);
		        }
		    });
		    /**
			 *  Internal interpolation routine
			 *  @param  {NormalRange}  index  The index between the lower and upper
			 *  @param  {*}  lower 
			 *  @param  {*}  upper 
			 *  @return  {*}  The interpolated value
			 *  @private
			 */
		    Tone.CtrlInterpolate.prototype._interpolate = function (index, lower, upper) {
		        if (this.isArray(lower)) {
		            var retArray = [];
		            for (var i = 0; i < lower.length; i++) {
		                retArray[i] = this._interpolate(index, lower[i], upper[i]);
		            }
		            return retArray;
		        } else if (this.isObject(lower)) {
		            var retObj = {};
		            for (var attr in lower) {
		                retObj[attr] = this._interpolate(index, lower[attr], upper[attr]);
		            }
		            return retObj;
		        } else {
		            lower = this._toNumber(lower);
		            upper = this._toNumber(upper);
		            return (1 - index) * lower + index * upper;
		        }
		    };
		    /**
			 *  Convert from the given type into a number
			 *  @param  {Number|String}  value
			 *  @return  {Number}
			 *  @private
			 */
		    Tone.CtrlInterpolate.prototype._toNumber = function (val) {
		        if (this.isNumber(val)) {
		            return val;
		        } else {
		            //otherwise assume that it's Time...
		            return this.toSeconds(val);
		        }
		    };
		    /**
			 *  Clean up
			 *  @return  {Tone.CtrlInterpolate}  this
			 */
		    Tone.CtrlInterpolate.prototype.dispose = function () {
		        this.values = null;
		    };
		    return Tone.CtrlInterpolate;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.CtrlMarkov represents a Markov Chain where each call
			 *         to Tone.CtrlMarkov.next will move to the next state. If the next
			 *         state choice is an array, the next state is chosen randomly with
			 *         even probability for all of the choices. For a weighted probability
			 *         of the next choices, pass in an object with "state" and "probability" attributes. 
			 *         The probabilities will be normalized and then chosen. If no next options
			 *         are given for the current state, the state will stay there. 
			 *  @extends {Tone}
			 *  @example
			 * var chain = new Tone.CtrlMarkov({
			 * 	"beginning" : ["end", "middle"],
			 * 	"middle" : "end"
			 * });
			 * chain.value = "beginning";
			 * chain.next(); //returns "end" or "middle" with 50% probability
			 *
			 *  @example
			 * var chain = new Tone.CtrlMarkov({
			 * 	"beginning" : [{"value" : "end", "probability" : 0.8}, 
			 * 					{"value" : "middle", "probability" : 0.2}],
			 * 	"middle" : "end"
			 * });
			 * chain.value = "beginning";
			 * chain.next(); //returns "end" with 80% probability or "middle" with 20%.
			 *  @param {Object} values An object with the state names as the keys
			 *                         and the next state(s) as the values. 
			 */
		    Tone.CtrlMarkov = function (values, initial) {
		        /**
				 *  The Markov values with states as the keys
				 *  and next state(s) as the values. 
				 *  @type {Object}
				 */
		        this.values = this.defaultArg(values, {});
		        /**
				 *  The current state of the Markov values. The next
				 *  state will be evaluated and returned when Tone.CtrlMarkov.next
				 *  is invoked.
				 *  @type {String}
				 */
		        this.value = this.defaultArg(initial, Object.keys(this.values)[0]);
		    };
		    Tone.extend(Tone.CtrlMarkov);
		    /**
			 *  Returns the next state of the Markov values. 
			 *  @return  {String}
			 */
		    Tone.CtrlMarkov.prototype.next = function () {
		        if (this.values.hasOwnProperty(this.value)) {
		            var next = this.values[this.value];
		            if (this.isArray(next)) {
		                var distribution = this._getProbDistribution(next);
		                var rand = Math.random();
		                var total = 0;
		                for (var i = 0; i < distribution.length; i++) {
		                    var dist = distribution[i];
		                    if (rand > total && rand < total + dist) {
		                        var chosen = next[i];
		                        if (this.isObject(chosen)) {
		                            this.value = chosen.value;
		                        } else {
		                            this.value = chosen;
		                        }
		                    }
		                    total += dist;
		                }
		            } else {
		                this.value = next;
		            }
		        }
		        return this.value;
		    };
		    /**
			 *  Choose randomly from an array weighted options in the form 
			 *  {"state" : string, "probability" : number} or an array of values
			 *  @param  {Array}  options 
			 *  @return  {Array}  The randomly selected choice
			 *  @private
			 */
		    Tone.CtrlMarkov.prototype._getProbDistribution = function (options) {
		        var distribution = [];
		        var total = 0;
		        var needsNormalizing = false;
		        for (var i = 0; i < options.length; i++) {
		            var option = options[i];
		            if (this.isObject(option)) {
		                needsNormalizing = true;
		                distribution[i] = option.probability;
		            } else {
		                distribution[i] = 1 / options.length;
		            }
		            total += distribution[i];
		        }
		        if (needsNormalizing) {
		            //normalize the values
		            for (var j = 0; j < distribution.length; j++) {
		                distribution[j] = distribution[j] / total;
		            }
		        }
		        return distribution;
		    };
		    /**
			 *  Clean up
			 *  @return  {Tone.CtrlMarkov}  this
			 */
		    Tone.CtrlMarkov.prototype.dispose = function () {
		        this.values = null;
		    };
		    return Tone.CtrlMarkov;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Generate patterns from an array of values.
			 *         Has a number of arpeggiation and randomized
			 *         selection patterns. 
			 *           <ul>
			 *  	        <li>"up" - cycles upward</li>
			 *  			<li>"down" - cycles downward</li>
			 *  			<li>"upDown" - up then and down</li>
			 *  			<li>"downUp" - cycles down then and up</li>
			 *  			<li>"alternateUp" - jump up two and down one</li>
			 *  			<li>"alternateDown" - jump down two and up one</li>
			 *  			<li>"random" - randomly select an index</li>
			 *  			<li>"randomWalk" - randomly moves one index away from the current position</li>
			 *  			<li>"randomOnce" - randomly select an index without repeating until all values have been chosen.</li>
			 *     		</ul>
			 *  @param  {Array}  values   An array of options to choose from.
			 *  @param  {Tone.CtrlPattern.Type=}  type  The name of the pattern.
			 *  @extends {Tone}
			 */
		    Tone.CtrlPattern = function () {
		        var options = this.optionsObject(arguments, [
		            'values',
		            'type'
		        ], Tone.CtrlPattern.defaults);
		        /**
				 *  The array of values to arpeggiate over
				 *  @type {Array}
				 */
		        this.values = options.values;
		        /**
				 *  The current position in the values array
				 *  @type  {Number}
				 */
		        this.index = 0;
		        /**
				 *  The type placeholder
				 *  @type {Tone.CtrlPattern.Type}
				 *  @private
				 */
		        this._type = null;
		        /**
				 *  Shuffled values for the RandomOnce type
				 *  @type {Array}
				 *  @private
				 */
		        this._shuffled = null;
		        /**
				 *  The direction of the movement
				 *  @type {String}
				 *  @private
				 */
		        this._direction = null;
		        this.type = options.type;
		    };
		    Tone.extend(Tone.CtrlPattern);
		    /**
			 *  The Control Patterns
			 *  @type  {Object}
			 *  @static
			 */
		    Tone.CtrlPattern.Type = {
		        Up: 'up',
		        Down: 'down',
		        UpDown: 'upDown',
		        DownUp: 'downUp',
		        AlternateUp: 'alternateUp',
		        AlternateDown: 'alternateDown',
		        Random: 'random',
		        RandomWalk: 'randomWalk',
		        RandomOnce: 'randomOnce'
		    };
		    /**
			 *  The default values. 
			 *  @type  {Object}
			 */
		    Tone.CtrlPattern.defaults = {
		        'type': Tone.CtrlPattern.Type.Up,
		        'values': []
		    };
		    /**
			 *  The value at the current index of the pattern.
			 *  @readOnly
			 *  @memberOf Tone.CtrlPattern#
			 *  @type {*}
			 *  @name value
			 */
		    Object.defineProperty(Tone.CtrlPattern.prototype, 'value', {
		        get: function () {
		            //some safeguards
		            if (this.values.length === 0) {
		                return;
		            } else if (this.values.length === 1) {
		                return this.values[0];
		            }
		            this.index = Math.min(this.index, this.values.length - 1);
		            var val = this.values[this.index];
		            if (this.type === Tone.CtrlPattern.Type.RandomOnce) {
		                if (this.values.length !== this._shuffled.length) {
		                    this._shuffleValues();
		                }
		                val = this.values[this._shuffled[this.index]];
		            }
		            return val;
		        }
		    });
		    /**
			 *  The pattern used to select the next
			 *  item from the values array
			 *  @memberOf Tone.CtrlPattern#
			 *  @type {Tone.CtrlPattern.Type}
			 *  @name type
			 */
		    Object.defineProperty(Tone.CtrlPattern.prototype, 'type', {
		        get: function () {
		            return this._type;
		        },
		        set: function (type) {
		            this._type = type;
		            this._shuffled = null;
		            //the first index
		            if (this._type === Tone.CtrlPattern.Type.Up || this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.RandomOnce || this._type === Tone.CtrlPattern.Type.AlternateUp) {
		                this.index = 0;
		            } else if (this._type === Tone.CtrlPattern.Type.Down || this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {
		                this.index = this.values.length - 1;
		            }
		            //the direction
		            if (this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.AlternateUp) {
		                this._direction = Tone.CtrlPattern.Type.Up;
		            } else if (this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {
		                this._direction = Tone.CtrlPattern.Type.Down;
		            }
		            //randoms
		            if (this._type === Tone.CtrlPattern.Type.RandomOnce) {
		                this._shuffleValues();
		            } else if (this._type === Tone.CtrlPattern.Random) {
		                this.index = Math.floor(Math.random() * this.values.length);
		            }
		        }
		    });
		    /**
			 *  Return the next value given the current position
			 *  and pattern.
			 *  @return {*} The next value
			 */
		    Tone.CtrlPattern.prototype.next = function () {
		        var type = this.type;
		        //choose the next index
		        if (type === Tone.CtrlPattern.Type.Up) {
		            this.index++;
		            if (this.index >= this.values.length) {
		                this.index = 0;
		            }
		        } else if (type === Tone.CtrlPattern.Type.Down) {
		            this.index--;
		            if (this.index < 0) {
		                this.index = this.values.length - 1;
		            }
		        } else if (type === Tone.CtrlPattern.Type.UpDown || type === Tone.CtrlPattern.Type.DownUp) {
		            if (this._direction === Tone.CtrlPattern.Type.Up) {
		                this.index++;
		            } else {
		                this.index--;
		            }
		            if (this.index < 0) {
		                this.index = 1;
		                this._direction = Tone.CtrlPattern.Type.Up;
		            } else if (this.index >= this.values.length) {
		                this.index = this.values.length - 2;
		                this._direction = Tone.CtrlPattern.Type.Down;
		            }
		        } else if (type === Tone.CtrlPattern.Type.Random) {
		            this.index = Math.floor(Math.random() * this.values.length);
		        } else if (type === Tone.CtrlPattern.Type.RandomWalk) {
		            if (Math.random() < 0.5) {
		                this.index--;
		                this.index = Math.max(this.index, 0);
		            } else {
		                this.index++;
		                this.index = Math.min(this.index, this.values.length - 1);
		            }
		        } else if (type === Tone.CtrlPattern.Type.RandomOnce) {
		            this.index++;
		            if (this.index >= this.values.length) {
		                this.index = 0;
		                //reshuffle the values for next time
		                this._shuffleValues();
		            }
		        } else if (type === Tone.CtrlPattern.Type.AlternateUp) {
		            if (this._direction === Tone.CtrlPattern.Type.Up) {
		                this.index += 2;
		                this._direction = Tone.CtrlPattern.Type.Down;
		            } else {
		                this.index -= 1;
		                this._direction = Tone.CtrlPattern.Type.Up;
		            }
		            if (this.index >= this.values.length) {
		                this.index = 0;
		                this._direction = Tone.CtrlPattern.Type.Up;
		            }
		        } else if (type === Tone.CtrlPattern.Type.AlternateDown) {
		            if (this._direction === Tone.CtrlPattern.Type.Up) {
		                this.index += 1;
		                this._direction = Tone.CtrlPattern.Type.Down;
		            } else {
		                this.index -= 2;
		                this._direction = Tone.CtrlPattern.Type.Up;
		            }
		            if (this.index < 0) {
		                this.index = this.values.length - 1;
		                this._direction = Tone.CtrlPattern.Type.Down;
		            }
		        }
		        return this.value;
		    };
		    /**
			 *  Shuffles the values and places the results into the _shuffled
			 *  @private
			 */
		    Tone.CtrlPattern.prototype._shuffleValues = function () {
		        var copy = [];
		        this._shuffled = [];
		        for (var i = 0; i < this.values.length; i++) {
		            copy[i] = i;
		        }
		        while (copy.length > 0) {
		            var randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);
		            this._shuffled.push(randVal[0]);
		        }
		    };
		    /**
			 *  Clean up
			 *  @returns {Tone.CtrlPattern} this
			 */
		    Tone.CtrlPattern.prototype.dispose = function () {
		        this._shuffled = null;
		        this.values = null;
		    };
		    return Tone.CtrlPattern;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Choose a random value.
			 *  @extends {Tone}
			 *  @example
			 * var randomWalk = new Tone.CtrlRandom({
			 * 	"min" : 0,
			 * 	"max" : 10,
			 * 	"integer" : true
			 * });
			 * randomWalk.eval();
			 *
			 *  @param {Number|Time=} min The minimum return value.
			 *  @param {Number|Time=} max The maximum return value.
			 */
		    Tone.CtrlRandom = function () {
		        var options = this.optionsObject(arguments, [
		            'min',
		            'max'
		        ], Tone.CtrlRandom.defaults);
		        /**
				 *  The minimum return value
				 *  @type  {Number|Time}
				 */
		        this.min = options.min;
		        /**
				 *  The maximum return value
				 *  @type  {Number|Time}
				 */
		        this.max = options.max;
		        /**
				 *  If the return value should be an integer
				 *  @type  {Boolean}
				 */
		        this.integer = options.integer;
		    };
		    Tone.extend(Tone.CtrlRandom);
		    /**
			 *  The defaults
			 *  @const
			 *  @type  {Object}
			 */
		    Tone.CtrlRandom.defaults = {
		        'min': 0,
		        'max': 1,
		        'integer': false
		    };
		    /**
			 *  Return a random value between min and max. 
			 *  @readOnly
			 *  @memberOf Tone.CtrlRandom#
			 *  @type {*}
			 *  @name value
			 */
		    Object.defineProperty(Tone.CtrlRandom.prototype, 'value', {
		        get: function () {
		            var min = this.toSeconds(this.min);
		            var max = this.toSeconds(this.max);
		            var rand = Math.random();
		            var val = rand * min + (1 - rand) * max;
		            if (this.integer) {
		                val = Math.floor(val);
		            }
		            return val;
		        }
		    });
		    return Tone.CtrlRandom;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Buffer loading and storage. Tone.Buffer is used internally by all 
			 *          classes that make requests for audio files such as Tone.Player,
			 *          Tone.Sampler and Tone.Convolver.
			 *          <br><br>
			 *          Aside from load callbacks from individual buffers, Tone.Buffer 
			 *  		provides static methods which keep track of the loading progress 
			 *  		of all of the buffers. These methods are Tone.Buffer.on("load" / "progress" / "error")
			 *
			 *  @constructor 
			 *  @extends {Tone}
			 *  @param {AudioBuffer|string} url The url to load, or the audio buffer to set. 
			 *  @param {Function=} onload A callback which is invoked after the buffer is loaded. 
			 *                            It's recommended to use Tone.Buffer.onload instead 
			 *                            since it will give you a callback when ALL buffers are loaded.
			 *  @param {Function=} onerror The callback to invoke if there is an error
			 *  @example
			 * var buffer = new Tone.Buffer("path/to/sound.mp3", function(){
			 * 	//the buffer is now available.
			 * 	var buff = buffer.get();
			 * });
			 */
		    Tone.Buffer = function () {
		        var options = this.optionsObject(arguments, [
		            'url',
		            'onload',
		            'onerror'
		        ], Tone.Buffer.defaults);
		        /**
				 *  stores the loaded AudioBuffer
				 *  @type {AudioBuffer}
				 *  @private
				 */
		        this._buffer = null;
		        /**
				 *  indicates if the buffer should be reversed or not
				 *  @type {Boolean}
				 *  @private
				 */
		        this._reversed = options.reverse;
		        /**
				 *  The XHR
				 *  @type  {XMLHttpRequest}
				 *  @private
				 */
		        this._xhr = null;
		        if (options.url instanceof AudioBuffer || options.url instanceof Tone.Buffer) {
		            this.set(options.url);
		            // invoke the onload callback
		            if (options.onload) {
		                options.onload(this);
		            }
		        } else if (this.isString(options.url)) {
		            this.load(options.url, options.onload, options.onerror);
		        }
		    };
		    Tone.extend(Tone.Buffer);
		    /**
			 *  the default parameters
			 *  @type {Object}
			 */
		    Tone.Buffer.defaults = {
		        'url': undefined,
		        'reverse': false
		    };
		    /**
			 *  Pass in an AudioBuffer or Tone.Buffer to set the value
			 *  of this buffer.
			 *  @param {AudioBuffer|Tone.Buffer} buffer the buffer
			 *  @returns {Tone.Buffer} this
			 */
		    Tone.Buffer.prototype.set = function (buffer) {
		        if (buffer instanceof Tone.Buffer) {
		            this._buffer = buffer.get();
		        } else {
		            this._buffer = buffer;
		        }
		        return this;
		    };
		    /**
			 *  @return {AudioBuffer} The audio buffer stored in the object.
			 */
		    Tone.Buffer.prototype.get = function () {
		        return this._buffer;
		    };
		    /**
			 *  Makes an xhr reqest for the selected url then decodes
			 *  the file as an audio buffer. Invokes
			 *  the callback once the audio buffer loads.
			 *  @param {String} url The url of the buffer to load.
			 *                      filetype support depends on the
			 *                      browser.
			 *  @returns {Promise} returns a Promise which resolves with the Tone.Buffer
			 */
		    Tone.Buffer.prototype.load = function (url, onload, onerror) {
		        var promise = new Promise(function (load, error) {
		            this._xhr = Tone.Buffer.load(url, //success
		            function (buff) {
		                this._xhr = null;
		                this.set(buff);
		                load(this);
		                if (onload) {
		                    onload(this);
		                }
		            }.bind(this), //error
		            function (err) {
		                this._xhr = null;
		                error(err);
		                if (onerror) {
		                    onerror(err);
		                }
		            }.bind(this));
		        }.bind(this));
		        return promise;
		    };
		    /**
			 *  dispose and disconnect
			 *  @returns {Tone.Buffer} this
			 */
		    Tone.Buffer.prototype.dispose = function () {
		        Tone.Emitter.prototype.dispose.call(this);
		        this._buffer = null;
		        if (this._xhr) {
		            Tone.Buffer._currentDownloads--;
		            this._xhr.abort();
		            this._xhr = null;
		        }
		        return this;
		    };
		    /**
			 * If the buffer is loaded or not
			 * @memberOf Tone.Buffer#
			 * @type {Boolean}
			 * @name loaded
			 * @readOnly
			 */
		    Object.defineProperty(Tone.Buffer.prototype, 'loaded', {
		        get: function () {
		            return this.length > 0;
		        }
		    });
		    /**
			 * The duration of the buffer. 
			 * @memberOf Tone.Buffer#
			 * @type {Number}
			 * @name duration
			 * @readOnly
			 */
		    Object.defineProperty(Tone.Buffer.prototype, 'duration', {
		        get: function () {
		            if (this._buffer) {
		                return this._buffer.duration;
		            } else {
		                return 0;
		            }
		        }
		    });
		    /**
			 * The length of the buffer in samples
			 * @memberOf Tone.Buffer#
			 * @type {Number}
			 * @name length
			 * @readOnly
			 */
		    Object.defineProperty(Tone.Buffer.prototype, 'length', {
		        get: function () {
		            if (this._buffer) {
		                return this._buffer.length;
		            } else {
		                return 0;
		            }
		        }
		    });
		    /**
			 * The number of discrete audio channels. Returns 0 if no buffer
			 * is loaded.
			 * @memberOf Tone.Buffer#
			 * @type {Number}
			 * @name numberOfChannels
			 * @readOnly
			 */
		    Object.defineProperty(Tone.Buffer.prototype, 'numberOfChannels', {
		        get: function () {
		            if (this._buffer) {
		                return this._buffer.numberOfChannels;
		            } else {
		                return 0;
		            }
		        }
		    });
		    /**
			 *  Set the audio buffer from the array
			 *  @param {Float32Array} array The array to fill the audio buffer
			 *  @param {Number} [channels=1] The number of channels contained in the array. 
			 *                               If the channel is more than 1, the input array
			 *                               is expected to be a multidimensional array
			 *                               with dimensions equal to the number of channels.
			 *  @return {Tone.Buffer} this
			 */
		    Tone.Buffer.prototype.fromArray = function (array) {
		        var isMultidimensional = array[0].length > 0;
		        var channels = isMultidimensional ? array.length : 1;
		        var len = isMultidimensional ? array[0].length : array.length;
		        var buffer = this.context.createBuffer(channels, len, this.context.sampleRate);
		        if (!isMultidimensional && channels === 1) {
		            array = [array];
		        }
		        for (var c = 0; c < channels; c++) {
		            if (this.isFunction(buffer.copyToChannel)) {
		                buffer.copyToChannel(array[c], c);
		            } else {
		                var channel = buffer.getChannelData(c);
		                var channelArray = array[c];
		                for (var i = 0; i < channelArray.length; i++) {
		                    channel[i] = channelArray[i];
		                }
		            }
		        }
		        this._buffer = buffer;
		        return this;
		    };
		    /**
			 * 	Get the buffer as an array. Single channel buffers will return a 1-dimensional 
			 * 	Float32Array, and multichannel buffers will return multidimensional arrays.
			 *  @param {Number=} channel Optionally only copy a single channel from the array.
			 *  @return {Array}
			 */
		    Tone.Buffer.prototype.toArray = function (channel) {
		        if (this.isNumber(channel)) {
		            return this._buffer.getChannelData(channel);
		        } else {
		            var ret = [];
		            for (var c = 0; c < this.numberOfChannels; c++) {
		                ret[c] = new Float32Array(this.length);
		                if (this.isFunction(this._buffer.copyFromChannel)) {
		                    this._buffer.copyFromChannel(ret[c], c);
		                } else {
		                    var channelData = this._buffer.getChannelData(c);
		                    var retArray = ret[c];
		                    for (var i = 0; i < channelData.length; i++) {
		                        retArray[i] = channelData[i];
		                    }
		                }
		            }
		            if (ret.length === 1) {
		                return ret[0];
		            } else {
		                return ret;
		            }
		        }
		    };
		    /**
			 *  Cut a subsection of the array and return a buffer of the
			 *  subsection. Does not modify the original buffer
			 *  @param {Time} start The time to start the slice
			 *  @param {Time=} end The end time to slice. If none is given
			 *                     will default to the end of the buffer
			 *  @return {Tone.Buffer} this
			 */
		    Tone.Buffer.prototype.slice = function (start, end) {
		        end = this.defaultArg(end, this.duration);
		        var startSamples = Math.floor(this.context.sampleRate * this.toSeconds(start));
		        var endSamples = Math.floor(this.context.sampleRate * this.toSeconds(end));
		        var replacement = [];
		        for (var i = 0; i < this.numberOfChannels; i++) {
		            replacement[i] = this.toArray(i).slice(startSamples, endSamples);
		        }
		        var retBuffer = new Tone.Buffer().fromArray(replacement);
		        return retBuffer;
		    };
		    /**
			 *  Reverse the buffer.
			 *  @private
			 *  @return {Tone.Buffer} this
			 */
		    Tone.Buffer.prototype._reverse = function () {
		        if (this.loaded) {
		            for (var i = 0; i < this._buffer.numberOfChannels; i++) {
		                Array.prototype.reverse.call(this._buffer.getChannelData(i));
		            }
		        }
		        return this;
		    };
		    /**
			 * Reverse the buffer.
			 * @memberOf Tone.Buffer#
			 * @type {Boolean}
			 * @name reverse
			 */
		    Object.defineProperty(Tone.Buffer.prototype, 'reverse', {
		        get: function () {
		            return this._reversed;
		        },
		        set: function (rev) {
		            if (this._reversed !== rev) {
		                this._reversed = rev;
		                this._reverse();
		            }
		        }
		    });
		    ///////////////////////////////////////////////////////////////////////////
		    // STATIC METHODS
		    ///////////////////////////////////////////////////////////////////////////
		    //statically inherits Emitter methods
		    Tone.Emitter.mixin(Tone.Buffer);
		    /**
			 *  the static queue for all of the xhr requests
			 *  @type {Array}
			 *  @private
			 */
		    Tone.Buffer._downloadQueue = [];
		    /**
			 *  the total number of downloads
			 *  @type {Number}
			 *  @private
			 */
		    Tone.Buffer._currentDownloads = 0;
		    /**
			 *  A path which is prefixed before every url.
			 *  @type  {String}
			 *  @static
			 */
		    Tone.Buffer.baseUrl = '';
		    /**
			 *  Loads a url using XMLHttpRequest.
			 *  @param {String} url
			 *  @param {Function} onload
			 *  @param {Function} onerror
			 *  @param {Function} onprogress
			 *  @return {XMLHttpRequest}
			 */
		    Tone.Buffer.load = function (url, onload, onerror) {
		        //default
		        onload = onload || Tone.noOp;
		        function onError(e) {
		            Tone.Buffer._currentDownloads--;
		            if (onerror) {
		                onerror(e);
		            } else {
		                throw new Error(e);
		            }
		        }
		        function onProgress() {
		            //calculate the progress
		            var totalProgress = 0;
		            for (var i = 0; i < Tone.Buffer._downloadQueue.length; i++) {
		                totalProgress += Tone.Buffer._downloadQueue[i].progress;
		            }
		            Tone.Buffer.emit('progress', totalProgress / Tone.Buffer._downloadQueue.length);
		        }
		        var request = new XMLHttpRequest();
		        request.open('GET', Tone.Buffer.baseUrl + url, true);
		        request.responseType = 'arraybuffer';
		        //start out as 0
		        request.progress = 0;
		        Tone.Buffer._currentDownloads++;
		        Tone.Buffer._downloadQueue.push(request);
		        request.addEventListener('load', function () {
		            if (request.status === 200) {
		                Tone.context.decodeAudioData(request.response, function (buff) {
		                    request.progress = 1;
		                    onProgress();
		                    onload(buff);
		                    Tone.Buffer._currentDownloads--;
		                    if (Tone.Buffer._currentDownloads === 0) {
		                        // clear the downloads
		                        Tone.Buffer._downloadQueue = [];
		                        //emit the event at the end
		                        Tone.Buffer.emit('load');
		                    }
		                }, function () {
		                    onError('Tone.Buffer: could not decode audio data: ' + url);
		                });
		            } else {
		                onError('Tone.Buffer: could not locate file: ' + url);
		            }
		        });
		        request.addEventListener('error', onError);
		        request.addEventListener('progress', function (event) {
		            if (event.lengthComputable) {
		                //only go to 95%, the last 5% is when the audio is decoded
		                request.progress = event.loaded / event.total * 0.95;
		                onProgress();
		            }
		        });
		        request.send();
		        return request;
		    };
		    /**
			 *  Checks a url's extension to see if the current browser can play that file type.
			 *  @param {String} url The url/extension to test
			 *  @return {Boolean} If the file extension can be played
			 *  @static
			 *  @example
			 * Tone.Buffer.supportsType("wav"); //returns true
			 * Tone.Buffer.supportsType("path/to/file.wav"); //returns true
			 */
		    Tone.Buffer.supportsType = function (url) {
		        var extension = url.split('.');
		        extension = extension[extension.length - 1];
		        var response = document.createElement('audio').canPlayType('audio/' + extension);
		        return response !== '';
		    };
		    return Tone.Buffer;
		});
		Module(function (Tone) {
		    /**
			 *  @class A data structure for holding multiple buffers.
			 *  
			 *  @param  {Object|Array}    urls      An object literal or array
			 *                                      of urls to load.
			 *  @param  {Function=}  callback  The callback to invoke when
			 *                                 the buffers are loaded. 
			 *  @extends {Tone}
			 *  @example
			 * //load a whole bank of piano samples
			 * var pianoSamples = new Tone.Buffers({
			 * 	"C4" : "path/to/C4.mp3"
			 * 	"C#4" : "path/to/C#4.mp3"
			 * 	"D4" : "path/to/D4.mp3"
			 * 	"D#4" : "path/to/D#4.mp3"
			 * 	...
			 * }, function(){
			 * 	//play one of the samples when they all load
			 * 	player.buffer = pianoSamples.get("C4");
			 * 	player.start();
			 * });
			 * 
			 */
		    Tone.Buffers = function (urls, onload, baseUrl) {
		        /**
				 *  All of the buffers
				 *  @type  {Object}
				 *  @private
				 */
		        this._buffers = {};
		        /**
				 *  A path which is prefixed before every url.
				 *  @type  {String}
				 */
		        this.baseUrl = this.defaultArg(baseUrl, '');
		        urls = this._flattenUrls(urls);
		        this._loadingCount = 0;
		        //add each one
		        for (var key in urls) {
		            this._loadingCount++;
		            this.add(key, urls[key], this._bufferLoaded.bind(this, onload));
		        }
		    };
		    Tone.extend(Tone.Buffers);
		    /**
			 *  True if the buffers object has a buffer by that name.
			 *  @param  {String|Number}  name  The key or index of the 
			 *                                 buffer.
			 *  @return  {Boolean}
			 */
		    Tone.Buffers.prototype.has = function (name) {
		        return this._buffers.hasOwnProperty(name);
		    };
		    /**
			 *  Get a buffer by name. If an array was loaded, 
			 *  then use the array index.
			 *  @param  {String|Number}  name  The key or index of the 
			 *                                 buffer.
			 *  @return  {Tone.Buffer}
			 */
		    Tone.Buffers.prototype.get = function (name) {
		        if (this.has(name)) {
		            return this._buffers[name];
		        } else {
		            throw new Error('Tone.Buffers: no buffer named ' + name);
		        }
		    };
		    /**
			 *  A buffer was loaded. decrement the counter.
			 *  @param  {Function}  callback 
			 *  @private
			 */
		    Tone.Buffers.prototype._bufferLoaded = function (callback) {
		        this._loadingCount--;
		        if (this._loadingCount === 0 && callback) {
		            callback(this);
		        }
		    };
		    /**
			 * If the buffers are loaded or not
			 * @memberOf Tone.Buffers#
			 * @type {Boolean}
			 * @name loaded
			 * @readOnly
			 */
		    Object.defineProperty(Tone.Buffers.prototype, 'loaded', {
		        get: function () {
		            var isLoaded = true;
		            for (var buffName in this._buffers) {
		                var buff = this.get(buffName);
		                isLoaded = isLoaded && buff.loaded;
		            }
		            return isLoaded;
		        }
		    });
		    /**
			 *  Add a buffer by name and url to the Buffers
			 *  @param  {String}    name      A unique name to give
			 *                                the buffer
			 *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer, 
			 *                                                 or a buffer which will be added
			 *                                                 with the given name.
			 *  @param  {Function=}  callback  The callback to invoke 
			 *                                 when the url is loaded.
			 */
		    Tone.Buffers.prototype.add = function (name, url, callback) {
		        callback = this.defaultArg(callback, Tone.noOp);
		        if (url instanceof Tone.Buffer) {
		            this._buffers[name] = url;
		            callback(this);
		        } else if (url instanceof AudioBuffer) {
		            this._buffers[name] = new Tone.Buffer(url);
		            callback(this);
		        } else if (this.isString(url)) {
		            this._buffers[name] = new Tone.Buffer(this.baseUrl + url, callback);
		        }
		        return this;
		    };
		    /**
			 *  Flatten an object into a single depth object. 
			 *  thanks to https://gist.github.com/penguinboy/762197
			 *  @param   {Object} ob 	
			 *  @return  {Object}    
			 *  @private
			 */
		    Tone.Buffers.prototype._flattenUrls = function (ob) {
		        var toReturn = {};
		        for (var i in ob) {
		            if (!ob.hasOwnProperty(i))
		                continue;
		            if (this.isObject(ob[i])) {
		                var flatObject = this._flattenUrls(ob[i]);
		                for (var x in flatObject) {
		                    if (!flatObject.hasOwnProperty(x))
		                        continue;
		                    toReturn[i + '.' + x] = flatObject[x];
		                }
		            } else {
		                toReturn[i] = ob[i];
		            }
		        }
		        return toReturn;
		    };
		    /**
			 *  Clean up.
			 *  @return  {Tone.Buffers} this
			 */
		    Tone.Buffers.prototype.dispose = function () {
		        for (var name in this._buffers) {
		            this._buffers[name].dispose();
		        }
		        this._buffers = null;
		        return this;
		    };
		    return Tone.Buffers;
		});
		Module(function (Tone) {
		    
		    /**
			 *  buses are another way of routing audio
			 *
			 *  augments Tone.prototype to include send and recieve
			 */
		    /**
			  *  All of the routes
			  *  
			  *  @type {Object}
			  *  @static
			  *  @private
			  */
		    var Buses = {};
		    /**
			 *  Send this signal to the channel name. 
			 *  @param  {string} channelName A named channel to send the signal to.
			 *  @param  {Decibels} amount The amount of the source to send to the bus. 
			 *  @return {GainNode} The gain node which connects this node to the desired channel. 
			 *                     Can be used to adjust the levels of the send.
			 *  @example
			 * source.send("reverb", -12);
			 */
		    Tone.prototype.send = function (channelName, amount) {
		        if (!Buses.hasOwnProperty(channelName)) {
		            Buses[channelName] = this.context.createGain();
		        }
		        amount = this.defaultArg(amount, 0);
		        var sendKnob = new Tone.Gain(amount, Tone.Type.Decibels);
		        this.output.chain(sendKnob, Buses[channelName]);
		        return sendKnob;
		    };
		    /**
			 *  Recieve the input from the desired channelName to the input
			 *
			 *  @param  {string} channelName A named channel to send the signal to.
			 *  @param {AudioNode} [input] If no input is selected, the
			 *                                         input of the current node is
			 *                                         chosen. 
			 *  @returns {Tone} this
			 *  @example
			 * reverbEffect.receive("reverb");
			 */
		    Tone.prototype.receive = function (channelName, input) {
		        if (!Buses.hasOwnProperty(channelName)) {
		            Buses[channelName] = this.context.createGain();
		        }
		        if (this.isUndef(input)) {
		            input = this.input;
		        }
		        Buses[channelName].connect(input);
		        return this;
		    };
		    //remove all the send/receives when a new audio context is passed in
		    Tone._initAudioContext(function () {
		        Buses = {};
		    });
		    return Tone;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Both Tone.Panner3D and Tone.Listener have a position in 3D space 
			 *          using a right-handed cartesian coordinate system. 
			 *          The units used in the coordinate system are not defined; 
			 *          these coordinates are independent/invariant of any particular 
			 *          units such as meters or feet. Tone.Panner3D objects have an forward 
			 *          vector representing the direction the sound is projecting. Additionally, 
			 *          they have a sound cone representing how directional the sound is. 
			 *          For example, the sound could be omnidirectional, in which case it would 
			 *          be heard anywhere regardless of its forward, or it can be more directional 
			 *          and heard only if it is facing the listener. Tone.Listener objects 
			 *          (representing a person's ears) have an forward and up vector 
			 *          representing in which direction the person is facing. Because both the 
			 *          source stream and the listener can be moving, they both have a velocity 
			 *          vector representing both the speed and direction of movement. Taken together, 
			 *          these two velocities can be used to generate a doppler shift effect which changes the pitch.
			 *          <br><br>
			 *          Note: the position of the Listener will have no effect on nodes not connected to a Tone.Panner3D
			 *  
			 *  @constructor
			 *  @extends {Tone}
			 *  @singleton
			 *  @param {Number} positionX The initial x position.
			 *  @param {Number} positionY The initial y position.
			 *  @param {Number} positionZ The initial z position.
			 */
		    Tone.Listener = function () {
		        var options = this.optionsObject(arguments, [
		            'positionX',
		            'positionY',
		            'positionZ'
		        ], ListenerConstructor.defaults);
		        /**
				 *  The listener node
				 *  @type {AudioListener}
				 *  @private
				 */
		        this._listener = this.context.listener;
		        /**
				 *  Holds the current forward orientation
				 *  @type  {Array}
				 *  @private
				 */
		        this._orientation = [
		            options.forwardX,
		            options.forwardY,
		            options.forwardZ,
		            options.upX,
		            options.upY,
		            options.upZ
		        ];
		        /**
				 *  Holds the current position
				 *  @type  {Array}
				 *  @private
				 */
		        this._position = [
		            options.positionX,
		            options.positionY,
		            options.positionZ
		        ];
		        // set the default position/forward
		        this.forwardX = options.forwardX;
		        this.forwardY = options.forwardY;
		        this.forwardZ = options.forwardZ;
		        this.upX = options.upX;
		        this.upY = options.upY;
		        this.upZ = options.upZ;
		        this.positionX = options.positionX;
		        this.positionY = options.positionY;
		        this.positionZ = options.positionZ;
		    };
		    Tone.extend(Tone.Listener);
		    /**
			 *  the default parameters
			 *  @static
			 *  @const
			 *  @type {Object}
			 *  Defaults according to the specification
			 */
		    Tone.Listener.defaults = {
		        'positionX': 0,
		        'positionY': 0,
		        'positionZ': 0,
		        'forwardX': 0,
		        'forwardY': 0,
		        'forwardZ': 1,
		        'upX': 0,
		        'upY': 1,
		        'upZ': 0
		    };
		    Tone.Listener.prototype._rampTimeConstant = 0.3;
		    /**
			 *  Sets the position of the listener in 3d space.	
			 *  @param  {Number}  x
			 *  @param  {Number}  y
			 *  @param  {Number}  z
			 *  @return {Tone.Listener} this
			 */
		    Tone.Listener.prototype.setPosition = function (x, y, z) {
		        if (this._listener.positionX) {
		            var now = this.now();
		            this._listener.positionX.setTargetAtTime(x, now, this._rampTimeConstant);
		            this._listener.positionY.setTargetAtTime(y, now, this._rampTimeConstant);
		            this._listener.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);
		        } else {
		            this._listener.setPosition(x, y, z);
		        }
		        this._position = Array.prototype.slice.call(arguments);
		        return this;
		    };
		    /**
			 *  Sets the orientation of the listener using two vectors, the forward
			 *  vector (which direction the listener is facing) and the up vector 
			 *  (which the up direction of the listener). An up vector
			 *  of 0, 0, 1 is equivalent to the listener standing up in the Z direction. 
			 *  @param  {Number}  x
			 *  @param  {Number}  y
			 *  @param  {Number}  z
			 *  @param  {Number}  upX
			 *  @param  {Number}  upY
			 *  @param  {Number}  upZ
			 *  @return {Tone.Listener} this
			 */
		    Tone.Listener.prototype.setOrientation = function (x, y, z, upX, upY, upZ) {
		        if (this._listener.forwardX) {
		            var now = this.now();
		            this._listener.forwardX.setTargetAtTime(x, now, this._rampTimeConstant);
		            this._listener.forwardY.setTargetAtTime(y, now, this._rampTimeConstant);
		            this._listener.forwardZ.setTargetAtTime(z, now, this._rampTimeConstant);
		            this._listener.upX.setTargetAtTime(upX, now, this._rampTimeConstant);
		            this._listener.upY.setTargetAtTime(upY, now, this._rampTimeConstant);
		            this._listener.upZ.setTargetAtTime(upZ, now, this._rampTimeConstant);
		        } else {
		            this._listener.setOrientation(x, y, z, upX, upY, upZ);
		        }
		        this._orientation = Array.prototype.slice.call(arguments);
		        return this;
		    };
		    /**
			 *  The x position of the panner object.
			 *  @type {Number}
			 *  @memberOf Tone.Listener#
			 *  @name positionX
			 */
		    Object.defineProperty(Tone.Listener.prototype, 'positionX', {
		        set: function (pos) {
		            this._position[0] = pos;
		            this.setPosition.apply(this, this._position);
		        },
		        get: function () {
		            return this._position[0];
		        }
		    });
		    /**
			 *  The y position of the panner object.
			 *  @type {Number}
			 *  @memberOf Tone.Listener#
			 *  @name positionY
			 */
		    Object.defineProperty(Tone.Listener.prototype, 'positionY', {
		        set: function (pos) {
		            this._position[1] = pos;
		            this.setPosition.apply(this, this._position);
		        },
		        get: function () {
		            return this._position[1];
		        }
		    });
		    /**
			 *  The z position of the panner object.
			 *  @type {Number}
			 *  @memberOf Tone.Listener#
			 *  @name positionZ
			 */
		    Object.defineProperty(Tone.Listener.prototype, 'positionZ', {
		        set: function (pos) {
		            this._position[2] = pos;
		            this.setPosition.apply(this, this._position);
		        },
		        get: function () {
		            return this._position[2];
		        }
		    });
		    /**
			 *  The x coordinate of the listeners front direction. i.e. 
			 *  which way they are facing.
			 *  @type {Number}
			 *  @memberOf Tone.Listener#
			 *  @name forwardX
			 */
		    Object.defineProperty(Tone.Listener.prototype, 'forwardX', {
		        set: function (pos) {
		            this._orientation[0] = pos;
		            this.setOrientation.apply(this, this._orientation);
		        },
		        get: function () {
		            return this._orientation[0];
		        }
		    });
		    /**
			 *  The y coordinate of the listeners front direction. i.e. 
			 *  which way they are facing.
			 *  @type {Number}
			 *  @memberOf Tone.Listener#
			 *  @name forwardY
			 */
		    Object.defineProperty(Tone.Listener.prototype, 'forwardY', {
		        set: function (pos) {
		            this._orientation[1] = pos;
		            this.setOrientation.apply(this, this._orientation);
		        },
		        get: function () {
		            return this._orientation[1];
		        }
		    });
		    /**
			 *  The z coordinate of the listeners front direction. i.e. 
			 *  which way they are facing.
			 *  @type {Number}
			 *  @memberOf Tone.Listener#
			 *  @name forwardZ
			 */
		    Object.defineProperty(Tone.Listener.prototype, 'forwardZ', {
		        set: function (pos) {
		            this._orientation[2] = pos;
		            this.setOrientation.apply(this, this._orientation);
		        },
		        get: function () {
		            return this._orientation[2];
		        }
		    });
		    /**
			 *  The x coordinate of the listener's up direction. i.e.
			 *  the direction the listener is standing in.
			 *  @type {Number}
			 *  @memberOf Tone.Listener#
			 *  @name upX
			 */
		    Object.defineProperty(Tone.Listener.prototype, 'upX', {
		        set: function (pos) {
		            this._orientation[3] = pos;
		            this.setOrientation.apply(this, this._orientation);
		        },
		        get: function () {
		            return this._orientation[3];
		        }
		    });
		    /**
			 *  The y coordinate of the listener's up direction. i.e.
			 *  the direction the listener is standing in.
			 *  @type {Number}
			 *  @memberOf Tone.Listener#
			 *  @name upY
			 */
		    Object.defineProperty(Tone.Listener.prototype, 'upY', {
		        set: function (pos) {
		            this._orientation[4] = pos;
		            this.setOrientation.apply(this, this._orientation);
		        },
		        get: function () {
		            return this._orientation[4];
		        }
		    });
		    /**
			 *  The z coordinate of the listener's up direction. i.e.
			 *  the direction the listener is standing in.
			 *  @type {Number}
			 *  @memberOf Tone.Listener#
			 *  @name upZ
			 */
		    Object.defineProperty(Tone.Listener.prototype, 'upZ', {
		        set: function (pos) {
		            this._orientation[5] = pos;
		            this.setOrientation.apply(this, this._orientation);
		        },
		        get: function () {
		            return this._orientation[5];
		        }
		    });
		    /**
			 *  Clean up.
			 *  @returns {Tone.Listener} this
			 */
		    Tone.Listener.prototype.dispose = function () {
		        this._listener.disconnect();
		        this._listener = null;
		        this._orientation = null;
		        this._position = null;
		        return this;
		    };
		    //SINGLETON SETUP
		    var ListenerConstructor = Tone.Listener;
		    Tone._initAudioContext(function () {
		        if (typeof Tone.Listener === 'function') {
		            //a single listener object
		            Tone.Listener = new Tone.Listener();
		        } else {
		            //make new Listener insides
		            ListenerConstructor.call(Tone.Listener);
		        }
		    });
		    //END SINGLETON SETUP
		    return Tone.Listener;
		});
		Module(function (Tone) {
		    
		    /**
			 * 	@class  Tone.Effect is the base class for effects. Connect the effect between
			 * 	        the effectSend and effectReturn GainNodes, then control the amount of
			 * 	        effect which goes to the output using the wet control.
			 *
			 *  @constructor
			 *  @extends {Tone}
			 *  @param {NormalRange|Object} [wet] The starting wet value. 
			 */
		    Tone.Effect = function () {
		        this.createInsOuts(1, 1);
		        //get all of the defaults
		        var options = this.optionsObject(arguments, ['wet'], Tone.Effect.defaults);
		        /**
				 *  the drywet knob to control the amount of effect
				 *  @type {Tone.CrossFade}
				 *  @private
				 */
		        this._dryWet = new Tone.CrossFade(options.wet);
		        /**
				 *  The wet control is how much of the effected
				 *  will pass through to the output. 1 = 100% effected
				 *  signal, 0 = 100% dry signal. 
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.wet = this._dryWet.fade;
		        /**
				 *  connect the effectSend to the input of hte effect
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this.effectSend = new Tone.Gain();
		        /**
				 *  connect the output of the effect to the effectReturn
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this.effectReturn = new Tone.Gain();
		        //connections
		        this.input.connect(this._dryWet.a);
		        this.input.connect(this.effectSend);
		        this.effectReturn.connect(this._dryWet.b);
		        this._dryWet.connect(this.output);
		        this._readOnly(['wet']);
		    };
		    Tone.extend(Tone.Effect);
		    /**
			 *  @static
			 *  @type {Object}
			 */
		    Tone.Effect.defaults = { 'wet': 1 };
		    /**
			 *  chains the effect in between the effectSend and effectReturn
			 *  @param  {Tone} effect
			 *  @private
			 *  @returns {Tone.Effect} this
			 */
		    Tone.Effect.prototype.connectEffect = function (effect) {
		        this.effectSend.chain(effect, this.effectReturn);
		        return this;
		    };
		    /**
			 *  Clean up. 
			 *  @returns {Tone.Effect} this
			 */
		    Tone.Effect.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._dryWet.dispose();
		        this._dryWet = null;
		        this.effectSend.dispose();
		        this.effectSend = null;
		        this.effectReturn.dispose();
		        this.effectReturn = null;
		        this._writable(['wet']);
		        this.wet = null;
		        return this;
		    };
		    return Tone.Effect;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.
			 *         Setting the LFO rate and depth allows for control over the filter modulation rate 
			 *         and depth.
			 *
			 *  @constructor
			 *  @extends {Tone.Effect}
			 *  @param {Time|Object} [frequency] The rate of the LFO.
			 *  @param {Frequency=} baseFrequency The lower value of the LFOs oscillation
		 	 *  @param {Frequency=} octaves The number of octaves above the baseFrequency
			 *  @example
			 * //create an autofilter and start it's LFO
			 * var autoFilter = new Tone.AutoFilter("4n").toMaster().start();
			 * //route an oscillator through the filter and start it
			 * var oscillator = new Tone.Oscillator().connect(autoFilter).start();
			 */
		    Tone.AutoFilter = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'baseFrequency',
		            'octaves'
		        ], Tone.AutoFilter.defaults);
		        Tone.Effect.call(this, options);
		        /**
				 *  the lfo which drives the filter cutoff
				 *  @type {Tone.LFO}
				 *  @private
				 */
		        this._lfo = new Tone.LFO({
		            'frequency': options.frequency,
		            'amplitude': options.depth
		        });
		        /**
				 * The range of the filter modulating between the min and max frequency. 
				 * 0 = no modulation. 1 = full modulation.
				 * @type {NormalRange}
				 * @signal
				 */
		        this.depth = this._lfo.amplitude;
		        /**
				 * How fast the filter modulates between min and max. 
				 * @type {Frequency}
				 * @signal
				 */
		        this.frequency = this._lfo.frequency;
		        /**
				 *  The filter node
				 *  @type {Tone.Filter}
				 */
		        this.filter = new Tone.Filter(options.filter);
		        /**
				 *  The octaves placeholder
				 *  @type {Positive}
				 *  @private
				 */
		        this._octaves = 0;
		        //connections
		        this.connectEffect(this.filter);
		        this._lfo.connect(this.filter.frequency);
		        this.type = options.type;
		        this._readOnly([
		            'frequency',
		            'depth'
		        ]);
		        this.octaves = options.octaves;
		        this.baseFrequency = options.baseFrequency;
		    };
		    //extend Effect
		    Tone.extend(Tone.AutoFilter, Tone.Effect);
		    /**
			 *  defaults
			 *  @static
			 *  @type {Object}
			 */
		    Tone.AutoFilter.defaults = {
		        'frequency': 1,
		        'type': 'sine',
		        'depth': 1,
		        'baseFrequency': 200,
		        'octaves': 2.6,
		        'filter': {
		            'type': 'lowpass',
		            'rolloff': -12,
		            'Q': 1
		        }
		    };
		    /**
			 * Start the effect.
			 * @param {Time} [time=now] When the LFO will start. 
			 * @returns {Tone.AutoFilter} this
			 */
		    Tone.AutoFilter.prototype.start = function (time) {
		        this._lfo.start(time);
		        return this;
		    };
		    /**
			 * Stop the effect.
			 * @param {Time} [time=now] When the LFO will stop. 
			 * @returns {Tone.AutoFilter} this
			 */
		    Tone.AutoFilter.prototype.stop = function (time) {
		        this._lfo.stop(time);
		        return this;
		    };
		    /**
			 * Sync the filter to the transport.
			 * @param {Time} [delay=0] Delay time before starting the effect after the
			 *                               Transport has started. 
			 * @returns {Tone.AutoFilter} this
			 */
		    Tone.AutoFilter.prototype.sync = function (delay) {
		        this._lfo.sync(delay);
		        return this;
		    };
		    /**
			 * Unsync the filter from the transport.
			 * @returns {Tone.AutoFilter} this
			 */
		    Tone.AutoFilter.prototype.unsync = function () {
		        this._lfo.unsync();
		        return this;
		    };
		    /**
			 * Type of oscillator attached to the AutoFilter. 
			 * Possible values: "sine", "square", "triangle", "sawtooth".
			 * @memberOf Tone.AutoFilter#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.AutoFilter.prototype, 'type', {
		        get: function () {
		            return this._lfo.type;
		        },
		        set: function (type) {
		            this._lfo.type = type;
		        }
		    });
		    /**
			 * The minimum value of the filter's cutoff frequency.
			 * @memberOf Tone.AutoFilter#
			 * @type {Frequency}
			 * @name min
			 */
		    Object.defineProperty(Tone.AutoFilter.prototype, 'baseFrequency', {
		        get: function () {
		            return this._lfo.min;
		        },
		        set: function (freq) {
		            this._lfo.min = this.toFrequency(freq);
		            //and set the max
		            this.octaves = this._octaves;
		        }
		    });
		    /**
			 * The maximum value of the filter's cutoff frequency. 
			 * @memberOf Tone.AutoFilter#
			 * @type {Positive}
			 * @name octaves
			 */
		    Object.defineProperty(Tone.AutoFilter.prototype, 'octaves', {
		        get: function () {
		            return this._octaves;
		        },
		        set: function (oct) {
		            this._octaves = oct;
		            this._lfo.max = this.baseFrequency * Math.pow(2, oct);
		        }
		    });
		    /**
			 *  Clean up. 
			 *  @returns {Tone.AutoFilter} this
			 */
		    Tone.AutoFilter.prototype.dispose = function () {
		        Tone.Effect.prototype.dispose.call(this);
		        this._lfo.dispose();
		        this._lfo = null;
		        this.filter.dispose();
		        this.filter = null;
		        this._writable([
		            'frequency',
		            'depth'
		        ]);
		        this.frequency = null;
		        this.depth = null;
		        return this;
		    };
		    return Tone.AutoFilter;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.AutoPanner is a Tone.Panner with an LFO connected to the pan amount. 
			 *         More on using autopanners [here](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).
			 *
			 *  @constructor
			 *  @extends {Tone.Effect}
			 *  @param {Frequency|Object} [frequency] Rate of left-right oscillation. 
			 *  @example
			 * //create an autopanner and start it's LFO
			 * var autoPanner = new Tone.AutoPanner("4n").toMaster().start();
			 * //route an oscillator through the panner and start it
			 * var oscillator = new Tone.Oscillator().connect(autoPanner).start();
			 */
		    Tone.AutoPanner = function () {
		        var options = this.optionsObject(arguments, ['frequency'], Tone.AutoPanner.defaults);
		        Tone.Effect.call(this, options);
		        /**
				 *  the lfo which drives the panning
				 *  @type {Tone.LFO}
				 *  @private
				 */
		        this._lfo = new Tone.LFO({
		            'frequency': options.frequency,
		            'amplitude': options.depth,
		            'min': -1,
		            'max': 1
		        });
		        /**
				 * The amount of panning between left and right. 
				 * 0 = always center. 1 = full range between left and right. 
				 * @type {NormalRange}
				 * @signal
				 */
		        this.depth = this._lfo.amplitude;
		        /**
				 *  the panner node which does the panning
				 *  @type {Tone.Panner}
				 *  @private
				 */
		        this._panner = new Tone.Panner();
		        /**
				 * How fast the panner modulates between left and right. 
				 * @type {Frequency}
				 * @signal
				 */
		        this.frequency = this._lfo.frequency;
		        //connections
		        this.connectEffect(this._panner);
		        this._lfo.connect(this._panner.pan);
		        this.type = options.type;
		        this._readOnly([
		            'depth',
		            'frequency'
		        ]);
		    };
		    //extend Effect
		    Tone.extend(Tone.AutoPanner, Tone.Effect);
		    /**
			 *  defaults
			 *  @static
			 *  @type {Object}
			 */
		    Tone.AutoPanner.defaults = {
		        'frequency': 1,
		        'type': 'sine',
		        'depth': 1
		    };
		    /**
			 * Start the effect.
			 * @param {Time} [time=now] When the LFO will start. 
			 * @returns {Tone.AutoPanner} this
			 */
		    Tone.AutoPanner.prototype.start = function (time) {
		        this._lfo.start(time);
		        return this;
		    };
		    /**
			 * Stop the effect.
			 * @param {Time} [time=now] When the LFO will stop. 
			 * @returns {Tone.AutoPanner} this
			 */
		    Tone.AutoPanner.prototype.stop = function (time) {
		        this._lfo.stop(time);
		        return this;
		    };
		    /**
			 * Sync the panner to the transport.
			 * @param {Time} [delay=0] Delay time before starting the effect after the
			 *                               Transport has started. 
			 * @returns {Tone.AutoPanner} this
			 */
		    Tone.AutoPanner.prototype.sync = function (delay) {
		        this._lfo.sync(delay);
		        return this;
		    };
		    /**
			 * Unsync the panner from the transport
			 * @returns {Tone.AutoPanner} this
			 */
		    Tone.AutoPanner.prototype.unsync = function () {
		        this._lfo.unsync();
		        return this;
		    };
		    /**
			 * Type of oscillator attached to the AutoFilter. 
			 * Possible values: "sine", "square", "triangle", "sawtooth".
			 * @memberOf Tone.AutoFilter#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.AutoPanner.prototype, 'type', {
		        get: function () {
		            return this._lfo.type;
		        },
		        set: function (type) {
		            this._lfo.type = type;
		        }
		    });
		    /**
			 *  clean up
			 *  @returns {Tone.AutoPanner} this
			 */
		    Tone.AutoPanner.prototype.dispose = function () {
		        Tone.Effect.prototype.dispose.call(this);
		        this._lfo.dispose();
		        this._lfo = null;
		        this._panner.dispose();
		        this._panner = null;
		        this._writable([
		            'depth',
		            'frequency'
		        ]);
		        this.frequency = null;
		        this.depth = null;
		        return this;
		    };
		    return Tone.AutoPanner;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.AutoWah connects a Tone.Follower to a bandpass filter (Tone.Filter).
			 *          The frequency of the filter is adjusted proportionally to the 
			 *          incoming signal's amplitude. Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).
			 *
			 *  @constructor
			 *  @extends {Tone.Effect}
			 *  @param {Frequency|Object} [baseFrequency] The frequency the filter is set 
			 *                                            to at the low point of the wah
			 *  @param {Positive} [octaves] The number of octaves above the baseFrequency
			 *                                the filter will sweep to when fully open
			 *  @param {Decibels} [sensitivity] The decibel threshold sensitivity for 
			 *                                   the incoming signal. Normal range of -40 to 0. 
			 *  @example
			 * var autoWah = new Tone.AutoWah(50, 6, -30).toMaster();
			 * //initialize the synth and connect to autowah
			 * var synth = new Synth.connect(autoWah);
			 * //Q value influences the effect of the wah - default is 2
			 * autoWah.Q.value = 6;
			 * //more audible on higher notes
			 * synth.triggerAttackRelease("C4", "8n")
			 */
		    Tone.AutoWah = function () {
		        var options = this.optionsObject(arguments, [
		            'baseFrequency',
		            'octaves',
		            'sensitivity'
		        ], Tone.AutoWah.defaults);
		        Tone.Effect.call(this, options);
		        /**
				 *  The envelope follower. Set the attack/release
				 *  timing to adjust how the envelope is followed. 
				 *  @type {Tone.Follower}
				 *  @private
				 */
		        this.follower = new Tone.Follower(options.follower);
		        /**
				 *  scales the follower value to the frequency domain
				 *  @type {Tone}
				 *  @private
				 */
		        this._sweepRange = new Tone.ScaleExp(0, 1, 0.5);
		        /**
				 *  @type {number}
				 *  @private
				 */
		        this._baseFrequency = options.baseFrequency;
		        /**
				 *  @type {number}
				 *  @private
				 */
		        this._octaves = options.octaves;
		        /**
				 *  the input gain to adjust the sensitivity
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._inputBoost = new Tone.Gain();
		        /**
				 *  @type {BiquadFilterNode}
				 *  @private
				 */
		        this._bandpass = new Tone.Filter({
		            'rolloff': -48,
		            'frequency': 0,
		            'Q': options.Q
		        });
		        /**
				 *  @type {Tone.Filter}
				 *  @private
				 */
		        this._peaking = new Tone.Filter(0, 'peaking');
		        this._peaking.gain.value = options.gain;
		        /**
				 * The gain of the filter.
				 * @type {Number}
				 * @signal
				 */
		        this.gain = this._peaking.gain;
		        /**
				 * The quality of the filter.
				 * @type {Positive}
				 * @signal
				 */
		        this.Q = this._bandpass.Q;
		        //the control signal path
		        this.effectSend.chain(this._inputBoost, this.follower, this._sweepRange);
		        this._sweepRange.connect(this._bandpass.frequency);
		        this._sweepRange.connect(this._peaking.frequency);
		        //the filtered path
		        this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);
		        //set the initial value
		        this._setSweepRange();
		        this.sensitivity = options.sensitivity;
		        this._readOnly([
		            'gain',
		            'Q'
		        ]);
		    };
		    Tone.extend(Tone.AutoWah, Tone.Effect);
		    /**
			 *  @static
			 *  @type {Object}
			 */
		    Tone.AutoWah.defaults = {
		        'baseFrequency': 100,
		        'octaves': 6,
		        'sensitivity': 0,
		        'Q': 2,
		        'gain': 2,
		        'follower': {
		            'attack': 0.3,
		            'release': 0.5
		        }
		    };
		    /**
			 * The number of octaves that the filter will sweep above the 
			 * baseFrequency. 
			 * @memberOf Tone.AutoWah#
			 * @type {Number}
			 * @name octaves
			 */
		    Object.defineProperty(Tone.AutoWah.prototype, 'octaves', {
		        get: function () {
		            return this._octaves;
		        },
		        set: function (octaves) {
		            this._octaves = octaves;
		            this._setSweepRange();
		        }
		    });
		    /**
			 * The base frequency from which the sweep will start from.
			 * @memberOf Tone.AutoWah#
			 * @type {Frequency}
			 * @name baseFrequency
			 */
		    Object.defineProperty(Tone.AutoWah.prototype, 'baseFrequency', {
		        get: function () {
		            return this._baseFrequency;
		        },
		        set: function (baseFreq) {
		            this._baseFrequency = baseFreq;
		            this._setSweepRange();
		        }
		    });
		    /**
			 * The sensitivity to control how responsive to the input signal the filter is. 
			 * @memberOf Tone.AutoWah#
			 * @type {Decibels}
			 * @name sensitivity
			 */
		    Object.defineProperty(Tone.AutoWah.prototype, 'sensitivity', {
		        get: function () {
		            return this.gainToDb(1 / this._inputBoost.gain.value);
		        },
		        set: function (sensitivy) {
		            this._inputBoost.gain.value = 1 / this.dbToGain(sensitivy);
		        }
		    });
		    /**
			 *  sets the sweep range of the scaler
			 *  @private
			 */
		    Tone.AutoWah.prototype._setSweepRange = function () {
		        this._sweepRange.min = this._baseFrequency;
		        this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);
		    };
		    /**
			 *  Clean up.
			 *  @returns {Tone.AutoWah} this
			 */
		    Tone.AutoWah.prototype.dispose = function () {
		        Tone.Effect.prototype.dispose.call(this);
		        this.follower.dispose();
		        this.follower = null;
		        this._sweepRange.dispose();
		        this._sweepRange = null;
		        this._bandpass.dispose();
		        this._bandpass = null;
		        this._peaking.dispose();
		        this._peaking = null;
		        this._inputBoost.dispose();
		        this._inputBoost = null;
		        this._writable([
		            'gain',
		            'Q'
		        ]);
		        this.gain = null;
		        this.Q = null;
		        return this;
		    };
		    return Tone.AutoWah;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Bitcrusher downsamples the incoming signal to a different bitdepth. 
			 *         Lowering the bitdepth of the signal creates distortion. Read more about Bitcrushing
			 *         on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).
			 *
			 *  @constructor
			 *  @extends {Tone.Effect}
			 *  @param {Number} bits The number of bits to downsample the signal. Nominal range
			 *                       of 1 to 8. 
			 *  @example
			 * //initialize crusher and route a synth through it
			 * var crusher = new Tone.BitCrusher(4).toMaster();
			 * var synth = new Tone.MonoSynth().connect(crusher);
			 */
		    Tone.BitCrusher = function () {
		        var options = this.optionsObject(arguments, ['bits'], Tone.BitCrusher.defaults);
		        Tone.Effect.call(this, options);
		        var invStepSize = 1 / Math.pow(2, options.bits - 1);
		        /**
				 *  Subtract the input signal and the modulus of the input signal
				 *  @type {Tone.Subtract}
				 *  @private
				 */
		        this._subtract = new Tone.Subtract();
		        /**
				 *  The mod function
				 *  @type  {Tone.Modulo}
				 *  @private
				 */
		        this._modulo = new Tone.Modulo(invStepSize);
		        /**
				 *  keeps track of the bits
				 *  @type {number}
				 *  @private
				 */
		        this._bits = options.bits;
		        //connect it up
		        this.effectSend.fan(this._subtract, this._modulo);
		        this._modulo.connect(this._subtract, 0, 1);
		        this._subtract.connect(this.effectReturn);
		    };
		    Tone.extend(Tone.BitCrusher, Tone.Effect);
		    /**
			 *  the default values
			 *  @static
			 *  @type {Object}
			 */
		    Tone.BitCrusher.defaults = { 'bits': 4 };
		    /**
			 * The bit depth of the effect. Nominal range of 1-8. 
			 * @memberOf Tone.BitCrusher#
			 * @type {number}
			 * @name bits
			 */
		    Object.defineProperty(Tone.BitCrusher.prototype, 'bits', {
		        get: function () {
		            return this._bits;
		        },
		        set: function (bits) {
		            this._bits = bits;
		            var invStepSize = 1 / Math.pow(2, bits - 1);
		            this._modulo.value = invStepSize;
		        }
		    });
		    /**
			 *  Clean up. 
			 *  @returns {Tone.BitCrusher} this
			 */
		    Tone.BitCrusher.prototype.dispose = function () {
		        Tone.Effect.prototype.dispose.call(this);
		        this._subtract.dispose();
		        this._subtract = null;
		        this._modulo.dispose();
		        this._modulo = null;
		        return this;
		    };
		    return Tone.BitCrusher;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.ChebyShev is a Chebyshev waveshaper, an effect which is good 
			 *         for making different types of distortion sounds.
			 *         Note that odd orders sound very different from even ones, 
			 *         and order = 1 is no change. 
			 *         Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).
			 *
			 *  @extends {Tone.Effect}
			 *  @constructor
			 *  @param {Positive|Object} [order] The order of the chebyshev polynomial. Normal range between 1-100. 
			 *  @example
			 * //create a new cheby
			 * var cheby = new Tone.Chebyshev(50);
			 * //create a monosynth connected to our cheby
			 * synth = new Tone.MonoSynth().connect(cheby);
			 */
		    Tone.Chebyshev = function () {
		        var options = this.optionsObject(arguments, ['order'], Tone.Chebyshev.defaults);
		        Tone.Effect.call(this, options);
		        /**
				 *  @type {WaveShaperNode}
				 *  @private
				 */
		        this._shaper = new Tone.WaveShaper(4096);
		        /**
				 * holds onto the order of the filter
				 * @type {number}
				 * @private
				 */
		        this._order = options.order;
		        this.connectEffect(this._shaper);
		        this.order = options.order;
		        this.oversample = options.oversample;
		    };
		    Tone.extend(Tone.Chebyshev, Tone.Effect);
		    /**
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.Chebyshev.defaults = {
		        'order': 1,
		        'oversample': 'none'
		    };
		    /**
			 *  get the coefficient for that degree
			 *  @param {number} x the x value
			 *  @param   {number} degree 
			 *  @param {Object} memo memoize the computed value. 
			 *                       this speeds up computation greatly. 
			 *  @return  {number}       the coefficient 
			 *  @private
			 */
		    Tone.Chebyshev.prototype._getCoefficient = function (x, degree, memo) {
		        if (memo.hasOwnProperty(degree)) {
		            return memo[degree];
		        } else if (degree === 0) {
		            memo[degree] = 0;
		        } else if (degree === 1) {
		            memo[degree] = x;
		        } else {
		            memo[degree] = 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo);
		        }
		        return memo[degree];
		    };
		    /**
			 * The order of the Chebyshev polynomial which creates
			 * the equation which is applied to the incoming 
			 * signal through a Tone.WaveShaper. The equations
			 * are in the form:<br>
			 * order 2: 2x^2 + 1<br>
			 * order 3: 4x^3 + 3x <br>
			 * @memberOf Tone.Chebyshev#
			 * @type {Positive}
			 * @name order
			 */
		    Object.defineProperty(Tone.Chebyshev.prototype, 'order', {
		        get: function () {
		            return this._order;
		        },
		        set: function (order) {
		            this._order = order;
		            var curve = new Array(4096);
		            var len = curve.length;
		            for (var i = 0; i < len; ++i) {
		                var x = i * 2 / len - 1;
		                if (x === 0) {
		                    //should output 0 when input is 0
		                    curve[i] = 0;
		                } else {
		                    curve[i] = this._getCoefficient(x, order, {});
		                }
		            }
		            this._shaper.curve = curve;
		        }
		    });
		    /**
			 * The oversampling of the effect. Can either be "none", "2x" or "4x".
			 * @memberOf Tone.Chebyshev#
			 * @type {string}
			 * @name oversample
			 */
		    Object.defineProperty(Tone.Chebyshev.prototype, 'oversample', {
		        get: function () {
		            return this._shaper.oversample;
		        },
		        set: function (oversampling) {
		            this._shaper.oversample = oversampling;
		        }
		    });
		    /**
			 *  Clean up. 
			 *  @returns {Tone.Chebyshev} this
			 */
		    Tone.Chebyshev.prototype.dispose = function () {
		        Tone.Effect.prototype.dispose.call(this);
		        this._shaper.dispose();
		        this._shaper = null;
		        return this;
		    };
		    return Tone.Chebyshev;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Base class for Stereo effects. Provides effectSendL/R and effectReturnL/R. 
			 *
			 *	@constructor
			 *	@extends {Tone.Effect}
			 */
		    Tone.StereoEffect = function () {
		        this.createInsOuts(1, 1);
		        //get the defaults
		        var options = this.optionsObject(arguments, ['wet'], Tone.Effect.defaults);
		        /**
				 *  the drywet knob to control the amount of effect
				 *  @type {Tone.CrossFade}
				 *  @private
				 */
		        this._dryWet = new Tone.CrossFade(options.wet);
		        /**
				 *  The wet control, i.e. how much of the effected
				 *  will pass through to the output. 
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.wet = this._dryWet.fade;
		        /**
				 *  then split it
				 *  @type {Tone.Split}
				 *  @private
				 */
		        this._split = new Tone.Split();
		        /**
				 *  the effects send LEFT
				 *  @type {GainNode}
				 *  @private
				 */
		        this.effectSendL = this._split.left;
		        /**
				 *  the effects send RIGHT
				 *  @type {GainNode}
				 *  @private
				 */
		        this.effectSendR = this._split.right;
		        /**
				 *  the stereo effect merger
				 *  @type {Tone.Merge}
				 *  @private
				 */
		        this._merge = new Tone.Merge();
		        /**
				 *  the effect return LEFT
				 *  @type {GainNode}
				 *  @private
				 */
		        this.effectReturnL = this._merge.left;
		        /**
				 *  the effect return RIGHT
				 *  @type {GainNode}
				 *  @private
				 */
		        this.effectReturnR = this._merge.right;
		        //connections
		        this.input.connect(this._split);
		        //dry wet connections
		        this.input.connect(this._dryWet, 0, 0);
		        this._merge.connect(this._dryWet, 0, 1);
		        this._dryWet.connect(this.output);
		        this._readOnly(['wet']);
		    };
		    Tone.extend(Tone.StereoEffect, Tone.Effect);
		    /**
			 *  Clean up. 
			 *  @returns {Tone.StereoEffect} this
			 */
		    Tone.StereoEffect.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._dryWet.dispose();
		        this._dryWet = null;
		        this._split.dispose();
		        this._split = null;
		        this._merge.dispose();
		        this._merge = null;
		        this.effectSendL = null;
		        this.effectSendR = null;
		        this.effectReturnL = null;
		        this.effectReturnR = null;
		        this._writable(['wet']);
		        this.wet = null;
		        return this;
		    };
		    return Tone.StereoEffect;
		});
		Module(function (Tone) {
		    
		    /**
			 * 	@class  Tone.FeedbackEffect provides a loop between an 
			 * 	        audio source and its own output. This is a base-class
			 * 	        for feedback effects. 
			 *
			 *  @constructor
			 *  @extends {Tone.Effect}
			 *  @param {NormalRange|Object} [feedback] The initial feedback value.
			 */
		    Tone.FeedbackEffect = function () {
		        var options = this.optionsObject(arguments, ['feedback']);
		        options = this.defaultArg(options, Tone.FeedbackEffect.defaults);
		        Tone.Effect.call(this, options);
		        /**
				 *  the gain which controls the feedback
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._feedbackGain = new Tone.Gain(options.feedback, Tone.Type.NormalRange);
		        /**
				 *  The amount of signal which is fed back into the effect input. 
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.feedback = this._feedbackGain.gain;
		        //the feedback loop
		        this.effectReturn.chain(this._feedbackGain, this.effectSend);
		        this._readOnly(['feedback']);
		    };
		    Tone.extend(Tone.FeedbackEffect, Tone.Effect);
		    /**
			 *  @static
			 *  @type {Object}
			 */
		    Tone.FeedbackEffect.defaults = { 'feedback': 0.125 };
		    /**
			 *  Clean up. 
			 *  @returns {Tone.FeedbackEffect} this
			 */
		    Tone.FeedbackEffect.prototype.dispose = function () {
		        Tone.Effect.prototype.dispose.call(this);
		        this._writable(['feedback']);
		        this._feedbackGain.dispose();
		        this._feedbackGain = null;
		        this.feedback = null;
		        return this;
		    };
		    return Tone.FeedbackEffect;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Just like a stereo feedback effect, but the feedback is routed from left to right
			 *         and right to left instead of on the same channel.
			 *
			 *	@constructor
			 *	@extends {Tone.FeedbackEffect}
			 */
		    Tone.StereoXFeedbackEffect = function () {
		        var options = this.optionsObject(arguments, ['feedback'], Tone.FeedbackEffect.defaults);
		        Tone.StereoEffect.call(this, options);
		        /**
				 *  The amount of feedback from the output
				 *  back into the input of the effect (routed
				 *  across left and right channels).
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);
		        /**
				 *  the left side feeback
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._feedbackLR = new Tone.Gain();
		        /**
				 *  the right side feeback
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._feedbackRL = new Tone.Gain();
		        //connect it up
		        this.effectReturnL.chain(this._feedbackLR, this.effectSendR);
		        this.effectReturnR.chain(this._feedbackRL, this.effectSendL);
		        this.feedback.fan(this._feedbackLR.gain, this._feedbackRL.gain);
		        this._readOnly(['feedback']);
		    };
		    Tone.extend(Tone.StereoXFeedbackEffect, Tone.FeedbackEffect);
		    /**
			 *  clean up
			 *  @returns {Tone.StereoXFeedbackEffect} this
			 */
		    Tone.StereoXFeedbackEffect.prototype.dispose = function () {
		        Tone.StereoEffect.prototype.dispose.call(this);
		        this._writable(['feedback']);
		        this.feedback.dispose();
		        this.feedback = null;
		        this._feedbackLR.dispose();
		        this._feedbackLR = null;
		        this._feedbackRL.dispose();
		        this._feedbackRL = null;
		        return this;
		    };
		    return Tone.StereoXFeedbackEffect;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Chorus is a stereo chorus effect with feedback composed of 
			 *         a left and right delay with a Tone.LFO applied to the delayTime of each channel. 
			 *         Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).
			 *         Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).
			 *
			 *	@constructor
			 *	@extends {Tone.StereoXFeedbackEffect}
			 *	@param {Frequency|Object} [frequency] The frequency of the LFO.
			 *	@param {Milliseconds} [delayTime] The delay of the chorus effect in ms. 
			 *	@param {NormalRange} [depth] The depth of the chorus.
			 *	@example
			 * var chorus = new Tone.Chorus(4, 2.5, 0.5);
			 * var synth = new Tone.PolySynth(4, Tone.MonoSynth).connect(chorus);
			 * synth.triggerAttackRelease(["C3","E3","G3"], "8n");
			 */
		    Tone.Chorus = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'delayTime',
		            'depth'
		        ], Tone.Chorus.defaults);
		        Tone.StereoXFeedbackEffect.call(this, options);
		        /**
				 *  the depth of the chorus
				 *  @type {number}
				 *  @private
				 */
		        this._depth = options.depth;
		        /**
				 *  the delayTime
				 *  @type {number}
				 *  @private
				 */
		        this._delayTime = options.delayTime / 1000;
		        /**
				 *  the lfo which controls the delayTime
				 *  @type {Tone.LFO}
				 *  @private
				 */
		        this._lfoL = new Tone.LFO({
		            'frequency': options.frequency,
		            'min': 0,
		            'max': 1
		        });
		        /**
				 *  another LFO for the right side with a 180 degree phase diff
				 *  @type {Tone.LFO}
				 *  @private
				 */
		        this._lfoR = new Tone.LFO({
		            'frequency': options.frequency,
		            'min': 0,
		            'max': 1,
		            'phase': 180
		        });
		        /**
				 *  delay for left
				 *  @type {Tone.Delay}
				 *  @private
				 */
		        this._delayNodeL = new Tone.Delay();
		        /**
				 *  delay for right
				 *  @type {Tone.Delay}
				 *  @private
				 */
		        this._delayNodeR = new Tone.Delay();
		        /**
				 * The frequency of the LFO which modulates the delayTime. 
				 * @type {Frequency}
				 * @signal
				 */
		        this.frequency = this._lfoL.frequency;
		        //connections
		        this.effectSendL.chain(this._delayNodeL, this.effectReturnL);
		        this.effectSendR.chain(this._delayNodeR, this.effectReturnR);
		        //and pass through to make the detune apparent
		        this.effectSendL.connect(this.effectReturnL);
		        this.effectSendR.connect(this.effectReturnR);
		        //lfo setup
		        this._lfoL.connect(this._delayNodeL.delayTime);
		        this._lfoR.connect(this._delayNodeR.delayTime);
		        //start the lfo
		        this._lfoL.start();
		        this._lfoR.start();
		        //have one LFO frequency control the other
		        this._lfoL.frequency.connect(this._lfoR.frequency);
		        //set the initial values
		        this.depth = this._depth;
		        this.frequency.value = options.frequency;
		        this.type = options.type;
		        this._readOnly(['frequency']);
		        this.spread = options.spread;
		    };
		    Tone.extend(Tone.Chorus, Tone.StereoXFeedbackEffect);
		    /**
			 *  @static
			 *  @type {Object}
			 */
		    Tone.Chorus.defaults = {
		        'frequency': 1.5,
		        'delayTime': 3.5,
		        'depth': 0.7,
		        'feedback': 0.1,
		        'type': 'sine',
		        'spread': 180
		    };
		    /**
			 * The depth of the effect. A depth of 1 makes the delayTime
			 * modulate between 0 and 2*delayTime (centered around the delayTime). 
			 * @memberOf Tone.Chorus#
			 * @type {NormalRange}
			 * @name depth
			 */
		    Object.defineProperty(Tone.Chorus.prototype, 'depth', {
		        get: function () {
		            return this._depth;
		        },
		        set: function (depth) {
		            this._depth = depth;
		            var deviation = this._delayTime * depth;
		            this._lfoL.min = Math.max(this._delayTime - deviation, 0);
		            this._lfoL.max = this._delayTime + deviation;
		            this._lfoR.min = Math.max(this._delayTime - deviation, 0);
		            this._lfoR.max = this._delayTime + deviation;
		        }
		    });
		    /**
			 * The delayTime in milliseconds of the chorus. A larger delayTime
			 * will give a more pronounced effect. Nominal range a delayTime
			 * is between 2 and 20ms. 
			 * @memberOf Tone.Chorus#
			 * @type {Milliseconds}
			 * @name delayTime
			 */
		    Object.defineProperty(Tone.Chorus.prototype, 'delayTime', {
		        get: function () {
		            return this._delayTime * 1000;
		        },
		        set: function (delayTime) {
		            this._delayTime = delayTime / 1000;
		            this.depth = this._depth;
		        }
		    });
		    /**
			 * The oscillator type of the LFO. 
			 * @memberOf Tone.Chorus#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.Chorus.prototype, 'type', {
		        get: function () {
		            return this._lfoL.type;
		        },
		        set: function (type) {
		            this._lfoL.type = type;
		            this._lfoR.type = type;
		        }
		    });
		    /** 
			 * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.
			 * When set to 180, LFO's will be panned hard left and right respectively.
			 * @memberOf Tone.Chorus#
			 * @type {Degrees}
			 * @name spread
			 */
		    Object.defineProperty(Tone.Chorus.prototype, 'spread', {
		        get: function () {
		            return this._lfoR.phase - this._lfoL.phase;    //180
		        },
		        set: function (spread) {
		            this._lfoL.phase = 90 - spread / 2;
		            this._lfoR.phase = spread / 2 + 90;
		        }
		    });
		    /**
			 *  Clean up. 
			 *  @returns {Tone.Chorus} this
			 */
		    Tone.Chorus.prototype.dispose = function () {
		        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);
		        this._lfoL.dispose();
		        this._lfoL = null;
		        this._lfoR.dispose();
		        this._lfoR = null;
		        this._delayNodeL.dispose();
		        this._delayNodeL = null;
		        this._delayNodeR.dispose();
		        this._delayNodeR = null;
		        this._writable('frequency');
		        this.frequency = null;
		        return this;
		    };
		    return Tone.Chorus;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Convolver is a wrapper around the Native Web Audio 
			 *          [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).
			 *          Convolution is useful for reverb and filter emulation. Read more about convolution reverb on
			 *          [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).
			 *  
			 *  @constructor
			 *  @extends {Tone.Effect}
			 *  @param {string|Tone.Buffer|Object} [url] The URL of the impulse response or the Tone.Buffer
			 *                                           contianing the impulse response. 
			 *  @param {Function} onload The callback to invoke when the url is loaded.
			 *  @example
			 * //initializing the convolver with an impulse response
			 * var convolver = new Tone.Convolver("./path/to/ir.wav").toMaster();
			 */
		    Tone.Convolver = function () {
		        var options = this.optionsObject(arguments, [
		            'url',
		            'onload'
		        ], Tone.Convolver.defaults);
		        Tone.Effect.call(this, options);
		        /**
				 *  convolver node
				 *  @type {ConvolverNode}
				 *  @private
				 */
		        this._convolver = this.context.createConvolver();
		        /**
				 *  the convolution buffer
				 *  @type {Tone.Buffer}
				 *  @private
				 */
		        this._buffer = new Tone.Buffer();
		        if (this.isString(options.url)) {
		            this._buffer.load(options.url, function (buffer) {
		                this.buffer = buffer;
		                options.onload();
		            }.bind(this));
		        } else if (options.url) {
		            this.buffer = options.url;
		            options.onload();
		        }
		        this.connectEffect(this._convolver);
		    };
		    Tone.extend(Tone.Convolver, Tone.Effect);
		    /**
			 *  @static
			 *  @const
			 *  @type  {Object}
			 */
		    Tone.Convolver.defaults = { 'onload': Tone.noOp };
		    /**
			 *  The convolver's buffer
			 *  @memberOf Tone.Convolver#
			 *  @type {AudioBuffer}
			 *  @name buffer
			 */
		    Object.defineProperty(Tone.Convolver.prototype, 'buffer', {
		        get: function () {
		            return this._buffer.get();
		        },
		        set: function (buffer) {
		            this._buffer.set(buffer);
		            this._convolver.buffer = this._buffer.get();
		        }
		    });
		    /**
			 *  Load an impulse response url as an audio buffer.
			 *  Decodes the audio asynchronously and invokes
			 *  the callback once the audio buffer loads.
			 *  @param {string} url The url of the buffer to load.
			 *                      filetype support depends on the
			 *                      browser.
			 *  @param  {function=} callback
			 *  @returns {Tone.Convolver} this
			 */
		    Tone.Convolver.prototype.load = function (url, callback) {
		        this._buffer.load(url, function (buff) {
		            this.buffer = buff;
		            if (callback) {
		                callback();
		            }
		        }.bind(this));
		        return this;
		    };
		    /**
			 *  Clean up. 
			 *  @returns {Tone.Convolver} this
			 */
		    Tone.Convolver.prototype.dispose = function () {
		        Tone.Effect.prototype.dispose.call(this);
		        this._convolver.disconnect();
		        this._convolver = null;
		        this._buffer.dispose();
		        this._buffer = null;
		        return this;
		    };
		    return Tone.Convolver;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Distortion is a simple distortion effect using Tone.WaveShaper.
			 *         Algorithm from [a stackoverflow answer](http://stackoverflow.com/a/22313408).
			 *
			 *  @extends {Tone.Effect}
			 *  @constructor
			 *  @param {Number|Object} [distortion] The amount of distortion (nominal range of 0-1)
			 *  @example
			 * var dist = new Tone.Distortion(0.8).toMaster();
			 * var fm = new Tone.SimpleFM().connect(dist);
			 * //this sounds good on bass notes
			 * fm.triggerAttackRelease("A1", "8n");
			 */
		    Tone.Distortion = function () {
		        var options = this.optionsObject(arguments, ['distortion'], Tone.Distortion.defaults);
		        Tone.Effect.call(this, options);
		        /**
				 *  @type {Tone.WaveShaper}
				 *  @private
				 */
		        this._shaper = new Tone.WaveShaper(4096);
		        /**
				 * holds the distortion amount
				 * @type {number}
				 * @private
				 */
		        this._distortion = options.distortion;
		        this.connectEffect(this._shaper);
		        this.distortion = options.distortion;
		        this.oversample = options.oversample;
		    };
		    Tone.extend(Tone.Distortion, Tone.Effect);
		    /**
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.Distortion.defaults = {
		        'distortion': 0.4,
		        'oversample': 'none'
		    };
		    /**
			 * The amount of distortion.
			 * @memberOf Tone.Distortion#
			 * @type {NormalRange}
			 * @name distortion
			 */
		    Object.defineProperty(Tone.Distortion.prototype, 'distortion', {
		        get: function () {
		            return this._distortion;
		        },
		        set: function (amount) {
		            this._distortion = amount;
		            var k = amount * 100;
		            var deg = Math.PI / 180;
		            this._shaper.setMap(function (x) {
		                if (Math.abs(x) < 0.001) {
		                    //should output 0 when input is 0
		                    return 0;
		                } else {
		                    return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));
		                }
		            });
		        }
		    });
		    /**
			 * The oversampling of the effect. Can either be "none", "2x" or "4x".
			 * @memberOf Tone.Distortion#
			 * @type {string}
			 * @name oversample
			 */
		    Object.defineProperty(Tone.Distortion.prototype, 'oversample', {
		        get: function () {
		            return this._shaper.oversample;
		        },
		        set: function (oversampling) {
		            this._shaper.oversample = oversampling;
		        }
		    });
		    /**
			 *  Clean up. 
			 *  @returns {Tone.Distortion} this
			 */
		    Tone.Distortion.prototype.dispose = function () {
		        Tone.Effect.prototype.dispose.call(this);
		        this._shaper.dispose();
		        this._shaper = null;
		        return this;
		    };
		    return Tone.Distortion;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.FeedbackDelay is a DelayNode in which part of output
			 *          signal is fed back into the delay. 
			 *
			 *  @constructor
			 *  @extends {Tone.FeedbackEffect}
			 *  @param {Time|Object} [delayTime] The delay applied to the incoming signal. 
			 *  @param {NormalRange=} feedback The amount of the effected signal which 
			 *                            is fed back through the delay.
			 *  @example
			 * var feedbackDelay = new Tone.FeedbackDelay("8n", 0.5).toMaster();
			 * var tom = new Tone.DrumSynth({
			 * 	"octaves" : 4,
			 * 	"pitchDecay" : 0.1
			 * }).connect(feedbackDelay);
			 * tom.triggerAttackRelease("A2","32n");
			 */
		    Tone.FeedbackDelay = function () {
		        var options = this.optionsObject(arguments, [
		            'delayTime',
		            'feedback'
		        ], Tone.FeedbackDelay.defaults);
		        Tone.FeedbackEffect.call(this, options);
		        /**
				 *  the delay node
				 *  @type {Tone.Delay}
				 *  @private
				 */
		        this._delayNode = new Tone.Delay(options.delayTime);
		        /**
				 *  The delayTime of the DelayNode. 
				 *  @type {Time}
				 *  @signal
				 */
		        this.delayTime = this._delayNode.delayTime;
		        // connect it up
		        this.connectEffect(this._delayNode);
		        this._readOnly(['delayTime']);
		    };
		    Tone.extend(Tone.FeedbackDelay, Tone.FeedbackEffect);
		    /**
			 *  The default values. 
			 *  @const
			 *  @static
			 *  @type {Object}
			 */
		    Tone.FeedbackDelay.defaults = { 'delayTime': 0.25 };
		    /**
			 *  clean up
			 *  @returns {Tone.FeedbackDelay} this
			 */
		    Tone.FeedbackDelay.prototype.dispose = function () {
		        Tone.FeedbackEffect.prototype.dispose.call(this);
		        this._delayNode.dispose();
		        this._delayNode = null;
		        this._writable(['delayTime']);
		        this.delayTime = null;
		        return this;
		    };
		    return Tone.FeedbackDelay;
		});
		Module(function (Tone) {
		    
		    /**
			 *  an array of comb filter delay values from Freeverb implementation
			 *  @static
			 *  @private
			 *  @type {Array}
			 */
		    var combFilterTunings = [
		        1557 / 44100,
		        1617 / 44100,
		        1491 / 44100,
		        1422 / 44100,
		        1277 / 44100,
		        1356 / 44100,
		        1188 / 44100,
		        1116 / 44100
		    ];
		    /**
			 *  an array of allpass filter frequency values from Freeverb implementation
			 *  @private
			 *  @static
			 *  @type {Array}
			 */
		    var allpassFilterFrequencies = [
		        225,
		        556,
		        441,
		        341
		    ];
		    /**
			 *  @class Tone.Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).
			 *         Read more on reverb on [SoundOnSound](http://www.soundonsound.com/sos/may00/articles/reverb.htm).
			 *
			 *  @extends {Tone.Effect}
			 *  @constructor
			 *  @param {NormalRange|Object} [roomSize] Correlated to the decay time. 
			 *  @param {Frequency} [dampening] The cutoff frequency of a lowpass filter as part 
			 *                                 of the reverb. 
			 *  @example
			 * var freeverb = new Tone.Freeverb().toMaster();
			 * freeverb.dampening.value = 1000;
			 * //routing synth through the reverb
			 * var synth = new Tone.AMSynth().connect(freeverb);
			 */
		    Tone.Freeverb = function () {
		        var options = this.optionsObject(arguments, [
		            'roomSize',
		            'dampening'
		        ], Tone.Freeverb.defaults);
		        Tone.StereoEffect.call(this, options);
		        /**
				 *  The roomSize value between. A larger roomSize
				 *  will result in a longer decay. 
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);
		        /**
				 *  The amount of dampening of the reverberant signal. 
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.dampening = new Tone.Signal(options.dampening, Tone.Type.Frequency);
		        /**
				 *  the comb filters
				 *  @type {Array}
				 *  @private
				 */
		        this._combFilters = [];
		        /**
				 *  the allpass filters on the left
				 *  @type {Array}
				 *  @private
				 */
		        this._allpassFiltersL = [];
		        /**
				 *  the allpass filters on the right
				 *  @type {Array}
				 *  @private
				 */
		        this._allpassFiltersR = [];
		        //make the allpass filters on teh right
		        for (var l = 0; l < allpassFilterFrequencies.length; l++) {
		            var allpassL = this.context.createBiquadFilter();
		            allpassL.type = 'allpass';
		            allpassL.frequency.value = allpassFilterFrequencies[l];
		            this._allpassFiltersL.push(allpassL);
		        }
		        //make the allpass filters on the left
		        for (var r = 0; r < allpassFilterFrequencies.length; r++) {
		            var allpassR = this.context.createBiquadFilter();
		            allpassR.type = 'allpass';
		            allpassR.frequency.value = allpassFilterFrequencies[r];
		            this._allpassFiltersR.push(allpassR);
		        }
		        //make the comb filters
		        for (var c = 0; c < combFilterTunings.length; c++) {
		            var lfpf = new Tone.LowpassCombFilter(combFilterTunings[c]);
		            if (c < combFilterTunings.length / 2) {
		                this.effectSendL.chain(lfpf, this._allpassFiltersL[0]);
		            } else {
		                this.effectSendR.chain(lfpf, this._allpassFiltersR[0]);
		            }
		            this.roomSize.connect(lfpf.resonance);
		            this.dampening.connect(lfpf.dampening);
		            this._combFilters.push(lfpf);
		        }
		        //chain the allpass filters togetehr
		        this.connectSeries.apply(this, this._allpassFiltersL);
		        this.connectSeries.apply(this, this._allpassFiltersR);
		        this._allpassFiltersL[this._allpassFiltersL.length - 1].connect(this.effectReturnL);
		        this._allpassFiltersR[this._allpassFiltersR.length - 1].connect(this.effectReturnR);
		        this._readOnly([
		            'roomSize',
		            'dampening'
		        ]);
		    };
		    Tone.extend(Tone.Freeverb, Tone.StereoEffect);
		    /**
			 *  @static
			 *  @type {Object}
			 */
		    Tone.Freeverb.defaults = {
		        'roomSize': 0.7,
		        'dampening': 3000
		    };
		    /**
			 *  Clean up. 
			 *  @returns {Tone.Freeverb} this
			 */
		    Tone.Freeverb.prototype.dispose = function () {
		        Tone.StereoEffect.prototype.dispose.call(this);
		        for (var al = 0; al < this._allpassFiltersL.length; al++) {
		            this._allpassFiltersL[al].disconnect();
		            this._allpassFiltersL[al] = null;
		        }
		        this._allpassFiltersL = null;
		        for (var ar = 0; ar < this._allpassFiltersR.length; ar++) {
		            this._allpassFiltersR[ar].disconnect();
		            this._allpassFiltersR[ar] = null;
		        }
		        this._allpassFiltersR = null;
		        for (var cf = 0; cf < this._combFilters.length; cf++) {
		            this._combFilters[cf].dispose();
		            this._combFilters[cf] = null;
		        }
		        this._combFilters = null;
		        this._writable([
		            'roomSize',
		            'dampening'
		        ]);
		        this.roomSize.dispose();
		        this.roomSize = null;
		        this.dampening.dispose();
		        this.dampening = null;
		        return this;
		    };
		    return Tone.Freeverb;
		});
		Module(function (Tone) {
		    
		    /**
			 *  an array of the comb filter delay time values
			 *  @private
			 *  @static
			 *  @type {Array}
			 */
		    var combFilterDelayTimes = [
		        1687 / 25000,
		        1601 / 25000,
		        2053 / 25000,
		        2251 / 25000
		    ];
		    /**
			 *  the resonances of each of the comb filters
			 *  @private
			 *  @static
			 *  @type {Array}
			 */
		    var combFilterResonances = [
		        0.773,
		        0.802,
		        0.753,
		        0.733
		    ];
		    /**
			 *  the allpass filter frequencies
			 *  @private
			 *  @static
			 *  @type {Array}
			 */
		    var allpassFilterFreqs = [
		        347,
		        113,
		        37
		    ];
		    /**
			 *  @class Tone.JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)
			 *         tuned by John Chowning in 1970.
			 *         It is made up of three allpass filters and four Tone.FeedbackCombFilter. 
			 *         
			 *
			 *  @extends {Tone.Effect}
			 *  @constructor
			 *  @param {NormalRange|Object} [roomSize] Coorelates to the decay time.
			 *  @example
			 * var reverb = new Tone.JCReverb(0.4).connect(Tone.Master);
			 * var delay = new Tone.FeedbackDelay(0.5); 
			 * //connecting the synth to reverb through delay
			 * var synth = new Tone.DuoSynth().chain(delay, reverb);
			 * synth.triggerAttackRelease("A4","8n");
			 */
		    Tone.JCReverb = function () {
		        var options = this.optionsObject(arguments, ['roomSize'], Tone.JCReverb.defaults);
		        Tone.StereoEffect.call(this, options);
		        /**
				 *  room size control values between [0,1]
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);
		        /**
				 *  scale the room size
				 *  @type {Tone.Scale}
				 *  @private
				 */
		        this._scaleRoomSize = new Tone.Scale(-0.733, 0.197);
		        /**
				 *  a series of allpass filters
				 *  @type {Array}
				 *  @private
				 */
		        this._allpassFilters = [];
		        /**
				 *  parallel feedback comb filters
				 *  @type {Array}
				 *  @private
				 */
		        this._feedbackCombFilters = [];
		        //make the allpass filters
		        for (var af = 0; af < allpassFilterFreqs.length; af++) {
		            var allpass = this.context.createBiquadFilter();
		            allpass.type = 'allpass';
		            allpass.frequency.value = allpassFilterFreqs[af];
		            this._allpassFilters.push(allpass);
		        }
		        //and the comb filters
		        for (var cf = 0; cf < combFilterDelayTimes.length; cf++) {
		            var fbcf = new Tone.FeedbackCombFilter(combFilterDelayTimes[cf], 0.1);
		            this._scaleRoomSize.connect(fbcf.resonance);
		            fbcf.resonance.value = combFilterResonances[cf];
		            this._allpassFilters[this._allpassFilters.length - 1].connect(fbcf);
		            if (cf < combFilterDelayTimes.length / 2) {
		                fbcf.connect(this.effectReturnL);
		            } else {
		                fbcf.connect(this.effectReturnR);
		            }
		            this._feedbackCombFilters.push(fbcf);
		        }
		        //chain the allpass filters together
		        this.roomSize.connect(this._scaleRoomSize);
		        this.connectSeries.apply(this, this._allpassFilters);
		        this.effectSendL.connect(this._allpassFilters[0]);
		        this.effectSendR.connect(this._allpassFilters[0]);
		        this._readOnly(['roomSize']);
		    };
		    Tone.extend(Tone.JCReverb, Tone.StereoEffect);
		    /**
			 *  the default values
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.JCReverb.defaults = { 'roomSize': 0.5 };
		    /**
			 *  Clean up. 
			 *  @returns {Tone.JCReverb} this
			 */
		    Tone.JCReverb.prototype.dispose = function () {
		        Tone.StereoEffect.prototype.dispose.call(this);
		        for (var apf = 0; apf < this._allpassFilters.length; apf++) {
		            this._allpassFilters[apf].disconnect();
		            this._allpassFilters[apf] = null;
		        }
		        this._allpassFilters = null;
		        for (var fbcf = 0; fbcf < this._feedbackCombFilters.length; fbcf++) {
		            this._feedbackCombFilters[fbcf].dispose();
		            this._feedbackCombFilters[fbcf] = null;
		        }
		        this._feedbackCombFilters = null;
		        this._writable(['roomSize']);
		        this.roomSize.dispose();
		        this.roomSize = null;
		        this._scaleRoomSize.dispose();
		        this._scaleRoomSize = null;
		        return this;
		    };
		    return Tone.JCReverb;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Mid/Side processing separates the the 'mid' signal 
			 *         (which comes out of both the left and the right channel) 
			 *         and the 'side' (which only comes out of the the side channels) 
			 *         and effects them separately before being recombined.
			 *         Applies a Mid/Side seperation and recombination.
			 *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).
			 *         <br><br>
			 *         This is a base-class for Mid/Side Effects. 
			 *
			 *  @extends {Tone.Effect}
			 *  @constructor
			 */
		    Tone.MidSideEffect = function () {
		        Tone.Effect.apply(this, arguments);
		        /**
				 *  The mid/side split
				 *  @type  {Tone.MidSideSplit}
				 *  @private
				 */
		        this._midSideSplit = new Tone.MidSideSplit();
		        /**
				 *  The mid/side merge
				 *  @type  {Tone.MidSideMerge}
				 *  @private
				 */
		        this._midSideMerge = new Tone.MidSideMerge();
		        /**
				 *  The mid send. Connect to mid processing
				 *  @type {Tone.Expr}
				 *  @private
				 */
		        this.midSend = this._midSideSplit.mid;
		        /**
				 *  The side send. Connect to side processing
				 *  @type {Tone.Expr}
				 *  @private
				 */
		        this.sideSend = this._midSideSplit.side;
		        /**
				 *  The mid return connection
				 *  @type {GainNode}
				 *  @private
				 */
		        this.midReturn = this._midSideMerge.mid;
		        /**
				 *  The side return connection
				 *  @type {GainNode}
				 *  @private
				 */
		        this.sideReturn = this._midSideMerge.side;
		        //the connections
		        this.effectSend.connect(this._midSideSplit);
		        this._midSideMerge.connect(this.effectReturn);
		    };
		    Tone.extend(Tone.MidSideEffect, Tone.Effect);
		    /**
			 *  Clean up. 
			 *  @returns {Tone.MidSideEffect} this
			 */
		    Tone.MidSideEffect.prototype.dispose = function () {
		        Tone.Effect.prototype.dispose.call(this);
		        this._midSideSplit.dispose();
		        this._midSideSplit = null;
		        this._midSideMerge.dispose();
		        this._midSideMerge = null;
		        this.midSend = null;
		        this.sideSend = null;
		        this.midReturn = null;
		        this.sideReturn = null;
		        return this;
		    };
		    return Tone.MidSideEffect;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Phaser is a phaser effect. Phasers work by changing the phase
			 *         of different frequency components of an incoming signal. Read more on 
			 *         [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)). 
			 *         Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).
			 *
			 *	@extends {Tone.StereoEffect}
			 *	@constructor
			 *	@param {Frequency|Object} [frequency] The speed of the phasing. 
			 *	@param {number} [octaves] The octaves of the effect. 
			 *	@param {Frequency} [baseFrequency] The base frequency of the filters. 
			 *	@example
			 * var phaser = new Tone.Phaser({
			 * 	"frequency" : 15, 
			 * 	"octaves" : 5, 
			 * 	"baseFrequency" : 1000
			 * }).toMaster();
			 * var synth = new Tone.FMSynth().connect(phaser);
			 * synth.triggerAttackRelease("E3", "2n");
			 */
		    Tone.Phaser = function () {
		        //set the defaults
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'octaves',
		            'baseFrequency'
		        ], Tone.Phaser.defaults);
		        Tone.StereoEffect.call(this, options);
		        /**
				 *  the lfo which controls the frequency on the left side
				 *  @type {Tone.LFO}
				 *  @private
				 */
		        this._lfoL = new Tone.LFO(options.frequency, 0, 1);
		        /**
				 *  the lfo which controls the frequency on the right side
				 *  @type {Tone.LFO}
				 *  @private
				 */
		        this._lfoR = new Tone.LFO(options.frequency, 0, 1);
		        this._lfoR.phase = 180;
		        /**
				 *  the base modulation frequency
				 *  @type {number}
				 *  @private
				 */
		        this._baseFrequency = options.baseFrequency;
		        /**
				 *  the octaves of the phasing
				 *  @type {number}
				 *  @private
				 */
		        this._octaves = options.octaves;
		        /**
				 *  The quality factor of the filters
				 *  @type {Positive}
				 *  @signal
				 */
		        this.Q = new Tone.Signal(options.Q, Tone.Type.Positive);
		        /**
				 *  the array of filters for the left side
				 *  @type {Array}
				 *  @private
				 */
		        this._filtersL = this._makeFilters(options.stages, this._lfoL, this.Q);
		        /**
				 *  the array of filters for the left side
				 *  @type {Array}
				 *  @private
				 */
		        this._filtersR = this._makeFilters(options.stages, this._lfoR, this.Q);
		        /**
				 * the frequency of the effect
				 * @type {Tone.Signal}
				 */
		        this.frequency = this._lfoL.frequency;
		        this.frequency.value = options.frequency;
		        //connect them up
		        this.effectSendL.connect(this._filtersL[0]);
		        this.effectSendR.connect(this._filtersR[0]);
		        this._filtersL[options.stages - 1].connect(this.effectReturnL);
		        this._filtersR[options.stages - 1].connect(this.effectReturnR);
		        //control the frequency with one LFO
		        this._lfoL.frequency.connect(this._lfoR.frequency);
		        //set the options
		        this.baseFrequency = options.baseFrequency;
		        this.octaves = options.octaves;
		        //start the lfo
		        this._lfoL.start();
		        this._lfoR.start();
		        this._readOnly([
		            'frequency',
		            'Q'
		        ]);
		    };
		    Tone.extend(Tone.Phaser, Tone.StereoEffect);
		    /**
			 *  defaults
			 *  @static
			 *  @type {object}
			 */
		    Tone.Phaser.defaults = {
		        'frequency': 0.5,
		        'octaves': 3,
		        'stages': 10,
		        'Q': 10,
		        'baseFrequency': 350
		    };
		    /**
			 *  @param {number} stages
			 *  @returns {Array} the number of filters all connected together
			 *  @private
			 */
		    Tone.Phaser.prototype._makeFilters = function (stages, connectToFreq, Q) {
		        var filters = new Array(stages);
		        //make all the filters
		        for (var i = 0; i < stages; i++) {
		            var filter = this.context.createBiquadFilter();
		            filter.type = 'allpass';
		            Q.connect(filter.Q);
		            connectToFreq.connect(filter.frequency);
		            filters[i] = filter;
		        }
		        this.connectSeries.apply(this, filters);
		        return filters;
		    };
		    /**
			 * The number of octaves the phase goes above
			 * the baseFrequency
			 * @memberOf Tone.Phaser#
			 * @type {Positive}
			 * @name octaves
			 */
		    Object.defineProperty(Tone.Phaser.prototype, 'octaves', {
		        get: function () {
		            return this._octaves;
		        },
		        set: function (octaves) {
		            this._octaves = octaves;
		            var max = this._baseFrequency * Math.pow(2, octaves);
		            this._lfoL.max = max;
		            this._lfoR.max = max;
		        }
		    });
		    /**
			 * The the base frequency of the filters. 
			 * @memberOf Tone.Phaser#
			 * @type {number}
			 * @name baseFrequency
			 */
		    Object.defineProperty(Tone.Phaser.prototype, 'baseFrequency', {
		        get: function () {
		            return this._baseFrequency;
		        },
		        set: function (freq) {
		            this._baseFrequency = freq;
		            this._lfoL.min = freq;
		            this._lfoR.min = freq;
		            this.octaves = this._octaves;
		        }
		    });
		    /**
			 *  clean up
			 *  @returns {Tone.Phaser} this
			 */
		    Tone.Phaser.prototype.dispose = function () {
		        Tone.StereoEffect.prototype.dispose.call(this);
		        this._writable([
		            'frequency',
		            'Q'
		        ]);
		        this.Q.dispose();
		        this.Q = null;
		        this._lfoL.dispose();
		        this._lfoL = null;
		        this._lfoR.dispose();
		        this._lfoR = null;
		        for (var i = 0; i < this._filtersL.length; i++) {
		            this._filtersL[i].disconnect();
		            this._filtersL[i] = null;
		        }
		        this._filtersL = null;
		        for (var j = 0; j < this._filtersR.length; j++) {
		            this._filtersR[j].disconnect();
		            this._filtersR[j] = null;
		        }
		        this._filtersR = null;
		        this.frequency = null;
		        return this;
		    };
		    return Tone.Phaser;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.PingPongDelay is a feedback delay effect where the echo is heard
			 *          first in one channel and next in the opposite channel. In a stereo
			 *          system these are the right and left channels.
			 *          PingPongDelay in more simplified terms is two Tone.FeedbackDelays 
			 *          with independent delay values. Each delay is routed to one channel
			 *          (left or right), and the channel triggered second will always 
			 *          trigger at the same interval after the first.
			 *
			 * 	@constructor
			 * 	@extends {Tone.StereoXFeedbackEffect}
			 *  @param {Time|Object} [delayTime] The delayTime between consecutive echos.
			 *  @param {NormalRange=} feedback The amount of the effected signal which 
			 *                                 is fed back through the delay.
			 *  @example
			 * var pingPong = new Tone.PingPongDelay("4n", 0.2).toMaster();
			 * var drum = new Tone.DrumSynth().connect(pingPong);
			 * drum.triggerAttackRelease("C4", "32n");
			 */
		    Tone.PingPongDelay = function () {
		        var options = this.optionsObject(arguments, [
		            'delayTime',
		            'feedback'
		        ], Tone.PingPongDelay.defaults);
		        Tone.StereoXFeedbackEffect.call(this, options);
		        /**
				 *  the delay node on the left side
				 *  @type {Tone.Delay}
				 *  @private
				 */
		        this._leftDelay = new Tone.Delay(0, options.maxDelayTime);
		        /**
				 *  the delay node on the right side
				 *  @type {Tone.Delay}
				 *  @private
				 */
		        this._rightDelay = new Tone.Delay(0, options.maxDelayTime);
		        /**
				 *  the predelay on the right side
				 *  @type {Tone.Delay}
				 *  @private
				 */
		        this._rightPreDelay = new Tone.Delay(0, options.maxDelayTime);
		        /**
				 *  the delay time signal
				 *  @type {Time}
				 *  @signal
				 */
		        this.delayTime = new Tone.Signal(options.delayTime, Tone.Type.Time);
		        //connect it up
		        this.effectSendL.chain(this._leftDelay, this.effectReturnL);
		        this.effectSendR.chain(this._rightPreDelay, this._rightDelay, this.effectReturnR);
		        this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);
		        //rearranged the feedback to be after the rightPreDelay
		        this._feedbackLR.disconnect();
		        this._feedbackLR.connect(this._rightDelay);
		        this._readOnly(['delayTime']);
		    };
		    Tone.extend(Tone.PingPongDelay, Tone.StereoXFeedbackEffect);
		    /**
			 *  @static
			 *  @type {Object}
			 */
		    Tone.PingPongDelay.defaults = {
		        'delayTime': 0.25,
		        'maxDelayTime': 1
		    };
		    /**
			 *  Clean up. 
			 *  @returns {Tone.PingPongDelay} this
			 */
		    Tone.PingPongDelay.prototype.dispose = function () {
		        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);
		        this._leftDelay.dispose();
		        this._leftDelay = null;
		        this._rightDelay.dispose();
		        this._rightDelay = null;
		        this._rightPreDelay.dispose();
		        this._rightPreDelay = null;
		        this._writable(['delayTime']);
		        this.delayTime.dispose();
		        this.delayTime = null;
		        return this;
		    };
		    return Tone.PingPongDelay;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.PitchShift does near-realtime pitch shifting to the incoming signal. 
			 *         The effect is achieved by speeding up or slowing down the delayTime
			 *         of a DelayNode using a sawtooth wave. 
			 *         Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).
			 *         Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).
			 *         
			 *  @extends {Tone.FeedbackEffect}
			 *  @param {Interval=} pitch The interval to transpose the incoming signal by. 
			 */
		    Tone.PitchShift = function () {
		        var options = this.optionsObject(arguments, ['pitch'], Tone.PitchShift.defaults);
		        Tone.FeedbackEffect.call(this, options);
		        /**
				 *  The pitch signal
				 *  @type  {Tone.Signal}
				 *  @private
				 */
		        this._frequency = new Tone.Signal(0);
		        /**
				 *  Uses two DelayNodes to cover up the jump in
				 *  the sawtooth wave. 
				 *  @type  {DelayNode}
				 *  @private
				 */
		        this._delayA = new Tone.Delay(0, 1);
		        /**
				 *  The first LFO.
				 *  @type  {Tone.LFO}
				 *  @private
				 */
		        this._lfoA = new Tone.LFO({
		            'min': 0,
		            'max': 0.1,
		            'type': 'sawtooth'
		        }).connect(this._delayA.delayTime);
		        /**
				 *  The second DelayNode
				 *  @type  {DelayNode}
				 *  @private
				 */
		        this._delayB = new Tone.Delay(0, 1);
		        /**
				 *  The first LFO.
				 *  @type  {Tone.LFO}
				 *  @private
				 */
		        this._lfoB = new Tone.LFO({
		            'min': 0,
		            'max': 0.1,
		            'type': 'sawtooth',
		            'phase': 180
		        }).connect(this._delayB.delayTime);
		        /**
				 *  Crossfade quickly between the two delay lines
				 *  to cover up the jump in the sawtooth wave
				 *  @type  {Tone.CrossFade}
				 *  @private
				 */
		        this._crossFade = new Tone.CrossFade();
		        /**
				 *  LFO which alternates between the two
				 *  delay lines to cover up the disparity in the
				 *  sawtooth wave. 
				 *  @type  {Tone.LFO}
				 *  @private
				 */
		        this._crossFadeLFO = new Tone.LFO({
		            'min': 0,
		            'max': 1,
		            'type': 'triangle',
		            'phase': 90
		        }).connect(this._crossFade.fade);
		        /**
				 *  The delay node
				 *  @type {Tone.Delay}
				 *  @private
				 */
		        this._feedbackDelay = new Tone.Delay(options.delayTime);
		        /**
				 *  The amount of delay on the input signal
				 *  @type {Time}
				 *  @signal
				 */
		        this.delayTime = this._feedbackDelay.delayTime;
		        this._readOnly('delayTime');
		        /**
				 *  Hold the current pitch
				 *  @type {Number}
				 *  @private
				 */
		        this._pitch = options.pitch;
		        /**
				 *  Hold the current windowSize
				 *  @type {Number}
				 *  @private
				 */
		        this._windowSize = options.windowSize;
		        //connect the two delay lines up
		        this._delayA.connect(this._crossFade.a);
		        this._delayB.connect(this._crossFade.b);
		        //connect the frequency
		        this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);
		        //route the input
		        this.effectSend.fan(this._delayA, this._delayB);
		        this._crossFade.chain(this._feedbackDelay, this.effectReturn);
		        //start the LFOs at the same time
		        var now = this.now();
		        this._lfoA.start(now);
		        this._lfoB.start(now);
		        this._crossFadeLFO.start(now);
		        //set the initial value
		        this.windowSize = this._windowSize;
		    };
		    Tone.extend(Tone.PitchShift, Tone.FeedbackEffect);
		    /**
			 *  default values
			 *  @static
			 *  @type {Object}
			 *  @const
			 */
		    Tone.PitchShift.defaults = {
		        'pitch': 0,
		        'windowSize': 0.1,
		        'delayTime': 0,
		        'feedback': 0
		    };
		    /**
			 * Repitch the incoming signal by some interval (measured
			 * in semi-tones). 
			 * @memberOf Tone.PitchShift#
			 * @type {Interval}
			 * @name pitch
			 * @example
			 * pitchShift.pitch = -12; //down one octave
			 * pitchShift.pitch = 7; //up a fifth
			 */
		    Object.defineProperty(Tone.PitchShift.prototype, 'pitch', {
		        get: function () {
		            return this._pitch;
		        },
		        set: function (interval) {
		            this._pitch = interval;
		            var factor = 0;
		            if (interval < 0) {
		                this._lfoA.min = 0;
		                this._lfoA.max = this._windowSize;
		                this._lfoB.min = 0;
		                this._lfoB.max = this._windowSize;
		                factor = this.intervalToFrequencyRatio(interval - 1) + 1;
		            } else {
		                this._lfoA.min = this._windowSize;
		                this._lfoA.max = 0;
		                this._lfoB.min = this._windowSize;
		                this._lfoB.max = 0;
		                factor = this.intervalToFrequencyRatio(interval) - 1;
		            }
		            this._frequency.value = factor * (1.2 / this._windowSize);
		        }
		    });
		    /**
			 * The window size corresponds roughly to the sample length in a looping sampler. 
			 * Smaller values are desirable for a less noticeable delay time of the pitch shifted
			 * signal, but larger values will result in smoother pitch shifting for larger intervals. 
			 * A nominal range of 0.03 to 0.1 is recommended. 
			 * @memberOf Tone.PitchShift#
			 * @type {Time}
			 * @name windowSize
			 * @example
			 * pitchShift.windowSize = 0.1;
			 */
		    Object.defineProperty(Tone.PitchShift.prototype, 'windowSize', {
		        get: function () {
		            return this._windowSize;
		        },
		        set: function (size) {
		            this._windowSize = this.toSeconds(size);
		            this.pitch = this._pitch;
		        }
		    });
		    /**
			 *  Clean up.
			 *  @return  {Tone.PitchShift}  this
			 */
		    Tone.PitchShift.prototype.dispose = function () {
		        Tone.FeedbackEffect.prototype.dispose.call(this);
		        this._frequency.dispose();
		        this._frequency = null;
		        this._delayA.disconnect();
		        this._delayA = null;
		        this._delayB.disconnect();
		        this._delayB = null;
		        this._lfoA.dispose();
		        this._lfoA = null;
		        this._lfoB.dispose();
		        this._lfoB = null;
		        this._crossFade.dispose();
		        this._crossFade = null;
		        this._crossFadeLFO.dispose();
		        this._crossFadeLFO = null;
		        this._writable('delayTime');
		        this._feedbackDelay.dispose();
		        this._feedbackDelay = null;
		        this.delayTime = null;
		        return this;
		    };
		    return Tone.PitchShift;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Base class for stereo feedback effects where the effectReturn
			 *         is fed back into the same channel. 
			 *
			 *	@constructor
			 *	@extends {Tone.FeedbackEffect}
			 */
		    Tone.StereoFeedbackEffect = function () {
		        var options = this.optionsObject(arguments, ['feedback'], Tone.FeedbackEffect.defaults);
		        Tone.StereoEffect.call(this, options);
		        /**
				 *  controls the amount of feedback
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);
		        /**
				 *  the left side feeback
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._feedbackL = new Tone.Gain();
		        /**
				 *  the right side feeback
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._feedbackR = new Tone.Gain();
		        //connect it up
		        this.effectReturnL.chain(this._feedbackL, this.effectSendL);
		        this.effectReturnR.chain(this._feedbackR, this.effectSendR);
		        this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);
		        this._readOnly(['feedback']);
		    };
		    Tone.extend(Tone.StereoFeedbackEffect, Tone.FeedbackEffect);
		    /**
			 *  clean up
			 *  @returns {Tone.StereoFeedbackEffect} this
			 */
		    Tone.StereoFeedbackEffect.prototype.dispose = function () {
		        Tone.StereoEffect.prototype.dispose.call(this);
		        this._writable(['feedback']);
		        this.feedback.dispose();
		        this.feedback = null;
		        this._feedbackL.dispose();
		        this._feedbackL = null;
		        this._feedbackR.dispose();
		        this._feedbackR = null;
		        return this;
		    };
		    return Tone.StereoFeedbackEffect;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Applies a width factor to the mid/side seperation. 
			 *         0 is all mid and 1 is all side.
			 *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).
			 *         <br><br>
			 *         <code>
			 *         Mid *= 2*(1-width)<br>
			 *         Side *= 2*width
			 *         </code>
			 *
			 *  @extends {Tone.MidSideEffect}
			 *  @constructor
			 *  @param {NormalRange|Object} [width] The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.
			 */
		    Tone.StereoWidener = function () {
		        var options = this.optionsObject(arguments, ['width'], Tone.StereoWidener.defaults);
		        Tone.MidSideEffect.call(this, options);
		        /**
				 *  The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change. 
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);
		        /**
				 *  Mid multiplier
				 *  @type {Tone.Expr}
				 *  @private
				 */
		        this._midMult = new Tone.Expr('$0 * ($1 * (1 - $2))');
		        /**
				 *  Side multiplier
				 *  @type {Tone.Expr}
				 *  @private
				 */
		        this._sideMult = new Tone.Expr('$0 * ($1 * $2)');
		        /**
				 *  constant output of 2
				 *  @type {Tone}
				 *  @private
				 */
		        this._two = new Tone.Signal(2);
		        //the mid chain
		        this._two.connect(this._midMult, 0, 1);
		        this.width.connect(this._midMult, 0, 2);
		        //the side chain
		        this._two.connect(this._sideMult, 0, 1);
		        this.width.connect(this._sideMult, 0, 2);
		        //connect it to the effect send/return
		        this.midSend.chain(this._midMult, this.midReturn);
		        this.sideSend.chain(this._sideMult, this.sideReturn);
		        this._readOnly(['width']);
		    };
		    Tone.extend(Tone.StereoWidener, Tone.MidSideEffect);
		    /**
			 *  the default values
			 *  @static
			 *  @type {Object}
			 */
		    Tone.StereoWidener.defaults = { 'width': 0.5 };
		    /**
			 *  Clean up. 
			 *  @returns {Tone.StereoWidener} this
			 */
		    Tone.StereoWidener.prototype.dispose = function () {
		        Tone.MidSideEffect.prototype.dispose.call(this);
		        this._writable(['width']);
		        this.width.dispose();
		        this.width = null;
		        this._midMult.dispose();
		        this._midMult = null;
		        this._sideMult.dispose();
		        this._sideMult = null;
		        this._two.dispose();
		        this._two = null;
		        return this;
		    };
		    return Tone.StereoWidener;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Tremolo modulates the amplitude of an incoming signal using a Tone.LFO.
			 *         The type, frequency, and depth of the LFO is controllable.
			 *
			 *  @extends {Tone.StereoEffect}
			 *  @constructor
			 *  @param {Frequency} [frequency] The rate of the effect.
			 *  @param {NormalRange} [depth] The depth of the effect.
			 *  @example
			 * //create a tremolo and start it's LFO
			 * var tremolo = new Tone.Tremolo(9, 0.75).toMaster().start();
			 * //route an oscillator through the tremolo and start it
			 * var oscillator = new Tone.Oscillator().connect(tremolo).start();
			 */
		    Tone.Tremolo = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'depth'
		        ], Tone.Tremolo.defaults);
		        Tone.StereoEffect.call(this, options);
		        /**
				 *  The tremelo LFO in the left channel
				 *  @type  {Tone.LFO}
				 *  @private
				 */
		        this._lfoL = new Tone.LFO({
		            'phase': options.spread,
		            'min': 1,
		            'max': 0
		        });
		        /**
				 *  The tremelo LFO in the left channel
				 *  @type  {Tone.LFO}
				 *  @private
				 */
		        this._lfoR = new Tone.LFO({
		            'phase': options.spread,
		            'min': 1,
		            'max': 0
		        });
		        /**
				 *  Where the gain is multiplied
				 *  @type  {Tone.Gain}
				 *  @private
				 */
		        this._amplitudeL = new Tone.Gain();
		        /**
				 *  Where the gain is multiplied
				 *  @type  {Tone.Gain}
				 *  @private
				 */
		        this._amplitudeR = new Tone.Gain();
		        /**
				 *  The frequency of the tremolo.
				 *  @type  {Frequency}
				 *  @signal
				 */
		        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
		        /**
				 *  The depth of the effect. A depth of 0, has no effect
				 *  on the amplitude, and a depth of 1 makes the amplitude
				 *  modulate fully between 0 and 1.
				 *  @type  {NormalRange}
				 *  @signal
				 */
		        this.depth = new Tone.Signal(options.depth, Tone.Type.NormalRange);
		        this._readOnly([
		            'frequency',
		            'depth'
		        ]);
		        this.effectSendL.chain(this._amplitudeL, this.effectReturnL);
		        this.effectSendR.chain(this._amplitudeR, this.effectReturnR);
		        this._lfoL.connect(this._amplitudeL.gain);
		        this._lfoR.connect(this._amplitudeR.gain);
		        this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);
		        this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);
		        this.type = options.type;
		        this.spread = options.spread;
		    };
		    Tone.extend(Tone.Tremolo, Tone.StereoEffect);
		    /**
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.Tremolo.defaults = {
		        'frequency': 10,
		        'type': 'sine',
		        'depth': 0.5,
		        'spread': 180
		    };
		    /**
			 * Start the tremolo.
			 * @param {Time} [time=now] When the tremolo begins.
			 * @returns {Tone.Tremolo} this
			 */
		    Tone.Tremolo.prototype.start = function (time) {
		        this._lfoL.start(time);
		        this._lfoR.start(time);
		        return this;
		    };
		    /**
			 * Stop the tremolo.
			 * @param {Time} [time=now] When the tremolo stops.
			 * @returns {Tone.Tremolo} this
			 */
		    Tone.Tremolo.prototype.stop = function (time) {
		        this._lfoL.stop(time);
		        this._lfoR.stop(time);
		        return this;
		    };
		    /**
			 * Sync the effect to the transport.
			 * @param {Time} [delay=0] Delay time before starting the effect after the
			 *                              Transport has started.
			 * @returns {Tone.AutoFilter} this
			 */
		    Tone.Tremolo.prototype.sync = function (delay) {
		        this._lfoL.sync(delay);
		        this._lfoR.sync(delay);
		        return this;
		    };
		    /**
			 * Unsync the filter from the transport
			 * @returns {Tone.Tremolo} this
			 */
		    Tone.Tremolo.prototype.unsync = function () {
		        this._lfoL.unsync();
		        this._lfoR.unsync();
		        return this;
		    };
		    /**
			 * The Tremolo's oscillator type.
			 * @memberOf Tone.Tremolo#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.Tremolo.prototype, 'type', {
		        get: function () {
		            return this._lfoL.type;
		        },
		        set: function (type) {
		            this._lfoL.type = type;
		            this._lfoR.type = type;
		        }
		    });
		    /** 
			 * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.
			 * When set to 180, LFO's will be panned hard left and right respectively.
			 * @memberOf Tone.Tremolo#
			 * @type {Degrees}
			 * @name spread
			 */
		    Object.defineProperty(Tone.Tremolo.prototype, 'spread', {
		        get: function () {
		            return this._lfoR.phase - this._lfoL.phase;    //180
		        },
		        set: function (spread) {
		            this._lfoL.phase = 90 - spread / 2;
		            this._lfoR.phase = spread / 2 + 90;
		        }
		    });
		    /**
			 *  clean up
			 *  @returns {Tone.Tremolo} this
			 */
		    Tone.Tremolo.prototype.dispose = function () {
		        Tone.StereoEffect.prototype.dispose.call(this);
		        this._writable([
		            'frequency',
		            'depth'
		        ]);
		        this._lfoL.dispose();
		        this._lfoL = null;
		        this._lfoR.dispose();
		        this._lfoR = null;
		        this._amplitudeL.dispose();
		        this._amplitudeL = null;
		        this._amplitudeR.dispose();
		        this._amplitudeR = null;
		        this.frequency = null;
		        this.depth = null;
		        return this;
		    };
		    return Tone.Tremolo;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO
			 *         modulates the delayTime of the delay, causing the pitch to rise
			 *         and fall. 
			 *  @extends {Tone.Effect}
			 *  @param {Frequency} frequency The frequency of the vibrato.
			 *  @param {NormalRange} depth The amount the pitch is modulated.
			 */
		    Tone.Vibrato = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'depth'
		        ], Tone.Vibrato.defaults);
		        Tone.Effect.call(this, options);
		        /**
				 *  The delay node used for the vibrato effect
				 *  @type {Tone.Delay}
				 *  @private
				 */
		        this._delayNode = new Tone.Delay(0, options.maxDelay);
		        /**
				 *  The LFO used to control the vibrato
				 *  @type {Tone.LFO}
				 *  @private
				 */
		        this._lfo = new Tone.LFO({
		            'type': options.type,
		            'min': 0,
		            'max': options.maxDelay,
		            'frequency': options.frequency,
		            'phase': -90    //offse the phase so the resting position is in the center
		        }).start().connect(this._delayNode.delayTime);
		        /**
				 *  The frequency of the vibrato
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = this._lfo.frequency;
		        /**
				 *  The depth of the vibrato. 
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.depth = this._lfo.amplitude;
		        this.depth.value = options.depth;
		        this._readOnly([
		            'frequency',
		            'depth'
		        ]);
		        this.effectSend.chain(this._delayNode, this.effectReturn);
		    };
		    Tone.extend(Tone.Vibrato, Tone.Effect);
		    /**
			 *  The defaults
			 *  @type  {Object}
			 *  @const
			 */
		    Tone.Vibrato.defaults = {
		        'maxDelay': 0.005,
		        'frequency': 5,
		        'depth': 0.1,
		        'type': 'sine'
		    };
		    /**
			 * Type of oscillator attached to the Vibrato.
			 * @memberOf Tone.Vibrato#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.Vibrato.prototype, 'type', {
		        get: function () {
		            return this._lfo.type;
		        },
		        set: function (type) {
		            this._lfo.type = type;
		        }
		    });
		    /**
			 *  Clean up.
			 *  @returns {Tone.Vibrato} this
			 */
		    Tone.Vibrato.prototype.dispose = function () {
		        Tone.Effect.prototype.dispose.call(this);
		        this._delayNode.dispose();
		        this._delayNode = null;
		        this._lfo.dispose();
		        this._lfo = null;
		        this._writable([
		            'frequency',
		            'depth'
		        ]);
		        this.frequency = null;
		        this.depth = null;
		    };
		    return Tone.Vibrato;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Event abstracts away Tone.Transport.schedule and provides a schedulable
			 *          callback for a single or repeatable events along the timeline. 
			 *
			 *  @extends {Tone}
			 *  @param {function} callback The callback to invoke at the time. 
			 *  @param {*} value The value or values which should be passed to
			 *                      the callback function on invocation.  
			 *  @example
			 * var chord = new Tone.Event(function(time, chord){
			 * 	//the chord as well as the exact time of the event
			 * 	//are passed in as arguments to the callback function
			 * }, ["D4", "E4", "F4"]);
			 * //start the chord at the beginning of the transport timeline
			 * chord.start();
			 * //loop it every measure for 8 measures
			 * chord.loop = 8;
			 * chord.loopEnd = "1m";
			 */
		    Tone.Event = function () {
		        var options = this.optionsObject(arguments, [
		            'callback',
		            'value'
		        ], Tone.Event.defaults);
		        /**
				 *  Loop value
				 *  @type  {Boolean|Positive}
				 *  @private
				 */
		        this._loop = options.loop;
		        /**
				 *  The callback to invoke. 
				 *  @type  {Function}
				 */
		        this.callback = options.callback;
		        /**
				 *  The value which is passed to the
				 *  callback function.
				 *  @type  {*}
				 *  @private
				 */
		        this.value = options.value;
		        /**
				 *  When the note is scheduled to start.
				 *  @type  {Number}
				 *  @private
				 */
		        this._loopStart = this.toTicks(options.loopStart);
		        /**
				 *  When the note is scheduled to start.
				 *  @type  {Number}
				 *  @private
				 */
		        this._loopEnd = this.toTicks(options.loopEnd);
		        /**
				 *  Tracks the scheduled events
				 *  @type {Tone.TimelineState}
				 *  @private
				 */
		        this._state = new Tone.TimelineState(Tone.State.Stopped);
		        /**
				 *  The playback speed of the note. A speed of 1
				 *  is no change. 
				 *  @private
				 *  @type {Positive}
				 */
		        this._playbackRate = 1;
		        /**
				 *  A delay time from when the event is scheduled to start
				 *  @type {Ticks}
				 *  @private
				 */
		        this._startOffset = 0;
		        /**
				 *  The probability that the callback will be invoked
				 *  at the scheduled time. 
				 *  @type {NormalRange}
				 *  @example
				 * //the callback will be invoked 50% of the time
				 * event.probability = 0.5;
				 */
		        this.probability = options.probability;
		        /**
				 *  If set to true, will apply small (+/-0.02 seconds) random variation
				 *  to the callback time. If the value is given as a time, it will randomize
				 *  by that amount.
				 *  @example
				 * event.humanize = true;
				 *  @type {Boolean|Time}
				 */
		        this.humanize = options.humanize;
		        /**
				 *  If mute is true, the callback won't be
				 *  invoked.
				 *  @type {Boolean}
				 */
		        this.mute = options.mute;
		        //set the initial values
		        this.playbackRate = options.playbackRate;
		    };
		    Tone.extend(Tone.Event);
		    /**
			 *  The default values
			 *  @type  {Object}
			 *  @const
			 */
		    Tone.Event.defaults = {
		        'callback': Tone.noOp,
		        'loop': false,
		        'loopEnd': '1m',
		        'loopStart': 0,
		        'playbackRate': 1,
		        'value': null,
		        'probability': 1,
		        'mute': false,
		        'humanize': false
		    };
		    /**
			 *  Reschedule all of the events along the timeline
			 *  with the updated values.
			 *  @param {Time} after Only reschedules events after the given time.
			 *  @return  {Tone.Event}  this
			 *  @private
			 */
		    Tone.Event.prototype._rescheduleEvents = function (after) {
		        //if no argument is given, schedules all of the events
		        after = this.defaultArg(after, -1);
		        this._state.forEachFrom(after, function (event) {
		            var duration;
		            if (event.state === Tone.State.Started) {
		                if (!this.isUndef(event.id)) {
		                    Tone.Transport.clear(event.id);
		                }
		                var startTick = event.time + Math.round(this.startOffset / this._playbackRate);
		                if (this._loop) {
		                    duration = Infinity;
		                    if (this.isNumber(this._loop)) {
		                        duration = this._loop * this._getLoopDuration();
		                    }
		                    var nextEvent = this._state.getEventAfter(startTick);
		                    if (nextEvent !== null) {
		                        duration = Math.min(duration, nextEvent.time - startTick);
		                    }
		                    if (duration !== Infinity) {
		                        //schedule a stop since it's finite duration
		                        this._state.setStateAtTime(Tone.State.Stopped, startTick + duration + 1);
		                        duration = Tone.Time(duration, 'i');
		                    }
		                    var interval = Tone.Time(this._getLoopDuration(), 'i');
		                    event.id = Tone.Transport.scheduleRepeat(this._tick.bind(this), interval, Tone.TransportTime(startTick, 'i'), duration);
		                } else {
		                    event.id = Tone.Transport.schedule(this._tick.bind(this), startTick + 'i');
		                }
		            }
		        }.bind(this));
		        return this;
		    };
		    /**
			 *  Returns the playback state of the note, either "started" or "stopped".
			 *  @type {String}
			 *  @readOnly
			 *  @memberOf Tone.Event#
			 *  @name state
			 */
		    Object.defineProperty(Tone.Event.prototype, 'state', {
		        get: function () {
		            return this._state.getStateAtTime(Tone.Transport.ticks);
		        }
		    });
		    /**
			 *  The start from the scheduled start time
			 *  @type {Ticks}
			 *  @memberOf Tone.Event#
			 *  @name startOffset
			 *  @private
			 */
		    Object.defineProperty(Tone.Event.prototype, 'startOffset', {
		        get: function () {
		            return this._startOffset;
		        },
		        set: function (offset) {
		            this._startOffset = offset;
		        }
		    });
		    /**
			 *  Start the note at the given time. 
			 *  @param  {TimelinePosition}  time  When the note should start.
			 *  @return  {Tone.Event}  this
			 */
		    Tone.Event.prototype.start = function (time) {
		        time = this.toTicks(time);
		        if (this._state.getStateAtTime(time) === Tone.State.Stopped) {
		            this._state.addEvent({
		                'state': Tone.State.Started,
		                'time': time,
		                'id': undefined
		            });
		            this._rescheduleEvents(time);
		        }
		        return this;
		    };
		    /**
			 *  Stop the Event at the given time.
			 *  @param  {TimelinePosition}  time  When the note should stop.
			 *  @return  {Tone.Event}  this
			 */
		    Tone.Event.prototype.stop = function (time) {
		        this.cancel(time);
		        time = this.toTicks(time);
		        if (this._state.getStateAtTime(time) === Tone.State.Started) {
		            this._state.setStateAtTime(Tone.State.Stopped, time);
		            var previousEvent = this._state.getEventBefore(time);
		            var reschedulTime = time;
		            if (previousEvent !== null) {
		                reschedulTime = previousEvent.time;
		            }
		            this._rescheduleEvents(reschedulTime);
		        }
		        return this;
		    };
		    /**
			 *  Cancel all scheduled events greater than or equal to the given time
			 *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.
			 *  @return  {Tone.Event}  this
			 */
		    Tone.Event.prototype.cancel = function (time) {
		        time = this.defaultArg(time, -Infinity);
		        time = this.toTicks(time);
		        this._state.forEachFrom(time, function (event) {
		            Tone.Transport.clear(event.id);
		        });
		        this._state.cancel(time);
		        return this;
		    };
		    /**
			 *  The callback function invoker. Also 
			 *  checks if the Event is done playing
			 *  @param  {Number}  time  The time of the event in seconds
			 *  @private
			 */
		    Tone.Event.prototype._tick = function (time) {
		        if (!this.mute && this._state.getStateAtTime(Tone.Transport.ticks) === Tone.State.Started) {
		            if (this.probability < 1 && Math.random() > this.probability) {
		                return;
		            }
		            if (this.humanize) {
		                var variation = 0.02;
		                if (!this.isBoolean(this.humanize)) {
		                    variation = this.toSeconds(this.humanize);
		                }
		                time += (Math.random() * 2 - 1) * variation;
		            }
		            this.callback(time, this.value);
		        }
		    };
		    /**
			 *  Get the duration of the loop.
			 *  @return  {Ticks}
			 *  @private
			 */
		    Tone.Event.prototype._getLoopDuration = function () {
		        return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);
		    };
		    /**
			 *  If the note should loop or not
			 *  between Tone.Event.loopStart and 
			 *  Tone.Event.loopEnd. An integer
			 *  value corresponds to the number of
			 *  loops the Event does after it starts.
			 *  @memberOf Tone.Event#
			 *  @type {Boolean|Positive}
			 *  @name loop
			 */
		    Object.defineProperty(Tone.Event.prototype, 'loop', {
		        get: function () {
		            return this._loop;
		        },
		        set: function (loop) {
		            this._loop = loop;
		            this._rescheduleEvents();
		        }
		    });
		    /**
			 * 	The playback rate of the note. Defaults to 1.
			 *  @memberOf Tone.Event#
			 *  @type {Positive}
			 *  @name playbackRate
			 *  @example
			 * note.loop = true;
			 * //repeat the note twice as fast
			 * note.playbackRate = 2;
			 */
		    Object.defineProperty(Tone.Event.prototype, 'playbackRate', {
		        get: function () {
		            return this._playbackRate;
		        },
		        set: function (rate) {
		            this._playbackRate = rate;
		            this._rescheduleEvents();
		        }
		    });
		    /**
			 *  The loopEnd point is the time the event will loop
			 *  if Tone.Event.loop is true.
			 *  @memberOf Tone.Event#
			 *  @type {TransportTime}
			 *  @name loopEnd
			 */
		    Object.defineProperty(Tone.Event.prototype, 'loopEnd', {
		        get: function () {
		            return Tone.TransportTime(this._loopEnd, 'i').toNotation();
		        },
		        set: function (loopEnd) {
		            this._loopEnd = this.toTicks(loopEnd);
		            if (this._loop) {
		                this._rescheduleEvents();
		            }
		        }
		    });
		    /**
			 *  The time when the loop should start. 
			 *  @memberOf Tone.Event#
			 *  @type {TransportTime}
			 *  @name loopStart
			 */
		    Object.defineProperty(Tone.Event.prototype, 'loopStart', {
		        get: function () {
		            return Tone.TransportTime(this._loopStart, 'i').toNotation();
		        },
		        set: function (loopStart) {
		            this._loopStart = this.toTicks(loopStart);
		            if (this._loop) {
		                this._rescheduleEvents();
		            }
		        }
		    });
		    /**
			 *  The current progress of the loop interval.
			 *  Returns 0 if the event is not started yet or
			 *  it is not set to loop.
			 *  @memberOf Tone.Event#
			 *  @type {NormalRange}
			 *  @name progress
			 *  @readOnly
			 */
		    Object.defineProperty(Tone.Event.prototype, 'progress', {
		        get: function () {
		            if (this._loop) {
		                var ticks = Tone.Transport.ticks;
		                var lastEvent = this._state.getEvent(ticks);
		                if (lastEvent !== null && lastEvent.state === Tone.State.Started) {
		                    var loopDuration = this._getLoopDuration();
		                    var progress = (ticks - lastEvent.time) % loopDuration;
		                    return progress / loopDuration;
		                } else {
		                    return 0;
		                }
		            } else {
		                return 0;
		            }
		        }
		    });
		    /**
			 *  Clean up
			 *  @return  {Tone.Event}  this
			 */
		    Tone.Event.prototype.dispose = function () {
		        this.cancel();
		        this._state.dispose();
		        this._state = null;
		        this.callback = null;
		        this.value = null;
		    };
		    return Tone.Event;
		});
		Module(function (Tone) {
		    /**
			 *  @class Tone.Loop creates a looped callback at the 
			 *         specified interval. The callback can be 
			 *         started, stopped and scheduled along
			 *         the Transport's timeline. 
			 *  @example
			 * var loop = new Tone.Loop(function(time){
			 * 	//triggered every eighth note. 
			 * 	console.log(time);
			 * }, "8n").start(0);
			 * Tone.Transport.start();
			 *  @extends {Tone}
			 *  @param {Function} callback The callback to invoke with the event.
			 *  @param {Time} interval The time between successive callback calls. 
			 */
		    Tone.Loop = function () {
		        var options = this.optionsObject(arguments, [
		            'callback',
		            'interval'
		        ], Tone.Loop.defaults);
		        /**
				 *  The event which produces the callbacks
				 */
		        this._event = new Tone.Event({
		            'callback': this._tick.bind(this),
		            'loop': true,
		            'loopEnd': options.interval,
		            'playbackRate': options.playbackRate,
		            'probability': options.probability
		        });
		        /**
				 *  The callback to invoke with the next event in the pattern
				 *  @type {Function}
				 */
		        this.callback = options.callback;
		        //set the iterations
		        this.iterations = options.iterations;
		    };
		    Tone.extend(Tone.Loop);
		    /**
			 *  The defaults
			 *  @const
			 *  @type  {Object}
			 */
		    Tone.Loop.defaults = {
		        'interval': '4n',
		        'callback': Tone.noOp,
		        'playbackRate': 1,
		        'iterations': Infinity,
		        'probability': true,
		        'mute': false
		    };
		    /**
			 *  Start the loop at the specified time along the Transport's
			 *  timeline.
			 *  @param  {TimelinePosition=}  time  When to start the Loop.
			 *  @return  {Tone.Loop}  this
			 */
		    Tone.Loop.prototype.start = function (time) {
		        this._event.start(time);
		        return this;
		    };
		    /**
			 *  Stop the loop at the given time.
			 *  @param  {TimelinePosition=}  time  When to stop the Arpeggio
			 *  @return  {Tone.Loop}  this
			 */
		    Tone.Loop.prototype.stop = function (time) {
		        this._event.stop(time);
		        return this;
		    };
		    /**
			 *  Cancel all scheduled events greater than or equal to the given time
			 *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.
			 *  @return  {Tone.Loop}  this
			 */
		    Tone.Loop.prototype.cancel = function (time) {
		        this._event.cancel(time);
		        return this;
		    };
		    /**
			 *  Internal function called when the notes should be called
			 *  @param  {Number}  time  The time the event occurs
			 *  @private
			 */
		    Tone.Loop.prototype._tick = function (time) {
		        this.callback(time);
		    };
		    /**
			 *  The state of the Loop, either started or stopped.
			 *  @memberOf Tone.Loop#
			 *  @type {String}
			 *  @name state
			 *  @readOnly
			 */
		    Object.defineProperty(Tone.Loop.prototype, 'state', {
		        get: function () {
		            return this._event.state;
		        }
		    });
		    /**
			 *  The progress of the loop as a value between 0-1. 0, when
			 *  the loop is stopped or done iterating. 
			 *  @memberOf Tone.Loop#
			 *  @type {NormalRange}
			 *  @name progress
			 *  @readOnly
			 */
		    Object.defineProperty(Tone.Loop.prototype, 'progress', {
		        get: function () {
		            return this._event.progress;
		        }
		    });
		    /**
			 *  The time between successive callbacks. 
			 *  @example
			 * loop.interval = "8n"; //loop every 8n
			 *  @memberOf Tone.Loop#
			 *  @type {Time}
			 *  @name interval
			 */
		    Object.defineProperty(Tone.Loop.prototype, 'interval', {
		        get: function () {
		            return this._event.loopEnd;
		        },
		        set: function (interval) {
		            this._event.loopEnd = interval;
		        }
		    });
		    /**
			 *  The playback rate of the loop. The normal playback rate is 1 (no change). 
			 *  A `playbackRate` of 2 would be twice as fast. 
			 *  @memberOf Tone.Loop#
			 *  @type {Time}
			 *  @name playbackRate
			 */
		    Object.defineProperty(Tone.Loop.prototype, 'playbackRate', {
		        get: function () {
		            return this._event.playbackRate;
		        },
		        set: function (rate) {
		            this._event.playbackRate = rate;
		        }
		    });
		    /**
			 *  Random variation +/-0.01s to the scheduled time. 
			 *  Or give it a time value which it will randomize by.
			 *  @type {Boolean|Time}
			 *  @memberOf Tone.Loop#
			 *  @name humanize
			 */
		    Object.defineProperty(Tone.Loop.prototype, 'humanize', {
		        get: function () {
		            return this._event.humanize;
		        },
		        set: function (variation) {
		            this._event.humanize = variation;
		        }
		    });
		    /**
			 *  The probably of the callback being invoked.
			 *  @memberOf Tone.Loop#
			 *  @type {NormalRange}
			 *  @name probability
			 */
		    Object.defineProperty(Tone.Loop.prototype, 'probability', {
		        get: function () {
		            return this._event.probability;
		        },
		        set: function (prob) {
		            this._event.probability = prob;
		        }
		    });
		    /**
			 *  Muting the Loop means that no callbacks are invoked.
			 *  @memberOf Tone.Loop#
			 *  @type {Boolean}
			 *  @name mute
			 */
		    Object.defineProperty(Tone.Loop.prototype, 'mute', {
		        get: function () {
		            return this._event.mute;
		        },
		        set: function (mute) {
		            this._event.mute = mute;
		        }
		    });
		    /**
			 *  The number of iterations of the loop. The default
			 *  value is Infinity (loop forever).
			 *  @memberOf Tone.Loop#
			 *  @type {Positive}
			 *  @name iterations
			 */
		    Object.defineProperty(Tone.Loop.prototype, 'iterations', {
		        get: function () {
		            if (this._event.loop === true) {
		                return Infinity;
		            } else {
		                return this._event.loop;
		            }
		            return this._pattern.index;
		        },
		        set: function (iters) {
		            if (iters === Infinity) {
		                this._event.loop = true;
		            } else {
		                this._event.loop = iters;
		            }
		        }
		    });
		    /**
			 *  Clean up
			 *  @return  {Tone.Loop}  this
			 */
		    Tone.Loop.prototype.dispose = function () {
		        this._event.dispose();
		        this._event = null;
		        this.callback = null;
		    };
		    return Tone.Loop;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Part is a collection Tone.Events which can be
			 *         started/stoped and looped as a single unit.
			 *
			 *  @extends {Tone.Event}
			 *  @param {Function} callback The callback to invoke on each event
			 *  @param {Array} events the array of events
			 *  @example
			 * var part = new Tone.Part(function(time, note){
			 * 	//the notes given as the second element in the array
			 * 	//will be passed in as the second argument
			 * 	synth.triggerAttackRelease(note, "8n", time);
			 * }, [[0, "C2"], ["0:2", "C3"], ["0:3:2", "G2"]]);
			 *  @example
			 * //use an array of objects as long as the object has a "time" attribute
			 * var part = new Tone.Part(function(time, value){
			 * 	//the value is an object which contains both the note and the velocity
			 * 	synth.triggerAttackRelease(value.note, "8n", time, value.velocity);
			 * }, [{"time" : 0, "note" : "C3", "velocity": 0.9}, 
			 * 	   {"time" : "0:2", "note" : "C4", "velocity": 0.5}
			 * ]).start(0);
			 */
		    Tone.Part = function () {
		        var options = this.optionsObject(arguments, [
		            'callback',
		            'events'
		        ], Tone.Part.defaults);
		        /**
				 *  If the part is looping or not
				 *  @type  {Boolean|Positive}
				 *  @private
				 */
		        this._loop = options.loop;
		        /**
				 *  When the note is scheduled to start.
				 *  @type  {Ticks}
				 *  @private
				 */
		        this._loopStart = this.toTicks(options.loopStart);
		        /**
				 *  When the note is scheduled to start.
				 *  @type  {Ticks}
				 *  @private
				 */
		        this._loopEnd = this.toTicks(options.loopEnd);
		        /**
				 *  The playback rate of the part
				 *  @type  {Positive}
				 *  @private
				 */
		        this._playbackRate = options.playbackRate;
		        /**
				 *  private holder of probability value
				 *  @type {NormalRange}
				 *  @private
				 */
		        this._probability = options.probability;
		        /**
				 *  the amount of variation from the
				 *  given time. 
				 *  @type {Boolean|Time}
				 *  @private
				 */
		        this._humanize = options.humanize;
		        /**
				 *  The start offset
				 *  @type {Ticks}
				 *  @private
				 */
		        this._startOffset = 0;
		        /**
				 *  Keeps track of the current state
				 *  @type {Tone.TimelineState}
				 *  @private
				 */
		        this._state = new Tone.TimelineState(Tone.State.Stopped);
		        /**
				 *  An array of Objects. 
				 *  @type  {Array}
				 *  @private
				 */
		        this._events = [];
		        /**
				 *  The callback to invoke at all the scheduled events.
				 *  @type {Function}
				 */
		        this.callback = options.callback;
		        /**
				 *  If mute is true, the callback won't be
				 *  invoked.
				 *  @type {Boolean}
				 */
		        this.mute = options.mute;
		        //add the events
		        var events = this.defaultArg(options.events, []);
		        if (!this.isUndef(options.events)) {
		            for (var i = 0; i < events.length; i++) {
		                if (Array.isArray(events[i])) {
		                    this.add(events[i][0], events[i][1]);
		                } else {
		                    this.add(events[i]);
		                }
		            }
		        }
		    };
		    Tone.extend(Tone.Part, Tone.Event);
		    /**
			 *  The default values
			 *  @type  {Object}
			 *  @const
			 */
		    Tone.Part.defaults = {
		        'callback': Tone.noOp,
		        'loop': false,
		        'loopEnd': '1m',
		        'loopStart': 0,
		        'playbackRate': 1,
		        'probability': 1,
		        'humanize': false,
		        'mute': false
		    };
		    /**
			 *  Start the part at the given time. 
			 *  @param  {TransportTime}  time    When to start the part.
			 *  @param  {Time=}  offset  The offset from the start of the part
			 *                           to begin playing at.
			 *  @return  {Tone.Part}  this
			 */
		    Tone.Part.prototype.start = function (time, offset) {
		        var ticks = this.toTicks(time);
		        if (this._state.getStateAtTime(ticks) !== Tone.State.Started) {
		            if (this._loop) {
		                offset = this.defaultArg(offset, this._loopStart);
		            } else {
		                offset = this.defaultArg(offset, 0);
		            }
		            offset = this.toTicks(offset);
		            this._state.addEvent({
		                'state': Tone.State.Started,
		                'time': ticks,
		                'offset': offset
		            });
		            this._forEach(function (event) {
		                this._startNote(event, ticks, offset);
		            });
		        }
		        return this;
		    };
		    /**
			 *  Start the event in the given event at the correct time given
			 *  the ticks and offset and looping.
			 *  @param  {Tone.Event}  event 
			 *  @param  {Ticks}  ticks
			 *  @param  {Ticks}  offset
			 *  @private
			 */
		    Tone.Part.prototype._startNote = function (event, ticks, offset) {
		        ticks -= offset;
		        if (this._loop) {
		            if (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {
		                if (event.startOffset < offset) {
		                    //start it on the next loop
		                    ticks += this._getLoopDuration();
		                }
		                event.start(Tone.TransportTime(ticks, 'i'));
		            } else if (event.startOffset < this._loopStart && event.startOffset >= offset) {
		                event.loop = false;
		                event.start(Tone.TransportTime(ticks, 'i'));
		            }
		        } else {
		            if (event.startOffset >= offset) {
		                event.start(Tone.TransportTime(ticks, 'i'));
		            }
		        }
		    };
		    /**
			 *  The start from the scheduled start time
			 *  @type {Ticks}
			 *  @memberOf Tone.Part#
			 *  @name startOffset
			 *  @private
			 */
		    Object.defineProperty(Tone.Part.prototype, 'startOffset', {
		        get: function () {
		            return this._startOffset;
		        },
		        set: function (offset) {
		            this._startOffset = offset;
		            this._forEach(function (event) {
		                event.startOffset += this._startOffset;
		            });
		        }
		    });
		    /**
			 *  Stop the part at the given time.
			 *  @param  {TimelinePosition}  time  When to stop the part.
			 *  @return  {Tone.Part}  this
			 */
		    Tone.Part.prototype.stop = function (time) {
		        var ticks = this.toTicks(time);
		        this._state.cancel(ticks);
		        this._state.setStateAtTime(Tone.State.Stopped, ticks);
		        this._forEach(function (event) {
		            event.stop(time);
		        });
		        return this;
		    };
		    /**
			 *  Get/Set an Event's value at the given time. 
			 *  If a value is passed in and no event exists at
			 *  the given time, one will be created with that value. 
			 *  If two events are at the same time, the first one will
			 *  be returned.
			 *  @example
			 * part.at("1m"); //returns the part at the first measure
			 *
			 * part.at("2m", "C2"); //set the value at "2m" to C2. 
			 * //if an event didn't exist at that time, it will be created.
			 *  @param {TransportTime} time The time of the event to get or set.
			 *  @param {*=} value If a value is passed in, the value of the
			 *                    event at the given time will be set to it.
			 *  @return {Tone.Event} the event at the time
			 */
		    Tone.Part.prototype.at = function (time, value) {
		        time = Tone.TransportTime(time);
		        var tickTime = Tone.Time(1, 'i').toSeconds();
		        for (var i = 0; i < this._events.length; i++) {
		            var event = this._events[i];
		            if (Math.abs(time.toTicks() - event.startOffset) < tickTime) {
		                if (!this.isUndef(value)) {
		                    event.value = value;
		                }
		                return event;
		            }
		        }
		        //if there was no event at that time, create one
		        if (!this.isUndef(value)) {
		            this.add(time, value);
		            //return the new event
		            return this._events[this._events.length - 1];
		        } else {
		            return null;
		        }
		    };
		    /**
			 *  Add a an event to the part. 
			 *  @param {Time} time The time the note should start.
			 *                            If an object is passed in, it should
			 *                            have a 'time' attribute and the rest
			 *                            of the object will be used as the 'value'.
			 *  @param  {Tone.Event|*}  value 
			 *  @returns {Tone.Part} this
			 *  @example
			 * part.add("1m", "C#+11");
			 */
		    Tone.Part.prototype.add = function (time, value) {
		        //extract the parameters
		        if (time.hasOwnProperty('time')) {
		            value = time;
		            time = value.time;
		        }
		        time = this.toTicks(time);
		        var event;
		        if (value instanceof Tone.Event) {
		            event = value;
		            event.callback = this._tick.bind(this);
		        } else {
		            event = new Tone.Event({
		                'callback': this._tick.bind(this),
		                'value': value
		            });
		        }
		        //the start offset
		        event.startOffset = time;
		        //initialize the values
		        event.set({
		            'loopEnd': this.loopEnd,
		            'loopStart': this.loopStart,
		            'loop': this.loop,
		            'humanize': this.humanize,
		            'playbackRate': this.playbackRate,
		            'probability': this.probability
		        });
		        this._events.push(event);
		        //start the note if it should be played right now
		        this._restartEvent(event);
		        return this;
		    };
		    /**
			 *  Restart the given event
			 *  @param  {Tone.Event}  event 
			 *  @private
			 */
		    Tone.Part.prototype._restartEvent = function (event) {
		        var stateEvent = this._state.getEvent(Tone.Transport.ticks);
		        if (stateEvent && stateEvent.state === Tone.State.Started) {
		            this._startNote(event, stateEvent.time, stateEvent.offset);
		        }
		    };
		    /**
			 *  Remove an event from the part. Will recursively iterate
			 *  into nested parts to find the event.
			 *  @param {Time} time The time of the event
			 *  @param {*} value Optionally select only a specific event value
			 *  @return  {Tone.Part}  this
			 */
		    Tone.Part.prototype.remove = function (time, value) {
		        //extract the parameters
		        if (time.hasOwnProperty('time')) {
		            value = time;
		            time = value.time;
		        }
		        time = this.toTicks(time);
		        for (var i = this._events.length - 1; i >= 0; i--) {
		            var event = this._events[i];
		            if (event instanceof Tone.Part) {
		                event.remove(time, value);
		            } else {
		                if (event.startOffset === time) {
		                    if (this.isUndef(value) || !this.isUndef(value) && event.value === value) {
		                        this._events.splice(i, 1);
		                        event.dispose();
		                    }
		                }
		            }
		        }
		        return this;
		    };
		    /**
			 *  Remove all of the notes from the group. 
			 *  @return  {Tone.Part}  this
			 */
		    Tone.Part.prototype.removeAll = function () {
		        this._forEach(function (event) {
		            event.dispose();
		        });
		        this._events = [];
		        return this;
		    };
		    /**
			 *  Cancel scheduled state change events: i.e. "start" and "stop".
			 *  @param {TimelinePosition} after The time after which to cancel the scheduled events.
			 *  @return  {Tone.Part}  this
			 */
		    Tone.Part.prototype.cancel = function (after) {
		        after = this.toTicks(after);
		        this._forEach(function (event) {
		            event.cancel(after);
		        });
		        this._state.cancel(after);
		        return this;
		    };
		    /**
			 *  Iterate over all of the events
			 *  @param {Function} callback
			 *  @param {Object} ctx The context
			 *  @private
			 */
		    Tone.Part.prototype._forEach = function (callback, ctx) {
		        ctx = this.defaultArg(ctx, this);
		        for (var i = this._events.length - 1; i >= 0; i--) {
		            var e = this._events[i];
		            if (e instanceof Tone.Part) {
		                e._forEach(callback, ctx);
		            } else {
		                callback.call(ctx, e);
		            }
		        }
		        return this;
		    };
		    /**
			 *  Set the attribute of all of the events
			 *  @param  {String}  attr  the attribute to set
			 *  @param  {*}  value      The value to set it to
			 *  @private
			 */
		    Tone.Part.prototype._setAll = function (attr, value) {
		        this._forEach(function (event) {
		            event[attr] = value;
		        });
		    };
		    /**
			 *  Internal tick method
			 *  @param  {Number}  time  The time of the event in seconds
			 *  @private
			 */
		    Tone.Part.prototype._tick = function (time, value) {
		        if (!this.mute) {
		            this.callback(time, value);
		        }
		    };
		    /**
			 *  Determine if the event should be currently looping
			 *  given the loop boundries of this Part.
			 *  @param  {Tone.Event}  event  The event to test
			 *  @private
			 */
		    Tone.Part.prototype._testLoopBoundries = function (event) {
		        if (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd) {
		            event.cancel();
		        } else {
		            //reschedule it if it's stopped
		            if (event.state === Tone.State.Stopped) {
		                this._restartEvent(event);
		            }
		        }
		    };
		    /**
			 *  The probability of the notes being triggered.
			 *  @memberOf Tone.Part#
			 *  @type {NormalRange}
			 *  @name probability
			 */
		    Object.defineProperty(Tone.Part.prototype, 'probability', {
		        get: function () {
		            return this._probability;
		        },
		        set: function (prob) {
		            this._probability = prob;
		            this._setAll('probability', prob);
		        }
		    });
		    /**
			 *  If set to true, will apply small random variation
			 *  to the callback time. If the value is given as a time, it will randomize
			 *  by that amount.
			 *  @example
			 * event.humanize = true;
			 *  @type {Boolean|Time}
			 *  @name humanize
			 */
		    Object.defineProperty(Tone.Part.prototype, 'humanize', {
		        get: function () {
		            return this._humanize;
		        },
		        set: function (variation) {
		            this._humanize = variation;
		            this._setAll('humanize', variation);
		        }
		    });
		    /**
			 *  If the part should loop or not
			 *  between Tone.Part.loopStart and 
			 *  Tone.Part.loopEnd. An integer
			 *  value corresponds to the number of
			 *  loops the Part does after it starts.
			 *  @memberOf Tone.Part#
			 *  @type {Boolean|Positive}
			 *  @name loop
			 *  @example
			 * //loop the part 8 times
			 * part.loop = 8;
			 */
		    Object.defineProperty(Tone.Part.prototype, 'loop', {
		        get: function () {
		            return this._loop;
		        },
		        set: function (loop) {
		            this._loop = loop;
		            this._forEach(function (event) {
		                event._loopStart = this._loopStart;
		                event._loopEnd = this._loopEnd;
		                event.loop = loop;
		                this._testLoopBoundries(event);
		            });
		        }
		    });
		    /**
			 *  The loopEnd point determines when it will 
			 *  loop if Tone.Part.loop is true.
			 *  @memberOf Tone.Part#
			 *  @type {TransportTime}
			 *  @name loopEnd
			 */
		    Object.defineProperty(Tone.Part.prototype, 'loopEnd', {
		        get: function () {
		            return Tone.TransportTime(this._loopEnd, 'i').toNotation();
		        },
		        set: function (loopEnd) {
		            this._loopEnd = this.toTicks(loopEnd);
		            if (this._loop) {
		                this._forEach(function (event) {
		                    event.loopEnd = this.loopEnd;
		                    this._testLoopBoundries(event);
		                });
		            }
		        }
		    });
		    /**
			 *  The loopStart point determines when it will 
			 *  loop if Tone.Part.loop is true.
			 *  @memberOf Tone.Part#
			 *  @type {TransportTime}
			 *  @name loopStart
			 */
		    Object.defineProperty(Tone.Part.prototype, 'loopStart', {
		        get: function () {
		            return Tone.TransportTime(this._loopStart, 'i').toNotation();
		        },
		        set: function (loopStart) {
		            this._loopStart = this.toTicks(loopStart);
		            if (this._loop) {
		                this._forEach(function (event) {
		                    event.loopStart = this.loopStart;
		                    this._testLoopBoundries(event);
		                });
		            }
		        }
		    });
		    /**
			 * 	The playback rate of the part
			 *  @memberOf Tone.Part#
			 *  @type {Positive}
			 *  @name playbackRate
			 */
		    Object.defineProperty(Tone.Part.prototype, 'playbackRate', {
		        get: function () {
		            return this._playbackRate;
		        },
		        set: function (rate) {
		            this._playbackRate = rate;
		            this._setAll('playbackRate', rate);
		        }
		    });
		    /**
			 * 	The number of scheduled notes in the part. 
			 *  @memberOf Tone.Part#
			 *  @type {Positive}
			 *  @name length
			 *  @readOnly
			 */
		    Object.defineProperty(Tone.Part.prototype, 'length', {
		        get: function () {
		            return this._events.length;
		        }
		    });
		    /**
			 *  Clean up
			 *  @return  {Tone.Part}  this
			 */
		    Tone.Part.prototype.dispose = function () {
		        this.removeAll();
		        this._state.dispose();
		        this._state = null;
		        this.callback = null;
		        this._events = null;
		        return this;
		    };
		    return Tone.Part;
		});
		Module(function (Tone) {
		    /**
			 *  @class Tone.Pattern arpeggiates between the given notes
			 *         in a number of patterns. See Tone.CtrlPattern for
			 *         a full list of patterns.
			 *  @example
			 * var pattern = new Tone.Pattern(function(time, note){
			 *   //the order of the notes passed in depends on the pattern
			 * }, ["C2", "D4", "E5", "A6"], "upDown");
			 *  @extends {Tone.Loop}
			 *  @param {Function} callback The callback to invoke with the
			 *                             event.
			 *  @param {Array} values The values to arpeggiate over.
			 */
		    Tone.Pattern = function () {
		        var options = this.optionsObject(arguments, [
		            'callback',
		            'values',
		            'pattern'
		        ], Tone.Pattern.defaults);
		        Tone.Loop.call(this, options);
		        /**
				 *  The pattern manager
				 *  @type {Tone.CtrlPattern}
				 *  @private
				 */
		        this._pattern = new Tone.CtrlPattern({
		            'values': options.values,
		            'type': options.pattern,
		            'index': options.index
		        });
		    };
		    Tone.extend(Tone.Pattern, Tone.Loop);
		    /**
			 *  The defaults
			 *  @const
			 *  @type  {Object}
			 */
		    Tone.Pattern.defaults = {
		        'pattern': Tone.CtrlPattern.Type.Up,
		        'values': []
		    };
		    /**
			 *  Internal function called when the notes should be called
			 *  @param  {Number}  time  The time the event occurs
			 *  @private
			 */
		    Tone.Pattern.prototype._tick = function (time) {
		        this.callback(time, this._pattern.value);
		        this._pattern.next();
		    };
		    /**
			 *  The current index in the values array.
			 *  @memberOf Tone.Pattern#
			 *  @type {Positive}
			 *  @name index
			 */
		    Object.defineProperty(Tone.Pattern.prototype, 'index', {
		        get: function () {
		            return this._pattern.index;
		        },
		        set: function (i) {
		            this._pattern.index = i;
		        }
		    });
		    /**
			 *  The array of events.
			 *  @memberOf Tone.Pattern#
			 *  @type {Array}
			 *  @name values
			 */
		    Object.defineProperty(Tone.Pattern.prototype, 'values', {
		        get: function () {
		            return this._pattern.values;
		        },
		        set: function (vals) {
		            this._pattern.values = vals;
		        }
		    });
		    /**
			 *  The current value of the pattern.
			 *  @memberOf Tone.Pattern#
			 *  @type {*}
			 *  @name value
			 *  @readOnly
			 */
		    Object.defineProperty(Tone.Pattern.prototype, 'value', {
		        get: function () {
		            return this._pattern.value;
		        }
		    });
		    /**
			 *  The pattern type. See Tone.CtrlPattern for the full list of patterns.
			 *  @memberOf Tone.Pattern#
			 *  @type {String}
			 *  @name pattern
			 */
		    Object.defineProperty(Tone.Pattern.prototype, 'pattern', {
		        get: function () {
		            return this._pattern.type;
		        },
		        set: function (pattern) {
		            this._pattern.type = pattern;
		        }
		    });
		    /**
			 *  Clean up
			 *  @return  {Tone.Pattern}  this
			 */
		    Tone.Pattern.prototype.dispose = function () {
		        Tone.Loop.prototype.dispose.call(this);
		        this._pattern.dispose();
		        this._pattern = null;
		    };
		    return Tone.Pattern;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class A sequence is an alternate notation of a part. Instead
			 *         of passing in an array of [time, event] pairs, pass
			 *         in an array of events which will be spaced at the
			 *         given subdivision. Sub-arrays will subdivide that beat
			 *         by the number of items are in the array. 
			 *         Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)
			 *  @param  {Function}  callback  The callback to invoke with every note
			 *  @param  {Array}    events  The sequence
			 *  @param  {Time} subdivision  The subdivision between which events are placed. 
			 *  @extends {Tone.Part}
			 *  @example
			 * var seq = new Tone.Sequence(function(time, note){
			 * 	console.log(note);
			 * //straight quater notes
			 * }, ["C4", "E4", "G4", "A4"], "4n");
			 *  @example
			 * var seq = new Tone.Sequence(function(time, note){
			 * 	console.log(note);
			 * //subdivisions are given as subarrays
			 * }, ["C4", ["E4", "D4", "E4"], "G4", ["A4", "G4"]]);
			 */
		    Tone.Sequence = function () {
		        var options = this.optionsObject(arguments, [
		            'callback',
		            'events',
		            'subdivision'
		        ], Tone.Sequence.defaults);
		        //remove the events
		        var events = options.events;
		        delete options.events;
		        Tone.Part.call(this, options);
		        /**
				 *  The subdivison of each note
				 *  @type  {Ticks}
				 *  @private
				 */
		        this._subdivision = this.toTicks(options.subdivision);
		        //if no time was passed in, the loop end is the end of the cycle
		        if (this.isUndef(options.loopEnd) && !this.isUndef(events)) {
		            this._loopEnd = events.length * this._subdivision;
		        }
		        //defaults to looping
		        this._loop = true;
		        //add all of the events
		        if (!this.isUndef(events)) {
		            for (var i = 0; i < events.length; i++) {
		                this.add(i, events[i]);
		            }
		        }
		    };
		    Tone.extend(Tone.Sequence, Tone.Part);
		    /**
			 *  The default values.
			 *  @type  {Object}
			 */
		    Tone.Sequence.defaults = { 'subdivision': '4n' };
		    /**
			 *  The subdivision of the sequence. This can only be 
			 *  set in the constructor. The subdivision is the 
			 *  interval between successive steps. 
			 *  @type {Time}
			 *  @memberOf Tone.Sequence#
			 *  @name subdivision
			 *  @readOnly
			 */
		    Object.defineProperty(Tone.Sequence.prototype, 'subdivision', {
		        get: function () {
		            return Tone.Time(this._subdivision, 'i').toNotation();
		        }
		    });
		    /**
			 *  Get/Set an index of the sequence. If the index contains a subarray, 
			 *  a Tone.Sequence representing that sub-array will be returned. 
			 *  @example
			 * var sequence = new Tone.Sequence(playNote, ["E4", "C4", "F#4", ["A4", "Bb3"]])
			 * sequence.at(0)// => returns "E4"
			 * //set a value
			 * sequence.at(0, "G3");
			 * //get a nested sequence
			 * sequence.at(3).at(1)// => returns "Bb3"
			 * @param {Positive} index The index to get or set
			 * @param {*} value Optionally pass in the value to set at the given index.
			 */
		    Tone.Sequence.prototype.at = function (index, value) {
		        //if the value is an array, 
		        if (this.isArray(value)) {
		            //remove the current event at that index
		            this.remove(index);
		        }
		        //call the parent's method
		        return Tone.Part.prototype.at.call(this, this._indexTime(index), value);
		    };
		    /**
			 *  Add an event at an index, if there's already something
			 *  at that index, overwrite it. If `value` is an array, 
			 *  it will be parsed as a subsequence.
			 *  @param {Number} index The index to add the event to
			 *  @param {*} value The value to add at that index
			 *  @returns {Tone.Sequence} this
			 */
		    Tone.Sequence.prototype.add = function (index, value) {
		        if (value === null) {
		            return this;
		        }
		        if (this.isArray(value)) {
		            //make a subsequence and add that to the sequence
		            var subSubdivision = Math.round(this._subdivision / value.length);
		            value = new Tone.Sequence(this._tick.bind(this), value, Tone.Time(subSubdivision, 'i'));
		        }
		        Tone.Part.prototype.add.call(this, this._indexTime(index), value);
		        return this;
		    };
		    /**
			 *  Remove a value from the sequence by index
			 *  @param {Number} index The index of the event to remove
			 *  @returns {Tone.Sequence} this
			 */
		    Tone.Sequence.prototype.remove = function (index, value) {
		        Tone.Part.prototype.remove.call(this, this._indexTime(index), value);
		        return this;
		    };
		    /**
			 *  Get the time of the index given the Sequence's subdivision
			 *  @param  {Number}  index 
			 *  @return  {Time}  The time of that index
			 *  @private
			 */
		    Tone.Sequence.prototype._indexTime = function (index) {
		        if (index instanceof Tone.TransportTime) {
		            return index;
		        } else {
		            return Tone.TransportTime(index * this._subdivision + this.startOffset, 'i');
		        }
		    };
		    /**
			 *  Clean up.
			 *  @return {Tone.Sequence} this
			 */
		    Tone.Sequence.prototype.dispose = function () {
		        Tone.Part.prototype.dispose.call(this);
		        return this;
		    };
		    return Tone.Sequence;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.PulseOscillator is a pulse oscillator with control over pulse width,
			 *         also known as the duty cycle. At 50% duty cycle (width = 0.5) the wave is 
			 *         a square and only odd-numbered harmonics are present. At all other widths 
			 *         even-numbered harmonics are present. Read more 
			 *         [here](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).
			 *
			 *  @constructor
			 *  @extends {Tone.Oscillator}
			 *  @param {Frequency} [frequency] The frequency of the oscillator
			 *  @param {NormalRange} [width] The width of the pulse
			 *  @example
			 * var pulse = new Tone.PulseOscillator("E5", 0.4).toMaster().start();
			 */
		    Tone.PulseOscillator = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'width'
		        ], Tone.Oscillator.defaults);
		        Tone.Source.call(this, options);
		        /**
				 *  The width of the pulse. 
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);
		        /**
				 *  gate the width amount
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._widthGate = new Tone.Gain();
		        /**
				 *  the sawtooth oscillator
				 *  @type {Tone.Oscillator}
				 *  @private
				 */
		        this._sawtooth = new Tone.Oscillator({
		            frequency: options.frequency,
		            detune: options.detune,
		            type: 'sawtooth',
		            phase: options.phase
		        });
		        /**
				 *  The frequency control.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = this._sawtooth.frequency;
		        /**
				 *  The detune in cents. 
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = this._sawtooth.detune;
		        /**
				 *  Threshold the signal to turn it into a square
				 *  @type {Tone.WaveShaper}
				 *  @private
				 */
		        this._thresh = new Tone.WaveShaper(function (val) {
		            if (val < 0) {
		                return -1;
		            } else {
		                return 1;
		            }
		        });
		        //connections
		        this._sawtooth.chain(this._thresh, this.output);
		        this.width.chain(this._widthGate, this._thresh);
		        this._readOnly([
		            'width',
		            'frequency',
		            'detune'
		        ]);
		    };
		    Tone.extend(Tone.PulseOscillator, Tone.Oscillator);
		    /**
			 *  The default parameters.
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.PulseOscillator.defaults = {
		        'frequency': 440,
		        'detune': 0,
		        'phase': 0,
		        'width': 0.2
		    };
		    /**
			 *  start the oscillator
			 *  @param  {Time} time 
			 *  @private
			 */
		    Tone.PulseOscillator.prototype._start = function (time) {
		        time = this.toSeconds(time);
		        this._sawtooth.start(time);
		        this._widthGate.gain.setValueAtTime(1, time);
		    };
		    /**
			 *  stop the oscillator
			 *  @param  {Time} time 
			 *  @private
			 */
		    Tone.PulseOscillator.prototype._stop = function (time) {
		        time = this.toSeconds(time);
		        this._sawtooth.stop(time);
		        //the width is still connected to the output. 
		        //that needs to be stopped also
		        this._widthGate.gain.setValueAtTime(0, time);
		    };
		    /**
			 * The phase of the oscillator in degrees.
			 * @memberOf Tone.PulseOscillator#
			 * @type {Degrees}
			 * @name phase
			 */
		    Object.defineProperty(Tone.PulseOscillator.prototype, 'phase', {
		        get: function () {
		            return this._sawtooth.phase;
		        },
		        set: function (phase) {
		            this._sawtooth.phase = phase;
		        }
		    });
		    /**
			 * The type of the oscillator. Always returns "pulse".
			 * @readOnly
			 * @memberOf Tone.PulseOscillator#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.PulseOscillator.prototype, 'type', {
		        get: function () {
		            return 'pulse';
		        }
		    });
		    /**
			 * The partials of the waveform. Cannot set partials for this waveform type
			 * @memberOf Tone.PulseOscillator#
			 * @type {Array}
			 * @name partials
			 * @private
			 */
		    Object.defineProperty(Tone.PulseOscillator.prototype, 'partials', {
		        get: function () {
		            return [];
		        }
		    });
		    /**
			 *  Clean up method.
			 *  @return {Tone.PulseOscillator} this
			 */
		    Tone.PulseOscillator.prototype.dispose = function () {
		        Tone.Source.prototype.dispose.call(this);
		        this._sawtooth.dispose();
		        this._sawtooth = null;
		        this._writable([
		            'width',
		            'frequency',
		            'detune'
		        ]);
		        this.width.dispose();
		        this.width = null;
		        this._widthGate.dispose();
		        this._widthGate = null;
		        this._thresh.dispose();
		        this._thresh = null;
		        this.frequency = null;
		        this.detune = null;
		        return this;
		    };
		    return Tone.PulseOscillator;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.PWMOscillator modulates the width of a Tone.PulseOscillator 
			 *         at the modulationFrequency. This has the effect of continuously
			 *         changing the timbre of the oscillator by altering the harmonics 
			 *         generated.
			 *
			 *  @extends {Tone.Oscillator}
			 *  @constructor
			 *  @param {Frequency} frequency The starting frequency of the oscillator. 
			 *  @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse. 
			 *  @example
			 *  var pwm = new Tone.PWMOscillator("Ab3", 0.3).toMaster().start();
			 */
		    Tone.PWMOscillator = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'modulationFrequency'
		        ], Tone.PWMOscillator.defaults);
		        Tone.Source.call(this, options);
		        /**
				 *  the pulse oscillator
				 *  @type {Tone.PulseOscillator}
				 *  @private
				 */
		        this._pulse = new Tone.PulseOscillator(options.modulationFrequency);
		        //change the pulse oscillator type
		        this._pulse._sawtooth.type = 'sine';
		        /**
				 *  the modulator
				 *  @type {Tone.Oscillator}
				 *  @private
				 */
		        this._modulator = new Tone.Oscillator({
		            'frequency': options.frequency,
		            'detune': options.detune,
		            'phase': options.phase
		        });
		        /**
				 *  Scale the oscillator so it doesn't go silent 
				 *  at the extreme values.
				 *  @type {Tone.Multiply}
				 *  @private
				 */
		        this._scale = new Tone.Multiply(2);
		        /**
				 *  The frequency control.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = this._modulator.frequency;
		        /**
				 *  The detune of the oscillator.
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = this._modulator.detune;
		        /**
				 *  The modulation rate of the oscillator. 
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.modulationFrequency = this._pulse.frequency;
		        //connections
		        this._modulator.chain(this._scale, this._pulse.width);
		        this._pulse.connect(this.output);
		        this._readOnly([
		            'modulationFrequency',
		            'frequency',
		            'detune'
		        ]);
		    };
		    Tone.extend(Tone.PWMOscillator, Tone.Oscillator);
		    /**
			 *  default values
			 *  @static
			 *  @type {Object}
			 *  @const
			 */
		    Tone.PWMOscillator.defaults = {
		        'frequency': 440,
		        'detune': 0,
		        'phase': 0,
		        'modulationFrequency': 0.4
		    };
		    /**
			 *  start the oscillator
			 *  @param  {Time} [time=now]
			 *  @private
			 */
		    Tone.PWMOscillator.prototype._start = function (time) {
		        time = this.toSeconds(time);
		        this._modulator.start(time);
		        this._pulse.start(time);
		    };
		    /**
			 *  stop the oscillator
			 *  @param  {Time} time (optional) timing parameter
			 *  @private
			 */
		    Tone.PWMOscillator.prototype._stop = function (time) {
		        time = this.toSeconds(time);
		        this._modulator.stop(time);
		        this._pulse.stop(time);
		    };
		    /**
			 * The type of the oscillator. Always returns "pwm".
			 * @readOnly
			 * @memberOf Tone.PWMOscillator#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.PWMOscillator.prototype, 'type', {
		        get: function () {
		            return 'pwm';
		        }
		    });
		    /**
			 * The partials of the waveform. Cannot set partials for this waveform type
			 * @memberOf Tone.PWMOscillator#
			 * @type {Array}
			 * @name partials
			 * @private
			 */
		    Object.defineProperty(Tone.PWMOscillator.prototype, 'partials', {
		        get: function () {
		            return [];
		        }
		    });
		    /**
			 * The phase of the oscillator in degrees.
			 * @memberOf Tone.PWMOscillator#
			 * @type {number}
			 * @name phase
			 */
		    Object.defineProperty(Tone.PWMOscillator.prototype, 'phase', {
		        get: function () {
		            return this._modulator.phase;
		        },
		        set: function (phase) {
		            this._modulator.phase = phase;
		        }
		    });
		    /**
			 *  Clean up.
			 *  @return {Tone.PWMOscillator} this
			 */
		    Tone.PWMOscillator.prototype.dispose = function () {
		        Tone.Source.prototype.dispose.call(this);
		        this._pulse.dispose();
		        this._pulse = null;
		        this._scale.dispose();
		        this._scale = null;
		        this._modulator.dispose();
		        this._modulator = null;
		        this._writable([
		            'modulationFrequency',
		            'frequency',
		            'detune'
		        ]);
		        this.frequency = null;
		        this.detune = null;
		        this.modulationFrequency = null;
		        return this;
		    };
		    return Tone.PWMOscillator;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.FMOscillator 
			 *
			 *  @extends {Tone.Oscillator}
			 *  @constructor
			 *  @param {Frequency} frequency The starting frequency of the oscillator. 
			 *  @param {String} type The type of the carrier oscillator.
			 *  @param {String} modulationType The type of the modulator oscillator.
			 *  @example
			 * //a sine oscillator frequency-modulated by a square wave
			 * var fmOsc = new Tone.FMOscillator("Ab3", "sine", "square").toMaster().start();
			 */
		    Tone.FMOscillator = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'type',
		            'modulationType'
		        ], Tone.FMOscillator.defaults);
		        Tone.Source.call(this, options);
		        /**
				 *  The carrier oscillator
				 *  @type {Tone.Oscillator}
				 *  @private
				 */
		        this._carrier = new Tone.Oscillator(options.frequency, options.type);
		        /**
				 *  The oscillator's frequency
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
		        /**
				 *  The detune control signal.
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = this._carrier.detune;
		        this.detune.value = options.detune;
		        /**
				 *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the 
				 *  ratio of the frequency of the modulating signal (mf) to the amplitude of the 
				 *  modulating signal (ma) -- as in ma/mf. 
				 *	@type {Positive}
				 *	@signal
				 */
		        this.modulationIndex = new Tone.Multiply(options.modulationIndex);
		        this.modulationIndex.units = Tone.Type.Positive;
		        /**
				 *  The modulating oscillator
				 *  @type  {Tone.Oscillator}
				 *  @private
				 */
		        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);
		        /**
				 *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. 
				 *  A harmonicity of 1 gives both oscillators the same frequency. 
				 *  Harmonicity = 2 means a change of an octave. 
				 *  @type {Positive}
				 *  @signal
				 *  @example
				 * //pitch the modulator an octave below carrier
				 * synth.harmonicity.value = 0.5;
				 */
		        this.harmonicity = new Tone.Multiply(options.harmonicity);
		        this.harmonicity.units = Tone.Type.Positive;
		        /**
				 *  the node where the modulation happens
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._modulationNode = new Tone.Gain(0);
		        //connections
		        this.frequency.connect(this._carrier.frequency);
		        this.frequency.chain(this.harmonicity, this._modulator.frequency);
		        this.frequency.chain(this.modulationIndex, this._modulationNode);
		        this._modulator.connect(this._modulationNode.gain);
		        this._modulationNode.connect(this._carrier.frequency);
		        this._carrier.connect(this.output);
		        this.detune.connect(this._modulator.detune);
		        this.phase = options.phase;
		        this._readOnly([
		            'modulationIndex',
		            'frequency',
		            'detune',
		            'harmonicity'
		        ]);
		    };
		    Tone.extend(Tone.FMOscillator, Tone.Oscillator);
		    /**
			 *  default values
			 *  @static
			 *  @type {Object}
			 *  @const
			 */
		    Tone.FMOscillator.defaults = {
		        'frequency': 440,
		        'detune': 0,
		        'phase': 0,
		        'modulationIndex': 2,
		        'modulationType': 'square',
		        'harmonicity': 1
		    };
		    /**
			 *  start the oscillator
			 *  @param  {Time} [time=now]
			 *  @private
			 */
		    Tone.FMOscillator.prototype._start = function (time) {
		        time = this.toSeconds(time);
		        this._modulator.start(time);
		        this._carrier.start(time);
		    };
		    /**
			 *  stop the oscillator
			 *  @param  {Time} time (optional) timing parameter
			 *  @private
			 */
		    Tone.FMOscillator.prototype._stop = function (time) {
		        time = this.toSeconds(time);
		        this._modulator.stop(time);
		        this._carrier.stop(time);
		    };
		    /**
			 * The type of the carrier oscillator
			 * @memberOf Tone.FMOscillator#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.FMOscillator.prototype, 'type', {
		        get: function () {
		            return this._carrier.type;
		        },
		        set: function (type) {
		            this._carrier.type = type;
		        }
		    });
		    /**
			 * The type of the modulator oscillator
			 * @memberOf Tone.FMOscillator#
			 * @type {String}
			 * @name modulationType
			 */
		    Object.defineProperty(Tone.FMOscillator.prototype, 'modulationType', {
		        get: function () {
		            return this._modulator.type;
		        },
		        set: function (type) {
		            this._modulator.type = type;
		        }
		    });
		    /**
			 * The phase of the oscillator in degrees.
			 * @memberOf Tone.FMOscillator#
			 * @type {number}
			 * @name phase
			 */
		    Object.defineProperty(Tone.FMOscillator.prototype, 'phase', {
		        get: function () {
		            return this._carrier.phase;
		        },
		        set: function (phase) {
		            this._carrier.phase = phase;
		            this._modulator.phase = phase;
		        }
		    });
		    /**
			 * The partials of the carrier waveform. A partial represents 
			 * the amplitude at a harmonic. The first harmonic is the 
			 * fundamental frequency, the second is the octave and so on
			 * following the harmonic series. 
			 * Setting this value will automatically set the type to "custom". 
			 * The value is an empty array when the type is not "custom". 
			 * @memberOf Tone.FMOscillator#
			 * @type {Array}
			 * @name partials
			 * @example
			 * osc.partials = [1, 0.2, 0.01];
			 */
		    Object.defineProperty(Tone.FMOscillator.prototype, 'partials', {
		        get: function () {
		            return this._carrier.partials;
		        },
		        set: function (partials) {
		            this._carrier.partials = partials;
		        }
		    });
		    /**
			 *  Clean up.
			 *  @return {Tone.FMOscillator} this
			 */
		    Tone.FMOscillator.prototype.dispose = function () {
		        Tone.Source.prototype.dispose.call(this);
		        this._writable([
		            'modulationIndex',
		            'frequency',
		            'detune',
		            'harmonicity'
		        ]);
		        this.frequency.dispose();
		        this.frequency = null;
		        this.detune = null;
		        this.harmonicity.dispose();
		        this.harmonicity = null;
		        this._carrier.dispose();
		        this._carrier = null;
		        this._modulator.dispose();
		        this._modulator = null;
		        this._modulationNode.dispose();
		        this._modulationNode = null;
		        this.modulationIndex.dispose();
		        this.modulationIndex = null;
		        return this;
		    };
		    return Tone.FMOscillator;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.AMOscillator 
			 *
			 *  @extends {Tone.Oscillator}
			 *  @constructor
			 *  @param {Frequency} frequency The starting frequency of the oscillator. 
			 *  @param {String} type The type of the carrier oscillator.
			 *  @param {String} modulationType The type of the modulator oscillator.
			 *  @example
			 * //a sine oscillator frequency-modulated by a square wave
			 * var fmOsc = new Tone.AMOscillator("Ab3", "sine", "square").toMaster().start();
			 */
		    Tone.AMOscillator = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'type',
		            'modulationType'
		        ], Tone.AMOscillator.defaults);
		        Tone.Source.call(this, options);
		        /**
				 *  The carrier oscillator
				 *  @type {Tone.Oscillator}
				 *  @private
				 */
		        this._carrier = new Tone.Oscillator(options.frequency, options.type);
		        /**
				 *  The oscillator's frequency
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = this._carrier.frequency;
		        /**
				 *  The detune control signal.
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = this._carrier.detune;
		        this.detune.value = options.detune;
		        /**
				 *  The modulating oscillator
				 *  @type  {Tone.Oscillator}
				 *  @private
				 */
		        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);
		        /**
				 *  convert the -1,1 output to 0,1
				 *  @type {Tone.AudioToGain}
				 *  @private
				 */
		        this._modulationScale = new Tone.AudioToGain();
		        /**
				 *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. 
				 *  A harmonicity of 1 gives both oscillators the same frequency. 
				 *  Harmonicity = 2 means a change of an octave. 
				 *  @type {Positive}
				 *  @signal
				 *  @example
				 * //pitch the modulator an octave below carrier
				 * synth.harmonicity.value = 0.5;
				 */
		        this.harmonicity = new Tone.Multiply(options.harmonicity);
		        this.harmonicity.units = Tone.Type.Positive;
		        /**
				 *  the node where the modulation happens
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._modulationNode = new Tone.Gain(0);
		        //connections
		        this.frequency.chain(this.harmonicity, this._modulator.frequency);
		        this.detune.connect(this._modulator.detune);
		        this._modulator.chain(this._modulationScale, this._modulationNode.gain);
		        this._carrier.chain(this._modulationNode, this.output);
		        this.phase = options.phase;
		        this._readOnly([
		            'frequency',
		            'detune',
		            'harmonicity'
		        ]);
		    };
		    Tone.extend(Tone.AMOscillator, Tone.Oscillator);
		    /**
			 *  default values
			 *  @static
			 *  @type {Object}
			 *  @const
			 */
		    Tone.AMOscillator.defaults = {
		        'frequency': 440,
		        'detune': 0,
		        'phase': 0,
		        'modulationType': 'square',
		        'harmonicity': 1
		    };
		    /**
			 *  start the oscillator
			 *  @param  {Time} [time=now]
			 *  @private
			 */
		    Tone.AMOscillator.prototype._start = function (time) {
		        time = this.toSeconds(time);
		        this._modulator.start(time);
		        this._carrier.start(time);
		    };
		    /**
			 *  stop the oscillator
			 *  @param  {Time} time (optional) timing parameter
			 *  @private
			 */
		    Tone.AMOscillator.prototype._stop = function (time) {
		        time = this.toSeconds(time);
		        this._modulator.stop(time);
		        this._carrier.stop(time);
		    };
		    /**
			 * The type of the carrier oscillator
			 * @memberOf Tone.AMOscillator#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.AMOscillator.prototype, 'type', {
		        get: function () {
		            return this._carrier.type;
		        },
		        set: function (type) {
		            this._carrier.type = type;
		        }
		    });
		    /**
			 * The type of the modulator oscillator
			 * @memberOf Tone.AMOscillator#
			 * @type {string}
			 * @name modulationType
			 */
		    Object.defineProperty(Tone.AMOscillator.prototype, 'modulationType', {
		        get: function () {
		            return this._modulator.type;
		        },
		        set: function (type) {
		            this._modulator.type = type;
		        }
		    });
		    /**
			 * The phase of the oscillator in degrees.
			 * @memberOf Tone.AMOscillator#
			 * @type {number}
			 * @name phase
			 */
		    Object.defineProperty(Tone.AMOscillator.prototype, 'phase', {
		        get: function () {
		            return this._carrier.phase;
		        },
		        set: function (phase) {
		            this._carrier.phase = phase;
		            this._modulator.phase = phase;
		        }
		    });
		    /**
			 * The partials of the carrier waveform. A partial represents 
			 * the amplitude at a harmonic. The first harmonic is the 
			 * fundamental frequency, the second is the octave and so on
			 * following the harmonic series. 
			 * Setting this value will automatically set the type to "custom". 
			 * The value is an empty array when the type is not "custom". 
			 * @memberOf Tone.AMOscillator#
			 * @type {Array}
			 * @name partials
			 * @example
			 * osc.partials = [1, 0.2, 0.01];
			 */
		    Object.defineProperty(Tone.AMOscillator.prototype, 'partials', {
		        get: function () {
		            return this._carrier.partials;
		        },
		        set: function (partials) {
		            this._carrier.partials = partials;
		        }
		    });
		    /**
			 *  Clean up.
			 *  @return {Tone.AMOscillator} this
			 */
		    Tone.AMOscillator.prototype.dispose = function () {
		        Tone.Source.prototype.dispose.call(this);
		        this._writable([
		            'frequency',
		            'detune',
		            'harmonicity'
		        ]);
		        this.frequency = null;
		        this.detune = null;
		        this.harmonicity.dispose();
		        this.harmonicity = null;
		        this._carrier.dispose();
		        this._carrier = null;
		        this._modulator.dispose();
		        this._modulator = null;
		        this._modulationNode.dispose();
		        this._modulationNode = null;
		        this._modulationScale.dispose();
		        this._modulationScale = null;
		        return this;
		    };
		    return Tone.AMOscillator;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.FatOscillator 
			 *
			 *  @extends {Tone.Oscillator}
			 *  @constructor
			 *  @param {Frequency} frequency The starting frequency of the oscillator. 
			 *  @param {String} type The type of the carrier oscillator.
			 *  @param {String} modulationType The type of the modulator oscillator.
			 *  @example
			 * //a sine oscillator frequency-modulated by a square wave
			 * var fmOsc = new Tone.FatOscillator("Ab3", "sine", "square").toMaster().start();
			 */
		    Tone.FatOscillator = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'type',
		            'spread'
		        ], Tone.FatOscillator.defaults);
		        Tone.Source.call(this, options);
		        /**
				 *  The oscillator's frequency
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
		        /**
				 *  The detune control signal.
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
		        /**
				 *  The array of oscillators
				 *  @type {Array}
				 *  @private
				 */
		        this._oscillators = [];
		        /**
				 *  The total spread of the oscillators
				 *  @type  {Cents}
				 *  @private
				 */
		        this._spread = options.spread;
		        /**
				 *  The type of the oscillator
				 *  @type {String}
				 *  @private
				 */
		        this._type = options.type;
		        /**
				 *  The phase of the oscillators
				 *  @type {Degrees}
				 *  @private
				 */
		        this._phase = options.phase;
		        /**
				 *  The partials array
				 *  @type {Array}
				 *  @private
				 */
		        this._partials = this.defaultArg(options.partials, []);
		        //set the count initially
		        this.count = options.count;
		        this._readOnly([
		            'frequency',
		            'detune'
		        ]);
		    };
		    Tone.extend(Tone.FatOscillator, Tone.Oscillator);
		    /**
			 *  default values
			 *  @static
			 *  @type {Object}
			 *  @const
			 */
		    Tone.FatOscillator.defaults = {
		        'frequency': 440,
		        'detune': 0,
		        'phase': 0,
		        'spread': 20,
		        'count': 3,
		        'type': 'sawtooth'
		    };
		    /**
			 *  start the oscillator
			 *  @param  {Time} [time=now]
			 *  @private
			 */
		    Tone.FatOscillator.prototype._start = function (time) {
		        time = this.toSeconds(time);
		        this._forEach(function (osc) {
		            osc.start(time);
		        });
		    };
		    /**
			 *  stop the oscillator
			 *  @param  {Time} time (optional) timing parameter
			 *  @private
			 */
		    Tone.FatOscillator.prototype._stop = function (time) {
		        time = this.toSeconds(time);
		        this._forEach(function (osc) {
		            osc.stop(time);
		        });
		    };
		    /**
			 *  Iterate over all of the oscillators
			 *  @param  {Function}  iterator  The iterator function
			 *  @private
			 */
		    Tone.FatOscillator.prototype._forEach = function (iterator) {
		        for (var i = 0; i < this._oscillators.length; i++) {
		            iterator.call(this, this._oscillators[i], i);
		        }
		    };
		    /**
			 * The type of the carrier oscillator
			 * @memberOf Tone.FatOscillator#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.FatOscillator.prototype, 'type', {
		        get: function () {
		            return this._type;
		        },
		        set: function (type) {
		            this._type = type;
		            this._forEach(function (osc) {
		                osc.type = type;
		            });
		        }
		    });
		    /**
			 * The detune spread between the oscillators. If "count" is
			 * set to 3 oscillators and the "spread" is set to 40,
			 * the three oscillators would be detuned like this: [-20, 0, 20]
			 * for a total detune spread of 40 cents.
			 * @memberOf Tone.FatOscillator#
			 * @type {Cents}
			 * @name spread
			 */
		    Object.defineProperty(Tone.FatOscillator.prototype, 'spread', {
		        get: function () {
		            return this._spread;
		        },
		        set: function (spread) {
		            this._spread = spread;
		            if (this._oscillators.length > 1) {
		                var start = -spread / 2;
		                var step = spread / (this._oscillators.length - 1);
		                this._forEach(function (osc, i) {
		                    osc.detune.value = start + step * i;
		                });
		            }
		        }
		    });
		    /**
			 * The number of detuned oscillators
			 * @memberOf Tone.FatOscillator#
			 * @type {Number}
			 * @name count
			 */
		    Object.defineProperty(Tone.FatOscillator.prototype, 'count', {
		        get: function () {
		            return this._oscillators.length;
		        },
		        set: function (count) {
		            count = Math.max(count, 1);
		            if (this._oscillators.length !== count) {
		                // var partials = this.partials;
		                // var type = this.type;
		                //dispose the previous oscillators
		                this._forEach(function (osc) {
		                    osc.dispose();
		                });
		                this._oscillators = [];
		                for (var i = 0; i < count; i++) {
		                    var osc = new Tone.Oscillator();
		                    if (this.type === Tone.Oscillator.Type.Custom) {
		                        osc.partials = this._partials;
		                    } else {
		                        osc.type = this._type;
		                    }
		                    osc.phase = this._phase;
		                    osc.volume.value = -6 - count;
		                    this.frequency.connect(osc.frequency);
		                    this.detune.connect(osc.detune);
		                    osc.connect(this.output);
		                    this._oscillators[i] = osc;
		                }
		                //set the spread
		                this.spread = this._spread;
		                if (this.state === Tone.State.Started) {
		                    this._forEach(function (osc) {
		                        osc.start();
		                    });
		                }
		            }
		        }
		    });
		    /**
			 * The phase of the oscillator in degrees.
			 * @memberOf Tone.FatOscillator#
			 * @type {Number}
			 * @name phase
			 */
		    Object.defineProperty(Tone.FatOscillator.prototype, 'phase', {
		        get: function () {
		            return this._phase;
		        },
		        set: function (phase) {
		            this._phase = phase;
		            this._forEach(function (osc) {
		                osc.phase = phase;
		            });
		        }
		    });
		    /**
			 * The partials of the carrier waveform. A partial represents 
			 * the amplitude at a harmonic. The first harmonic is the 
			 * fundamental frequency, the second is the octave and so on
			 * following the harmonic series. 
			 * Setting this value will automatically set the type to "custom". 
			 * The value is an empty array when the type is not "custom". 
			 * @memberOf Tone.FatOscillator#
			 * @type {Array}
			 * @name partials
			 * @example
			 * osc.partials = [1, 0.2, 0.01];
			 */
		    Object.defineProperty(Tone.FatOscillator.prototype, 'partials', {
		        get: function () {
		            return this._partials;
		        },
		        set: function (partials) {
		            this._partials = partials;
		            this._type = Tone.Oscillator.Type.Custom;
		            this._forEach(function (osc) {
		                osc.partials = partials;
		            });
		        }
		    });
		    /**
			 *  Clean up.
			 *  @return {Tone.FatOscillator} this
			 */
		    Tone.FatOscillator.prototype.dispose = function () {
		        Tone.Source.prototype.dispose.call(this);
		        this._writable([
		            'frequency',
		            'detune'
		        ]);
		        this.frequency.dispose();
		        this.frequency = null;
		        this.detune.dispose();
		        this.detune = null;
		        this._forEach(function (osc) {
		            osc.dispose();
		        });
		        this._oscillators = null;
		        this._partials = null;
		        return this;
		    };
		    return Tone.FatOscillator;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,
			 *         Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator
			 *         into one class. The oscillator class can be changed by setting the `type`. 
			 *         `omniOsc.type = "pwm"` will set it to the Tone.PWMOscillator. Prefixing
			 *         any of the basic types ("sine", "square4", etc.) with "fm", "am", or "fat"
			 *         will use the FMOscillator, AMOscillator or FatOscillator respectively. 
			 *         For example: `omniOsc.type = "fatsawtooth"` will create set the oscillator
			 *         to a FatOscillator of type "sawtooth". 
			 *
			 *  @extends {Tone.Oscillator}
			 *  @constructor
			 *  @param {Frequency} frequency The initial frequency of the oscillator.
			 *  @param {String} type The type of the oscillator.
			 *  @example
			 *  var omniOsc = new Tone.OmniOscillator("C#4", "pwm");
			 */
		    Tone.OmniOscillator = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'type'
		        ], Tone.OmniOscillator.defaults);
		        Tone.Source.call(this, options);
		        /**
				 *  The frequency control.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
		        /**
				 *  The detune control
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
		        /**
				 *  the type of the oscillator source
				 *  @type {String}
				 *  @private
				 */
		        this._sourceType = undefined;
		        /**
				 *  the oscillator
				 *  @type {Tone.Oscillator}
				 *  @private
				 */
		        this._oscillator = null;
		        //set the oscillator
		        this.type = options.type;
		        this._readOnly([
		            'frequency',
		            'detune'
		        ]);
		        //set the options
		        this.set(options);
		    };
		    Tone.extend(Tone.OmniOscillator, Tone.Oscillator);
		    /**
			 *  default values
			 *  @static
			 *  @type {Object}
			 *  @const
			 */
		    Tone.OmniOscillator.defaults = {
		        'frequency': 440,
		        'detune': 0,
		        'type': 'sine',
		        'phase': 0
		    };
		    /**
			 *  @enum {String}
			 *  @private
			 */
		    var OmniOscType = {
		        Pulse: 'PulseOscillator',
		        PWM: 'PWMOscillator',
		        Osc: 'Oscillator',
		        FM: 'FMOscillator',
		        AM: 'AMOscillator',
		        Fat: 'FatOscillator'
		    };
		    /**
			 *  start the oscillator
			 *  @param {Time} [time=now] the time to start the oscillator
			 *  @private
			 */
		    Tone.OmniOscillator.prototype._start = function (time) {
		        this._oscillator.start(time);
		    };
		    /**
			 *  start the oscillator
			 *  @param {Time} [time=now] the time to start the oscillator
			 *  @private
			 */
		    Tone.OmniOscillator.prototype._stop = function (time) {
		        this._oscillator.stop(time);
		    };
		    /**
			 * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or
			 * prefix the basic types with "fm", "am", or "fat" to use the FMOscillator, AMOscillator or FatOscillator
			 * types. The oscillator could also be set to "pwm" or "pulse". All of the parameters of the
			 * oscillator's class are accessible when the oscillator is set to that type, but throws an error 
			 * when it's not.
			 * 
			 * @memberOf Tone.OmniOscillator#
			 * @type {String}
			 * @name type
			 * @example
			 * omniOsc.type = "pwm";
			 * //modulationFrequency is parameter which is available
			 * //only when the type is "pwm". 
			 * omniOsc.modulationFrequency.value = 0.5;
			 * @example
			 * //an square wave frequency modulated by a sawtooth
			 * omniOsc.type = "fmsquare";
			 * omniOsc.modulationType = "sawtooth";
			 */
		    Object.defineProperty(Tone.OmniOscillator.prototype, 'type', {
		        get: function () {
		            var prefix = '';
		            if (this._sourceType === OmniOscType.FM) {
		                prefix = 'fm';
		            } else if (this._sourceType === OmniOscType.AM) {
		                prefix = 'am';
		            } else if (this._sourceType === OmniOscType.Fat) {
		                prefix = 'fat';
		            }
		            return prefix + this._oscillator.type;
		        },
		        set: function (type) {
		            if (type.substr(0, 2) === 'fm') {
		                this._createNewOscillator(OmniOscType.FM);
		                this._oscillator.type = type.substr(2);
		            } else if (type.substr(0, 2) === 'am') {
		                this._createNewOscillator(OmniOscType.AM);
		                this._oscillator.type = type.substr(2);
		            } else if (type.substr(0, 3) === 'fat') {
		                this._createNewOscillator(OmniOscType.Fat);
		                this._oscillator.type = type.substr(3);
		            } else if (type === 'pwm') {
		                this._createNewOscillator(OmniOscType.PWM);
		            } else if (type === 'pulse') {
		                this._createNewOscillator(OmniOscType.Pulse);
		            } else {
		                this._createNewOscillator(OmniOscType.Osc);
		                this._oscillator.type = type;
		            }
		        }
		    });
		    /**
			 * The partials of the waveform. A partial represents 
			 * the amplitude at a harmonic. The first harmonic is the 
			 * fundamental frequency, the second is the octave and so on
			 * following the harmonic series. 
			 * Setting this value will automatically set the type to "custom". 
			 * The value is an empty array when the type is not "custom". 
			 * This is not available on "pwm" and "pulse" oscillator types.
			 * @memberOf Tone.OmniOscillator#
			 * @type {Array}
			 * @name partials
			 * @example
			 * osc.partials = [1, 0.2, 0.01];
			 */
		    Object.defineProperty(Tone.OmniOscillator.prototype, 'partials', {
		        get: function () {
		            return this._oscillator.partials;
		        },
		        set: function (partials) {
		            this._oscillator.partials = partials;
		        }
		    });
		    /**
			 *  Set a member/attribute of the oscillator. 
			 *  @param {Object|String} params
			 *  @param {number=} value
			 *  @param {Time=} rampTime
			 *  @returns {Tone.OmniOscillator} this
			 */
		    Tone.OmniOscillator.prototype.set = function (params, value) {
		        //make sure the type is set first
		        if (params === 'type') {
		            this.type = value;
		        } else if (this.isObject(params) && params.hasOwnProperty('type')) {
		            this.type = params.type;
		        }
		        //then set the rest
		        Tone.prototype.set.apply(this, arguments);
		        return this;
		    };
		    /**
			 *  connect the oscillator to the frequency and detune signals
			 *  @private
			 */
		    Tone.OmniOscillator.prototype._createNewOscillator = function (oscType) {
		        if (oscType !== this._sourceType) {
		            this._sourceType = oscType;
		            var OscillatorConstructor = Tone[oscType];
		            //short delay to avoid clicks on the change
		            var now = this.now() + this.blockTime;
		            if (this._oscillator !== null) {
		                var oldOsc = this._oscillator;
		                oldOsc.stop(now);
		                //dispose the old one
		                setTimeout(function () {
		                    oldOsc.dispose();
		                    oldOsc = null;
		                }, this.blockTime * 1000);
		            }
		            this._oscillator = new OscillatorConstructor();
		            this.frequency.connect(this._oscillator.frequency);
		            this.detune.connect(this._oscillator.detune);
		            this._oscillator.connect(this.output);
		            if (this.state === Tone.State.Started) {
		                this._oscillator.start(now);
		            }
		        }
		    };
		    /**
			 * The phase of the oscillator in degrees. 
			 * @memberOf Tone.OmniOscillator#
			 * @type {Degrees}
			 * @name phase
			 */
		    Object.defineProperty(Tone.OmniOscillator.prototype, 'phase', {
		        get: function () {
		            return this._oscillator.phase;
		        },
		        set: function (phase) {
		            this._oscillator.phase = phase;
		        }
		    });
		    /**
			 * The width of the oscillator (only if the oscillator is set to "pulse")
			 * @memberOf Tone.OmniOscillator#
			 * @type {NormalRange}
			 * @signal
			 * @name width
			 * @example
			 * var omniOsc = new Tone.OmniOscillator(440, "pulse");
			 * //can access the width attribute only if type === "pulse"
			 * omniOsc.width.value = 0.2; 
			 */
		    Object.defineProperty(Tone.OmniOscillator.prototype, 'width', {
		        get: function () {
		            if (this._sourceType === OmniOscType.Pulse) {
		                return this._oscillator.width;
		            }
		        }
		    });
		    /**
			 * The number of detuned oscillators
			 * @memberOf Tone.OmniOscillator#
			 * @type {Number}
			 * @name count
			 */
		    Object.defineProperty(Tone.OmniOscillator.prototype, 'count', {
		        get: function () {
		            if (this._sourceType === OmniOscType.Fat) {
		                return this._oscillator.count;
		            }
		        },
		        set: function (count) {
		            if (this._sourceType === OmniOscType.Fat) {
		                this._oscillator.count = count;
		            }
		        }
		    });
		    /**
			 * The detune spread between the oscillators. If "count" is
			 * set to 3 oscillators and the "spread" is set to 40,
			 * the three oscillators would be detuned like this: [-20, 0, 20]
			 * for a total detune spread of 40 cents. See Tone.FatOscillator
			 * for more info.
			 * @memberOf Tone.OmniOscillator#
			 * @type {Cents}
			 * @name spread
			 */
		    Object.defineProperty(Tone.OmniOscillator.prototype, 'spread', {
		        get: function () {
		            if (this._sourceType === OmniOscType.Fat) {
		                return this._oscillator.spread;
		            }
		        },
		        set: function (spread) {
		            if (this._sourceType === OmniOscType.Fat) {
		                this._oscillator.spread = spread;
		            }
		        }
		    });
		    /**
			 * The type of the modulator oscillator. Only if the oscillator
			 * is set to "am" or "fm" types. see. Tone.AMOscillator or Tone.FMOscillator
			 * for more info. 
			 * @memberOf Tone.OmniOscillator#
			 * @type {String}
			 * @name modulationType
			 */
		    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationType', {
		        get: function () {
		            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {
		                return this._oscillator.modulationType;
		            }
		        },
		        set: function (mType) {
		            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {
		                this._oscillator.modulationType = mType;
		            }
		        }
		    });
		    /**
			 * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the 
			 * ratio of the frequency of the modulating signal (mf) to the amplitude of the 
			 * modulating signal (ma) -- as in ma/mf. 
			 * See Tone.FMOscillator for more info. 
			 * @type {Positive}
			 * @signal
			 * @name modulationIndex
			 */
		    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationIndex', {
		        get: function () {
		            if (this._sourceType === OmniOscType.FM) {
		                return this._oscillator.modulationIndex;
		            }
		        }
		    });
		    /**
			 *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. 
			 *  A harmonicity of 1 gives both oscillators the same frequency. 
			 *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator
			 *  for more info. 
			 *  @memberOf Tone.OmniOscillator#
			 *  @signal
			 *  @type {Positive}
			 *  @name harmonicity
			 */
		    Object.defineProperty(Tone.OmniOscillator.prototype, 'harmonicity', {
		        get: function () {
		            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {
		                return this._oscillator.harmonicity;
		            }
		        }
		    });
		    /**
			 * The modulationFrequency Signal of the oscillator 
			 * (only if the oscillator type is set to pwm). See 
			 * Tone.PWMOscillator for more info. 
			 * @memberOf Tone.OmniOscillator#
			 * @type {Frequency}
			 * @signal
			 * @name modulationFrequency
			 * @example
			 * var omniOsc = new Tone.OmniOscillator(440, "pwm");
			 * //can access the modulationFrequency attribute only if type === "pwm"
			 * omniOsc.modulationFrequency.value = 0.2; 
			 */
		    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationFrequency', {
		        get: function () {
		            if (this._sourceType === OmniOscType.PWM) {
		                return this._oscillator.modulationFrequency;
		            }
		        }
		    });
		    /**
			 *  Clean up.
			 *  @return {Tone.OmniOscillator} this
			 */
		    Tone.OmniOscillator.prototype.dispose = function () {
		        Tone.Source.prototype.dispose.call(this);
		        this._writable([
		            'frequency',
		            'detune'
		        ]);
		        this.detune.dispose();
		        this.detune = null;
		        this.frequency.dispose();
		        this.frequency = null;
		        this._oscillator.dispose();
		        this._oscillator = null;
		        this._sourceType = null;
		        return this;
		    };
		    return Tone.OmniOscillator;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Base-class for all instruments
			 *  
			 *  @constructor
			 *  @extends {Tone}
			 */
		    Tone.Instrument = function (options) {
		        //get the defaults
		        options = this.defaultArg(options, Tone.Instrument.defaults);
		        /**
				 *  The output and volume triming node
				 *  @type  {Tone.Volume}
				 *  @private
				 */
		        this._volume = this.output = new Tone.Volume(options.volume);
		        /**
				 * The volume of the output in decibels.
				 * @type {Decibels}
				 * @signal
				 * @example
				 * source.volume.value = -6;
				 */
		        this.volume = this._volume.volume;
		        this._readOnly('volume');
		    };
		    Tone.extend(Tone.Instrument);
		    /**
			 *  the default attributes
			 *  @type {object}
			 */
		    Tone.Instrument.defaults = {
		        /** the volume of the output in decibels */
		        'volume': 0
		    };
		    /**
			 *  @abstract
			 *  @param {string|number} note the note to trigger
			 *  @param {Time} [time=now] the time to trigger the ntoe
			 *  @param {number} [velocity=1] the velocity to trigger the note
			 */
		    Tone.Instrument.prototype.triggerAttack = Tone.noOp;
		    /**
			 *  @abstract
			 *  @param {Time} [time=now] when to trigger the release
			 */
		    Tone.Instrument.prototype.triggerRelease = Tone.noOp;
		    /**
			 *  Trigger the attack and then the release after the duration. 
			 *  @param  {Frequency} note     The note to trigger.
			 *  @param  {Time} duration How long the note should be held for before
			 *                          triggering the release.
			 *  @param {Time} [time=now]  When the note should be triggered.
			 *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.
			 *  @returns {Tone.Instrument} this
			 *  @example
			 * //trigger "C4" for the duration of an 8th note
			 * synth.triggerAttackRelease("C4", "8n");
			 */
		    Tone.Instrument.prototype.triggerAttackRelease = function (note, duration, time, velocity) {
		        if (this.isUndef(time)) {
		            time = this.now() + this.blockTime;
		        } else {
		            time = this.toSeconds(time);
		        }
		        duration = this.toSeconds(duration);
		        this.triggerAttack(note, time, velocity);
		        this.triggerRelease(time + duration);
		        return this;
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.Instrument} this
			 */
		    Tone.Instrument.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._volume.dispose();
		        this._volume = null;
		        this._writable(['volume']);
		        this.volume = null;
		        return this;
		    };
		    return Tone.Instrument;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  This is an abstract base class for other monophonic instruments to 
			 *          extend. IMPORTANT: It does not make any sound on its own and
			 *          shouldn't be directly instantiated.
			 *
			 *  @constructor
			 *  @abstract
			 *  @extends {Tone.Instrument}
			 */
		    Tone.Monophonic = function (options) {
		        //get the defaults
		        options = this.defaultArg(options, Tone.Monophonic.defaults);
		        Tone.Instrument.call(this, options);
		        /**
				 *  The glide time between notes. 
				 *  @type {Time}
				 */
		        this.portamento = options.portamento;
		    };
		    Tone.extend(Tone.Monophonic, Tone.Instrument);
		    /**
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.Monophonic.defaults = { 'portamento': 0 };
		    /**
			 *  Trigger the attack of the note optionally with a given velocity. 
			 *  
			 *  
			 *  @param  {Frequency} note     The note to trigger.
			 *  @param  {Time} [time=now]     When the note should start.
			 *  @param  {number} [velocity=1] velocity The velocity scaler 
			 *                                determines how "loud" the note 
			 *                                will be triggered.
			 *  @returns {Tone.Monophonic} this
			 *  @example
			 * synth.triggerAttack("C4");
			 *  @example
			 * //trigger the note a half second from now at half velocity
			 * synth.triggerAttack("C4", "+0.5", 0.5);
			 */
		    Tone.Monophonic.prototype.triggerAttack = function (note, time, velocity) {
		        if (this.isUndef(time)) {
		            time = this.now() + this.blockTime;
		        } else {
		            time = this.toSeconds(time);
		        }
		        this._triggerEnvelopeAttack(time, velocity);
		        this.setNote(note, time);
		        return this;
		    };
		    /**
			 *  Trigger the release portion of the envelope
			 *  @param  {Time} [time=now] If no time is given, the release happens immediatly
			 *  @returns {Tone.Monophonic} this
			 *  @example
			 * synth.triggerRelease();
			 */
		    Tone.Monophonic.prototype.triggerRelease = function (time) {
		        if (this.isUndef(time)) {
		            time = this.now() + this.blockTime;
		        } else {
		            time = this.toSeconds(time);
		        }
		        this._triggerEnvelopeRelease(time);
		        return this;
		    };
		    /**
			 *  override this method with the actual method
			 *  @abstract
			 *  @private
			 */
		    Tone.Monophonic.prototype._triggerEnvelopeAttack = function () {
		    };
		    /**
			 *  override this method with the actual method
			 *  @abstract
			 *  @private
			 */
		    Tone.Monophonic.prototype._triggerEnvelopeRelease = function () {
		    };
		    /**
			 *  Set the note at the given time. If no time is given, the note
			 *  will set immediately. 
			 *  @param {Frequency} note The note to change to.
			 *  @param  {Time} [time=now] The time when the note should be set. 
			 *  @returns {Tone.Monophonic} this
			 * @example
			 * //change to F#6 in one quarter note from now.
			 * synth.setNote("F#6", "+4n");
			 * @example
			 * //change to Bb4 right now
			 * synth.setNote("Bb4");
			 */
		    Tone.Monophonic.prototype.setNote = function (note, time) {
		        time = this.toSeconds(time);
		        if (this.portamento > 0) {
		            var currentNote = this.frequency.value;
		            this.frequency.setValueAtTime(currentNote, time);
		            var portTime = this.toSeconds(this.portamento);
		            this.frequency.exponentialRampToValueAtTime(note, time + portTime);
		        } else {
		            this.frequency.setValueAtTime(note, time);
		        }
		        return this;
		    };
		    return Tone.Monophonic;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Synth is composed simply of a Tone.OmniOscillator
			 *          routed through a Tone.AmplitudeEnvelope. 
			 *          <img src="https://docs.google.com/drawings/d/1-1_0YW2Z1J2EPI36P8fNCMcZG7N1w1GZluPs4og4evo/pub?w=1163&h=231">
			 *
			 *  @constructor
			 *  @extends {Tone.Monophonic}
			 *  @param {Object} [options] the options available for the synth 
			 *                          see defaults below
			 *  @example
			 * var synth = new Tone.Synth().toMaster();
			 * synth.triggerAttackRelease("C4", "8n");
			 */
		    Tone.Synth = function (options) {
		        //get the defaults
		        options = this.defaultArg(options, Tone.Synth.defaults);
		        Tone.Monophonic.call(this, options);
		        /**
				 *  The oscillator.
				 *  @type {Tone.OmniOscillator}
				 */
		        this.oscillator = new Tone.OmniOscillator(options.oscillator);
		        /**
				 *  The frequency control.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = this.oscillator.frequency;
		        /**
				 *  The detune control.
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = this.oscillator.detune;
		        /**
				 *  The amplitude envelope.
				 *  @type {Tone.AmplitudeEnvelope}
				 */
		        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);
		        //connect the oscillators to the output
		        this.oscillator.chain(this.envelope, this.output);
		        //start the oscillators
		        this.oscillator.start();
		        this._readOnly([
		            'oscillator',
		            'frequency',
		            'detune',
		            'envelope'
		        ]);
		    };
		    Tone.extend(Tone.Synth, Tone.Monophonic);
		    /**
			 *  @const
			 *  @static
			 *  @type {Object}
			 */
		    Tone.Synth.defaults = {
		        'oscillator': { 'type': 'triangle' },
		        'envelope': {
		            'attack': 0.005,
		            'decay': 0.1,
		            'sustain': 0.3,
		            'release': 1
		        }
		    };
		    /**
			 *  start the attack portion of the envelope
			 *  @param {Time} [time=now] the time the attack should start
			 *  @param {number} [velocity=1] the velocity of the note (0-1)
			 *  @returns {Tone.Synth} this
			 *  @private
			 */
		    Tone.Synth.prototype._triggerEnvelopeAttack = function (time, velocity) {
		        //the envelopes
		        this.envelope.triggerAttack(time, velocity);
		        return this;
		    };
		    /**
			 *  start the release portion of the envelope
			 *  @param {Time} [time=now] the time the release should start
			 *  @returns {Tone.Synth} this
			 *  @private
			 */
		    Tone.Synth.prototype._triggerEnvelopeRelease = function (time) {
		        this.envelope.triggerRelease(time);
		        return this;
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.Synth} this
			 */
		    Tone.Synth.prototype.dispose = function () {
		        Tone.Monophonic.prototype.dispose.call(this);
		        this._writable([
		            'oscillator',
		            'frequency',
		            'detune',
		            'envelope'
		        ]);
		        this.oscillator.dispose();
		        this.oscillator = null;
		        this.envelope.dispose();
		        this.envelope = null;
		        this.frequency = null;
		        this.detune = null;
		        return this;
		    };
		    return Tone.Synth;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  AMSynth uses the output of one Tone.Synth to modulate the
			 *          amplitude of another Tone.Synth. The harmonicity (the ratio between
			 *          the two signals) affects the timbre of the output signal greatly.
			 *          Read more about Amplitude Modulation Synthesis on 
			 *          [SoundOnSound](http://www.soundonsound.com/sos/mar00/articles/synthsecrets.htm).
			 *          <img src="https://docs.google.com/drawings/d/1TQu8Ed4iFr1YTLKpB3U1_hur-UwBrh5gdBXc8BxfGKw/pub?w=1009&h=457">
			 *
			 *  @constructor
			 *  @extends {Tone.Monophonic}
			 *  @param {Object} [options] the options available for the synth 
			 *                            see defaults below
			 *  @example
			 * var synth = new Tone.AMSynth().toMaster();
			 * synth.triggerAttackRelease("C4", "4n");
			 */
		    Tone.AMSynth = function (options) {
		        options = this.defaultArg(options, Tone.AMSynth.defaults);
		        Tone.Monophonic.call(this, options);
		        /**
				 *  The carrier voice. 
				 *  @type {Tone.Synth}
				 *  @private
				 */
		        this._carrier = new Tone.Synth();
		        this._carrier.volume.value = -10;
		        /**
				 *  The carrier's oscillator
				 *  @type {Tone.Oscillator}
				 */
		        this.oscillator = this._carrier.oscillator;
		        /**
				 *  The carrier's envelope
				 *  @type {Tone.Oscillator}
				 */
		        this.envelope = this._carrier.envelope.set(options.envelope);
		        /**
				 *  The modulator voice. 
				 *  @type {Tone.Synth}
				 *  @private
				 */
		        this._modulator = new Tone.Synth();
		        this._modulator.volume.value = -10;
		        /**
				 *  The modulator's oscillator which is applied
				 *  to the amplitude of the oscillator
				 *  @type {Tone.Oscillator}
				 */
		        this.modulation = this._modulator.oscillator.set(options.modulation);
		        /**
				 *  The modulator's envelope
				 *  @type {Tone.Oscillator}
				 */
		        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);
		        /**
				 *  The frequency.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);
		        /**
				 *  The detune in cents
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
		        /**
				 *  Harmonicity is the ratio between the two voices. A harmonicity of
				 *  1 is no change. Harmonicity = 2 means a change of an octave. 
				 *  @type {Positive}
				 *  @signal
				 *  @example
				 * //pitch voice1 an octave below voice0
				 * synth.harmonicity.value = 0.5;
				 */
		        this.harmonicity = new Tone.Multiply(options.harmonicity);
		        this.harmonicity.units = Tone.Type.Positive;
		        /**
				 *  convert the -1,1 output to 0,1
				 *  @type {Tone.AudioToGain}
				 *  @private
				 */
		        this._modulationScale = new Tone.AudioToGain();
		        /**
				 *  the node where the modulation happens
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._modulationNode = new Tone.Gain();
		        //control the two voices frequency
		        this.frequency.connect(this._carrier.frequency);
		        this.frequency.chain(this.harmonicity, this._modulator.frequency);
		        this.detune.fan(this._carrier.detune, this._modulator.detune);
		        this._modulator.chain(this._modulationScale, this._modulationNode.gain);
		        this._carrier.chain(this._modulationNode, this.output);
		        this._readOnly([
		            'frequency',
		            'harmonicity',
		            'oscillator',
		            'envelope',
		            'modulation',
		            'modulationEnvelope',
		            'detune'
		        ]);
		    };
		    Tone.extend(Tone.AMSynth, Tone.Monophonic);
		    /**
			 *  @static
			 *  @type {Object}
			 */
		    Tone.AMSynth.defaults = {
		        'harmonicity': 3,
		        'detune': 0,
		        'oscillator': { 'type': 'sine' },
		        'envelope': {
		            'attack': 0.01,
		            'decay': 0.01,
		            'sustain': 1,
		            'release': 0.5
		        },
		        'moduation': { 'type': 'square' },
		        'modulationEnvelope': {
		            'attack': 0.5,
		            'decay': 0,
		            'sustain': 1,
		            'release': 0.5
		        }
		    };
		    /**
			 *  trigger the attack portion of the note
			 *  
			 *  @param  {Time} [time=now] the time the note will occur
			 *  @param {NormalRange} [velocity=1] the velocity of the note
			 *  @private
			 *  @returns {Tone.AMSynth} this
			 */
		    Tone.AMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {
		        //the port glide
		        time = this.toSeconds(time);
		        //the envelopes
		        this.envelope.triggerAttack(time, velocity);
		        this.modulationEnvelope.triggerAttack(time, velocity);
		        return this;
		    };
		    /**
			 *  trigger the release portion of the note
			 *  
			 *  @param  {Time} [time=now] the time the note will release
			 *  @private
			 *  @returns {Tone.AMSynth} this
			 */
		    Tone.AMSynth.prototype._triggerEnvelopeRelease = function (time) {
		        this.envelope.triggerRelease(time);
		        this.modulationEnvelope.triggerRelease(time);
		        return this;
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.AMSynth} this
			 */
		    Tone.AMSynth.prototype.dispose = function () {
		        Tone.Monophonic.prototype.dispose.call(this);
		        this._writable([
		            'frequency',
		            'harmonicity',
		            'oscillator',
		            'envelope',
		            'modulation',
		            'modulationEnvelope',
		            'detune'
		        ]);
		        this._carrier.dispose();
		        this._carrier = null;
		        this._modulator.dispose();
		        this._modulator = null;
		        this.frequency.dispose();
		        this.frequency = null;
		        this.detune.dispose();
		        this.detune = null;
		        this.harmonicity.dispose();
		        this.harmonicity = null;
		        this._modulationScale.dispose();
		        this._modulationScale = null;
		        this._modulationNode.dispose();
		        this._modulationNode = null;
		        this.oscillator = null;
		        this.envelope = null;
		        this.modulationEnvelope = null;
		        this.modulation = null;
		        return this;
		    };
		    return Tone.AMSynth;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.MonoSynth is composed of one oscillator, one filter, and two envelopes.
			 *          The amplitude of the Tone.Oscillator and the cutoff frequency of the 
			 *          Tone.Filter are controlled by Tone.Envelopes. 
			 *          <img src="https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240">
			 *          
			 *  @constructor
			 *  @extends {Tone.Monophonic}
			 *  @param {Object} [options] the options available for the synth 
			 *                          see defaults below
			 *  @example
			 * var synth = new Tone.MonoSynth({
			 * 	"oscillator" : {
			 * 		"type" : "square"
			 *  },
			 *  "envelope" : {
			 *  	"attack" : 0.1
			 *  }
			 * }).toMaster();
			 * synth.triggerAttackRelease("C4", "8n");
			 */
		    Tone.MonoSynth = function (options) {
		        //get the defaults
		        options = this.defaultArg(options, Tone.MonoSynth.defaults);
		        Tone.Monophonic.call(this, options);
		        /**
				 *  The oscillator.
				 *  @type {Tone.OmniOscillator}
				 */
		        this.oscillator = new Tone.OmniOscillator(options.oscillator);
		        /**
				 *  The frequency control.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = this.oscillator.frequency;
		        /**
				 *  The detune control.
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = this.oscillator.detune;
		        /**
				 *  The filter.
				 *  @type {Tone.Filter}
				 */
		        this.filter = new Tone.Filter(options.filter);
		        /**
				 *  The filter envelope.
				 *  @type {Tone.FrequencyEnvelope}
				 */
		        this.filterEnvelope = new Tone.FrequencyEnvelope(options.filterEnvelope);
		        /**
				 *  The amplitude envelope.
				 *  @type {Tone.AmplitudeEnvelope}
				 */
		        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);
		        //connect the oscillators to the output
		        this.oscillator.chain(this.filter, this.envelope, this.output);
		        //start the oscillators
		        this.oscillator.start();
		        //connect the filter envelope
		        this.filterEnvelope.connect(this.filter.frequency);
		        this._readOnly([
		            'oscillator',
		            'frequency',
		            'detune',
		            'filter',
		            'filterEnvelope',
		            'envelope'
		        ]);
		    };
		    Tone.extend(Tone.MonoSynth, Tone.Monophonic);
		    /**
			 *  @const
			 *  @static
			 *  @type {Object}
			 */
		    Tone.MonoSynth.defaults = {
		        'frequency': 'C4',
		        'detune': 0,
		        'oscillator': { 'type': 'square' },
		        'filter': {
		            'Q': 6,
		            'type': 'lowpass',
		            'rolloff': -24
		        },
		        'envelope': {
		            'attack': 0.005,
		            'decay': 0.1,
		            'sustain': 0.9,
		            'release': 1
		        },
		        'filterEnvelope': {
		            'attack': 0.06,
		            'decay': 0.2,
		            'sustain': 0.5,
		            'release': 2,
		            'baseFrequency': 200,
		            'octaves': 7,
		            'exponent': 2
		        }
		    };
		    /**
			 *  start the attack portion of the envelope
			 *  @param {Time} [time=now] the time the attack should start
			 *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)
			 *  @returns {Tone.MonoSynth} this
			 *  @private
			 */
		    Tone.MonoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {
		        //the envelopes
		        this.envelope.triggerAttack(time, velocity);
		        this.filterEnvelope.triggerAttack(time);
		        return this;
		    };
		    /**
			 *  start the release portion of the envelope
			 *  @param {Time} [time=now] the time the release should start
			 *  @returns {Tone.MonoSynth} this
			 *  @private
			 */
		    Tone.MonoSynth.prototype._triggerEnvelopeRelease = function (time) {
		        this.envelope.triggerRelease(time);
		        this.filterEnvelope.triggerRelease(time);
		        return this;
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.MonoSynth} this
			 */
		    Tone.MonoSynth.prototype.dispose = function () {
		        Tone.Monophonic.prototype.dispose.call(this);
		        this._writable([
		            'oscillator',
		            'frequency',
		            'detune',
		            'filter',
		            'filterEnvelope',
		            'envelope'
		        ]);
		        this.oscillator.dispose();
		        this.oscillator = null;
		        this.envelope.dispose();
		        this.envelope = null;
		        this.filterEnvelope.dispose();
		        this.filterEnvelope = null;
		        this.filter.dispose();
		        this.filter = null;
		        this.frequency = null;
		        this.detune = null;
		        return this;
		    };
		    return Tone.MonoSynth;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.DuoSynth is a monophonic synth composed of two 
			 *          MonoSynths run in parallel with control over the 
			 *          frequency ratio between the two voices and vibrato effect.
			 *          <img src="https://docs.google.com/drawings/d/1bL4GXvfRMMlqS7XyBm9CjL9KJPSUKbcdBNpqOlkFLxk/pub?w=1012&h=448">
			 *
			 *  @constructor
			 *  @extends {Tone.Monophonic}
			 *  @param {Object} [options] the options available for the synth 
			 *                          see defaults below
			 *  @example
			 * var duoSynth = new Tone.DuoSynth().toMaster();
			 * duoSynth.triggerAttackRelease("C4", "2n");
			 */
		    Tone.DuoSynth = function (options) {
		        options = this.defaultArg(options, Tone.DuoSynth.defaults);
		        Tone.Monophonic.call(this, options);
		        /**
				 *  the first voice
				 *  @type {Tone.MonoSynth}
				 */
		        this.voice0 = new Tone.MonoSynth(options.voice0);
		        this.voice0.volume.value = -10;
		        /**
				 *  the second voice
				 *  @type {Tone.MonoSynth}
				 */
		        this.voice1 = new Tone.MonoSynth(options.voice1);
		        this.voice1.volume.value = -10;
		        /**
				 *  The vibrato LFO. 
				 *  @type {Tone.LFO}
				 *  @private
				 */
		        this._vibrato = new Tone.LFO(options.vibratoRate, -50, 50);
		        this._vibrato.start();
		        /**
				 * the vibrato frequency
				 * @type {Frequency}
				 * @signal
				 */
		        this.vibratoRate = this._vibrato.frequency;
		        /**
				 *  the vibrato gain
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._vibratoGain = new Tone.Gain(options.vibratoAmount, Tone.Type.Positive);
		        /**
				 * The amount of vibrato
				 * @type {Positive}
				 * @signal
				 */
		        this.vibratoAmount = this._vibratoGain.gain;
		        /**
				 *  the frequency control
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);
		        /**
				 *  Harmonicity is the ratio between the two voices. A harmonicity of
				 *  1 is no change. Harmonicity = 2 means a change of an octave. 
				 *  @type {Positive}
				 *  @signal
				 *  @example
				 * //pitch voice1 an octave below voice0
				 * duoSynth.harmonicity.value = 0.5;
				 */
		        this.harmonicity = new Tone.Multiply(options.harmonicity);
		        this.harmonicity.units = Tone.Type.Positive;
		        //control the two voices frequency
		        this.frequency.connect(this.voice0.frequency);
		        this.frequency.chain(this.harmonicity, this.voice1.frequency);
		        this._vibrato.connect(this._vibratoGain);
		        this._vibratoGain.fan(this.voice0.detune, this.voice1.detune);
		        this.voice0.connect(this.output);
		        this.voice1.connect(this.output);
		        this._readOnly([
		            'voice0',
		            'voice1',
		            'frequency',
		            'vibratoAmount',
		            'vibratoRate'
		        ]);
		    };
		    Tone.extend(Tone.DuoSynth, Tone.Monophonic);
		    /**
			 *  @static
			 *  @type {Object}
			 */
		    Tone.DuoSynth.defaults = {
		        'vibratoAmount': 0.5,
		        'vibratoRate': 5,
		        'harmonicity': 1.5,
		        'voice0': {
		            'volume': -10,
		            'portamento': 0,
		            'oscillator': { 'type': 'sine' },
		            'filterEnvelope': {
		                'attack': 0.01,
		                'decay': 0,
		                'sustain': 1,
		                'release': 0.5
		            },
		            'envelope': {
		                'attack': 0.01,
		                'decay': 0,
		                'sustain': 1,
		                'release': 0.5
		            }
		        },
		        'voice1': {
		            'volume': -10,
		            'portamento': 0,
		            'oscillator': { 'type': 'sine' },
		            'filterEnvelope': {
		                'attack': 0.01,
		                'decay': 0,
		                'sustain': 1,
		                'release': 0.5
		            },
		            'envelope': {
		                'attack': 0.01,
		                'decay': 0,
		                'sustain': 1,
		                'release': 0.5
		            }
		        }
		    };
		    /**
			 *  start the attack portion of the envelopes
			 *  
			 *  @param {Time} [time=now] the time the attack should start
			 *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)
			 *  @returns {Tone.DuoSynth} this
			 *  @private
			 */
		    Tone.DuoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {
		        time = this.toSeconds(time);
		        this.voice0.envelope.triggerAttack(time, velocity);
		        this.voice1.envelope.triggerAttack(time, velocity);
		        this.voice0.filterEnvelope.triggerAttack(time);
		        this.voice1.filterEnvelope.triggerAttack(time);
		        return this;
		    };
		    /**
			 *  start the release portion of the envelopes
			 *  
			 *  @param {Time} [time=now] the time the release should start
			 *  @returns {Tone.DuoSynth} this
			 *  @private
			 */
		    Tone.DuoSynth.prototype._triggerEnvelopeRelease = function (time) {
		        this.voice0.triggerRelease(time);
		        this.voice1.triggerRelease(time);
		        return this;
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.DuoSynth} this
			 */
		    Tone.DuoSynth.prototype.dispose = function () {
		        Tone.Monophonic.prototype.dispose.call(this);
		        this._writable([
		            'voice0',
		            'voice1',
		            'frequency',
		            'vibratoAmount',
		            'vibratoRate'
		        ]);
		        this.voice0.dispose();
		        this.voice0 = null;
		        this.voice1.dispose();
		        this.voice1 = null;
		        this.frequency.dispose();
		        this.frequency = null;
		        this._vibratoGain.dispose();
		        this._vibratoGain = null;
		        this._vibrato = null;
		        this.harmonicity.dispose();
		        this.harmonicity = null;
		        this.vibratoAmount.dispose();
		        this.vibratoAmount = null;
		        this.vibratoRate = null;
		        return this;
		    };
		    return Tone.DuoSynth;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  FMSynth is composed of two Tone.Synths where one Tone.Synth modulates
			 *          the frequency of a second Tone.Synth. A lot of spectral content 
			 *          can be explored using the modulationIndex parameter. Read more about
			 *          frequency modulation synthesis on [SoundOnSound](http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm).
			 *          <img src="https://docs.google.com/drawings/d/1h0PUDZXPgi4Ikx6bVT6oncrYPLluFKy7lj53puxj-DM/pub?w=902&h=462">
			 *
			 *  @constructor
			 *  @extends {Tone.Monophonic}
			 *  @param {Object} [options] the options available for the synth 
			 *                          see defaults below
			 *  @example
			 * var fmSynth = new Tone.FMSynth().toMaster();
			 * fmSynth.triggerAttackRelease("C5", "4n");
			 */
		    Tone.FMSynth = function (options) {
		        options = this.defaultArg(options, Tone.FMSynth.defaults);
		        Tone.Monophonic.call(this, options);
		        /**
				 *  The carrier voice.
				 *  @type {Tone.Synth}
				 *  @private
				 */
		        this._carrier = new Tone.Synth(options.carrier);
		        this._carrier.volume.value = -10;
		        /**
				 *  The carrier's oscillator
				 *  @type {Tone.Oscillator}
				 */
		        this.oscillator = this._carrier.oscillator;
		        /**
				 *  The carrier's envelope
				 *  @type {Tone.Oscillator}
				 */
		        this.envelope = this._carrier.envelope.set(options.envelope);
		        /**
				 *  The modulator voice.
				 *  @type {Tone.Synth}
				 *  @private
				 */
		        this._modulator = new Tone.Synth(options.modulator);
		        this._modulator.volume.value = -10;
		        /**
				 *  The modulator's oscillator which is applied
				 *  to the amplitude of the oscillator
				 *  @type {Tone.Oscillator}
				 */
		        this.modulation = this._modulator.oscillator.set(options.modulation);
		        /**
				 *  The modulator's envelope
				 *  @type {Tone.Oscillator}
				 */
		        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);
		        /**
				 *  The frequency control.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);
		        /**
				 *  The detune in cents
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
		        /**
				 *  Harmonicity is the ratio between the two voices. A harmonicity of
				 *  1 is no change. Harmonicity = 2 means a change of an octave. 
				 *  @type {Positive}
				 *  @signal
				 *  @example
				 * //pitch voice1 an octave below voice0
				 * synth.harmonicity.value = 0.5;
				 */
		        this.harmonicity = new Tone.Multiply(options.harmonicity);
		        this.harmonicity.units = Tone.Type.Positive;
		        /**
				 *  The modulation index which essentially the depth or amount of the modulation. It is the 
				 *  ratio of the frequency of the modulating signal (mf) to the amplitude of the 
				 *  modulating signal (ma) -- as in ma/mf. 
				 *	@type {Positive}
				 *	@signal
				 */
		        this.modulationIndex = new Tone.Multiply(options.modulationIndex);
		        this.modulationIndex.units = Tone.Type.Positive;
		        /**
				 *  the node where the modulation happens
				 *  @type {GainNode}
				 *  @private
				 */
		        this._modulationNode = new Tone.Gain(0);
		        //control the two voices frequency
		        this.frequency.connect(this._carrier.frequency);
		        this.frequency.chain(this.harmonicity, this._modulator.frequency);
		        this.frequency.chain(this.modulationIndex, this._modulationNode);
		        this.detune.fan(this._carrier.detune, this._modulator.detune);
		        this._modulator.connect(this._modulationNode.gain);
		        this._modulationNode.connect(this._carrier.frequency);
		        this._carrier.connect(this.output);
		        this._readOnly([
		            'frequency',
		            'harmonicity',
		            'modulationIndex',
		            'oscillator',
		            'envelope',
		            'modulation',
		            'modulationEnvelope',
		            'detune'
		        ]);
		    };
		    Tone.extend(Tone.FMSynth, Tone.Monophonic);
		    /**
			 *  @static
			 *  @type {Object}
			 */
		    Tone.FMSynth.defaults = {
		        'harmonicity': 3,
		        'modulationIndex': 10,
		        'detune': 0,
		        'oscillator': { 'type': 'sine' },
		        'envelope': {
		            'attack': 0.01,
		            'decay': 0.01,
		            'sustain': 1,
		            'release': 0.5
		        },
		        'moduation': { 'type': 'square' },
		        'modulationEnvelope': {
		            'attack': 0.5,
		            'decay': 0,
		            'sustain': 1,
		            'release': 0.5
		        }
		    };
		    /**
			 * 	trigger the attack portion of the note
			 *  
			 *  @param  {Time} [time=now] the time the note will occur
			 *  @param {number} [velocity=1] the velocity of the note
			 *  @returns {Tone.FMSynth} this
			 *  @private
			 */
		    Tone.FMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {
		        time = this.toSeconds(time);
		        //the envelopes
		        this.envelope.triggerAttack(time, velocity);
		        this.modulationEnvelope.triggerAttack(time);
		        return this;
		    };
		    /**
			 *  trigger the release portion of the note
			 *  
			 *  @param  {Time} [time=now] the time the note will release
			 *  @returns {Tone.FMSynth} this
			 *  @private
			 */
		    Tone.FMSynth.prototype._triggerEnvelopeRelease = function (time) {
		        time = this.toSeconds(time);
		        this.envelope.triggerRelease(time);
		        this.modulationEnvelope.triggerRelease(time);
		        return this;
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.FMSynth} this
			 */
		    Tone.FMSynth.prototype.dispose = function () {
		        Tone.Monophonic.prototype.dispose.call(this);
		        this._writable([
		            'frequency',
		            'harmonicity',
		            'modulationIndex',
		            'oscillator',
		            'envelope',
		            'modulation',
		            'modulationEnvelope',
		            'detune'
		        ]);
		        this._carrier.dispose();
		        this._carrier = null;
		        this._modulator.dispose();
		        this._modulator = null;
		        this.frequency.dispose();
		        this.frequency = null;
		        this.detune.dispose();
		        this.detune = null;
		        this.modulationIndex.dispose();
		        this.modulationIndex = null;
		        this.harmonicity.dispose();
		        this.harmonicity = null;
		        this._modulationNode.dispose();
		        this._modulationNode = null;
		        this.oscillator = null;
		        this.envelope = null;
		        this.modulationEnvelope = null;
		        this.modulation = null;
		        return this;
		    };
		    return Tone.FMSynth;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.MembraneSynth makes kick and tom sounds using a single oscillator
			 *          with an amplitude envelope and frequency ramp. A Tone.Oscillator
			 *          is routed through a Tone.AmplitudeEnvelope to the output. The drum
			 *          quality of the sound comes from the frequency envelope applied
			 *          during during Tone.MembraneSynth.triggerAttack(note). The frequency
			 *          envelope starts at <code>note * .octaves</code> and ramps to 
			 *          <code>note</code> over the duration of <code>.pitchDecay</code>. 
			 *
			 *  @constructor
			 *  @extends {Tone.Instrument}
			 *  @param {Object} [options] the options available for the synth 
			 *                          see defaults below
			 *  @example
			 * var synth = new Tone.MembraneSynth().toMaster();
			 * synth.triggerAttackRelease("C2", "8n");
			 */
		    Tone.MembraneSynth = function (options) {
		        options = this.defaultArg(options, Tone.MembraneSynth.defaults);
		        Tone.Instrument.call(this, options);
		        /**
				 *  The oscillator.
				 *  @type {Tone.Oscillator}
				 */
		        this.oscillator = new Tone.Oscillator(options.oscillator).start();
		        /**
				 *  The amplitude envelope.
				 *  @type {Tone.AmplitudeEnvelope}
				 */
		        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);
		        /**
				 *  The number of octaves the pitch envelope ramps.
				 *  @type {Positive}
				 */
		        this.octaves = options.octaves;
		        /**
				 *  The amount of time the frequency envelope takes. 
				 *  @type {Time}
				 */
		        this.pitchDecay = options.pitchDecay;
		        this.oscillator.chain(this.envelope, this.output);
		        this._readOnly([
		            'oscillator',
		            'envelope'
		        ]);
		    };
		    Tone.extend(Tone.MembraneSynth, Tone.Instrument);
		    /**
			 *  @static
			 *  @type {Object}
			 */
		    Tone.MembraneSynth.defaults = {
		        'pitchDecay': 0.05,
		        'octaves': 10,
		        'oscillator': { 'type': 'sine' },
		        'envelope': {
		            'attack': 0.001,
		            'decay': 0.4,
		            'sustain': 0.01,
		            'release': 1.4,
		            'attackCurve': 'exponential'
		        }
		    };
		    /**
			 *  Trigger the note at the given time with the given velocity. 
			 *  
			 *  @param  {Frequency} note     the note
			 *  @param  {Time} [time=now]     the time, if not given is now
			 *  @param  {number} [velocity=1] velocity defaults to 1
			 *  @returns {Tone.MembraneSynth} this
			 *  @example
			 *  kick.triggerAttack(60);
			 */
		    Tone.MembraneSynth.prototype.triggerAttack = function (note, time, velocity) {
		        time = this.toSeconds(time);
		        note = this.toFrequency(note);
		        var maxNote = note * this.octaves;
		        this.oscillator.frequency.setValueAtTime(maxNote, time);
		        this.oscillator.frequency.exponentialRampToValueAtTime(note, time + this.toSeconds(this.pitchDecay));
		        this.envelope.triggerAttack(time, velocity);
		        return this;
		    };
		    /**
			 *  Trigger the release portion of the note.
			 *  
			 *  @param  {Time} [time=now] the time the note will release
			 *  @returns {Tone.MembraneSynth} this
			 */
		    Tone.MembraneSynth.prototype.triggerRelease = function (time) {
		        this.envelope.triggerRelease(time);
		        return this;
		    };
		    /**
			 *  Clean up.
			 *  @returns {Tone.MembraneSynth} this
			 */
		    Tone.MembraneSynth.prototype.dispose = function () {
		        Tone.Instrument.prototype.dispose.call(this);
		        this._writable([
		            'oscillator',
		            'envelope'
		        ]);
		        this.oscillator.dispose();
		        this.oscillator = null;
		        this.envelope.dispose();
		        this.envelope = null;
		        return this;
		    };
		    return Tone.MembraneSynth;
		});
		Module(function (Tone) {
		    /**
			 *  Inharmonic ratio of frequencies based on the Roland TR-808
			 *  Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model
			 *  @private
			 *  @static
			 *  @type {Array}
			 */
		    var inharmRatios = [
		        1,
		        1.483,
		        1.932,
		        2.546,
		        2.63,
		        3.897
		    ];
		    /**
			 *  @class  A highly inharmonic and spectrally complex source with a highpass filter
			 *          and amplitude envelope which is good for making metalophone sounds. Based
			 *          on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).
			 *          Inspiration from [Sound on Sound](http://www.soundonsound.com/sos/jul02/articles/synthsecrets0702.asp).
			 *
			 *  @constructor
			 *  @extends {Tone.Instrument}
			 *  @param {Object} [options] The options availble for the synth
			 *                             see defaults below
			 */
		    Tone.MetalSynth = function (options) {
		        options = this.defaultArg(options, Tone.MetalSynth.defaults);
		        Tone.Instrument.call(this, options);
		        /**
				 *  The frequency of the cymbal
				 *  @type  {Frequency}
				 *  @signal
				 */
		        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
		        /**
				 *  The array of FMOscillators
				 *  @type  {Array}
				 *  @private
				 */
		        this._oscillators = [];
		        /**
				 *  The frequency multipliers
				 *  @type {Array}
				 *  @private
				 */
		        this._freqMultipliers = [];
		        /**
				 *  The amplitude for the body
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._amplitue = new Tone.Gain(0).connect(this.output);
		        /**
				 *  highpass the output
				 *  @type {Tone.Filter}
				 *  @private
				 */
		        this._highpass = new Tone.Filter({
		            'type': 'highpass',
		            'Q': 0
		        }).connect(this._amplitue);
		        /**
				 *  The number of octaves the highpass
				 *  filter frequency ramps
				 *  @type {Number}
				 *  @private
				 */
		        this._octaves = options.octaves;
		        /**
				 *  Scale the body envelope
				 *  for the bandpass
				 *  @type {Tone.Scale}
				 *  @private
				 */
		        this._filterFreqScaler = new Tone.Scale(options.resonance, 7000);
		        /**
				 *  The envelope which is connected both to the 
				 *  amplitude and highpass filter's cutoff frequency
				 *  @type  {Tone.Envelope}
				 */
		        this.envelope = new Tone.Envelope({
		            'attack': options.envelope.attack,
		            'attackCurve': 'exponential',
		            'decay': options.envelope.decay,
		            'sustain': 0,
		            'release': options.envelope.release
		        }).chain(this._filterFreqScaler, this._highpass.frequency);
		        this.envelope.connect(this._amplitue.gain);
		        for (var i = 0; i < inharmRatios.length; i++) {
		            var osc = new Tone.FMOscillator({
		                'type': 'square',
		                'modulationType': 'square',
		                'harmonicity': options.harmonicity,
		                'modulationIndex': options.modulationIndex
		            });
		            osc.connect(this._highpass).start(0);
		            this._oscillators[i] = osc;
		            var mult = new Tone.Multiply(inharmRatios[i]);
		            this._freqMultipliers[i] = mult;
		            this.frequency.chain(mult, osc.frequency);
		        }
		        //set the octaves
		        this.octaves = options.octaves;
		    };
		    Tone.extend(Tone.MetalSynth, Tone.Instrument);
		    /**
			 *  default values
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.MetalSynth.defaults = {
		        'frequency': 200,
		        'envelope': {
		            'attack': 0.0015,
		            'decay': 1.4,
		            'release': 0.2
		        },
		        'harmonicity': 5.1,
		        'modulationIndex': 32,
		        'resonance': 4000,
		        'octaves': 1.5
		    };
		    /**
			 *  Trigger the attack.
			 *  @param  {Time}  time      When the attack should be triggered.
			 *  @param  {NormalRange=1}  velocity  The velocity that the envelope should be triggered at.
			 *  @return  {Tone.MetalSynth}  this
			 */
		    Tone.MetalSynth.prototype.triggerAttack = function (time, vel) {
		        time = this.toSeconds(time);
		        vel = this.defaultArg(vel, 1);
		        this.envelope.triggerAttack(time, vel);
		        return this;
		    };
		    /**
			 *  Trigger the release of the envelope.
			 *  @param  {Time}  time      When the release should be triggered.
			 *  @return  {Tone.MetalSynth}  this
			 */
		    Tone.MetalSynth.prototype.triggerRelease = function (time) {
		        time = this.toSeconds(time);
		        this.envelope.triggerRelease(time);
		        return this;
		    };
		    /**
			 *  Trigger the attack and release of the envelope after the given 
			 *  duration. 
			 *  @param  {Time}  duration  The duration before triggering the release
			 *  @param  {Time}  time      When the attack should be triggered.
			 *  @param  {NormalRange=1}  velocity  The velocity that the envelope should be triggered at.
			 *  @return  {Tone.MetalSynth}  this
			 */
		    Tone.MetalSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {
		        time = this.toSeconds(time);
		        duration = this.toSeconds(duration);
		        this.triggerAttack(time, velocity);
		        this.triggerRelease(time + duration);
		        return this;
		    };
		    /**
			 *  The modulationIndex of the oscillators which make up the source.
			 *  see Tone.FMOscillator.modulationIndex
			 *  @memberOf Tone.MetalSynth#
			 *  @type {Positive}
			 *  @name  modulationIndex
			 */
		    Object.defineProperty(Tone.MetalSynth.prototype, 'modulationIndex', {
		        get: function () {
		            return this._oscillators[0].modulationIndex.value;
		        },
		        set: function (val) {
		            for (var i = 0; i < this._oscillators.length; i++) {
		                this._oscillators[i].modulationIndex.value = val;
		            }
		        }
		    });
		    /**
			 *  The harmonicity of the oscillators which make up the source.
			 *  see Tone.FMOscillator.harmonicity
			 *  @memberOf Tone.MetalSynth#
			 *  @type {Positive}
			 *  @name  harmonicity
			 */
		    Object.defineProperty(Tone.MetalSynth.prototype, 'harmonicity', {
		        get: function () {
		            return this._oscillators[0].harmonicity.value;
		        },
		        set: function (val) {
		            for (var i = 0; i < this._oscillators.length; i++) {
		                this._oscillators[i].harmonicity.value = val;
		            }
		        }
		    });
		    /**
			 *  The frequency of the highpass filter attached to the envelope
			 *  @memberOf Tone.MetalSynth#
			 *  @type {Frequency}
			 *  @name  resonance
			 */
		    Object.defineProperty(Tone.MetalSynth.prototype, 'resonance', {
		        get: function () {
		            return this._filterFreqScaler.min;
		        },
		        set: function (val) {
		            this._filterFreqScaler.min = val;
		            this.octaves = this._octaves;
		        }
		    });
		    /**
			 *  The number of octaves above the "resonance" frequency
			 *  that the filter ramps during the attack/decay envelope
			 *  @memberOf Tone.MetalSynth#
			 *  @type {Number}
			 *  @name  octaves
			 */
		    Object.defineProperty(Tone.MetalSynth.prototype, 'octaves', {
		        get: function () {
		            return this._octaves;
		        },
		        set: function (octs) {
		            this._octaves = octs;
		            this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, octs);
		        }
		    });
		    /**
			 *  Clean up
			 *  @returns {Tone.MetalSynth} this
			 */
		    Tone.MetalSynth.prototype.dispose = function () {
		        Tone.Instrument.prototype.dispose.call(this);
		        for (var i = 0; i < this._oscillators.length; i++) {
		            this._oscillators[i].dispose();
		            this._freqMultipliers[i].dispose();
		        }
		        this._oscillators = null;
		        this._freqMultipliers = null;
		        this.frequency.dispose();
		        this.frequency = null;
		        this._filterFreqScaler.dispose();
		        this._filterFreqScaler = null;
		        this._amplitue.dispose();
		        this._amplitue = null;
		        this.envelope.dispose();
		        this.envelope = null;
		        this._highpass.dispose();
		        this._highpass = null;
		    };
		    return Tone.MetalSynth;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Noise is a noise generator. It uses looped noise buffers to save on performance.
			 *          Tone.Noise supports the noise types: "pink", "white", and "brown". Read more about
			 *          colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).
			 *
			 *  @constructor
			 *  @extends {Tone.Source}
			 *  @param {string} type the noise type (white|pink|brown)
			 *  @example
			 * //initialize the noise and start
			 * var noise = new Tone.Noise("pink").start();
			 * 
			 * //make an autofilter to shape the noise
			 * var autoFilter = new Tone.AutoFilter({
			 * 	"frequency" : "8m", 
			 * 	"min" : 800, 
			 * 	"max" : 15000
			 * }).connect(Tone.Master);
			 * 
			 * //connect the noise
			 * noise.connect(autoFilter);
			 * //start the autofilter LFO
			 * autoFilter.start()
			 */
		    Tone.Noise = function () {
		        var options = this.optionsObject(arguments, ['type'], Tone.Noise.defaults);
		        Tone.Source.call(this, options);
		        /**
				 *  @private
				 *  @type {AudioBufferSourceNode}
				 */
		        this._source = null;
		        /**
				 *  the buffer
				 *  @private
				 *  @type {AudioBuffer}
				 */
		        this._buffer = null;
		        /**
				 *  The playback rate of the noise. Affects
				 *  the "frequency" of the noise.
				 *  @type {Positive}
				 *  @signal
				 */
		        this._playbackRate = options.playbackRate;
		        this.type = options.type;
		    };
		    Tone.extend(Tone.Noise, Tone.Source);
		    /**
			 *  the default parameters
			 *
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.Noise.defaults = {
		        'type': 'white',
		        'playbackRate': 1
		    };
		    /**
			 * The type of the noise. Can be "white", "brown", or "pink". 
			 * @memberOf Tone.Noise#
			 * @type {string}
			 * @name type
			 * @example
			 * noise.type = "white";
			 */
		    Object.defineProperty(Tone.Noise.prototype, 'type', {
		        get: function () {
		            if (this._buffer === _whiteNoise) {
		                return 'white';
		            } else if (this._buffer === _brownNoise) {
		                return 'brown';
		            } else if (this._buffer === _pinkNoise) {
		                return 'pink';
		            }
		        },
		        set: function (type) {
		            if (this.type !== type) {
		                switch (type) {
		                case 'white':
		                    this._buffer = _whiteNoise;
		                    break;
		                case 'pink':
		                    this._buffer = _pinkNoise;
		                    break;
		                case 'brown':
		                    this._buffer = _brownNoise;
		                    break;
		                default:
		                    throw new TypeError('Tone.Noise: invalid type: ' + type);
		                }
		                //if it's playing, stop and restart it
		                if (this.state === Tone.State.Started) {
		                    var now = this.now() + this.blockTime;
		                    //remove the listener
		                    this._stop(now);
		                    this._start(now);
		                }
		            }
		        }
		    });
		    /**
			 *  The playback rate of the noise. Affects
			 *  the "frequency" of the noise.
			 *  @type {Positive}
			 *  @signal
			 */
		    Object.defineProperty(Tone.Noise.prototype, 'playbackRate', {
		        get: function () {
		            return this._playbackRate;
		        },
		        set: function (rate) {
		            this._playbackRate = rate;
		            if (this._source) {
		                this._source.playbackRate.value = rate;
		            }
		        }
		    });
		    /**
			 *  internal start method
			 *
			 *  @param {Time} time
			 *  @private
			 */
		    Tone.Noise.prototype._start = function (time) {
		        this._source = this.context.createBufferSource();
		        this._source.buffer = this._buffer;
		        this._source.loop = true;
		        this._source.playbackRate.value = this._playbackRate;
		        this._source.connect(this.output);
		        this._source.start(this.toSeconds(time), Math.random() * (this._buffer.duration - 0.001));
		    };
		    /**
			 *  internal stop method
			 *
			 *  @param {Time} time
			 *  @private
			 */
		    Tone.Noise.prototype._stop = function (time) {
		        if (this._source) {
		            this._source.stop(this.toSeconds(time));
		        }
		    };
		    /**
			 *  Clean up.
			 *  @returns {Tone.Noise} this
			 */
		    Tone.Noise.prototype.dispose = function () {
		        Tone.Source.prototype.dispose.call(this);
		        if (this._source !== null) {
		            this._source.disconnect();
		            this._source = null;
		        }
		        this._buffer = null;
		        return this;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    // THE BUFFERS
		    // borrowed heavily from http://noisehack.com/generate-noise-web-audio-api/
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *	static noise buffers
			 *
			 *  @static
			 *  @private
			 *  @type {AudioBuffer}
			 */
		    var _pinkNoise = null, _brownNoise = null, _whiteNoise = null;
		    Tone._initAudioContext(function (audioContext) {
		        var sampleRate = audioContext.sampleRate;
		        //four seconds per buffer
		        var bufferLength = sampleRate * 4;
		        //fill the buffers
		        _pinkNoise = function () {
		            var buffer = audioContext.createBuffer(2, bufferLength, sampleRate);
		            for (var channelNum = 0; channelNum < buffer.numberOfChannels; channelNum++) {
		                var channel = buffer.getChannelData(channelNum);
		                var b0, b1, b2, b3, b4, b5, b6;
		                b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0;
		                for (var i = 0; i < bufferLength; i++) {
		                    var white = Math.random() * 2 - 1;
		                    b0 = 0.99886 * b0 + white * 0.0555179;
		                    b1 = 0.99332 * b1 + white * 0.0750759;
		                    b2 = 0.969 * b2 + white * 0.153852;
		                    b3 = 0.8665 * b3 + white * 0.3104856;
		                    b4 = 0.55 * b4 + white * 0.5329522;
		                    b5 = -0.7616 * b5 - white * 0.016898;
		                    channel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
		                    channel[i] *= 0.11;
		                    // (roughly) compensate for gain
		                    b6 = white * 0.115926;
		                }
		            }
		            return buffer;
		        }();
		        _brownNoise = function () {
		            var buffer = audioContext.createBuffer(2, bufferLength, sampleRate);
		            for (var channelNum = 0; channelNum < buffer.numberOfChannels; channelNum++) {
		                var channel = buffer.getChannelData(channelNum);
		                var lastOut = 0;
		                for (var i = 0; i < bufferLength; i++) {
		                    var white = Math.random() * 2 - 1;
		                    channel[i] = (lastOut + 0.02 * white) / 1.02;
		                    lastOut = channel[i];
		                    channel[i] *= 3.5;    // (roughly) compensate for gain
		                }
		            }
		            return buffer;
		        }();
		        _whiteNoise = function () {
		            var buffer = audioContext.createBuffer(2, bufferLength, sampleRate);
		            for (var channelNum = 0; channelNum < buffer.numberOfChannels; channelNum++) {
		                var channel = buffer.getChannelData(channelNum);
		                for (var i = 0; i < bufferLength; i++) {
		                    channel[i] = Math.random() * 2 - 1;
		                }
		            }
		            return buffer;
		        }();
		    });
		    return Tone.Noise;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.NoiseSynth is composed of a noise generator (Tone.Noise), one filter (Tone.Filter), 
			 *          and two envelopes (Tone.Envelop). One envelope controls the amplitude
			 *          of the noise and the other is controls the cutoff frequency of the filter. 
			 *          <img src="https://docs.google.com/drawings/d/1rqzuX9rBlhT50MRvD2TKml9bnZhcZmzXF1rf_o7vdnE/pub?w=918&h=242">
			 *
			 *  @constructor
			 *  @extends {Tone.Instrument}
			 *  @param {Object} [options] the options available for the synth 
			 *                          see defaults below
			 * @example
			 * var noiseSynth = new Tone.NoiseSynth().toMaster();
			 * noiseSynth.triggerAttackRelease("8n");
			 */
		    Tone.NoiseSynth = function (options) {
		        //get the defaults
		        options = this.defaultArg(options, Tone.NoiseSynth.defaults);
		        Tone.Instrument.call(this, options);
		        /**
				 *  The noise source.
				 *  @type {Tone.Noise}
				 *  @example
				 * noiseSynth.set("noise.type", "brown");
				 */
		        this.noise = new Tone.Noise();
		        /**
				 *  The amplitude envelope. 
				 *  @type {Tone.AmplitudeEnvelope}
				 */
		        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);
		        //connect the noise to the output
		        this.noise.chain(this.envelope, this.output);
		        //start the noise
		        this.noise.start();
		        this._readOnly([
		            'noise',
		            'envelope'
		        ]);
		    };
		    Tone.extend(Tone.NoiseSynth, Tone.Instrument);
		    /**
			 *  @const
			 *  @static
			 *  @type {Object}
			 */
		    Tone.NoiseSynth.defaults = {
		        'noise': { 'type': 'white' },
		        'envelope': {
		            'attack': 0.005,
		            'decay': 0.1,
		            'sustain': 0
		        }
		    };
		    /**
			 *  Start the attack portion of the envelopes. Unlike other 
			 *  instruments, Tone.NoiseSynth doesn't have a note. 
			 *  @param {Time} [time=now] the time the attack should start
			 *  @param {number} [velocity=1] the velocity of the note (0-1)
			 *  @returns {Tone.NoiseSynth} this
			 *  @example
			 * noiseSynth.triggerAttack();
			 */
		    Tone.NoiseSynth.prototype.triggerAttack = function (time, velocity) {
		        //the envelopes
		        this.envelope.triggerAttack(time, velocity);
		        return this;
		    };
		    /**
			 *  Start the release portion of the envelopes.
			 *  @param {Time} [time=now] the time the release should start
			 *  @returns {Tone.NoiseSynth} this
			 */
		    Tone.NoiseSynth.prototype.triggerRelease = function (time) {
		        this.envelope.triggerRelease(time);
		        return this;
		    };
		    /**
			 *  Trigger the attack and then the release. 
			 *  @param  {Time} duration the duration of the note
			 *  @param  {Time} [time=now]     the time of the attack
			 *  @param  {number} [velocity=1] the velocity
			 *  @returns {Tone.NoiseSynth} this
			 */
		    Tone.NoiseSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {
		        time = this.toSeconds(time);
		        duration = this.toSeconds(duration);
		        this.triggerAttack(time, velocity);
		        this.triggerRelease(time + duration);
		        return this;
		    };
		    /**
			 *  Clean up. 
			 *  @returns {Tone.NoiseSynth} this
			 */
		    Tone.NoiseSynth.prototype.dispose = function () {
		        Tone.Instrument.prototype.dispose.call(this);
		        this._writable([
		            'noise',
		            'envelope'
		        ]);
		        this.noise.dispose();
		        this.noise = null;
		        this.envelope.dispose();
		        this.envelope = null;
		        return this;
		    };
		    return Tone.NoiseSynth;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Karplus-String string synthesis. Often out of tune. 
			 *         Will change when the AudioWorkerNode is available across
			 *         browsers. 
			 *  
			 *  @constructor
			 *  @extends {Tone.Instrument}
			 *  @param {Object} [options] see the defaults
			 *  @example
			 * var plucky = new Tone.PluckSynth().toMaster();
			 * plucky.triggerAttack("C4");
			 */
		    Tone.PluckSynth = function (options) {
		        options = this.defaultArg(options, Tone.PluckSynth.defaults);
		        Tone.Instrument.call(this, options);
		        /**
				 *  @type {Tone.Noise}
				 *  @private
				 */
		        this._noise = new Tone.Noise('pink');
		        /**
				 *  The amount of noise at the attack. 
				 *  Nominal range of [0.1, 20]
				 *  @type {number}
				 */
		        this.attackNoise = 1;
		        /**
				 *  the LFCF
				 *  @type {Tone.LowpassCombFilter}
				 *  @private
				 */
		        this._lfcf = new Tone.LowpassCombFilter({
		            'resonance': options.resonance,
		            'dampening': options.dampening
		        });
		        /**
				 *  The resonance control. 
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.resonance = this._lfcf.resonance;
		        /**
				 *  The dampening control. i.e. the lowpass filter frequency of the comb filter
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.dampening = this._lfcf.dampening;
		        //connections
		        this._noise.connect(this._lfcf);
		        this._lfcf.connect(this.output);
		        this._readOnly([
		            'resonance',
		            'dampening'
		        ]);
		    };
		    Tone.extend(Tone.PluckSynth, Tone.Instrument);
		    /**
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.PluckSynth.defaults = {
		        'attackNoise': 1,
		        'dampening': 4000,
		        'resonance': 0.9
		    };
		    /**
			 *  Trigger the note. 
			 *  @param {Frequency} note The note to trigger.
			 *  @param {Time} [time=now] When the note should be triggered.
			 *  @returns {Tone.PluckSynth} this
			 */
		    Tone.PluckSynth.prototype.triggerAttack = function (note, time) {
		        note = this.toFrequency(note);
		        time = this.toSeconds(time);
		        var delayAmount = 1 / note;
		        this._lfcf.delayTime.setValueAtTime(delayAmount, time);
		        this._noise.start(time);
		        this._noise.stop(time + delayAmount * this.attackNoise);
		        return this;
		    };
		    /**
			 *  Clean up. 
			 *  @returns {Tone.PluckSynth} this
			 */
		    Tone.PluckSynth.prototype.dispose = function () {
		        Tone.Instrument.prototype.dispose.call(this);
		        this._noise.dispose();
		        this._lfcf.dispose();
		        this._noise = null;
		        this._lfcf = null;
		        this._writable([
		            'resonance',
		            'dampening'
		        ]);
		        this.dampening = null;
		        this.resonance = null;
		        return this;
		    };
		    return Tone.PluckSynth;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.PolySynth handles voice creation and allocation for any
			 *          instruments passed in as the second paramter. PolySynth is 
			 *          not a synthesizer by itself, it merely manages voices of 
			 *          one of the other types of synths, allowing any of the 
			 *          monophonic synthesizers to be polyphonic. 
			 *
			 *  @constructor
			 *  @extends {Tone.Instrument}
			 *  @param {number|Object} [polyphony=4] The number of voices to create
			 *  @param {function} [voice=Tone.Synth] The constructor of the voices
			 *                                            uses Tone.Synth by default. 
			 *  @example
			 * //a polysynth composed of 6 Voices of Synth
			 * var synth = new Tone.PolySynth(6, Tone.Synth).toMaster();
			 * //set the attributes using the set interface
			 * synth.set("detune", -1200);
			 * //play a chord
			 * synth.triggerAttackRelease(["C4", "E4", "A4"], "4n");
			 */
		    Tone.PolySynth = function () {
		        Tone.Instrument.call(this);
		        var options = this.optionsObject(arguments, [
		            'polyphony',
		            'voice'
		        ], Tone.PolySynth.defaults);
		        options = this.defaultArg(options, Tone.Instrument.defaults);
		        //max polyphony
		        options.polyphony = Math.min(Tone.PolySynth.MAX_POLYPHONY, options.polyphony);
		        /**
				 *  the array of voices
				 *  @type {Array}
				 */
		        this.voices = new Array(options.polyphony);
		        /**
				 *  The queue of voices with data about last trigger
				 *  and the triggered note
				 *  @private
				 *  @type {Array}
				 */
		        this._triggers = new Array(options.polyphony);
		        /**
				 *  The detune in cents
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
		        this._readOnly('detune');
		        //create the voices
		        for (var i = 0; i < options.polyphony; i++) {
		            var v = new options.voice(arguments[2], arguments[3]);
		            this.voices[i] = v;
		            v.connect(this.output);
		            if (v.hasOwnProperty('detune')) {
		                this.detune.connect(v.detune);
		            }
		            this._triggers[i] = {
		                release: -1,
		                note: null,
		                voice: v
		            };
		        }
		        //set the volume initially
		        this.volume.value = options.volume;
		    };
		    Tone.extend(Tone.PolySynth, Tone.Instrument);
		    /**
			 *  the defaults
			 *  @const
			 *  @static
			 *  @type {Object}
			 */
		    Tone.PolySynth.defaults = {
		        'polyphony': 4,
		        'volume': 0,
		        'detune': 0,
		        'voice': Tone.Synth
		    };
		    /**
			 *  Trigger the attack portion of the note
			 *  @param  {Frequency|Array} notes The notes to play. Accepts a single
			 *                                  Frequency or an array of frequencies.
			 *  @param  {Time} [time=now]  The start time of the note.
			 *  @param {number} [velocity=1] The velocity of the note.
			 *  @returns {Tone.PolySynth} this
			 *  @example
			 * //trigger a chord immediately with a velocity of 0.2
			 * poly.triggerAttack(["Ab3", "C4", "F5"], undefined, 0.2);
			 */
		    Tone.PolySynth.prototype.triggerAttack = function (notes, time, velocity) {
		        if (!Array.isArray(notes)) {
		            notes = [notes];
		        }
		        time = this.toSeconds(time);
		        for (var i = 0; i < notes.length; i++) {
		            var val = notes[i];
		            //trigger the oldest voice
		            var oldest = this._triggers[0];
		            var oldestIndex = 0;
		            for (var j = 1; j < this._triggers.length; j++) {
		                if (this._triggers[j].release < oldest.release) {
		                    oldest = this._triggers[j];
		                    oldestIndex = j;
		                }
		            }
		            oldest.release = Infinity;
		            oldest.note = JSON.stringify(val);
		            oldest.voice.triggerAttack(val, time, velocity);
		        }
		        return this;
		    };
		    /**
			 *  Trigger the attack and release after the specified duration
			 *  
			 *  @param  {Frequency|Array} notes The notes to play. Accepts a single
			 *                                  Frequency or an array of frequencies.
			 *  @param  {Time} duration the duration of the note
			 *  @param  {Time} [time=now]     if no time is given, defaults to now
			 *  @param  {number} [velocity=1] the velocity of the attack (0-1)
			 *  @returns {Tone.PolySynth} this
			 *  @example
			 * //trigger a chord for a duration of a half note 
			 * poly.triggerAttackRelease(["Eb3", "G4", "C5"], "2n");
			 *  @example
			 * //can pass in an array of durations as well
			 * poly.triggerAttackRelease(["Eb3", "G4", "C5"], ["2n", "4n", "4n"]);
			 */
		    Tone.PolySynth.prototype.triggerAttackRelease = function (notes, duration, time, velocity) {
		        time = this.toSeconds(time);
		        this.triggerAttack(notes, time, velocity);
		        if (this.isArray(duration) && this.isArray(notes)) {
		            for (var i = 0; i < notes.length; i++) {
		                var d = duration[Math.min(i, duration.length - 1)];
		                this.triggerRelease(notes[i], time + this.toSeconds(d));
		            }
		        } else {
		            this.triggerRelease(notes, time + this.toSeconds(duration));
		        }
		        return this;
		    };
		    /**
			 *  Trigger the release of the note. Unlike monophonic instruments, 
			 *  a note (or array of notes) needs to be passed in as the first argument.
			 *  @param  {Frequency|Array} notes The notes to play. Accepts a single
			 *                                  Frequency or an array of frequencies.
			 *  @param  {Time} [time=now]  When the release will be triggered. 
			 *  @returns {Tone.PolySynth} this
			 *  @example
			 * poly.triggerRelease(["Ab3", "C4", "F5"], "+2n");
			 */
		    Tone.PolySynth.prototype.triggerRelease = function (notes, time) {
		        if (!Array.isArray(notes)) {
		            notes = [notes];
		        }
		        time = this.toSeconds(time);
		        for (var i = 0; i < notes.length; i++) {
		            //get the voice
		            var stringified = JSON.stringify(notes[i]);
		            for (var v = 0; v < this._triggers.length; v++) {
		                var desc = this._triggers[v];
		                if (desc.note === stringified && desc.release > time) {
		                    desc.voice.triggerRelease(time);
		                    desc.release = time;
		                }
		            }
		        }
		        return this;
		    };
		    /**
			 *  Set a member/attribute of the voices. 
			 *  @param {Object|string} params
			 *  @param {number=} value
			 *  @param {Time=} rampTime
			 *  @returns {Tone.PolySynth} this
			 *  @example
			 * poly.set({
			 * 	"filter" : {
			 * 		"type" : "highpass"
			 * 	},
			 * 	"envelope" : {
			 * 		"attack" : 0.25
			 * 	}
			 * });
			 */
		    Tone.PolySynth.prototype.set = function (params, value, rampTime) {
		        for (var i = 0; i < this.voices.length; i++) {
		            this.voices[i].set(params, value, rampTime);
		        }
		        return this;
		    };
		    /**
			 *  Get the synth's attributes. Given no arguments get
			 *  will return all available object properties and their corresponding
			 *  values. Pass in a single attribute to retrieve or an array
			 *  of attributes. The attribute strings can also include a "."
			 *  to access deeper properties.
			 *  @param {Array=} params the parameters to get, otherwise will return 
			 *  					   all available.
			 */
		    Tone.PolySynth.prototype.get = function (params) {
		        return this.voices[0].get(params);
		    };
		    /**
			 *  Trigger the release portion of all the currently active voices.
			 *  @param {Time} [time=now] When the notes should be released.
			 *  @return {Tone.PolySynth} this
			 */
		    Tone.PolySynth.prototype.releaseAll = function (time) {
		        time = this.toSeconds(time);
		        for (var i = 0; i < this._triggers.length; i++) {
		            var desc = this._triggers[i];
		            if (desc.release > time) {
		                desc.release = time;
		                desc.voice.triggerRelease(time);
		            }
		        }
		        return this;
		    };
		    /**
			 *  Clean up.
			 *  @returns {Tone.PolySynth} this
			 */
		    Tone.PolySynth.prototype.dispose = function () {
		        Tone.Instrument.prototype.dispose.call(this);
		        for (var i = 0; i < this.voices.length; i++) {
		            this.voices[i].dispose();
		            this.voices[i] = null;
		        }
		        this._writable('detune');
		        this.detune.dispose();
		        this.detune = null;
		        this.voices = null;
		        this._triggers = null;
		        return this;
		    };
		    /**
			 *  The maximum number of notes that can be allocated 
			 *  to a polysynth. 
			 *  @type  {Number}
			 *  @static
			 */
		    Tone.PolySynth.MAX_POLYPHONY = 20;
		    return Tone.PolySynth;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Player is an audio file player with start, loop, and stop functions.
			 *  
			 *  @constructor
			 *  @extends {Tone.Source} 
			 *  @param {string|AudioBuffer} url Either the AudioBuffer or the url from
			 *                                  which to load the AudioBuffer
			 *  @param {function=} onload The function to invoke when the buffer is loaded. 
			 *                            Recommended to use Tone.Buffer.on('load') instead.
			 *  @example
			 * var player = new Tone.Player("./path/to/sample.mp3").toMaster();
			 * //play as soon as the buffer is loaded
			 * player.autostart = true;
			 */
		    Tone.Player = function (url) {
		        var options;
		        if (url instanceof Tone.Buffer) {
		            url = url.get();
		            options = Tone.Player.defaults;
		        } else {
		            options = this.optionsObject(arguments, [
		                'url',
		                'onload'
		            ], Tone.Player.defaults);
		        }
		        Tone.Source.call(this, options);
		        /**
				 *  @private
				 *  @type {AudioBufferSourceNode}
				 */
		        this._source = null;
		        /**
				 *  If the file should play as soon
				 *  as the buffer is loaded. 
				 *  @type {boolean}
				 *  @example
				 * //will play as soon as it's loaded
				 * var player = new Tone.Player({
				 * 	"url" : "./path/to/sample.mp3",
				 * 	"autostart" : true,
				 * }).toMaster();
				 */
		        this.autostart = options.autostart;
		        /**
				 *  the buffer
				 *  @private
				 *  @type {Tone.Buffer}
				 */
		        this._buffer = new Tone.Buffer({
		            'url': options.url,
		            'onload': this._onload.bind(this, options.onload),
		            'reverse': options.reverse
		        });
		        if (url instanceof AudioBuffer) {
		            this._buffer.set(url);
		        }
		        /**
				 *  if the buffer should loop once it's over
				 *  @type {boolean}
				 *  @private
				 */
		        this._loop = options.loop;
		        /**
				 *  if 'loop' is true, the loop will start at this position
				 *  @type {Time}
				 *  @private
				 */
		        this._loopStart = options.loopStart;
		        /**
				 *  if 'loop' is true, the loop will end at this position
				 *  @type {Time}
				 *  @private
				 */
		        this._loopEnd = options.loopEnd;
		        /**
				 *  the playback rate
				 *  @private
				 *  @type {number}
				 */
		        this._playbackRate = options.playbackRate;
		        /**
				 *  Enabling retrigger will allow a player to be restarted
				 *  before the the previous 'start' is done playing. Otherwise, 
				 *  successive calls to Tone.Player.start will only start
				 *  the sample if it had played all the way through. 
				 *  @type {boolean}
				 */
		        this.retrigger = options.retrigger;
		    };
		    Tone.extend(Tone.Player, Tone.Source);
		    /**
			 *  the default parameters
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.Player.defaults = {
		        'onload': Tone.noOp,
		        'playbackRate': 1,
		        'loop': false,
		        'autostart': false,
		        'loopStart': 0,
		        'loopEnd': 0,
		        'retrigger': false,
		        'reverse': false
		    };
		    /**
			 *  Load the audio file as an audio buffer.
			 *  Decodes the audio asynchronously and invokes
			 *  the callback once the audio buffer loads. 
			 *  Note: this does not need to be called if a url
			 *  was passed in to the constructor. Only use this
			 *  if you want to manually load a new url. 
			 * @param {string} url The url of the buffer to load.
			 *                     Filetype support depends on the
			 *                     browser.
			 *  @param  {function=} callback The function to invoke once
			 *                               the sample is loaded.
			 *  @returns {Tone.Player} this
			 */
		    Tone.Player.prototype.load = function (url, callback) {
		        this._buffer.load(url, this._onload.bind(this, callback));
		        return this;
		    };
		    /**
			 * Internal callback when the buffer is loaded.
			 * @private
			 */
		    Tone.Player.prototype._onload = function (callback) {
		        callback(this);
		        if (this.autostart) {
		            this.start();
		        }
		    };
		    /**
			 *  Play the buffer at the given startTime. Optionally add an offset
			 *  and/or duration which will play the buffer from a position
			 *  within the buffer for the given duration. 
			 *  
			 *  @param  {Time} [startTime=now] When the player should start.
			 *  @param  {Time} [offset=0] The offset from the beginning of the sample
			 *                                 to start at. 
			 *  @param  {Time=} duration How long the sample should play. If no duration
			 *                                is given, it will default to the full length 
			 *                                of the sample (minus any offset)
			 *  @returns {Tone.Player} this
			 *  @memberOf Tone.Player#
			 *  @method start
			 *  @name start
			 */
		    /**
			 *  Internal start method
			 *  @private
			 */
		    Tone.Player.prototype._start = function (startTime, offset, duration) {
		        if (this._buffer.loaded) {
		            //if it's a loop the default offset is the loopstart point
		            if (this._loop) {
		                offset = this.defaultArg(offset, this._loopStart);
		            } else {
		                //otherwise the default offset is 0
		                offset = this.defaultArg(offset, 0);
		            }
		            offset = this.toSeconds(offset);
		            //make sure it has a positive duration
		            duration = this.defaultArg(duration, Math.max(this._buffer.duration - offset, 0));
		            duration = this.toSeconds(duration);
		            //the values in seconds
		            startTime = this.toSeconds(startTime);
		            //make the source
		            this._source = this.context.createBufferSource();
		            this._source.buffer = this._buffer.get();
		            //set the looping properties
		            if (this._loop) {
		                this._source.loop = this._loop;
		                this._source.loopStart = this.toSeconds(this._loopStart);
		                this._source.loopEnd = this.toSeconds(this._loopEnd);
		            } else {
		                //if it's not looping, set the state change at the end of the sample
		                this._state.setStateAtTime(Tone.State.Stopped, startTime + duration);
		            }
		            //and other properties
		            this._source.playbackRate.value = this._playbackRate;
		            this._source.connect(this.output);
		            //start it
		            if (this._loop) {
		                //modify the offset if it's greater than the loop time
		                var loopEnd = this._source.loopEnd || this._buffer.duration;
		                var loopStart = this._source.loopStart;
		                var loopDuration = loopEnd - loopStart;
		                if (offset > loopDuration) {
		                    offset = loopStart + offset % loopDuration;
		                    if (offset > loopEnd) {
		                        offset -= loopDuration;
		                    }
		                }
		                this._source.start(startTime, offset);
		            } else {
		                this._source.start(startTime, offset, duration);
		            }
		        } else {
		            throw Error('Tone.Player: tried to start Player before the buffer was loaded');
		        }
		        return this;
		    };
		    /**
			 *  Stop playback.
			 *  @private
			 *  @param  {Time} [time=now]
			 *  @returns {Tone.Player} this
			 */
		    Tone.Player.prototype._stop = function (time) {
		        if (this._source) {
		            this._source.stop(this.toSeconds(time));
		            this._source = null;
		        }
		        return this;
		    };
		    /**
			 *  Seek to a specific time in the player's buffer. If the 
			 *  source is no longer playing at that time, it will stop.
			 *  If you seek to a time that 
			 *  @param {Time} offset The time to seek to.
			 *  @param {Time=} time The time for the seek event to occur.
			 *  @return {Tone.Player} this
			 *  @example
			 * source.start(0.2);
			 * source.stop(0.4);
			 */
		    Tone.Player.prototype.seek = function (offset, time) {
		        time = this.toSeconds(time);
		        if (this._state.getStateAtTime(time) === Tone.State.Started) {
		            offset = this.toSeconds(offset);
		            // if it's currently playing, stop it
		            this._stop(time);
		            //restart it at the given time
		            this._start(time, offset);
		        }
		        return this;
		    };
		    /**
			 *  Set the loop start and end. Will only loop if loop is 
			 *  set to true. 
			 *  @param {Time} loopStart The loop end time
			 *  @param {Time} loopEnd The loop end time
			 *  @returns {Tone.Player} this
			 *  @example
			 * //loop 0.1 seconds of the file. 
			 * player.setLoopPoints(0.2, 0.3);
			 * player.loop = true;
			 */
		    Tone.Player.prototype.setLoopPoints = function (loopStart, loopEnd) {
		        this.loopStart = loopStart;
		        this.loopEnd = loopEnd;
		        return this;
		    };
		    /**
			 * If loop is true, the loop will start at this position. 
			 * @memberOf Tone.Player#
			 * @type {Time}
			 * @name loopStart
			 */
		    Object.defineProperty(Tone.Player.prototype, 'loopStart', {
		        get: function () {
		            return this._loopStart;
		        },
		        set: function (loopStart) {
		            this._loopStart = loopStart;
		            if (this._source) {
		                this._source.loopStart = this.toSeconds(loopStart);
		            }
		        }
		    });
		    /**
			 * If loop is true, the loop will end at this position.
			 * @memberOf Tone.Player#
			 * @type {Time}
			 * @name loopEnd
			 */
		    Object.defineProperty(Tone.Player.prototype, 'loopEnd', {
		        get: function () {
		            return this._loopEnd;
		        },
		        set: function (loopEnd) {
		            this._loopEnd = loopEnd;
		            if (this._source) {
		                this._source.loopEnd = this.toSeconds(loopEnd);
		            }
		        }
		    });
		    /**
			 * The audio buffer belonging to the player. 
			 * @memberOf Tone.Player#
			 * @type {Tone.Buffer}
			 * @name buffer
			 */
		    Object.defineProperty(Tone.Player.prototype, 'buffer', {
		        get: function () {
		            return this._buffer;
		        },
		        set: function (buffer) {
		            this._buffer.set(buffer);
		        }
		    });
		    /**
			 * If the buffer should loop once it's over. 
			 * @memberOf Tone.Player#
			 * @type {boolean}
			 * @name loop
			 */
		    Object.defineProperty(Tone.Player.prototype, 'loop', {
		        get: function () {
		            return this._loop;
		        },
		        set: function (loop) {
		            this._loop = loop;
		            if (this._source) {
		                this._source.loop = loop;
		            }
		        }
		    });
		    /**
			 * The playback speed. 1 is normal speed. This is not a signal because
			 * Safari and iOS currently don't support playbackRate as a signal.
			 * @memberOf Tone.Player#
			 * @type {number}
			 * @name playbackRate
			 */
		    Object.defineProperty(Tone.Player.prototype, 'playbackRate', {
		        get: function () {
		            return this._playbackRate;
		        },
		        set: function (rate) {
		            this._playbackRate = rate;
		            if (this._source) {
		                this._source.playbackRate.value = rate;
		            }
		        }
		    });
		    /**
			 * The direction the buffer should play in
			 * @memberOf Tone.Player#
			 * @type {boolean}
			 * @name reverse
			 */
		    Object.defineProperty(Tone.Player.prototype, 'reverse', {
		        get: function () {
		            return this._buffer.reverse;
		        },
		        set: function (rev) {
		            this._buffer.reverse = rev;
		        }
		    });
		    /**
			 *  Dispose and disconnect.
			 *  @return {Tone.Player} this
			 */
		    Tone.Player.prototype.dispose = function () {
		        Tone.Source.prototype.dispose.call(this);
		        if (this._source !== null) {
		            this._source.disconnect();
		            this._source = null;
		        }
		        this._buffer.dispose();
		        this._buffer = null;
		        return this;
		    };
		    return Tone.Player;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Sampler wraps Tone.Player in an AmplitudeEnvelope.
			 *
			 *  @constructor
			 *  @extends {Tone.Instrument}
			 *  @param {String} url the url of the audio file
			 *  @param {Function=} onload The callback to invoke when the sample is loaded.
			 *  @example
			 * var sampler = new Sampler("./audio/casio/A1.mp3", function(){
			 * 	//repitch the sample down a half step
			 * 	sampler.triggerAttack(-1);
			 * }).toMaster();
			 */
		    Tone.Sampler = function () {
		        var options = this.optionsObject(arguments, [
		            'url',
		            'onload'
		        ], Tone.Sampler.defaults);
		        Tone.Instrument.call(this, options);
		        /**
				 *  The sample player.
				 *  @type {Tone.Player}
				 */
		        this.player = new Tone.Player(options.url, options.onload);
		        this.player.retrigger = true;
		        /**
				 *  The amplitude envelope. 
				 *  @type {Tone.AmplitudeEnvelope}
				 */
		        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);
		        this.player.chain(this.envelope, this.output);
		        this._readOnly([
		            'player',
		            'envelope'
		        ]);
		        this.loop = options.loop;
		        this.reverse = options.reverse;
		    };
		    Tone.extend(Tone.Sampler, Tone.Instrument);
		    /**
			 *  the default parameters
			 *  @static
			 */
		    Tone.Sampler.defaults = {
		        'onload': Tone.noOp,
		        'loop': false,
		        'reverse': false,
		        'envelope': {
		            'attack': 0.001,
		            'decay': 0,
		            'sustain': 1,
		            'release': 0.1
		        }
		    };
		    /**
			 *  Trigger the start of the sample. 
			 *  @param {Interval} [pitch=0] The amount the sample should
			 *                              be repitched. 
			 *  @param {Time} [time=now] The time when the sample should start
			 *  @param {NormalRange} [velocity=1] The velocity of the note
			 *  @returns {Tone.Sampler} this
			 *  @example
			 * sampler.triggerAttack(0, "+0.1", 0.5);
			 */
		    Tone.Sampler.prototype.triggerAttack = function (pitch, time, velocity) {
		        time = this.toSeconds(time);
		        pitch = this.defaultArg(pitch, 0);
		        this.player.playbackRate = this.intervalToFrequencyRatio(pitch);
		        this.player.start(time);
		        this.envelope.triggerAttack(time, velocity);
		        return this;
		    };
		    /**
			 *  Start the release portion of the sample. Will stop the sample once the 
			 *  envelope has fully released. 
			 *  
			 *  @param {Time} [time=now] The time when the note should release
			 *  @returns {Tone.Sampler} this
			 *  @example
			 * sampler.triggerRelease();
			 */
		    Tone.Sampler.prototype.triggerRelease = function (time) {
		        time = this.toSeconds(time);
		        this.envelope.triggerRelease(time);
		        this.player.stop(this.toSeconds(this.envelope.release) + time);
		        return this;
		    };
		    /**
			 * If the output sample should loop or not.
			 * @memberOf Tone.Sampler#
			 * @type {number|string}
			 * @name loop
			 */
		    Object.defineProperty(Tone.Sampler.prototype, 'loop', {
		        get: function () {
		            return this.player.loop;
		        },
		        set: function (loop) {
		            this.player.loop = loop;
		        }
		    });
		    /**
			 * The direction the buffer should play in
			 * @memberOf Tone.Sampler#
			 * @type {boolean}
			 * @name reverse
			 */
		    Object.defineProperty(Tone.Sampler.prototype, 'reverse', {
		        get: function () {
		            return this.player.reverse;
		        },
		        set: function (rev) {
		            this.player.reverse = rev;
		        }
		    });
		    /**
			 * The buffer to play.
			 * @memberOf Tone.Sampler#
			 * @type {Tone.Buffer}
			 * @name buffer
			 */
		    Object.defineProperty(Tone.Sampler.prototype, 'buffer', {
		        get: function () {
		            return this.player.buffer;
		        },
		        set: function (buff) {
		            this.player.buffer = buff;
		        }
		    });
		    /**
			 *  Clean up.
			 *  @returns {Tone.Sampler} this
			 */
		    Tone.Sampler.prototype.dispose = function () {
		        Tone.Instrument.prototype.dispose.call(this);
		        this._writable([
		            'player',
		            'envelope'
		        ]);
		        this.player.dispose();
		        this.player = null;
		        this.envelope.dispose();
		        this.envelope = null;
		        return this;
		    };
		    return Tone.Sampler;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Now called Tone.Synth
			 *  @constructor
			 *  @extends {Tone.Monophonic}
			 */
		    Tone.SimpleSynth = function (options) {
		        console.warn('Tone.SimpleSynth is now called Tone.Synth');
		        Tone.Synth.call(this, options);
		    };
		    Tone.extend(Tone.SimpleSynth, Tone.Synth);
		    return Tone.SimpleSynth;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Maps a NormalRange [0, 1] to an AudioRange [-1, 1]. 
			 *         See also Tone.AudioToGain. 
			 *
			 *  @extends {Tone.SignalBase}
			 *  @constructor
			 *  @example
			 * var g2a = new Tone.GainToAudio();
			 */
		    Tone.GainToAudio = function () {
		        /**
				 *  @type {WaveShaperNode}
				 *  @private
				 */
		        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {
		            return Math.abs(x) * 2 - 1;
		        });
		    };
		    Tone.extend(Tone.GainToAudio, Tone.SignalBase);
		    /**
			 *  clean up
			 *  @returns {Tone.GainToAudio} this
			 */
		    Tone.GainToAudio.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._norm.dispose();
		        this._norm = null;
		        return this;
		    };
		    return Tone.GainToAudio;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Normalize takes an input min and max and maps it linearly to NormalRange [0,1]
			 *
			 *  @extends {Tone.SignalBase}
			 *  @constructor
			 *  @param {number} inputMin the min input value
			 *  @param {number} inputMax the max input value
			 *  @example
			 * var norm = new Tone.Normalize(2, 4);
			 * var sig = new Tone.Signal(3).connect(norm);
			 * //output of norm is 0.5. 
			 */
		    Tone.Normalize = function (inputMin, inputMax) {
		        /**
				 *  the min input value
				 *  @type {number}
				 *  @private
				 */
		        this._inputMin = this.defaultArg(inputMin, 0);
		        /**
				 *  the max input value
				 *  @type {number}
				 *  @private
				 */
		        this._inputMax = this.defaultArg(inputMax, 1);
		        /**
				 *  subtract the min from the input
				 *  @type {Tone.Add}
				 *  @private
				 */
		        this._sub = this.input = new Tone.Add(0);
		        /**
				 *  divide by the difference between the input and output
				 *  @type {Tone.Multiply}
				 *  @private
				 */
		        this._div = this.output = new Tone.Multiply(1);
		        this._sub.connect(this._div);
		        this._setRange();
		    };
		    Tone.extend(Tone.Normalize, Tone.SignalBase);
		    /**
			 * The minimum value the input signal will reach.
			 * @memberOf Tone.Normalize#
			 * @type {number}
			 * @name min
			 */
		    Object.defineProperty(Tone.Normalize.prototype, 'min', {
		        get: function () {
		            return this._inputMin;
		        },
		        set: function (min) {
		            this._inputMin = min;
		            this._setRange();
		        }
		    });
		    /**
			 * The maximum value the input signal will reach.
			 * @memberOf Tone.Normalize#
			 * @type {number}
			 * @name max
			 */
		    Object.defineProperty(Tone.Normalize.prototype, 'max', {
		        get: function () {
		            return this._inputMax;
		        },
		        set: function (max) {
		            this._inputMax = max;
		            this._setRange();
		        }
		    });
		    /**
			 *  set the values
			 *  @private
			 */
		    Tone.Normalize.prototype._setRange = function () {
		        this._sub.value = -this._inputMin;
		        this._div.value = 1 / (this._inputMax - this._inputMin);
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.Normalize} this
			 */
		    Tone.Normalize.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._sub.dispose();
		        this._sub = null;
		        this._div.dispose();
		        this._div = null;
		        return this;
		    };
		    return Tone.Normalize;
		});
		Module(function (Tone) {
		    /**
			 *  @class Wrapper around the native BufferSourceNode.
			 *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play
			 *  @param  {Function}  onended  The callback to invoke when the 
			 *                               buffer is done playing.
			 */
		    Tone.BufferSource = function () {
		        var options = this.optionsObject(arguments, [
		            'buffer',
		            'onended'
		        ], Tone.BufferSource.defaults);
		        /**
				 *  The callback to invoke after the 
				 *  buffer source is done playing. 
				 *  @type  {Function}
				 */
		        this.onended = options.onended;
		        /**
				 *  The time that the buffer was started.
				 *  @type  {Number}
				 *  @private
				 */
		        this._startTime = -1;
		        /**
				 *  The gain node which envelopes the BufferSource
				 *  @type  {Tone.Gain}
				 *  @private
				 */
		        this._gainNode = this.output = new Tone.Gain();
		        /**
				 *  The buffer source
				 *  @type  {AudioBufferSourceNode}
				 *  @private
				 */
		        this._source = this.context.createBufferSource();
		        this._source.connect(this._gainNode);
		        this._source.onended = this._onended.bind(this);
		        /**
				 *  The playbackRate of the buffer
				 *  @type {Positive}
				 *  @signal
				 */
		        this.playbackRate = new Tone.Param(this._source.playbackRate, Tone.Type.Positive);
		        /**
				 *  The fadeIn time of the amplitude envelope.
				 *  @type {Time}
				 */
		        this.fadeIn = options.fadeIn;
		        /**
				 *  The fadeOut time of the amplitude envelope.
				 *  @type {Time}
				 */
		        this.fadeOut = options.fadeOut;
		        /**
				 *  The value that the buffer ramps to
				 *  @type {Gain}
				 *  @private
				 */
		        this._gain = 1;
		        //set the buffer initially
		        if (!this.isUndef(options.buffer)) {
		            this.buffer = options.buffer;
		        }
		        this.loop = options.loop;
		    };
		    Tone.extend(Tone.BufferSource);
		    /**
			 *  The defaults
			 *  @const
			 *  @type  {Object}
			 */
		    Tone.BufferSource.defaults = {
		        'onended': Tone.noOp,
		        'fadeIn': 0,
		        'fadeOut': 0
		    };
		    /**
			 *  Returns the playback state of the source, either "started" or "stopped".
			 *  @type {Tone.State}
			 *  @readOnly
			 *  @memberOf Tone.BufferSource#
			 *  @name state
			 */
		    Object.defineProperty(Tone.BufferSource.prototype, 'state', {
		        get: function () {
		            var now = this.now();
		            if (this._startTime !== -1 && now > this._startTime) {
		                return Tone.State.Started;
		            } else {
		                return Tone.State.Stopped;
		            }
		        }
		    });
		    /**
			 *  Start the buffer
			 *  @param  {Time} [startTime=now] When the player should start.
			 *  @param  {Time} [offset=0] The offset from the beginning of the sample
			 *                                 to start at. 
			 *  @param  {Time=} duration How long the sample should play. If no duration
			 *                                is given, it will default to the full length 
			 *                                of the sample (minus any offset)
			 *  @param  {Gain}  [gain=1]  The gain to play the buffer back at.
			 *  @param  {Time=}  fadeInTime  The optional fadeIn ramp time.
			 *  @return  {Tone.BufferSource}  this
			 */
		    Tone.BufferSource.prototype.start = function (time, offset, duration, gain, fadeInTime) {
		        if (this._startTime !== -1) {
		            throw new Error('Tone.BufferSource: can only be started once.');
		        }
		        if (this.buffer) {
		            time = this.toSeconds(time);
		            //if it's a loop the default offset is the loopstart point
		            if (this.loop) {
		                offset = this.defaultArg(offset, this.loopStart);
		            } else {
		                //otherwise the default offset is 0
		                offset = this.defaultArg(offset, 0);
		            }
		            offset = this.toSeconds(offset);
		            //the values in seconds
		            time = this.toSeconds(time);
		            this._source.start(time, offset);
		            gain = this.defaultArg(gain, 1);
		            this._gain = gain;
		            //the fadeIn time
		            if (this.isUndef(fadeInTime)) {
		                fadeInTime = this.toSeconds(this.fadeIn);
		            } else {
		                fadeInTime = this.toSeconds(fadeInTime);
		            }
		            if (fadeInTime > 0) {
		                this._gainNode.gain.setValueAtTime(0, time);
		                this._gainNode.gain.linearRampToValueAtTime(this._gain, time + fadeInTime);
		            } else {
		                this._gainNode.gain.setValueAtTime(gain, time);
		            }
		            this._startTime = time + fadeInTime;
		            if (!this.isUndef(duration)) {
		                duration = this.defaultArg(duration, this.buffer.duration - offset);
		                duration = this.toSeconds(duration);
		                this.stop(time + duration + fadeInTime, fadeInTime);
		            }
		        }
		        return this;
		    };
		    /**
			 *  Stop the buffer. Optionally add a ramp time to fade the 
			 *  buffer out. 
			 *  @param  {Time=}  time         The time the buffer should stop.
			 *  @param  {Time=}  fadeOutTime  How long the gain should fade out for
			 *  @return  {Tone.BufferSource}  this
			 */
		    Tone.BufferSource.prototype.stop = function (time, fadeOutTime) {
		        if (this.buffer) {
		            time = this.toSeconds(time);
		            //the fadeOut time
		            if (this.isUndef(fadeOutTime)) {
		                fadeOutTime = this.toSeconds(this.fadeOut);
		            } else {
		                fadeOutTime = this.toSeconds(fadeOutTime);
		            }
		            //cancel the end curve
		            this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);
		            //set a new one
		            if (fadeOutTime > 0) {
		                this._gainNode.gain.setValueAtTime(this._gain, time);
		                this._gainNode.gain.linearRampToValueAtTime(0, time + fadeOutTime);
		                time += fadeOutTime;
		            } else {
		                this._gainNode.gain.setValueAtTime(0, time);
		            }
		            // fix for safari bug and old FF
		            if (!this.isNumber(this._source.playbackState) || this._source.playbackState === 2) {
		                this._source.stop(time);
		            }
		        }
		        return this;
		    };
		    /**
			 *  Internal callback when the buffer is ended. 
			 *  Invokes `onended` and disposes the node.
			 *  @private
			 */
		    Tone.BufferSource.prototype._onended = function () {
		        this.onended(this);
		        this.dispose();
		    };
		    /**
			 * If loop is true, the loop will start at this position. 
			 * @memberOf Tone.BufferSource#
			 * @type {Time}
			 * @name loopStart
			 */
		    Object.defineProperty(Tone.BufferSource.prototype, 'loopStart', {
		        get: function () {
		            return this._source.loopStart;
		        },
		        set: function (loopStart) {
		            this._source.loopStart = this.toSeconds(loopStart);
		        }
		    });
		    /**
			 * If loop is true, the loop will end at this position.
			 * @memberOf Tone.BufferSource#
			 * @type {Time}
			 * @name loopEnd
			 */
		    Object.defineProperty(Tone.BufferSource.prototype, 'loopEnd', {
		        get: function () {
		            return this._source.loopEnd;
		        },
		        set: function (loopEnd) {
		            this._source.loopEnd = this.toSeconds(loopEnd);
		        }
		    });
		    /**
			 * The audio buffer belonging to the player. 
			 * @memberOf Tone.BufferSource#
			 * @type {AudioBuffer}
			 * @name buffer
			 */
		    Object.defineProperty(Tone.BufferSource.prototype, 'buffer', {
		        get: function () {
		            if (this._source) {
		                return this._source.buffer;
		            } else {
		                return null;
		            }
		        },
		        set: function (buffer) {
		            if (buffer instanceof Tone.Buffer) {
		                this._source.buffer = buffer.get();
		            } else {
		                this._source.buffer = buffer;
		            }
		        }
		    });
		    /**
			 * If the buffer should loop once it's over. 
			 * @memberOf Tone.BufferSource#
			 * @type {boolean}
			 * @name loop
			 */
		    Object.defineProperty(Tone.BufferSource.prototype, 'loop', {
		        get: function () {
		            return this._source.loop;
		        },
		        set: function (loop) {
		            this._source.loop = loop;
		        }
		    });
		    /**
			 *  Clean up.
			 *  @return  {Tone.BufferSource}  this
			 */
		    Tone.BufferSource.prototype.dispose = function () {
		        this.onended = null;
		        if (this._source) {
		            this._source.onended = null;
		            this._source.disconnect();
		            this._source = null;
		        }
		        if (this._gainNode) {
		            this._gainNode.dispose();
		            this._gainNode = null;
		        }
		        this._startTime = -1;
		        this.playbackRate = null;
		        this.output = null;
		        return this;
		    };
		    return Tone.BufferSource;
		});
		Module(function (Tone) {
		    
		    //polyfill for getUserMedia
		    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
		    /**
			 *  @class  Tone.ExternalInput is a WebRTC Audio Input. Check 
			 *          [Media Stream API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_API)
			 *          to see which browsers are supported. As of
			 *          writing this, Chrome, Firefox, and Opera 
			 *          support Media Stream. Chrome allows enumeration 
			 *          of the sources, and access to device name over a 
			 *          secure (HTTPS) connection. See [https://simpl.info](https://simpl.info/getusermedia/sources/index.html) 
			 *          vs [http://simple.info](https://simpl.info/getusermedia/sources/index.html) 
			 *          on a Chrome browser for the difference.
			 *         
			 *  @constructor
			 *  @extends {Tone.Source}
			 *  @param {number} [inputNum=0] If multiple inputs are present, select the input number. Chrome only.
			 *  @example
			 * //select the third input
			 * var motu = new Tone.ExternalInput(3);
			 * 
			 * //opening the input asks the user to activate their mic
			 * motu.open(function(){
			 * 	//opening is activates the microphone
			 * 	//starting lets audio through
			 * 	motu.start(10);
			 * });
			 */
		    Tone.ExternalInput = function () {
		        var options = this.optionsObject(arguments, ['inputNum'], Tone.ExternalInput.defaults);
		        Tone.Source.call(this, options);
		        /**
				 *  The MediaStreamNode 
				 *  @type {MediaStreamAudioSourceNode}
				 *  @private
				 */
		        this._mediaStream = null;
		        /**
				 *  The media stream created by getUserMedia.
				 *  @type {LocalMediaStream}
				 *  @private
				 */
		        this._stream = null;
		        /**
				 *  The constraints argument for getUserMedia
				 *  @type {Object}
				 *  @private
				 */
		        this._constraints = { 'audio': true };
		        /**
				 *  The input source position in Tone.ExternalInput.sources. 
				 *  Set before ExternalInput.open().
				 *  @type {Number}
				 *  @private
				 */
		        this._inputNum = options.inputNum;
		        /**
				 *  Gates the input signal for start/stop. 
				 *  Initially closed.
				 *  @type {GainNode}
				 *  @private
				 */
		        this._gate = new Tone.Gain(0).connect(this.output);
		    };
		    Tone.extend(Tone.ExternalInput, Tone.Source);
		    /**
			 * the default parameters
			 * @type {Object}
			 */
		    Tone.ExternalInput.defaults = { 'inputNum': 0 };
		    /**
			 * wrapper for getUserMedia function
			 * @param {function} callback
			 * @param {function} error
			 * @private
			 */
		    Tone.ExternalInput.prototype._getUserMedia = function (callback, error) {
		        if (!Tone.ExternalInput.supported) {
		            error('browser does not support \'getUserMedia\'');
		        }
		        if (Tone.ExternalInput.sources[this._inputNum]) {
		            this._constraints = { audio: { optional: [{ sourceId: Tone.ExternalInput.sources[this._inputNum].id }] } };
		        }
		        navigator.getUserMedia(this._constraints, function (stream) {
		            this._onStream(stream);
		            callback();
		        }.bind(this), function (err) {
		            error(err);
		        });
		    };
		    /**
			 * called when the stream is successfully setup
			 * @param  {LocalMediaStream} stream
			 * @private
			 */
		    Tone.ExternalInput.prototype._onStream = function (stream) {
		        if (!this.isFunction(this.context.createMediaStreamSource)) {
		            throw new Error('Tone.ExternalInput: browser does not support the \'MediaStreamSourceNode\'');
		        }
		        //can only start a new source if the previous one is closed
		        if (!this._stream) {
		            this._stream = stream;
		            //Wrap a MediaStreamSourceNode around the live input stream.
		            this._mediaStream = this.context.createMediaStreamSource(stream);
		            //Connect the MediaStreamSourceNode to a gate gain node
		            this._mediaStream.connect(this._gate);
		        }
		    };
		    /**
			 *  Open the media stream 
			 *  @param  {function=} callback The callback function to 
			 *                       execute when the stream is open
			 *  @param  {function=} error The callback function to execute
			 *                            when the media stream can't open. 
			 *                            This is fired either because the browser
			 *                            doesn't support the media stream,
			 *                            or the user blocked opening the microphone. 
			 *  @return {Tone.ExternalInput} this
			 */
		    Tone.ExternalInput.prototype.open = function (callback, error) {
		        callback = this.defaultArg(callback, Tone.noOp);
		        error = this.defaultArg(error, Tone.noOp);
		        Tone.ExternalInput.getSources(function () {
		            this._getUserMedia(callback, error);
		        }.bind(this));
		        return this;
		    };
		    /**
			 *  Close the media stream
			 *  @return {Tone.ExternalInput} this
			 */
		    Tone.ExternalInput.prototype.close = function () {
		        if (this._stream) {
		            var track = this._stream.getTracks()[this._inputNum];
		            if (!this.isUndef(track)) {
		                track.stop();
		            }
		            this._stream = null;
		        }
		        return this;
		    };
		    /**
			 *  Start the stream
			 *  @private
			 */
		    Tone.ExternalInput.prototype._start = function (time) {
		        time = this.toSeconds(time);
		        this._gate.gain.setValueAtTime(1, time);
		        return this;
		    };
		    /**
			 *  Stops the stream.
			 *  @private
			 */
		    Tone.ExternalInput.prototype._stop = function (time) {
		        time = this.toSeconds(time);
		        this._gate.gain.setValueAtTime(0, time);
		        return this;
		    };
		    /**
			 * Clean up.
			 * @return {Tone.ExternalInput} this
			 */
		    Tone.ExternalInput.prototype.dispose = function () {
		        Tone.Source.prototype.dispose.call(this);
		        this.close();
		        if (this._mediaStream) {
		            this._mediaStream.disconnect();
		            this._mediaStream = null;
		        }
		        this._constraints = null;
		        this._gate.dispose();
		        this._gate = null;
		        return this;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    // STATIC METHODS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 * The array of available sources, different depending on whether connection is secure
			 * @type {Array}
			 * @static
			 */
		    Tone.ExternalInput.sources = [];
		    /**
			 * indicates whether browser supports MediaStreamTrack.getSources (i.e. Chrome vs Firefox)
			 * @type {Boolean}
			 * @private
			 */
		    Tone.ExternalInput._canGetSources = !Tone.prototype.isUndef(window.MediaStreamTrack) && Tone.prototype.isFunction(MediaStreamTrack.getSources);
		    /**
			 *  If getUserMedia is supported by the browser.
			 *  @type  {Boolean}
			 *  @memberOf Tone.ExternalInput#
			 *  @name supported
			 *  @static
			 *  @readOnly
			 */
		    Object.defineProperty(Tone.ExternalInput, 'supported', {
		        get: function () {
		            return Tone.prototype.isFunction(navigator.getUserMedia);
		        }
		    });
		    /**
			 *  Populates the source list. Invokes the callback with an array of 
			 *  possible audio sources.
			 *  @param  {function=} callback Callback to be executed after populating list 
			 *  @return {Tone.ExternalInput} this
			 *  @static
			 *  @example
			 * var soundflower = new Tone.ExternalInput();
			 * Tone.ExternalInput.getSources(selectSoundflower);
			 *
			 * function selectSoundflower(sources){
			 * 	for(var i = 0; i < sources.length; i++){
			 * 		if(sources[i].label === "soundflower"){
			 * 			soundflower.inputNum = i;
			 * 			soundflower.open(function(){
			 * 				soundflower.start();
			 * 			});
			 * 			break;
			 * 		}
			 * 	}
			 * };
			 */
		    Tone.ExternalInput.getSources = function (callback) {
		        if (Tone.ExternalInput.sources.length === 0 && Tone.ExternalInput._canGetSources) {
		            MediaStreamTrack.getSources(function (media_sources) {
		                for (var i = 0; i < media_sources.length; i++) {
		                    if (media_sources[i].kind === 'audio') {
		                        Tone.ExternalInput.sources[i] = media_sources[i];
		                    }
		                }
		                callback(Tone.ExternalInput.sources);
		            });
		        } else {
		            callback(Tone.ExternalInput.sources);
		        }
		        return this;
		    };
		    return Tone.ExternalInput;
		});
		Module(function (Tone) {
		    /**
			 *  @class Tone.MultiPlayer is well suited for one-shots, multi-sampled istruments
			 *         or any time you need to play a bunch of audio buffers. 
			 *  @param  {Object|Array|Tone.Buffers}  buffers  The buffers which are available
			 *                                                to the MultiPlayer
			 *  @param {Function} onload The callback to invoke when all of the buffers are loaded.
			 *  @extends {Tone}
			 *  @example
			 * var multiPlayer = new MultiPlayer({
			 * 	"kick" : "path/to/kick.mp3",
			 * 	"snare" : "path/to/snare.mp3",
			 * }, function(){
			 * 	multiPlayer.start("kick");
			 * });
			 *  @example
			 * //can also store the values in an array
			 * var multiPlayer = new MultiPlayer(["path/to/kick.mp3", "path/to/snare.mp3"], 
			 * function(){
			 * 	//if an array is passed in, the samples are referenced to by index
			 * 	multiPlayer.start(1);
			 * });
			 */
		    Tone.MultiPlayer = function () {
		        var options = this.optionsObject(arguments, [
		            'urls',
		            'onload'
		        ], Tone.MultiPlayer.defaults);
		        if (options.urls instanceof Tone.Buffers) {
		            /**
					 *  All the buffers belonging to the player.
					 *  @type  {Tone.Buffers}
					 */
		            this.buffers = options.urls;
		        } else {
		            this.buffers = new Tone.Buffers(options.urls, options.onload);
		        }
		        /**
				 *  Keeps track of the currently playing sources.
				 *  @type  {Array}
				 *  @private
				 */
		        this._activeSources = [];
		        /**
				 *  The fade in envelope which is applied
				 *  to the beginning of the BufferSource
				 *  @type  {Time}
				 */
		        this.fadeIn = options.fadeIn;
		        /**
				 *  The fade out envelope which is applied
				 *  to the end of the BufferSource
				 *  @type  {Time}
				 */
		        this.fadeOut = options.fadeOut;
		        /**
				 *  The output volume node
				 *  @type  {Tone.Volume}
				 *  @private
				 */
		        this._volume = this.output = new Tone.Volume(options.volume);
		        /**
				 * The volume of the output in decibels.
				 * @type {Decibels}
				 * @signal
				 * @example
				 * source.volume.value = -6;
				 */
		        this.volume = this._volume.volume;
		        this._readOnly('volume');
		        //make the output explicitly stereo
		        this._volume.output.output.channelCount = 2;
		        this._volume.output.output.channelCountMode = 'explicit';
		        //mute initially
		        this.mute = options.mute;
		    };
		    Tone.extend(Tone.MultiPlayer, Tone.Source);
		    /**
			 *  The defaults
			 *  @type  {Object}
			 */
		    Tone.MultiPlayer.defaults = {
		        'onload': Tone.noOp,
		        'fadeIn': 0,
		        'fadeOut': 0
		    };
		    /**
			 *  Get the given buffer.
			 *  @param  {String|Number|AudioBuffer|Tone.Buffer}  buffer
			 *  @return  {AudioBuffer}  The requested buffer.
			 *  @private
			 */
		    Tone.MultiPlayer.prototype._getBuffer = function (buffer) {
		        if (this.isNumber(buffer) || this.isString(buffer)) {
		            return this.buffers.get(buffer).get();
		        } else if (buffer instanceof Tone.Buffer) {
		            return buffer.get();
		        } else {
		            return buffer;
		        }
		    };
		    /**
			 *  Start a buffer by name. The `start` method allows a number of options
			 *  to be passed in such as offset, interval, and gain. This is good for multi-sampled 
			 *  instruments and sound sprites where samples are repitched played back at different velocities.
			 *  @param  {String|AudioBuffer}  buffer    The name of the buffer to start.
			 *                                          Or pass in a buffer which will be started.
			 *  @param  {Time}  time      When to start the buffer.
			 *  @param  {Time}  [offset=0]    The offset into the buffer to play from.
			 *  @param  {Time=}  duration   How long to play the buffer for.
			 *  @param  {Interval}  [pitch=0]  The interval to repitch the buffer.
			 *  @param  {Gain}  [gain=1]      The gain to play the sample at.
			 *  @return  {Tone.MultiPlayer}  this
			 */
		    Tone.MultiPlayer.prototype.start = function (buffer, time, offset, duration, pitch, gain) {
		        buffer = this._getBuffer(buffer);
		        var source = new Tone.BufferSource(buffer).connect(this.output);
		        this._activeSources.push(source);
		        time = this.toSeconds(time);
		        source.start(time, offset, duration, this.defaultArg(gain, 1), this.fadeIn);
		        if (duration) {
		            source.stop(time + this.toSeconds(duration), this.fadeOut);
		        }
		        source.onended = this._onended.bind(this);
		        pitch = this.defaultArg(pitch, 0);
		        source.playbackRate.value = this.intervalToFrequencyRatio(pitch);
		        return this;
		    };
		    /**
			 *  Start a looping buffer by name. Similar to `start`, but the buffer
			 *  is looped instead of played straight through. Can still be stopped with `stop`. 
			 *  @param  {String|AudioBuffer}  buffer    The name of the buffer to start.
			 *                                          Or pass in a buffer which will be started.
			 *  @param  {Time}  time      When to start the buffer.
			 *  @param  {Time}  [offset=0]    The offset into the buffer to play from.
			 *  @param  {Time=}  loopStart   The start of the loop.
			 *  @param  {Time=}  loopEnd	The end of the loop.
			 *  @param  {Interval}  [pitch=0]  The interval to repitch the buffer.
			 *  @param  {Gain}  [gain=1]      The gain to play the sample at.
			 *  @return  {Tone.MultiPlayer}  this
			 */
		    Tone.MultiPlayer.prototype.startLoop = function (buffer, time, offset, loopStart, loopEnd, pitch, gain) {
		        buffer = this._getBuffer(buffer);
		        var source = new Tone.BufferSource(buffer).connect(this.output);
		        this._activeSources.push(source);
		        time = this.toSeconds(time);
		        source.loop = true;
		        source.loopStart = this.toSeconds(this.defaultArg(loopStart, 0));
		        source.loopEnd = this.toSeconds(this.defaultArg(loopEnd, 0));
		        source.start(time, offset, undefined, this.defaultArg(gain, 1), this.fadeIn);
		        source.onended = this._onended.bind(this);
		        pitch = this.defaultArg(pitch, 0);
		        source.playbackRate.value = this.intervalToFrequencyRatio(pitch);
		        return this;
		    };
		    /**
			 *  Internal callback when a buffer is done playing.
			 *  @param  {Tone.BufferSource}  source  The stopped source
			 *  @private
			 */
		    Tone.MultiPlayer.prototype._onended = function (source) {
		        var index = this._activeSources.indexOf(source);
		        this._activeSources.splice(index, 1);
		    };
		    /**
			 *  Stop all instances of the currently playing buffer at the given time.
			 *  @param  {String|AudioBuffer}  buffer  The buffer to stop.
			 *  @param  {Time=}  time    When to stop the buffer
			 *  @return  {Tone.MultiPlayer}  this
			 */
		    Tone.MultiPlayer.prototype.stop = function (buffer, time) {
		        buffer = this._getBuffer(buffer);
		        time = this.toSeconds(time);
		        for (var i = 0; i < this._activeSources.length; i++) {
		            if (this._activeSources[i].buffer === buffer) {
		                this._activeSources[i].stop(time, this.fadeOut);
		            }
		        }
		        return this;
		    };
		    /**
			 *  Stop all currently playing buffers at the given time.
			 *  @param  {Time=}  time  When to stop the buffers.
			 *  @return  {Tone.MultiPlayer}  this
			 */
		    Tone.MultiPlayer.prototype.stopAll = function (time) {
		        time = this.toSeconds(time);
		        for (var i = 0; i < this._activeSources.length; i++) {
		            this._activeSources[i].stop(time, this.fadeOut);
		        }
		        return this;
		    };
		    /**
			 *  Add another buffer to the available buffers.
			 *  @param {String} name The name to that the buffer is refered
			 *                       to in start/stop methods. 
			 *  @param {String|Tone.Buffer} url The url of the buffer to load
			 *                                  or the buffer.
			 *  @param {Function} callback The function to invoke after the buffer is loaded.
			 */
		    Tone.MultiPlayer.prototype.add = function (name, url, callback) {
		        this.buffers.add(name, url, callback);
		        return this;
		    };
		    /**
			 *  Returns the playback state of the source. "started"
			 *  if there are any buffers playing. "stopped" otherwise.
			 *  @type {Tone.State}
			 *  @readOnly
			 *  @memberOf Tone.MultiPlayer#
			 *  @name state
			 */
		    Object.defineProperty(Tone.MultiPlayer.prototype, 'state', {
		        get: function () {
		            return this._activeSources.length > 0 ? Tone.State.Started : Tone.State.Stopped;
		        }
		    });
		    /**
			 * Mute the output. 
			 * @memberOf Tone.MultiPlayer#
			 * @type {boolean}
			 * @name mute
			 * @example
			 * //mute the output
			 * source.mute = true;
			 */
		    Object.defineProperty(Tone.MultiPlayer.prototype, 'mute', {
		        get: function () {
		            return this._volume.mute;
		        },
		        set: function (mute) {
		            this._volume.mute = mute;
		        }
		    });
		    /**
			 *  Clean up.
			 *  @return  {Tone.MultiPlayer}  this
			 */
		    Tone.MultiPlayer.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._volume.dispose();
		        this._volume = null;
		        this._writable('volume');
		        this.volume = null;
		        this.buffers.dispose();
		        this.buffers = null;
		        for (var i = 0; i < this._activeSources.length; i++) {
		            this._activeSources[i].dispose();
		        }
		        this._activeSources = null;
		        return this;
		    };
		    return Tone.MultiPlayer;
		});
		Module(function (Tone) {
		    /**
			 * @class Tone.GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).
			 *        Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the 
			 *        amount of time each small chunk of audio is played for and the overlap is the 
			 *        amount of crossfading transition time between successive grains.
			 * @extends {Tone}
			 * @param {String|Tone.Buffer} url	The url to load, or the Tone.Buffer to play.
			 * @param {Function=} callback The callback to invoke after the url is loaded.
			 */
		    Tone.GrainPlayer = function () {
		        var options = this.optionsObject(arguments, [
		            'url',
		            'onload'
		        ], Tone.GrainPlayer.defaults);
		        Tone.Source.call(this);
		        /**
				 *  The audio buffer belonging to the player.
				 *  @type  {Tone.Buffer}
				 */
		        this.buffer = new Tone.Buffer(options.url, options.onload);
		        /**
				 *  Plays the buffer with a small envelope
				 *  @type  {Tone.MultiPlayer}
				 *  @private
				 */
		        this._player = this.output = new Tone.MultiPlayer();
		        /**
				 *  Create a repeating tick to schedule
				 *  the grains.
				 *  @type  {Tone.Clock}
				 *  @private
				 */
		        this._clock = new Tone.Clock(this._tick.bind(this), 1);
		        /**
				 *  @type  {Number}
				 *  @private
				 */
		        this._loopStart = 0;
		        /**
				 *  @type  {Number}
				 *  @private
				 */
		        this._loopEnd = 0;
		        /**
				 *  @type  {Number}
				 *  @private
				 */
		        this._playbackRate = options.playbackRate;
		        /**
				 *  @type  {Number}
				 *  @private
				 */
		        this._grainSize = options.grainSize;
		        /**
				 *  @private
				 *  @type {Number}
				 */
		        this._overlap = options.overlap;
		        /**
				 *  Adjust the pitch independently of the playbackRate.
				 *  @type  {Cents}
				 */
		        this.detune = options.detune;
		        /**
				 *  The amount of time randomly added
				 *  or subtracted from the grain's offset
				 *  @type  {Time}
				 */
		        this.drift = options.drift;
		        //setup
		        this.overlap = options.overlap;
		        this.loop = options.loop;
		        this.playbackRate = options.playbackRate;
		        this.grainSize = options.grainSize;
		        this.loopStart = options.loopStart;
		        this.loopEnd = options.loopEnd;
		        this.reverse = options.reverse;
		    };
		    Tone.extend(Tone.GrainPlayer, Tone.Source);
		    /**
			 *  the default parameters
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.GrainPlayer.defaults = {
		        'onload': Tone.noOp,
		        'overlap': 0.1,
		        'grainSize': 0.2,
		        'drift': 0,
		        'playbackRate': 1,
		        'detune': 0,
		        'loop': false,
		        'loopStart': 0,
		        'loopEnd': 0,
		        'reverse': false
		    };
		    /**
			 *  Play the buffer at the given startTime. Optionally add an offset
			 *  from the start of the buffer to play from.
			 *  
			 *  @param  {Time} [startTime=now] When the player should start.
			 *  @param  {Time} [offset=0] The offset from the beginning of the sample
			 *                                 to start at. 
			 * @return {Tone.GrainPlayer} this
			 */
		    /**
			 *  Internal start method
			 *  @param {Time} time
			 *  @param {Time} offset
			 *  @private
			 */
		    Tone.GrainPlayer.prototype._start = function (time, offset) {
		        offset = this.defaultArg(offset, 0);
		        offset = this.toSeconds(offset);
		        time = this.toSeconds(time);
		        this._offset = offset;
		        this._clock.start(time);
		    };
		    /**
			 *  Internal start method
			 *  @param {Time} time
			 *  @private
			 */
		    Tone.GrainPlayer.prototype._stop = function (time) {
		        this._clock.stop(time);
		        this._player.stop(this.buffer, time);
		        this._offset = 0;
		    };
		    /**
			 *  Invoked on each clock tick. scheduled a new
			 *  grain at this time.
			 *  @param  {Time}  time 
			 *  @private
			 */
		    Tone.GrainPlayer.prototype._tick = function (time) {
		        var bufferDuration = this.buffer.duration;
		        if (this.loop && this._loopEnd > 0) {
		            bufferDuration = this._loopEnd;
		        }
		        var drift = (Math.random() * 2 - 1) * this.drift;
		        var offset = this._offset - this._overlap + drift;
		        var detune = this.detune / 100;
		        var originalFadeIn = this._player.fadeIn;
		        if (this.loop && this._offset > bufferDuration) {
		            //play the end
		            var endSegmentDuration = this._offset - bufferDuration;
		            this._player.start(this.buffer, time, offset, endSegmentDuration + this._overlap, detune);
		            //and play the beginning 
		            offset = this._offset % bufferDuration;
		            this._offset = this._loopStart;
		            this._player.fadeIn = 0;
		            this._player.start(this.buffer, time + endSegmentDuration, this._offset, offset + this._overlap, detune);
		        } else if (this._offset > bufferDuration) {
		            //set the state to stopped. 
		            this.stop(time);
		        } else {
		            if (offset < 0) {
		                this._player.fadeIn = Math.max(this._player.fadeIn + offset, 0);
		                offset = 0;
		            }
		            this._player.start(this.buffer, time, offset, this.grainSize + this._overlap, detune);
		        }
		        this._player.fadeIn = originalFadeIn;
		        //increment the offset
		        var duration = this._clock._nextTick - time;
		        this._offset += duration * this._playbackRate;
		    };
		    /**
			 *  Jump to a specific time and play it.
			 *  @param  {Time}  offset  The offset to jump to.
			 *  @param {Time=} time When to make the jump.
			 *  @return  {[type]}  [description]
			 */
		    Tone.GrainPlayer.prototype.scrub = function (offset, time) {
		        this._offset = this.toSeconds(offset);
		        this._tick(this.toSeconds(time));
		        return this;
		    };
		    /**
			 * The playback rate of the sample
			 * @memberOf Tone.GrainPlayer#
			 * @type {Positive}
			 * @name playbackRate
			 */
		    Object.defineProperty(Tone.GrainPlayer.prototype, 'playbackRate', {
		        get: function () {
		            return this._playbackRate;
		        },
		        set: function (rate) {
		            this._playbackRate = rate;
		            this.grainSize = this._grainSize;
		        }
		    });
		    /**
			 * The loop start time. 
			 * @memberOf Tone.GrainPlayer#
			 * @type {Time}
			 * @name loopStart
			 */
		    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopStart', {
		        get: function () {
		            return this._loopStart;
		        },
		        set: function (time) {
		            this._loopStart = this.toSeconds(time);
		        }
		    });
		    /**
			 * The loop end time. 
			 * @memberOf Tone.GrainPlayer#
			 * @type {Time}
			 * @name loopEnd
			 */
		    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopEnd', {
		        get: function () {
		            return this._loopEnd;
		        },
		        set: function (time) {
		            this._loopEnd = this.toSeconds(time);
		        }
		    });
		    /**
			 * The direction the buffer should play in
			 * @memberOf Tone.GrainPlayer#
			 * @type {boolean}
			 * @name reverse
			 */
		    Object.defineProperty(Tone.GrainPlayer.prototype, 'reverse', {
		        get: function () {
		            return this.buffer.reverse;
		        },
		        set: function (rev) {
		            this.buffer.reverse = rev;
		        }
		    });
		    /**
			 * The size of each chunk of audio that the 
			 * buffer is chopped into and played back at.
			 * @memberOf Tone.GrainPlayer#
			 * @type {Time}
			 * @name grainSize
			 */
		    Object.defineProperty(Tone.GrainPlayer.prototype, 'grainSize', {
		        get: function () {
		            return this._grainSize;
		        },
		        set: function (size) {
		            this._grainSize = this.toSeconds(size);
		            this._clock.frequency.value = this._playbackRate / this._grainSize;
		        }
		    });
		    /**
			 * This is the duration of the cross-fade between 
			 * sucessive grains.
			 * @memberOf Tone.GrainPlayer#
			 * @type {Time}
			 * @name overlap
			 */
		    Object.defineProperty(Tone.GrainPlayer.prototype, 'overlap', {
		        get: function () {
		            return this._overlap;
		        },
		        set: function (time) {
		            time = this.toSeconds(time);
		            this._overlap = time;
		            if (this._overlap < 0) {
		                this._player.fadeIn = 0.01;
		                this._player.fadeOut = 0.01;
		            } else {
		                this._player.fadeIn = time;
		                this._player.fadeOut = time;
		            }
		        }
		    });
		    /**
			 * Clean up
			 * @return {Tone.GrainPlayer} this
			 */
		    Tone.GrainPlayer.prototype.dispose = function () {
		        Tone.Source.prototype.dispose.call(this);
		        this.buffer.dispose();
		        this.buffer = null;
		        this._player.dispose();
		        this._player = null;
		        this._clock.dispose();
		        this._clock = null;
		        return this;
		    };
		    return Tone.GrainPlayer;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Opens up the default source (typically the microphone).
			 *
			 *  @constructor
			 *  @extends {Tone.ExternalInput}
			 *  @example
			 *  //mic will feedback if played through master
			 *  var mic = new Tone.Microphone();
			 *  mic.open(function(){
			 *  	//start the mic at ten seconds
			 *  	mic.start(10);
			 *  });
			 *  //stop the mic
			 *  mic.stop(20);
			 */
		    Tone.Microphone = function () {
		        Tone.ExternalInput.call(this, 0);
		    };
		    Tone.extend(Tone.Microphone, Tone.ExternalInput);
		    /**
			 *  If getUserMedia is supported by the browser.
			 *  @type  {Boolean}
			 *  @memberOf Tone.Microphone#
			 *  @name supported
			 *  @static
			 *  @readOnly
			 */
		    Object.defineProperty(Tone.Microphone, 'supported', {
		        get: function () {
		            return Tone.ExternalInput.supported;
		        }
		    });
		    return Tone.Microphone;
		});
		
		return Tone;
	}));

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define([], factory);
		else if(typeof exports === 'object')
			exports["Vex"] = factory();
		else
			root["Vex"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _element = __webpack_require__(5);
		
		var _fraction = __webpack_require__(3);
		
		var _renderer = __webpack_require__(10);
		
		var _formatter = __webpack_require__(14);
		
		var _music = __webpack_require__(30);
		
		var _glyph = __webpack_require__(4);
		
		var _stave = __webpack_require__(43);
		
		var _stavenote = __webpack_require__(20);
		
		var _stavemodifier = __webpack_require__(45);
		
		var _voice = __webpack_require__(18);
		
		var _accidental = __webpack_require__(29);
		
		var _beam = __webpack_require__(15);
		
		var _stavetie = __webpack_require__(33);
		
		var _tabstave = __webpack_require__(55);
		
		var _tabnote = __webpack_require__(56);
		
		var _bend = __webpack_require__(41);
		
		var _vibrato = __webpack_require__(42);
		
		var _vibratobracket = __webpack_require__(57);
		
		var _note = __webpack_require__(22);
		
		var _modifiercontext = __webpack_require__(27);
		
		var _tickcontext = __webpack_require__(39);
		
		var _articulation = __webpack_require__(37);
		
		var _annotation = __webpack_require__(40);
		
		var _stavebarline = __webpack_require__(44);
		
		var _notehead = __webpack_require__(21);
		
		var _staveconnector = __webpack_require__(19);
		
		var _clefnote = __webpack_require__(58);
		
		var _keysignature = __webpack_require__(52);
		
		var _timesignature = __webpack_require__(53);
		
		var _timesignote = __webpack_require__(59);
		
		var _stem = __webpack_require__(17);
		
		var _tabtie = __webpack_require__(34);
		
		var _clef = __webpack_require__(51);
		
		var _modifier = __webpack_require__(25);
		
		var _tabslide = __webpack_require__(60);
		
		var _tuplet = __webpack_require__(16);
		
		var _gracenote = __webpack_require__(61);
		
		var _gracetabnote = __webpack_require__(62);
		
		var _tuning = __webpack_require__(63);
		
		var _keymanager = __webpack_require__(64);
		
		var _stavehairpin = __webpack_require__(65);
		
		var _boundingbox = __webpack_require__(8);
		
		var _strokes = __webpack_require__(35);
		
		var _textnote = __webpack_require__(50);
		
		var _curve = __webpack_require__(66);
		
		var _textdynamics = __webpack_require__(67);
		
		var _staveline = __webpack_require__(68);
		
		var _ornament = __webpack_require__(38);
		
		var _pedalmarking = __webpack_require__(69);
		
		var _textbracket = __webpack_require__(70);
		
		var _frethandfinger = __webpack_require__(28);
		
		var _staverepetition = __webpack_require__(46);
		
		var _barnote = __webpack_require__(71);
		
		var _ghostnote = __webpack_require__(72);
		
		var _notesubgroup = __webpack_require__(31);
		
		var _gracenotegroup = __webpack_require__(32);
		
		var _tremolo = __webpack_require__(73);
		
		var _stringnumber = __webpack_require__(36);
		
		var _crescendo = __webpack_require__(74);
		
		var _stavevolta = __webpack_require__(54);
		
		var _vexflow_font = __webpack_require__(9);
		
		var _system = __webpack_require__(75);
		
		var _factory = __webpack_require__(76);
		
		var _parser = __webpack_require__(78);
		
		var _easyscore = __webpack_require__(77);
		
		var _registry = __webpack_require__(6);
		
		// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		
		_vex.Vex.Flow = _tables.Flow;
		_vex.Vex.Flow.Element = _element.Element;
		_vex.Vex.Flow.Fraction = _fraction.Fraction;
		_vex.Vex.Flow.Renderer = _renderer.Renderer;
		_vex.Vex.Flow.Formatter = _formatter.Formatter;
		_vex.Vex.Flow.Music = _music.Music;
		_vex.Vex.Flow.Glyph = _glyph.Glyph;
		_vex.Vex.Flow.Stave = _stave.Stave;
		_vex.Vex.Flow.StaveNote = _stavenote.StaveNote;
		_vex.Vex.Flow.StaveModifier = _stavemodifier.StaveModifier;
		_vex.Vex.Flow.Voice = _voice.Voice;
		_vex.Vex.Flow.Accidental = _accidental.Accidental;
		_vex.Vex.Flow.Beam = _beam.Beam;
		_vex.Vex.Flow.StaveTie = _stavetie.StaveTie;
		_vex.Vex.Flow.TabStave = _tabstave.TabStave;
		_vex.Vex.Flow.TabNote = _tabnote.TabNote;
		_vex.Vex.Flow.Bend = _bend.Bend;
		_vex.Vex.Flow.Vibrato = _vibrato.Vibrato;
		_vex.Vex.Flow.VibratoBracket = _vibratobracket.VibratoBracket;
		_vex.Vex.Flow.Note = _note.Note;
		_vex.Vex.Flow.ModifierContext = _modifiercontext.ModifierContext;
		_vex.Vex.Flow.TickContext = _tickcontext.TickContext;
		_vex.Vex.Flow.Articulation = _articulation.Articulation;
		_vex.Vex.Flow.Annotation = _annotation.Annotation;
		_vex.Vex.Flow.Barline = _stavebarline.Barline;
		_vex.Vex.Flow.NoteHead = _notehead.NoteHead;
		_vex.Vex.Flow.StaveConnector = _staveconnector.StaveConnector;
		_vex.Vex.Flow.ClefNote = _clefnote.ClefNote;
		_vex.Vex.Flow.KeySignature = _keysignature.KeySignature;
		_vex.Vex.Flow.TimeSignature = _timesignature.TimeSignature;
		_vex.Vex.Flow.TimeSigNote = _timesignote.TimeSigNote;
		_vex.Vex.Flow.Stem = _stem.Stem;
		_vex.Vex.Flow.TabTie = _tabtie.TabTie;
		_vex.Vex.Flow.Clef = _clef.Clef;
		_vex.Vex.Flow.Modifier = _modifier.Modifier;
		_vex.Vex.Flow.TabSlide = _tabslide.TabSlide;
		_vex.Vex.Flow.Tuplet = _tuplet.Tuplet;
		_vex.Vex.Flow.GraceNote = _gracenote.GraceNote;
		_vex.Vex.Flow.GraceTabNote = _gracetabnote.GraceTabNote;
		_vex.Vex.Flow.Tuning = _tuning.Tuning;
		_vex.Vex.Flow.KeyManager = _keymanager.KeyManager;
		_vex.Vex.Flow.StaveHairpin = _stavehairpin.StaveHairpin;
		_vex.Vex.Flow.BoundingBox = _boundingbox.BoundingBox;
		_vex.Vex.Flow.Stroke = _strokes.Stroke;
		_vex.Vex.Flow.TextNote = _textnote.TextNote;
		_vex.Vex.Flow.Curve = _curve.Curve;
		_vex.Vex.Flow.TextDynamics = _textdynamics.TextDynamics;
		_vex.Vex.Flow.StaveLine = _staveline.StaveLine;
		_vex.Vex.Flow.Ornament = _ornament.Ornament;
		_vex.Vex.Flow.PedalMarking = _pedalmarking.PedalMarking;
		_vex.Vex.Flow.TextBracket = _textbracket.TextBracket;
		_vex.Vex.Flow.FretHandFinger = _frethandfinger.FretHandFinger;
		_vex.Vex.Flow.Repetition = _staverepetition.Repetition;
		_vex.Vex.Flow.BarNote = _barnote.BarNote;
		_vex.Vex.Flow.GhostNote = _ghostnote.GhostNote;
		_vex.Vex.Flow.NoteSubGroup = _notesubgroup.NoteSubGroup;
		_vex.Vex.Flow.GraceNoteGroup = _gracenotegroup.GraceNoteGroup;
		_vex.Vex.Flow.Tremolo = _tremolo.Tremolo;
		_vex.Vex.Flow.StringNumber = _stringnumber.StringNumber;
		_vex.Vex.Flow.Crescendo = _crescendo.Crescendo;
		_vex.Vex.Flow.Volta = _stavevolta.Volta;
		_vex.Vex.Flow.Font = _vexflow_font.Font;
		_vex.Vex.Flow.System = _system.System;
		_vex.Vex.Flow.Factory = _factory.Factory;
		_vex.Vex.Flow.Parser = _parser.Parser;
		_vex.Vex.Flow.EasyScore = _easyscore.EasyScore;
		_vex.Vex.Flow.Registry = _registry.Registry;
		
		exports.default = _vex.Vex;
		module.exports = exports['default'];

	/***/ },
	/* 1 */
	/***/ function(module, exports) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
		
		// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// This file implements utility methods used by the rest of the VexFlow
		// codebase.
		//
		
		var Vex = function Vex() {};
		
		// Default log function sends all arguments to console.
		Vex.L = function (block, args) {
		  if (!args) return;
		  var line = Array.prototype.slice.call(args).join(' ');
		  window.console.log(block + ': ' + line);
		};
		
		Vex.MakeException = function (name) {
		  var exception = function (_Error) {
		    _inherits(exception, _Error);
		
		    function exception(message, data) {
		      _classCallCheck(this, exception);
		
		      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(exception).call(this, message));
		
		      _this.name = name;
		      _this.message = message;
		      _this.data = data;
		      return _this;
		    }
		
		    return exception;
		  }(Error);
		
		  return exception;
		};
		
		// Default runtime exception.
		
		var RuntimeError = function () {
		  function RuntimeError(code, message) {
		    _classCallCheck(this, RuntimeError);
		
		    this.code = code;
		    this.message = message;
		  }
		
		  _createClass(RuntimeError, [{
		    key: 'toString',
		    value: function toString() {
		      return '[RuntimeError] ' + this.code + ':' + this.message;
		    }
		  }]);
		
		  return RuntimeError;
		}();
		
		// Shortcut method for `RuntimeError`.
		
		
		Vex.RuntimeError = RuntimeError;
		Vex.RERR = Vex.RuntimeError;
		
		// Merge `destination` hash with `source` hash, overwriting like keys
		// in `source` if necessary.
		Vex.Merge = function (destination, source) {
		  for (var property in source) {
		    // eslint-disable-line guard-for-in
		    destination[property] = source[property];
		  }
		  return destination;
		};
		
		// DEPRECATED. Use `Math.*`.
		Vex.Min = Math.min;
		Vex.Max = Math.max;
		Vex.forEach = function (a, fn) {
		  for (var i = 0; i < a.length; i++) {
		    fn(a[i], i);
		  }
		};
		
		// Round number to nearest fractional value (`.5`, `.25`, etc.)
		Vex.RoundN = function (x, n) {
		  return x % n >= n / 2 ? parseInt(x / n, 10) * n + n : parseInt(x / n, 10) * n;
		};
		
		// Locate the mid point between stave lines. Returns a fractional line if a space.
		Vex.MidLine = function (a, b) {
		  var mid_line = b + (a - b) / 2;
		  if (mid_line % 2 > 0) {
		    mid_line = Vex.RoundN(mid_line * 10, 5) / 10;
		  }
		  return mid_line;
		};
		
		// Take `arr` and return a new list consisting of the sorted, unique,
		// contents of arr. Does not modify `arr`.
		Vex.SortAndUnique = function (arr, cmp, eq) {
		  if (arr.length > 1) {
		    var newArr = [];
		    var last = void 0;
		    arr.sort(cmp);
		
		    for (var i = 0; i < arr.length; ++i) {
		      if (i === 0 || !eq(arr[i], last)) {
		        newArr.push(arr[i]);
		      }
		      last = arr[i];
		    }
		
		    return newArr;
		  } else {
		    return arr;
		  }
		};
		
		// Check if array `a` contains `obj`.
		Vex.Contains = function (a, obj) {
		  var i = a.length;
		  while (i--) {
		    if (a[i] === obj) {
		      return true;
		    }
		  }
		  return false;
		};
		
		// Get the 2D Canvas context from DOM element `canvas_sel`.
		Vex.getCanvasContext = function (canvas_sel) {
		  if (!canvas_sel) {
		    throw new Vex.RERR('BadArgument', 'Invalid canvas selector: ' + canvas_sel);
		  }
		
		  var canvas = document.getElementById(canvas_sel);
		  if (!(canvas && canvas.getContext)) {
		    throw new Vex.RERR('UnsupportedBrowserError', 'This browser does not support HTML5 Canvas');
		  }
		
		  return canvas.getContext('2d');
		};
		
		// Draw a tiny dot marker on the specified canvas. A great debugging aid.
		//
		// `ctx`: Canvas context.
		// `x`, `y`: Dot coordinates.
		Vex.drawDot = function (ctx, x, y) {
		  var color = arguments.length <= 3 || arguments[3] === undefined ? '#55' : arguments[3];
		
		  ctx.save();
		  ctx.setFillStyle(color);
		
		  // draw a circle
		  ctx.beginPath();
		  ctx.arc(x, y, 3, 0, Math.PI * 2, true);
		  ctx.closePath();
		  ctx.fill();
		  ctx.restore();
		};
		
		// Benchmark. Run function `f` once and report time elapsed shifted by `s` milliseconds.
		Vex.BM = function (s, f) {
		  var start_time = new Date().getTime();
		  f();
		  var elapsed = new Date().getTime() - start_time;
		  Vex.L(s + elapsed + 'ms');
		};
		
		// Get stack trace.
		Vex.StackTrace = function () {
		  var err = new Error();
		  return err.stack;
		};
		
		// Dump warning to console.
		Vex.W = function () {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  var line = Array.prototype.slice.call(args).join(' ');
		  window.console.log('Warning: ', line, Vex.StackTrace());
		};
		
		// Used by various classes (e.g., SVGContext) to provide a
		// unique prefix to element names (or other keys in shared namespaces).
		Vex.Prefix = function (text) {
		  return Vex.Prefix.prefix + text;
		};
		Vex.Prefix.prefix = 'vf-';
		
		exports.Vex = Vex;

	/***/ },
	/* 2 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Flow = undefined;
		
		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; }; // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		
		/* eslint-disable key-spacing */
		
		var _vex = __webpack_require__(1);
		
		var _fraction = __webpack_require__(3);
		
		var _glyph = __webpack_require__(4);
		
		var Flow = {
		  STEM_WIDTH: 1.5,
		  STEM_HEIGHT: 35,
		  STAVE_LINE_THICKNESS: 1,
		  RESOLUTION: 16384,
		  DEFAULT_NOTATION_FONT_SCALE: 39,
		  DEFAULT_TABLATURE_FONT_SCALE: 39,
		  SLASH_NOTEHEAD_WIDTH: 15,
		
		  // HACK:
		  // Since text origins are positioned at the baseline, we must
		  // compensate for the ascender of the text. Of course, 1 staff space is
		  // a very poor approximation.
		  //
		  // This will be deprecated in the future. This is a temporary solution until
		  // we have more robust text metrics.
		  TEXT_HEIGHT_OFFSET_HACK: 1,
		
		  /* Kerning (DEPRECATED) */
		  IsKerned: true
		};
		
		Flow.clefProperties = function (clef) {
		  if (!clef) throw new _vex.Vex.RERR('BadArgument', 'Invalid clef: ' + clef);
		
		  var props = Flow.clefProperties.values[clef];
		  if (!props) throw new _vex.Vex.RERR('BadArgument', 'Invalid clef: ' + clef);
		
		  return props;
		};
		
		Flow.clefProperties.values = {
		  'treble': { line_shift: 0 },
		  'bass': { line_shift: 6 },
		  'tenor': { line_shift: 4 },
		  'alto': { line_shift: 3 },
		  'soprano': { line_shift: 1 },
		  'percussion': { line_shift: 0 },
		  'mezzo-soprano': { line_shift: 2 },
		  'baritone-c': { line_shift: 5 },
		  'baritone-f': { line_shift: 5 },
		  'subbass': { line_shift: 7 },
		  'french': { line_shift: -1 }
		};
		
		/*
		  Take a note in the format "Key/Octave" (e.g., "C/5") and return properties.
		
		  The last argument, params, is a struct the currently can contain one option,
		  octave_shift for clef ottavation (0 = default; 1 = 8va; -1 = 8vb, etc.).
		*/
		Flow.keyProperties = function (key, clef, params) {
		  if (clef === undefined) {
		    clef = 'treble';
		  }
		
		  var options = { octave_shift: 0 };
		
		  if ((typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object') {
		    _vex.Vex.Merge(options, params);
		  }
		
		  var pieces = key.split('/');
		
		  if (pieces.length < 2) {
		    throw new _vex.Vex.RERR('BadArguments', 'Key must have note + octave and an optional glyph: ' + key);
		  }
		
		  var k = pieces[0].toUpperCase();
		  var value = Flow.keyProperties.note_values[k];
		  if (!value) throw new _vex.Vex.RERR('BadArguments', 'Invalid key name: ' + k);
		  if (value.octave) pieces[1] = value.octave;
		
		  var octave = parseInt(pieces[1], 10);
		
		  // Octave_shift is the shift to compensate for clef 8va/8vb.
		  octave += -1 * options.octave_shift;
		
		  var base_index = octave * 7 - 4 * 7;
		  var line = (base_index + value.index) / 2;
		  line += Flow.clefProperties(clef).line_shift;
		
		  var stroke = 0;
		
		  if (line <= 0 && line * 2 % 2 === 0) stroke = 1; // stroke up
		  if (line >= 6 && line * 2 % 2 === 0) stroke = -1; // stroke down
		
		  // Integer value for note arithmetic.
		  var int_value = typeof value.int_val !== 'undefined' ? octave * 12 + value.int_val : null;
		
		  /* Check if the user specified a glyph. */
		  var code = value.code;
		  var shift_right = value.shift_right;
		  if (pieces.length > 2 && pieces[2]) {
		    var glyph_name = pieces[2].toUpperCase();
		    var note_glyph = Flow.keyProperties.note_glyph[glyph_name];
		    if (note_glyph) {
		      code = note_glyph.code;
		      shift_right = note_glyph.shift_right;
		    }
		  }
		
		  return {
		    key: k,
		    octave: octave,
		    line: line,
		    int_value: int_value,
		    accidental: value.accidental,
		    code: code,
		    stroke: stroke,
		    shift_right: shift_right,
		    displaced: false
		  };
		};
		
		Flow.keyProperties.note_values = {
		  'C': { index: 0, int_val: 0, accidental: null },
		  'CN': { index: 0, int_val: 0, accidental: 'n' },
		  'C#': { index: 0, int_val: 1, accidental: '#' },
		  'C##': { index: 0, int_val: 2, accidental: '##' },
		  'CB': { index: 0, int_val: -1, accidental: 'b' },
		  'CBB': { index: 0, int_val: -2, accidental: 'bb' },
		  'D': { index: 1, int_val: 2, accidental: null },
		  'DN': { index: 1, int_val: 2, accidental: 'n' },
		  'D#': { index: 1, int_val: 3, accidental: '#' },
		  'D##': { index: 1, int_val: 4, accidental: '##' },
		  'DB': { index: 1, int_val: 1, accidental: 'b' },
		  'DBB': { index: 1, int_val: 0, accidental: 'bb' },
		  'E': { index: 2, int_val: 4, accidental: null },
		  'EN': { index: 2, int_val: 4, accidental: 'n' },
		  'E#': { index: 2, int_val: 5, accidental: '#' },
		  'E##': { index: 2, int_val: 6, accidental: '##' },
		  'EB': { index: 2, int_val: 3, accidental: 'b' },
		  'EBB': { index: 2, int_val: 2, accidental: 'bb' },
		  'F': { index: 3, int_val: 5, accidental: null },
		  'FN': { index: 3, int_val: 5, accidental: 'n' },
		  'F#': { index: 3, int_val: 6, accidental: '#' },
		  'F##': { index: 3, int_val: 7, accidental: '##' },
		  'FB': { index: 3, int_val: 4, accidental: 'b' },
		  'FBB': { index: 3, int_val: 3, accidental: 'bb' },
		  'G': { index: 4, int_val: 7, accidental: null },
		  'GN': { index: 4, int_val: 7, accidental: 'n' },
		  'G#': { index: 4, int_val: 8, accidental: '#' },
		  'G##': { index: 4, int_val: 9, accidental: '##' },
		  'GB': { index: 4, int_val: 6, accidental: 'b' },
		  'GBB': { index: 4, int_val: 5, accidental: 'bb' },
		  'A': { index: 5, int_val: 9, accidental: null },
		  'AN': { index: 5, int_val: 9, accidental: 'n' },
		  'A#': { index: 5, int_val: 10, accidental: '#' },
		  'A##': { index: 5, int_val: 11, accidental: '##' },
		  'AB': { index: 5, int_val: 8, accidental: 'b' },
		  'ABB': { index: 5, int_val: 7, accidental: 'bb' },
		  'B': { index: 6, int_val: 11, accidental: null },
		  'BN': { index: 6, int_val: 11, accidental: 'n' },
		  'B#': { index: 6, int_val: 12, accidental: '#' },
		  'B##': { index: 6, int_val: 13, accidental: '##' },
		  'BB': { index: 6, int_val: 10, accidental: 'b' },
		  'BBB': { index: 6, int_val: 9, accidental: 'bb' },
		  'R': { index: 6, int_val: 9, rest: true }, // Rest
		  'X': {
		    index: 6,
		    accidental: '',
		    octave: 4,
		    code: 'v3e',
		    shift_right: 5.5
		  }
		};
		
		Flow.keyProperties.note_glyph = {
		  /* Diamond */
		  'D0': { code: 'v27', shift_right: -0.5 },
		  'D1': { code: 'v2d', shift_right: -0.5 },
		  'D2': { code: 'v22', shift_right: -0.5 },
		  'D3': { code: 'v70', shift_right: -0.5 },
		
		  /* Triangle */
		  'T0': { code: 'v49', shift_right: -2 },
		  'T1': { code: 'v93', shift_right: 0.5 },
		  'T2': { code: 'v40', shift_right: 0.5 },
		  'T3': { code: 'v7d', shift_right: 0.5 },
		
		  /* Cross */
		  'X0': { code: 'v92', shift_right: -2 },
		  'X1': { code: 'v95', shift_right: -0.5 },
		  'X2': { code: 'v7f', shift_right: 0.5 },
		  'X3': { code: 'v3b', shift_right: -2 }
		};
		
		Flow.integerToNote = function (integer) {
		  if (typeof integer === 'undefined') {
		    throw new _vex.Vex.RERR('BadArguments', 'Undefined integer for integerToNote');
		  }
		
		  if (integer < -2) {
		    throw new _vex.Vex.RERR('BadArguments', 'integerToNote requires integer > -2: ' + integer);
		  }
		
		  var noteValue = Flow.integerToNote.table[integer];
		  if (!noteValue) {
		    throw new _vex.Vex.RERR('BadArguments', 'Unknown note value for integer: ' + integer);
		  }
		
		  return noteValue;
		};
		
		Flow.integerToNote.table = {
		  0: 'C',
		  1: 'C#',
		  2: 'D',
		  3: 'D#',
		  4: 'E',
		  5: 'F',
		  6: 'F#',
		  7: 'G',
		  8: 'G#',
		  9: 'A',
		  10: 'A#',
		  11: 'B'
		};
		
		Flow.tabToGlyph = function (fret) {
		  var scale = arguments.length <= 1 || arguments[1] === undefined ? 1.0 : arguments[1];
		
		  var glyph = null;
		  var width = 0;
		  var shift_y = 0;
		
		  if (fret.toString().toUpperCase() === 'X') {
		    var glyphMetrics = new _glyph.Glyph('v7f', Flow.DEFAULT_TABLATURE_FONT_SCALE).getMetrics();
		    glyph = 'v7f';
		    width = glyphMetrics.width;
		    shift_y = -glyphMetrics.height / 2;
		  } else {
		    width = Flow.textWidth(fret.toString());
		  }
		
		  return {
		    text: fret,
		    code: glyph,
		    getWidth: function getWidth() {
		      return width * scale;
		    },
		    shift_y: shift_y
		  };
		};
		
		Flow.textWidth = function (text) {
		  return 7 * text.toString().length;
		};
		
		Flow.articulationCodes = function (artic) {
		  return Flow.articulationCodes.articulations[artic];
		};
		
		Flow.articulationCodes.articulations = {
		  'a.': { code: 'v23', between_lines: true }, // Staccato
		  'av': { code: 'v28', between_lines: true }, // Staccatissimo
		  'a>': { code: 'v42', between_lines: true }, // Accent
		  'a-': { code: 'v25', between_lines: true }, // Tenuto
		  'a^': { code: 'va', between_lines: false }, // Marcato
		  'a+': { code: 'v8b', between_lines: false }, // Left hand pizzicato
		  'ao': { code: 'v94', between_lines: false }, // Snap pizzicato
		  'ah': { code: 'vb9', between_lines: false }, // Natural harmonic or open note
		  'a@a': { code: 'v43', between_lines: false }, // Fermata above staff
		  'a@u': { code: 'v5b', between_lines: false }, // Fermata below staff
		  'a|': { code: 'v75', between_lines: false }, // Bow up - up stroke
		  'am': { code: 'v97', between_lines: false }, // Bow down - down stroke
		  'a,': { code: 'vb3', between_lines: false } };
		
		Flow.accidentalCodes = function (acc) {
		  return Flow.accidentalCodes.accidentals[acc];
		};
		
		Flow.accidentalCodes.accidentals = {
		  '#': { code: 'v18', parenRightPaddingAdjustment: -1 },
		  '##': { code: 'v7f', parenRightPaddingAdjustment: -1 },
		  'b': { code: 'v44', parenRightPaddingAdjustment: -2 },
		  'bb': { code: 'v26', parenRightPaddingAdjustment: -2 },
		  'n': { code: 'v4e', parenRightPaddingAdjustment: -1 },
		  '{': { code: 'v9c', parenRightPaddingAdjustment: -1 },
		  '}': { code: 'v84', parenRightPaddingAdjustment: -1 },
		  'db': { code: 'v9e', parenRightPaddingAdjustment: -1 },
		  'd': { code: 'vab', parenRightPaddingAdjustment: 0 },
		  'bbs': { code: 'v90', parenRightPaddingAdjustment: -1 },
		  '++': { code: 'v51', parenRightPaddingAdjustment: -1 },
		  '+': { code: 'v78', parenRightPaddingAdjustment: -1 },
		  '+-': { code: 'v8d', parenRightPaddingAdjustment: -1 },
		  '++-': { code: 'v7a', parenRightPaddingAdjustment: -1 },
		  'bs': { code: 'vb7', parenRightPaddingAdjustment: -1 },
		  'bss': { code: 'v39', parenRightPaddingAdjustment: -1 }
		};
		
		Flow.accidentalColumnsTable = {
		  1: { a: [1], b: [1] },
		  2: { a: [1, 2] },
		  3: { a: [1, 3, 2], b: [1, 2, 1], second_on_bottom: [1, 2, 3] },
		  4: { a: [1, 3, 4, 2], b: [1, 2, 3, 1], spaced_out_tetrachord: [1, 2, 1, 2] },
		  5: { a: [1, 3, 5, 4, 2], b: [1, 2, 4, 3, 1],
		    spaced_out_pentachord: [1, 2, 3, 2, 1],
		    very_spaced_out_pentachord: [1, 2, 1, 2, 1] },
		  6: { a: [1, 3, 5, 6, 4, 2], b: [1, 2, 4, 5, 3, 1],
		    spaced_out_hexachord: [1, 3, 2, 1, 3, 2],
		    very_spaced_out_hexachord: [1, 2, 1, 2, 1, 2] }
		};
		
		Flow.ornamentCodes = function (acc) {
		  return Flow.ornamentCodes.ornaments[acc];
		};
		
		Flow.ornamentCodes.ornaments = {
		  'mordent': { code: 'v1e' },
		  'mordent_inverted': { code: 'v45' },
		  'turn': { code: 'v72' },
		  'turn_inverted': { code: 'v33' },
		  'tr': { code: 'v1f' },
		  'upprall': { code: 'v60' },
		  'downprall': { code: 'vb4' },
		  'prallup': { code: 'v6d' },
		  'pralldown': { code: 'v2c' },
		  'upmordent': { code: 'v29' },
		  'downmordent': { code: 'v68' },
		  'lineprall': { code: 'v20' },
		  'prallprall': { code: 'v86' }
		};
		
		Flow.keySignature = function (spec) {
		  var keySpec = Flow.keySignature.keySpecs[spec];
		
		  if (!keySpec) {
		    throw new _vex.Vex.RERR('BadKeySignature', 'Bad key signature spec: \'' + spec + '\'');
		  }
		
		  if (!keySpec.acc) {
		    return [];
		  }
		
		  var notes = Flow.keySignature.accidentalList(keySpec.acc);
		
		  var acc_list = [];
		  for (var i = 0; i < keySpec.num; ++i) {
		    var line = notes[i];
		    acc_list.push({ type: keySpec.acc, line: line });
		  }
		
		  return acc_list;
		};
		
		Flow.keySignature.keySpecs = {
		  'C': { acc: null, num: 0 },
		  'Am': { acc: null, num: 0 },
		  'F': { acc: 'b', num: 1 },
		  'Dm': { acc: 'b', num: 1 },
		  'Bb': { acc: 'b', num: 2 },
		  'Gm': { acc: 'b', num: 2 },
		  'Eb': { acc: 'b', num: 3 },
		  'Cm': { acc: 'b', num: 3 },
		  'Ab': { acc: 'b', num: 4 },
		  'Fm': { acc: 'b', num: 4 },
		  'Db': { acc: 'b', num: 5 },
		  'Bbm': { acc: 'b', num: 5 },
		  'Gb': { acc: 'b', num: 6 },
		  'Ebm': { acc: 'b', num: 6 },
		  'Cb': { acc: 'b', num: 7 },
		  'Abm': { acc: 'b', num: 7 },
		  'G': { acc: '#', num: 1 },
		  'Em': { acc: '#', num: 1 },
		  'D': { acc: '#', num: 2 },
		  'Bm': { acc: '#', num: 2 },
		  'A': { acc: '#', num: 3 },
		  'F#m': { acc: '#', num: 3 },
		  'E': { acc: '#', num: 4 },
		  'C#m': { acc: '#', num: 4 },
		  'B': { acc: '#', num: 5 },
		  'G#m': { acc: '#', num: 5 },
		  'F#': { acc: '#', num: 6 },
		  'D#m': { acc: '#', num: 6 },
		  'C#': { acc: '#', num: 7 },
		  'A#m': { acc: '#', num: 7 }
		};
		
		Flow.unicode = {
		  // Unicode accidentals
		  'sharp': String.fromCharCode(parseInt('266F', 16)),
		  'flat': String.fromCharCode(parseInt('266D', 16)),
		  'natural': String.fromCharCode(parseInt('266E', 16)),
		  // Major Chord
		  'triangle': String.fromCharCode(parseInt('25B3', 16)),
		  // half-diminished
		  'o-with-slash': String.fromCharCode(parseInt('00F8', 16)),
		  // Diminished
		  'degrees': String.fromCharCode(parseInt('00B0', 16)),
		  'circle': String.fromCharCode(parseInt('25CB', 16))
		};
		
		Flow.keySignature.accidentalList = function (acc) {
		  var patterns = {
		    'b': [2, 0.5, 2.5, 1, 3, 1.5, 3.5],
		    '#': [0, 1.5, -0.5, 1, 2.5, 0.5, 2]
		  };
		
		  return patterns[acc];
		};
		
		Flow.parseNoteDurationString = function (durationString) {
		  if (typeof durationString !== 'string') {
		    return null;
		  }
		
		  var regexp = /(\d*\/?\d+|[a-z])(d*)([nrhms]|$)/;
		
		  var result = regexp.exec(durationString);
		  if (!result) {
		    return null;
		  }
		
		  var duration = result[1];
		  var dots = result[2].length;
		  var type = result[3];
		
		  if (type.length === 0) {
		    type = 'n';
		  }
		
		  return {
		    duration: duration,
		    dots: dots,
		    type: type
		  };
		};
		
		Flow.parseNoteData = function (noteData) {
		  var duration = noteData.duration;
		
		  // Preserve backwards-compatibility
		  var durationStringData = Flow.parseNoteDurationString(duration);
		  if (!durationStringData) {
		    return null;
		  }
		
		  var ticks = Flow.durationToTicks(durationStringData.duration);
		  if (ticks == null) {
		    return null;
		  }
		
		  var type = noteData.type;
		
		  if (type) {
		    if (!(type === 'n' || type === 'r' || type === 'h' || type === 'm' || type === 's')) {
		      return null;
		    }
		  } else {
		    type = durationStringData.type;
		    if (!type) {
		      type = 'n';
		    }
		  }
		
		  var dots = noteData.dots ? noteData.dots : durationStringData.dots;
		
		  if (typeof dots !== 'number') {
		    return null;
		  }
		
		  var currentTicks = ticks;
		
		  for (var i = 0; i < dots; i++) {
		    if (currentTicks <= 1) return null;
		
		    currentTicks = currentTicks / 2;
		    ticks += currentTicks;
		  }
		
		  return {
		    duration: durationStringData.duration,
		    type: type,
		    dots: dots,
		    ticks: ticks
		  };
		};
		
		// Used to convert duration aliases to the number based duration.
		// If the input isn't an alias, simply return the input.
		//
		// example: 'q' -> '4', '8' -> '8'
		Flow.sanitizeDuration = function (duration) {
		  var alias = Flow.durationAliases[duration];
		  if (alias !== undefined) {
		    duration = alias;
		  }
		
		  if (Flow.durationToTicks.durations[duration] === undefined) {
		    throw new _vex.Vex.RERR('BadArguments', 'The provided duration is not valid: ' + duration);
		  }
		
		  return duration;
		};
		
		// Convert the `duration` to an fraction
		Flow.durationToFraction = function (duration) {
		  return new _fraction.Fraction().parse(Flow.sanitizeDuration(duration));
		};
		
		// Convert the `duration` to an number
		Flow.durationToNumber = function (duration) {
		  return Flow.durationToFraction(duration).value();
		};
		
		// Convert the `duration` to total ticks
		Flow.durationToTicks = function (duration) {
		  duration = Flow.sanitizeDuration(duration);
		
		  var ticks = Flow.durationToTicks.durations[duration];
		  if (ticks === undefined) {
		    return null;
		  }
		
		  return ticks;
		};
		
		Flow.durationToTicks.durations = {
		  '1/2': Flow.RESOLUTION * 2,
		  '1': Flow.RESOLUTION / 1,
		  '2': Flow.RESOLUTION / 2,
		  '4': Flow.RESOLUTION / 4,
		  '8': Flow.RESOLUTION / 8,
		  '16': Flow.RESOLUTION / 16,
		  '32': Flow.RESOLUTION / 32,
		  '64': Flow.RESOLUTION / 64,
		  '128': Flow.RESOLUTION / 128,
		  '256': Flow.RESOLUTION / 256
		};
		
		Flow.durationAliases = {
		  'w': '1',
		  'h': '2',
		  'q': '4',
		
		  // This is the default duration used to render bars (BarNote). Bars no longer
		  // consume ticks, so this should be a no-op.
		  //
		  // TODO(0xfe): This needs to be cleaned up.
		  'b': '256'
		};
		
		Flow.durationToGlyph = function (duration, type) {
		  duration = Flow.sanitizeDuration(duration);
		
		  var code = Flow.durationToGlyph.duration_codes[duration];
		  if (code === undefined) {
		    return null;
		  }
		
		  if (!type) {
		    type = 'n';
		  }
		
		  var glyphTypeProperties = code.type[type];
		  if (glyphTypeProperties === undefined) {
		    return null;
		  }
		
		  return _vex.Vex.Merge(_vex.Vex.Merge({}, code.common), glyphTypeProperties);
		};
		
		Flow.durationToGlyph.duration_codes = {
		  '1/2': {
		    common: {
		      getWidth: function getWidth() {
		        var scale = arguments.length <= 0 || arguments[0] === undefined ? Flow.DEFAULT_NOTATION_FONT_SCALE : arguments[0];
		
		        return new _glyph.Glyph(this.code_head || 'v53', scale).getMetrics().width;
		      },
		
		      stem: false,
		      stem_offset: 0,
		      flag: false,
		      stem_up_extension: -Flow.STEM_HEIGHT,
		      stem_down_extension: -Flow.STEM_HEIGHT,
		      gracenote_stem_up_extension: -Flow.STEM_HEIGHT,
		      gracenote_stem_down_extension: -Flow.STEM_HEIGHT,
		      tabnote_stem_up_extension: -Flow.STEM_HEIGHT,
		      tabnote_stem_down_extension: -Flow.STEM_HEIGHT,
		      dot_shiftY: 0,
		      line_above: 0,
		      line_below: 0
		    },
		    type: {
		      'n': { // Breve note
		        code_head: 'v53'
		      },
		      'h': { // Breve note harmonic
		        code_head: 'v59'
		      },
		      'm': { // Breve note muted -
		        code_head: 'vf',
		        stem_offset: 0
		      },
		      'r': { // Breve rest
		        code_head: 'v31',
		        rest: true,
		        position: 'B/5',
		        dot_shiftY: 0.5
		      },
		      's': { // Breve note slash -
		        // Drawn with canvas primitives
		        getWidth: function getWidth() {
		          return Flow.SLASH_NOTEHEAD_WIDTH;
		        },
		        position: 'B/4'
		      }
		    }
		  },
		  '1': {
		    common: {
		      getWidth: function getWidth() {
		        var scale = arguments.length <= 0 || arguments[0] === undefined ? Flow.DEFAULT_NOTATION_FONT_SCALE : arguments[0];
		
		        return new _glyph.Glyph(this.code_head || 'v1d', scale).getMetrics().width;
		      },
		
		      stem: false,
		      stem_offset: 0,
		      flag: false,
		      stem_up_extension: -Flow.STEM_HEIGHT,
		      stem_down_extension: -Flow.STEM_HEIGHT,
		      gracenote_stem_up_extension: -Flow.STEM_HEIGHT,
		      gracenote_stem_down_extension: -Flow.STEM_HEIGHT,
		      tabnote_stem_up_extension: -Flow.STEM_HEIGHT,
		      tabnote_stem_down_extension: -Flow.STEM_HEIGHT,
		      dot_shiftY: 0,
		      line_above: 0,
		      line_below: 0
		    },
		    type: {
		      'n': { // Whole note
		        code_head: 'v1d'
		      },
		      'h': { // Whole note harmonic
		        code_head: 'v46'
		      },
		      'm': { // Whole note muted
		        code_head: 'v92',
		        stem_offset: -3
		      },
		      'r': { // Whole rest
		        code_head: 'v5c',
		        rest: true,
		        position: 'D/5',
		        dot_shiftY: 0.5
		      },
		      's': { // Whole note slash
		        // Drawn with canvas primitives
		        getWidth: function getWidth() {
		          return Flow.SLASH_NOTEHEAD_WIDTH;
		        },
		        position: 'B/4'
		      }
		    }
		  },
		  '2': {
		    common: {
		      getWidth: function getWidth() {
		        var scale = arguments.length <= 0 || arguments[0] === undefined ? Flow.DEFAULT_NOTATION_FONT_SCALE : arguments[0];
		
		        return new _glyph.Glyph(this.code_head || 'v81', scale).getMetrics().width;
		      },
		
		      stem: true,
		      stem_offset: 0,
		      flag: false,
		      stem_up_extension: 0,
		      stem_down_extension: 0,
		      gracenote_stem_up_extension: -14,
		      gracenote_stem_down_extension: -14,
		      tabnote_stem_up_extension: 0,
		      tabnote_stem_down_extension: 0,
		      dot_shiftY: 0,
		      line_above: 0,
		      line_below: 0
		    },
		    type: {
		      'n': { // Half note
		        code_head: 'v81'
		      },
		      'h': { // Half note harmonic
		        code_head: 'v2d'
		      },
		      'm': { // Half note muted
		        code_head: 'v95',
		        stem_offset: -3
		      },
		      'r': { // Half rest
		        code_head: 'vc',
		        stem: false,
		        rest: true,
		        position: 'B/4',
		        dot_shiftY: -0.5
		      },
		      's': { // Half note slash
		        // Drawn with canvas primitives
		        getWidth: function getWidth() {
		          return Flow.SLASH_NOTEHEAD_WIDTH;
		        },
		        position: 'B/4'
		      }
		    }
		  },
		  '4': {
		    common: {
		      getWidth: function getWidth() {
		        var scale = arguments.length <= 0 || arguments[0] === undefined ? Flow.DEFAULT_NOTATION_FONT_SCALE : arguments[0];
		
		        return new _glyph.Glyph(this.code_head || 'vb', scale).getMetrics().width;
		      },
		
		      stem: true,
		      stem_offset: 0,
		      flag: false,
		      stem_up_extension: 0,
		      stem_down_extension: 0,
		      gracenote_stem_up_extension: -14,
		      gracenote_stem_down_extension: -14,
		      tabnote_stem_up_extension: 0,
		      tabnote_stem_down_extension: 0,
		      dot_shiftY: 0,
		      line_above: 0,
		      line_below: 0
		    },
		    type: {
		      'n': { // Quarter note
		        code_head: 'vb'
		      },
		      'h': { // Quarter harmonic
		        code_head: 'v22'
		      },
		      'm': { // Quarter muted
		        code_head: 'v3e',
		        stem_offset: -3
		      },
		      'r': { // Quarter rest
		        code_head: 'v7c',
		        stem: false,
		        rest: true,
		        position: 'B/4',
		        dot_shiftY: -0.5,
		        line_above: 1.5,
		        line_below: 1.5
		      },
		      's': { // Quarter slash
		        // Drawn with canvas primitives
		        getWidth: function getWidth() {
		          return Flow.SLASH_NOTEHEAD_WIDTH;
		        },
		        position: 'B/4'
		      }
		    }
		  },
		  '8': {
		    common: {
		      getWidth: function getWidth() {
		        var scale = arguments.length <= 0 || arguments[0] === undefined ? Flow.DEFAULT_NOTATION_FONT_SCALE : arguments[0];
		
		        return new _glyph.Glyph(this.code_head || 'vb', scale).getMetrics().width;
		      },
		
		      stem: true,
		      stem_offset: 0,
		      flag: true,
		      beam_count: 1,
		      code_flag_upstem: 'v54',
		      code_flag_downstem: 'v9a',
		      stem_up_extension: 0,
		      stem_down_extension: 0,
		      gracenote_stem_up_extension: -14,
		      gracenote_stem_down_extension: -14,
		      tabnote_stem_up_extension: 0,
		      tabnote_stem_down_extension: 0,
		      dot_shiftY: 0,
		      line_above: 0,
		      line_below: 0
		    },
		    type: {
		      'n': { // Eighth note
		        code_head: 'vb'
		      },
		      'h': { // Eighth note harmonic
		        code_head: 'v22'
		      },
		      'm': { // Eighth note muted
		        code_head: 'v3e'
		      },
		      'r': { // Eighth rest
		        code_head: 'va5',
		        stem: false,
		        flag: false,
		        rest: true,
		        position: 'B/4',
		        dot_shiftY: -0.5,
		        line_above: 1.0,
		        line_below: 1.0
		      },
		      's': { // Eight slash
		        // Drawn with canvas primitives
		        getWidth: function getWidth() {
		          return Flow.SLASH_NOTEHEAD_WIDTH;
		        },
		        position: 'B/4'
		      }
		    }
		  },
		  '16': {
		    common: {
		      beam_count: 2,
		      getWidth: function getWidth() {
		        var scale = arguments.length <= 0 || arguments[0] === undefined ? Flow.DEFAULT_NOTATION_FONT_SCALE : arguments[0];
		
		        return new _glyph.Glyph(this.code_head || 'vb', scale).getMetrics().width;
		      },
		
		      stem: true,
		      stem_offset: 0,
		      flag: true,
		      code_flag_upstem: 'v3f',
		      code_flag_downstem: 'v8f',
		      stem_up_extension: 0,
		      stem_down_extension: 0,
		      gracenote_stem_up_extension: -14,
		      gracenote_stem_down_extension: -14,
		      tabnote_stem_up_extension: 0,
		      tabnote_stem_down_extension: 0,
		      dot_shiftY: 0,
		      line_above: 0,
		      line_below: 0
		    },
		    type: {
		      'n': { // Sixteenth note
		        code_head: 'vb'
		      },
		      'h': { // Sixteenth note harmonic
		        code_head: 'v22'
		      },
		      'm': { // Sixteenth note muted
		        code_head: 'v3e'
		      },
		      'r': { // Sixteenth rest
		        code_head: 'v3c',
		        stem: false,
		        flag: false,
		        rest: true,
		        position: 'B/4',
		        dot_shiftY: -0.5,
		        line_above: 1.0,
		        line_below: 2.0
		      },
		      's': { // Sixteenth slash
		        // Drawn with canvas primitives
		        getWidth: function getWidth() {
		          return Flow.SLASH_NOTEHEAD_WIDTH;
		        },
		        position: 'B/4'
		      }
		    }
		  },
		  '32': {
		    common: {
		      beam_count: 3,
		      getWidth: function getWidth() {
		        var scale = arguments.length <= 0 || arguments[0] === undefined ? Flow.DEFAULT_NOTATION_FONT_SCALE : arguments[0];
		
		        return new _glyph.Glyph(this.code_head || 'vb', scale).getMetrics().width;
		      },
		
		      stem: true,
		      stem_offset: 0,
		      flag: true,
		      code_flag_upstem: 'v47',
		      code_flag_downstem: 'v2a',
		      stem_up_extension: 9,
		      stem_down_extension: 9,
		      gracenote_stem_up_extension: -12,
		      gracenote_stem_down_extension: -12,
		      tabnote_stem_up_extension: 8,
		      tabnote_stem_down_extension: 5,
		      dot_shiftY: 0,
		      line_above: 0,
		      line_below: 0
		    },
		    type: {
		      'n': { // Thirty-second note
		        code_head: 'vb'
		      },
		      'h': { // Thirty-second harmonic
		        code_head: 'v22'
		      },
		      'm': { // Thirty-second muted
		        code_head: 'v3e'
		      },
		      'r': { // Thirty-second rest
		        code_head: 'v55',
		        stem: false,
		        flag: false,
		        rest: true,
		        position: 'B/4',
		        dot_shiftY: -1.5,
		        line_above: 2.0,
		        line_below: 2.0
		      },
		      's': { // Thirty-second slash
		        // Drawn with canvas primitives
		        getWidth: function getWidth() {
		          return Flow.SLASH_NOTEHEAD_WIDTH;
		        },
		        position: 'B/4'
		      }
		    }
		  },
		  '64': {
		    common: {
		      beam_count: 4,
		      getWidth: function getWidth() {
		        var scale = arguments.length <= 0 || arguments[0] === undefined ? Flow.DEFAULT_NOTATION_FONT_SCALE : arguments[0];
		
		        return new _glyph.Glyph(this.code_head || 'vb', scale).getMetrics().width;
		      },
		
		      stem: true,
		      stem_offset: 0,
		      flag: true,
		      code_flag_upstem: 'va9',
		      code_flag_downstem: 'v58',
		      stem_up_extension: 13,
		      stem_down_extension: 13,
		      gracenote_stem_up_extension: -10,
		      gracenote_stem_down_extension: -10,
		      tabnote_stem_up_extension: 12,
		      tabnote_stem_down_extension: 9,
		      dot_shiftY: 0,
		      line_above: 0,
		      line_below: 0
		    },
		    type: {
		      'n': { // Sixty-fourth note
		        code_head: 'vb'
		      },
		      'h': { // Sixty-fourth harmonic
		        code_head: 'v22'
		      },
		      'm': { // Sixty-fourth muted
		        code_head: 'v3e'
		      },
		      'r': { // Sixty-fourth rest
		        code_head: 'v38',
		        stem: false,
		        flag: false,
		        rest: true,
		        position: 'B/4',
		        dot_shiftY: -1.5,
		        line_above: 2.0,
		        line_below: 3.0
		      },
		      's': { // Sixty-fourth slash
		        // Drawn with canvas primitives
		        getWidth: function getWidth() {
		          return Flow.SLASH_NOTEHEAD_WIDTH;
		        },
		        position: 'B/4'
		      }
		    }
		  },
		  '128': {
		    common: {
		      beam_count: 5,
		      getWidth: function getWidth() {
		        var scale = arguments.length <= 0 || arguments[0] === undefined ? Flow.DEFAULT_NOTATION_FONT_SCALE : arguments[0];
		
		        return new _glyph.Glyph(this.code_head || 'vb', scale).getMetrics().width;
		      },
		
		      stem: true,
		      stem_offset: 0,
		      flag: true,
		      code_flag_upstem: 'v9b',
		      code_flag_downstem: 'v30',
		      stem_up_extension: 22,
		      stem_down_extension: 22,
		      gracenote_stem_up_extension: -8,
		      gracenote_stem_down_extension: -8,
		      tabnote_stem_up_extension: 21,
		      tabnote_stem_down_extension: 18,
		      dot_shiftY: 0,
		      line_above: 0,
		      line_below: 0
		    },
		    type: {
		      'n': { // Hundred-twenty-eight note
		        code_head: 'vb'
		      },
		      'h': { // Hundred-twenty-eight harmonic
		        code_head: 'v22'
		      },
		      'm': { // Hundred-twenty-eight muted
		        code_head: 'v3e'
		      },
		      'r': { // Hundred-twenty-eight rest
		        code_head: 'vaa',
		        stem: false,
		        flag: false,
		        rest: true,
		        position: 'B/4',
		        dot_shiftY: 1.5,
		        line_above: 3.0,
		        line_below: 3.0
		      },
		      's': { // Hundred-twenty-eight rest
		        // Drawn with canvas primitives
		        getWidth: function getWidth() {
		          return Flow.SLASH_NOTEHEAD_WIDTH;
		        },
		        position: 'B/4'
		      }
		    }
		  }
		};
		
		// Some defaults
		Flow.TIME4_4 = {
		  num_beats: 4,
		  beat_value: 4,
		  resolution: Flow.RESOLUTION
		};
		exports.Flow = Flow;

	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Fraction = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// Fraction class that represents a rational number
		//
		// @author zz85
		// @author incompleteopus (modifications)
		
		/* eslint-disable no-underscore-dangle */
		
		var _vex = __webpack_require__(1);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var Fraction = function () {
		  _createClass(Fraction, null, [{
		    key: 'GCD',
		
		
		    /**
		     * GCD: Find greatest common divisor using Euclidean algorithm
		     */
		    value: function GCD(a, b) {
		      if (typeof a !== 'number' || typeof b !== 'number') {
		        throw new _vex.Vex.RERR('BadArgument', 'Invalid numbers: ' + a + ', ' + b);
		      }
		
		      var t = void 0;
		
		      while (b !== 0) {
		        t = b;
		        b = a % b;
		        a = t;
		      }
		
		      return a;
		    }
		
		    /**
		     * LCM: Lowest common multiple
		     */
		
		  }, {
		    key: 'LCM',
		    value: function LCM(a, b) {
		      return a * b / Fraction.GCD(a, b);
		    }
		
		    /**
		     * LCMM: Lowest common multiple for more than two numbers
		     */
		
		  }, {
		    key: 'LCMM',
		    value: function LCMM(args) {
		      if (args.length === 0) {
		        return 0;
		      } else if (args.length === 1) {
		        return args[0];
		      } else if (args.length === 2) {
		        return Fraction.LCM(args[0], args[1]);
		      } else {
		        var arg0 = args[0];
		        args.shift();
		        return Fraction.LCM(arg0, Fraction.LCMM(args));
		      }
		    }
		  }]);
		
		  function Fraction(numerator, denominator) {
		    _classCallCheck(this, Fraction);
		
		    this.set(numerator, denominator);
		  }
		
		  _createClass(Fraction, [{
		    key: 'set',
		    value: function set(numerator, denominator) {
		      this.numerator = numerator === undefined ? 1 : numerator;
		      this.denominator = denominator === undefined ? 1 : denominator;
		      return this;
		    }
		  }, {
		    key: 'value',
		    value: function value() {
		      return this.numerator / this.denominator;
		    }
		  }, {
		    key: 'simplify',
		    value: function simplify() {
		      var u = this.numerator;
		      var d = this.denominator;
		
		      var gcd = Fraction.GCD(u, d);
		      u /= gcd;
		      d /= gcd;
		
		      if (d < 0) {
		        d = -d;
		        u = -u;
		      }
		      return this.set(u, d);
		    }
		  }, {
		    key: 'add',
		    value: function add(param1, param2) {
		      var otherNumerator = void 0;
		      var otherDenominator = void 0;
		
		      if (param1 instanceof Fraction) {
		        otherNumerator = param1.numerator;
		        otherDenominator = param1.denominator;
		      } else {
		        if (param1 !== undefined) {
		          otherNumerator = param1;
		        } else {
		          otherNumerator = 0;
		        }
		
		        if (param2 !== undefined) {
		          otherDenominator = param2;
		        } else {
		          otherDenominator = 1;
		        }
		      }
		
		      var lcm = Fraction.LCM(this.denominator, otherDenominator);
		      var a = lcm / this.denominator;
		      var b = lcm / otherDenominator;
		
		      var u = this.numerator * a + otherNumerator * b;
		      return this.set(u, lcm);
		    }
		  }, {
		    key: 'subtract',
		    value: function subtract(param1, param2) {
		      var otherNumerator = void 0;
		      var otherDenominator = void 0;
		
		      if (param1 instanceof Fraction) {
		        otherNumerator = param1.numerator;
		        otherDenominator = param1.denominator;
		      } else {
		        if (param1 !== undefined) {
		          otherNumerator = param1;
		        } else {
		          otherNumerator = 0;
		        }
		
		        if (param2 !== undefined) {
		          otherDenominator = param2;
		        } else {
		          otherDenominator = 1;
		        }
		      }
		
		      var lcm = Fraction.LCM(this.denominator, otherDenominator);
		      var a = lcm / this.denominator;
		      var b = lcm / otherDenominator;
		
		      var u = this.numerator * a - otherNumerator * b;
		      return this.set(u, lcm);
		    }
		  }, {
		    key: 'multiply',
		    value: function multiply(param1, param2) {
		      var otherNumerator = void 0;
		      var otherDenominator = void 0;
		
		      if (param1 instanceof Fraction) {
		        otherNumerator = param1.numerator;
		        otherDenominator = param1.denominator;
		      } else {
		        if (param1 !== undefined) {
		          otherNumerator = param1;
		        } else {
		          otherNumerator = 1;
		        }
		
		        if (param2 !== undefined) {
		          otherDenominator = param2;
		        } else {
		          otherDenominator = 1;
		        }
		      }
		
		      return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);
		    }
		  }, {
		    key: 'divide',
		    value: function divide(param1, param2) {
		      var otherNumerator = void 0;
		      var otherDenominator = void 0;
		
		      if (param1 instanceof Fraction) {
		        otherNumerator = param1.numerator;
		        otherDenominator = param1.denominator;
		      } else {
		        if (param1 !== undefined) {
		          otherNumerator = param1;
		        } else {
		          otherNumerator = 1;
		        }
		
		        if (param2 !== undefined) {
		          otherDenominator = param2;
		        } else {
		          otherDenominator = 1;
		        }
		      }
		
		      return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);
		    }
		
		    // Simplifies both sides and checks if they are equal.
		
		  }, {
		    key: 'equals',
		    value: function equals(compare) {
		      var a = Fraction.__compareA.copy(compare).simplify();
		      var b = Fraction.__compareB.copy(this).simplify();
		
		      return a.numerator === b.numerator && a.denominator === b.denominator;
		    }
		
		    // Greater than operator.
		
		  }, {
		    key: 'greaterThan',
		    value: function greaterThan(compare) {
		      var a = Fraction.__compareB.copy(this);
		      a.subtract(compare);
		      return a.numerator > 0;
		    }
		
		    // Greater than or equals operator.
		
		  }, {
		    key: 'greaterThanEquals',
		    value: function greaterThanEquals(compare) {
		      var a = Fraction.__compareB.copy(this);
		      a.subtract(compare);
		      return a.numerator >= 0;
		    }
		
		    // Less than operator.
		
		  }, {
		    key: 'lessThan',
		    value: function lessThan(compare) {
		      return !this.greaterThanEquals(compare);
		    }
		
		    // Less than or equals operator.
		
		  }, {
		    key: 'lessThanEquals',
		    value: function lessThanEquals(compare) {
		      return !this.greaterThan(compare);
		    }
		
		    // Creates a new copy with this current values.
		
		  }, {
		    key: 'clone',
		    value: function clone() {
		      return new Fraction(this.numerator, this.denominator);
		    }
		
		    // Copies value of another Fraction into itself.
		
		  }, {
		    key: 'copy',
		    value: function copy(_copy) {
		      return this.set(_copy.numerator, _copy.denominator);
		    }
		
		    // Returns the integer component eg. (4/2) == 2
		
		  }, {
		    key: 'quotient',
		    value: function quotient() {
		      return Math.floor(this.numerator / this.denominator);
		    }
		
		    // Returns the fraction component when reduced to a mixed number
		
		  }, {
		    key: 'fraction',
		    value: function fraction() {
		      return this.numerator % this.denominator;
		    }
		
		    // Returns the absolute value
		
		  }, {
		    key: 'abs',
		    value: function abs() {
		      this.denominator = Math.abs(this.denominator);
		      this.numerator = Math.abs(this.numerator);
		      return this;
		    }
		
		    // Returns a raw string representation
		
		  }, {
		    key: 'toString',
		    value: function toString() {
		      return this.numerator + '/' + this.denominator;
		    }
		
		    // Returns a simplified string respresentation
		
		  }, {
		    key: 'toSimplifiedString',
		    value: function toSimplifiedString() {
		      return Fraction.__tmp.copy(this).simplify().toString();
		    }
		
		    // Returns string representation in mixed form
		
		  }, {
		    key: 'toMixedString',
		    value: function toMixedString() {
		      var s = '';
		      var q = this.quotient();
		      var f = Fraction.__tmp.copy(this);
		
		      if (q < 0) {
		        f.abs().fraction();
		      } else {
		        f.fraction();
		      }
		
		      if (q !== 0) {
		        s += q;
		
		        if (f.numerator !== 0) {
		          s += ' ' + f.toSimplifiedString();
		        }
		      } else {
		        if (f.numerator === 0) {
		          s = '0';
		        } else {
		          s = f.toSimplifiedString();
		        }
		      }
		
		      return s;
		    }
		
		    // Parses a fraction string
		
		  }, {
		    key: 'parse',
		    value: function parse(str) {
		      var i = str.split('/');
		      var n = parseInt(i[0], 10);
		      var d = i[1] ? parseInt(i[1], 10) : 1;
		
		      return this.set(n, d);
		    }
		  }]);
		
		  return Fraction;
		}();
		
		// Temporary cached objects
		
		
		exports.Fraction = Fraction;
		Fraction.__compareA = new Fraction();
		Fraction.__compareB = new Fraction();
		Fraction.__tmp = new Fraction();

	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Glyph = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		var _boundingboxcomputation = __webpack_require__(7);
		
		var _boundingbox = __webpack_require__(8);
		
		var _vexflow_font = __webpack_require__(9);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		
		function processOutline(outline, originX, originY, scaleX, scaleY, outlineFns) {
		  var command = void 0;
		  var x = void 0;
		  var y = void 0;
		  var i = 0;
		
		  function nextX() {
		    return originX + outline[i++] * scaleX;
		  }
		  function nextY() {
		    return originY + outline[i++] * scaleY;
		  }
		
		  while (i < outline.length) {
		    command = outline[i++];
		    switch (command) {
		      case 'm':
		      case 'l':
		        outlineFns[command](nextX(), nextY());
		        break;
		      case 'q':
		        x = nextX();
		        y = nextY();
		        outlineFns.q(nextX(), nextY(), x, y);
		        break;
		      case 'b':
		        x = nextX();
		        y = nextY();
		        outlineFns.b(nextX(), nextY(), nextX(), nextY(), x, y);
		        break;
		      default:
		        break;
		    }
		  }
		}
		
		var Glyph = exports.Glyph = function (_Element) {
		  _inherits(Glyph, _Element);
		
		  _createClass(Glyph, null, [{
		    key: 'loadMetrics',
		
		    /* Static methods used to implement loading / unloading of glyphs */
		    value: function loadMetrics(font, code, cache) {
		      var glyph = font.glyphs[code];
		      if (!glyph) {
		        throw new _vex.Vex.RERR('BadGlyph', 'Glyph ' + code + ' does not exist in font.');
		      }
		
		      var x_min = glyph.x_min;
		      var x_max = glyph.x_max;
		      var ha = glyph.ha;
		
		      var outline = void 0;
		
		      if (glyph.o) {
		        if (cache) {
		          if (glyph.cached_outline) {
		            outline = glyph.cached_outline;
		          } else {
		            outline = glyph.o.split(' ');
		            glyph.cached_outline = outline;
		          }
		        } else {
		          if (glyph.cached_outline) delete glyph.cached_outline;
		          outline = glyph.o.split(' ');
		        }
		
		        return {
		          x_min: x_min,
		          x_max: x_max,
		          ha: ha,
		          outline: outline
		        };
		      } else {
		        throw new _vex.Vex.RERR('BadGlyph', 'Glyph ' + code + ' has no outline defined.');
		      }
		    }
		
		    /**
		     * A quick and dirty static glyph renderer. Renders glyphs from the default
		     * font defined in Vex.Flow.Font.
		     *
		     * @param {!Object} ctx The canvas context.
		     * @param {number} x_pos X coordinate.
		     * @param {number} y_pos Y coordinate.
		     * @param {number} point The point size to use.
		     * @param {string} val The glyph code in Vex.Flow.Font.
		     * @param {boolean} nocache If set, disables caching of font outline.
		     */
		
		  }, {
		    key: 'renderGlyph',
		    value: function renderGlyph(ctx, x_pos, y_pos, point, val, nocache) {
		      var scale = point * 72.0 / (_vexflow_font.Font.resolution * 100.0);
		      var metrics = Glyph.loadMetrics(_vexflow_font.Font, val, !nocache);
		      Glyph.renderOutline(ctx, metrics.outline, scale, x_pos, y_pos);
		    }
		  }, {
		    key: 'renderOutline',
		    value: function renderOutline(ctx, outline, scale, x_pos, y_pos) {
		      ctx.beginPath();
		      ctx.moveTo(x_pos, y_pos);
		      processOutline(outline, x_pos, y_pos, scale, -scale, {
		        m: ctx.moveTo.bind(ctx),
		        l: ctx.lineTo.bind(ctx),
		        q: ctx.quadraticCurveTo.bind(ctx),
		        b: ctx.bezierCurveTo.bind(ctx)
		      });
		      ctx.fill();
		    }
		  }, {
		    key: 'getOutlineBoundingBox',
		    value: function getOutlineBoundingBox(outline, scale, x_pos, y_pos) {
		      var bboxComp = new _boundingboxcomputation.BoundingBoxComputation();
		
		      processOutline(outline, x_pos, y_pos, scale, -scale, {
		        m: bboxComp.addPoint.bind(bboxComp),
		        l: bboxComp.addPoint.bind(bboxComp),
		        q: bboxComp.addQuadraticCurve.bind(bboxComp),
		        b: bboxComp.addBezierCurve.bind(bboxComp)
		      });
		
		      return new _boundingbox.BoundingBox(bboxComp.x1, bboxComp.y1, bboxComp.width(), bboxComp.height());
		    }
		
		    /**
		     * @constructor
		     */
		
		  }]);
		
		  function Glyph(code, point, options) {
		    _classCallCheck(this, Glyph);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Glyph).call(this));
		
		    _this.setAttribute('type', 'Glyph');
		
		    _this.code = code;
		    _this.point = point;
		    _this.options = {
		      cache: true,
		      font: _vexflow_font.Font
		    };
		
		    _this.metrics = null;
		    _this.x_shift = 0;
		    _this.y_shift = 0;
		
		    _this.originShift = {
		      x: 0,
		      y: 0
		    };
		
		    if (options) {
		      _this.setOptions(options);
		    } else {
		      _this.reset();
		    }
		    return _this;
		  }
		
		  _createClass(Glyph, [{
		    key: 'setOptions',
		    value: function setOptions(options) {
		      _vex.Vex.Merge(this.options, options);
		      this.reset();
		    }
		  }, {
		    key: 'setPoint',
		    value: function setPoint(point) {
		      this.point = point;return this;
		    }
		  }, {
		    key: 'setStave',
		    value: function setStave(stave) {
		      this.stave = stave;return this;
		    }
		  }, {
		    key: 'setXShift',
		    value: function setXShift(x_shift) {
		      this.x_shift = x_shift;return this;
		    }
		  }, {
		    key: 'setYShift',
		    value: function setYShift(y_shift) {
		      this.y_shift = y_shift;return this;
		    }
		  }, {
		    key: 'reset',
		    value: function reset() {
		      this.scale = this.point * 72 / (this.options.font.resolution * 100);
		      this.metrics = Glyph.loadMetrics(this.options.font, this.code, this.options.cache);
		      this.bbox = Glyph.getOutlineBoundingBox(this.metrics.outline, this.scale, 0, 0);
		    }
		  }, {
		    key: 'getMetrics',
		    value: function getMetrics() {
		      if (!this.metrics) {
		        throw new _vex.Vex.RuntimeError('BadGlyph', 'Glyph ' + this.code + ' is not initialized.');
		      }
		
		      return {
		        x_min: this.metrics.x_min * this.scale,
		        x_max: this.metrics.x_max * this.scale,
		        width: this.bbox.getW(),
		        height: this.bbox.getH()
		      };
		    }
		  }, {
		    key: 'setOriginX',
		    value: function setOriginX(x) {
		      var bbox = this.bbox;
		
		      var originX = Math.abs(bbox.getX() / bbox.getW());
		      var xShift = (x - originX) * bbox.getW();
		      this.originShift.x = -xShift;
		    }
		  }, {
		    key: 'setOriginY',
		    value: function setOriginY(y) {
		      var bbox = this.bbox;
		
		      var originY = Math.abs(bbox.getY() / bbox.getH());
		      var yShift = (y - originY) * bbox.getH();
		      this.originShift.y = -yShift;
		    }
		  }, {
		    key: 'setOrigin',
		    value: function setOrigin(x, y) {
		      this.setOriginX(x);
		      this.setOriginY(y);
		    }
		  }, {
		    key: 'render',
		    value: function render(ctx, x, y) {
		      if (!this.metrics) {
		        throw new _vex.Vex.RuntimeError('BadGlyph', 'Glyph ' + this.code + ' is not initialized.');
		      }
		
		      var outline = this.metrics.outline;
		      var scale = this.scale;
		
		      this.setRendered();
		      Glyph.renderOutline(ctx, outline, scale, x + this.originShift.x, y + this.originShift.y);
		    }
		  }, {
		    key: 'renderToStave',
		    value: function renderToStave(x) {
		      this.checkContext();
		
		      if (!this.metrics) {
		        throw new _vex.Vex.RuntimeError('BadGlyph', 'Glyph ' + this.code + ' is not initialized.');
		      }
		
		      if (!this.stave) {
		        throw new _vex.Vex.RuntimeError('GlyphError', 'No valid stave');
		      }
		
		      var outline = this.metrics.outline;
		      var scale = this.scale;
		
		      this.setRendered();
		      Glyph.renderOutline(this.context, outline, scale, x + this.x_shift, this.stave.getYForGlyphs() + this.y_shift);
		    }
		  }]);

		  return Glyph;
		}(_element.Element);

	/***/ },
	/* 5 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Element = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// @author Mohit Cheppudira
		//
		// ## Description
		//
		// This file implements a generic base class for VexFlow, with implementations
		// of general functions and properties that can be inherited by all VexFlow elements.
		
		var _vex = __webpack_require__(1);
		
		var _registry = __webpack_require__(6);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var Element = exports.Element = function () {
		  _createClass(Element, null, [{
		    key: 'newID',
		    value: function newID() {
		      return 'auto' + Element.ID++;
		    }
		  }]);
		
		  function Element() {
		    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
		
		    var type = _ref.type;
		
		    _classCallCheck(this, Element);
		
		    this.attrs = {
		      id: Element.newID(),
		      el: null,
		      type: type || 'Base',
		      classes: {}
		    };
		
		    this.boundingBox = null;
		    this.context = null;
		    this.rendered = false;
		
		    // If a default registry exist, then register with it right away.
		    if (_registry.Registry.getDefaultRegistry()) {
		      _registry.Registry.getDefaultRegistry().register(this);
		    }
		  }
		
		  // An element can have multiple class labels.
		
		
		  _createClass(Element, [{
		    key: 'hasClass',
		    value: function hasClass(className) {
		      return this.attrs.classes[className] === true;
		    }
		  }, {
		    key: 'addClass',
		    value: function addClass(className) {
		      this.attrs.classes[className] = true;
		      if (this.registry) {
		        this.registry.onUpdate({
		          id: this.getAttribute('id'),
		          name: 'class',
		          value: className,
		          oldValue: null
		        });
		      }
		      return this;
		    }
		  }, {
		    key: 'removeClass',
		    value: function removeClass(className) {
		      delete this.attrs.classes[className];
		      if (this.registry) {
		        this.registry.onUpdate({
		          id: this.getAttribute('id'),
		          name: 'class',
		          value: null,
		          oldValue: className
		        });
		      }
		      return this;
		    }
		
		    // This is called by the registry after the element is registered.
		
		  }, {
		    key: 'onRegister',
		    value: function onRegister(registry) {
		      this.registry = registry;return this;
		    }
		  }, {
		    key: 'isRendered',
		    value: function isRendered() {
		      return this.rendered;
		    }
		  }, {
		    key: 'setRendered',
		    value: function setRendered() {
		      var rendered = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
		      this.rendered = rendered;return this;
		    }
		  }, {
		    key: 'getAttributes',
		    value: function getAttributes() {
		      return this.attrs;
		    }
		  }, {
		    key: 'getAttribute',
		    value: function getAttribute(name) {
		      return this.attrs[name];
		    }
		  }, {
		    key: 'setAttribute',
		    value: function setAttribute(name, value) {
		      var id = this.attrs.id;
		      var oldValue = this.attrs[name];
		      this.attrs[name] = value;
		      if (this.registry) {
		        // Register with old id to support id changes.
		        this.registry.onUpdate({ id: id, name: name, value: value, oldValue: oldValue });
		      }
		      return this;
		    }
		  }, {
		    key: 'getContext',
		    value: function getContext() {
		      return this.context;
		    }
		  }, {
		    key: 'setContext',
		    value: function setContext(context) {
		      this.context = context;return this;
		    }
		  }, {
		    key: 'getBoundingBox',
		    value: function getBoundingBox() {
		      return this.boundingBox;
		    }
		
		    // Validators
		
		  }, {
		    key: 'checkContext',
		    value: function checkContext() {
		      if (!this.context) {
		        throw new _vex.Vex.RERR('NoContext', 'No rendering context attached to instance');
		      }
		      return this.context;
		    }
		  }]);
		
		  return Element;
		}();
		
		Element.ID = 1000;

	/***/ },
	/* 6 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Registry = exports.X = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// @author Mohit Cheppudira
		//
		// ## Description
		//
		// This file implements a registry for VexFlow elements. It allows users
		// to track, query, and manage some subset of generated elements, and
		// dynamically get and set attributes.
		//
		// There are two ways to regiser with a registry:
		//
		// 1) Explicitly call `element.register(registry)`, or,
		// 2) Call `Registry.enableDefaultRegistry(registry)` when ready, and all future
		//    elements will automatically register with it.
		//
		// Once an element is registered, selected attributes are tracked and indexed by
		// the registry. This allows fast look up of elements by attributes like id, type,
		// and class.
		
		var _vex = __webpack_require__(1);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var X = exports.X = _vex.Vex.MakeException('RegistryError');
		
		function setIndexValue(index, name, value, id, elem) {
		  if (!index[name][value]) index[name][value] = {};
		  index[name][value][id] = elem;
		}
		
		var Registry = exports.Registry = function () {
		  _createClass(Registry, null, [{
		    key: 'INDEXES',
		    get: function get() {
		      return ['type'];
		    }
		  }]);
		
		  function Registry() {
		    _classCallCheck(this, Registry);
		
		    this.clear();
		  }
		
		  // If you call `enableDefaultRegistry`, any new elements will auto-register with
		  // the provided registry as soon as they're constructed.
		
		
		  _createClass(Registry, [{
		    key: 'clear',
		    value: function clear() {
		      // Indexes are represented as maps of maps (of maps). This allows
		      // for both multi-labeling (e.g., an element can have multiple classes)
		      // and efficient lookup.
		      this.index = {
		        id: {},
		        type: {},
		        class: {}
		      };
		      return this;
		    }
		
		    // Updates the indexes for element 'id'. If an element's attribute changes
		    // from A -> B, make sure to remove the element from A.
		
		  }, {
		    key: 'updateIndex',
		    value: function updateIndex(_ref) {
		      var id = _ref.id;
		      var name = _ref.name;
		      var value = _ref.value;
		      var oldValue = _ref.oldValue;
		
		      var elem = this.getElementById(id);
		      if (oldValue !== null && this.index[name][oldValue]) {
		        delete this.index[name][oldValue][id];
		      }
		      if (value !== null) {
		        setIndexValue(this.index, name, value, elem.getAttribute('id'), elem);
		      }
		    }
		
		    // Register element `elem` with this registry. This adds the element to its index and watches
		    // it for attribute changes.
		
		  }, {
		    key: 'register',
		    value: function register(elem, id) {
		      var _this = this;
		
		      id = id || elem.getAttribute('id');
		
		      if (!id) {
		        throw new X('Can\'t add element without `id` attribute to registry', elem);
		      }
		
		      // Manually add id to index, then update other indexes.
		      elem.setAttribute('id', id);
		      setIndexValue(this.index, 'id', id, id, elem);
		      Registry.INDEXES.forEach(function (name) {
		        _this.updateIndex({ id: id, name: name, value: elem.getAttribute(name), oldValue: null });
		      });
		      elem.onRegister(this);
		      return this;
		    }
		  }, {
		    key: 'getElementById',
		    value: function getElementById(id) {
		      return this.index.id[id] ? this.index.id[id][id] : null;
		    }
		  }, {
		    key: 'getElementsByAttribute',
		    value: function getElementsByAttribute(attrName, value) {
		      var index = this.index[attrName];
		      if (index && index[value]) {
		        return Object.keys(index[value]).map(function (i) {
		          return index[value][i];
		        });
		      } else {
		        return [];
		      }
		    }
		  }, {
		    key: 'getElementsByType',
		    value: function getElementsByType(type) {
		      return this.getElementsByAttribute('type', type);
		    }
		  }, {
		    key: 'getElementsByClass',
		    value: function getElementsByClass(className) {
		      return this.getElementsByAttribute('class', className);
		    }
		
		    // This is called by the element when an attribute value changes. If an indexed
		    // attribute changes, then update the local index.
		
		  }, {
		    key: 'onUpdate',
		    value: function onUpdate(_ref2) {
		      var id = _ref2.id;
		      var name = _ref2.name;
		      var value = _ref2.value;
		      var oldValue = _ref2.oldValue;
		
		      function includes(array, value) {
		        return array.filter(function (x) {
		          return x === value;
		        }).length > 0;
		      }
		
		      if (!includes(Registry.INDEXES.concat(['id', 'class']), name)) return this;
		      this.updateIndex({ id: id, name: name, value: value, oldValue: oldValue });
		      return this;
		    }
		  }], [{
		    key: 'enableDefaultRegistry',
		    value: function enableDefaultRegistry(registry) {
		      Registry.defaultRegistry = registry;
		    }
		  }, {
		    key: 'getDefaultRegistry',
		    value: function getDefaultRegistry() {
		      return Registry.defaultRegistry;
		    }
		  }, {
		    key: 'disableDefaultRegistry',
		    value: function disableDefaultRegistry() {
		      Registry.defaultRegistry = null;
		    }
		  }]);
		
		  return Registry;
		}();
		
		Registry.defaultRegistry = null;

	/***/ },
	/* 7 */
	/***/ function(module, exports) {

		"use strict";
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		// ## Description
		//
		// Object which computes metrics for a bounding box by continuously
		// taking canvas path commands
		
		// Warning: This file is merely a crutch to get bounding box information without
		// explicit metadata. This is likely to get deprecated following SMuFL support.
		//
		// taken from: https://github.com/gabelerner/canvg/blob/860e418aca67b9a41e858a223d74d375793ec364/ca
		// nvg.js#L449
		
		var BoundingBoxComputation = exports.BoundingBoxComputation = function () {
		  function BoundingBoxComputation(x1, y1, x2, y2) {
		    _classCallCheck(this, BoundingBoxComputation);
		
		    // pass in initial points if you want
		    this.x1 = Number.NaN;
		    this.y1 = Number.NaN;
		    this.x2 = Number.NaN;
		    this.y2 = Number.NaN;
		
		    this.addPoint(x1, y1);
		    this.addPoint(x2, y2);
		  }
		
		  _createClass(BoundingBoxComputation, [{
		    key: "width",
		    value: function width() {
		      return this.x2 - this.x1;
		    }
		  }, {
		    key: "height",
		    value: function height() {
		      return this.y2 - this.y1;
		    }
		  }, {
		    key: "addPoint",
		    value: function addPoint(x, y) {
		      if (x != null) {
		        if (isNaN(this.x1) || isNaN(this.x2)) {
		          this.x1 = x;
		          this.x2 = x;
		        }
		        if (x < this.x1) this.x1 = x;
		        if (x > this.x2) this.x2 = x;
		      }
		
		      if (y != null) {
		        if (isNaN(this.y1) || isNaN(this.y2)) {
		          this.y1 = y;
		          this.y2 = y;
		        }
		        if (y < this.y1) this.y1 = y;
		        if (y > this.y2) this.y2 = y;
		      }
		    }
		  }, {
		    key: "addX",
		    value: function addX(x) {
		      this.addPoint(x, null);
		    }
		  }, {
		    key: "addY",
		    value: function addY(y) {
		      this.addPoint(null, y);
		    }
		  }, {
		    key: "addQuadraticCurve",
		    value: function addQuadraticCurve(p0x, p0y, p1x, p1y, p2x, p2y) {
		      var cp1x = p0x + 2 / 3 * (p1x - p0x); // CP1 = QP0 + 2/3 *(QP1-QP0)
		      var cp1y = p0y + 2 / 3 * (p1y - p0y); // CP1 = QP0 + 2/3 *(QP1-QP0)
		      var cp2x = cp1x + 1 / 3 * (p2x - p0x); // CP2 = CP1 + 1/3 *(QP2-QP0)
		      var cp2y = cp1y + 1 / 3 * (p2y - p0y); // CP2 = CP1 + 1/3 *(QP2-QP0)
		      this.addBezierCurve(p0x, p0y, cp1x, cp1y, cp2x, cp2y, p2x, p2y);
		    }
		  }, {
		    key: "addBezierCurve",
		    value: function addBezierCurve(p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y) {
		      // from http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html
		      var p0 = [p0x, p0y];
		      var p1 = [p1x, p1y];
		      var p2 = [p2x, p2y];
		      var p3 = [p3x, p3y];
		      var i = void 0;
		
		      this.addPoint(p0[0], p0[1]);
		      this.addPoint(p3[0], p3[1]);
		
		      var f = function f(t, i) {
		        return Math.pow(1 - t, 3) * p0[i] + 3 * Math.pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * Math.pow(t, 2) * p2[i] + Math.pow(t, 3) * p3[i];
		      };
		
		      for (i = 0; i <= 1; i++) {
		        var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
		        var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
		        var c = 3 * p1[i] - 3 * p0[i];
		
		        if (a === 0) {
		          if (b === 0) continue;
		          var t = -c / b;
		          if (0 < t && t < 1) {
		            if (i === 0) this.addX(f(t, i));
		            if (i === 1) this.addY(f(t, i));
		          }
		          continue;
		        }
		
		        var b2ac = Math.pow(b, 2) - 4 * c * a;
		        if (b2ac < 0) continue;
		        var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);
		        if (0 < t1 && t1 < 1) {
		          if (i === 0) this.addX(f(t1, i));
		          if (i === 1) this.addY(f(t1, i));
		        }
		        var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);
		        if (0 < t2 && t2 < 1) {
		          if (i === 0) this.addX(f(t2, i));
		          if (i === 1) this.addY(f(t2, i));
		        }
		      }
		    }
		  }]);

		  return BoundingBoxComputation;
		}();

	/***/ },
	/* 8 */
	/***/ function(module, exports) {

		"use strict";
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		// Vex Music Notation
		// Mohit Muthanna <mohit@muthanna.com>
		//
		// Copyright Mohit Muthanna 2010
		
		// Bounding boxes for interactive notation
		
		var BoundingBox = exports.BoundingBox = function () {
		  _createClass(BoundingBox, null, [{
		    key: "copy",
		    value: function copy(that) {
		      return new BoundingBox(that.x, that.y, that.w, that.h);
		    }
		  }]);
		
		  function BoundingBox(x, y, w, h) {
		    _classCallCheck(this, BoundingBox);
		
		    this.x = x;
		    this.y = y;
		    this.w = w;
		    this.h = h;
		  }
		
		  _createClass(BoundingBox, [{
		    key: "getX",
		    value: function getX() {
		      return this.x;
		    }
		  }, {
		    key: "getY",
		    value: function getY() {
		      return this.y;
		    }
		  }, {
		    key: "getW",
		    value: function getW() {
		      return this.w;
		    }
		  }, {
		    key: "getH",
		    value: function getH() {
		      return this.h;
		    }
		  }, {
		    key: "setX",
		    value: function setX(x) {
		      this.x = x;return this;
		    }
		  }, {
		    key: "setY",
		    value: function setY(y) {
		      this.y = y;return this;
		    }
		  }, {
		    key: "setW",
		    value: function setW(w) {
		      this.w = w;return this;
		    }
		  }, {
		    key: "setH",
		    value: function setH(h) {
		      this.h = h;return this;
		    }
		  }, {
		    key: "move",
		    value: function move(x, y) {
		      this.x += x;this.y += y;
		    }
		  }, {
		    key: "clone",
		    value: function clone() {
		      return BoundingBox.copy(this);
		    }
		
		    // Merge my box with given box. Creates a bigger bounding box unless
		    // the given box is contained in this one.
		
		  }, {
		    key: "mergeWith",
		    value: function mergeWith(boundingBox, ctx) {
		      var that = boundingBox;
		
		      var new_x = this.x < that.x ? this.x : that.x;
		      var new_y = this.y < that.y ? this.y : that.y;
		      var new_w = this.x + this.w < that.x + that.w ? that.x + that.w - this.x : this.x + this.w - Math.min(this.x, that.x);
		      var new_h = this.y + this.h < that.y + that.h ? that.y + that.h - this.y : this.y + this.h - Math.min(this.y, that.y);
		
		      this.x = new_x;
		      this.y = new_y;
		      this.w = new_w;
		      this.h = new_h;
		
		      if (ctx) this.draw(ctx);
		      return this;
		    }
		  }, {
		    key: "draw",
		    value: function draw(ctx, x, y) {
		      if (!x) x = 0;
		      if (!y) y = 0;
		      ctx.rect(this.x + x, this.y + y, this.w, this.h);
		      ctx.stroke();
		    }
		  }]);

		  return BoundingBox;
		}();

	/***/ },
	/* 9 */
	/***/ function(module, exports) {

		"use strict";Object.defineProperty(exports,"__esModule",{value:true});var Font=exports.Font={"glyphs":{"v0":{"x_min":0,"x_max":514.5,"ha":525,"o":"m 236 648 b 246 648 238 648 242 648 b 288 646 261 648 283 648 b 472 513 364 634 428 587 b 514 347 502 464 514 413 b 462 163 514 272 499 217 b 257 44 409 83 333 44 b 50 163 181 44 103 83 b 0 347 14 217 0 272 b 40 513 0 413 12 464 b 236 648 87 591 155 638 m 277 614 b 253 616 273 616 261 616 b 242 616 247 616 243 616 b 170 499 193 609 181 589 b 159 348 163 446 159 398 b 166 222 159 308 161 266 b 201 91 174 138 183 106 b 257 76 215 81 235 76 b 311 91 277 76 299 81 b 347 222 330 106 338 138 b 353 348 352 266 353 308 b 344 499 353 398 351 446 b 277 614 333 587 322 606 m 257 -1 l 258 -1 l 255 -1 l 257 -1 m 257 673 l 258 673 l 255 673 l 257 673 "},"v1":{"x_min":-1.359375,"x_max":344.359375,"ha":351,"o":"m 126 637 l 129 638 l 198 638 l 266 638 l 269 635 b 274 631 272 634 273 632 l 277 627 l 277 395 b 279 156 277 230 277 161 b 329 88 281 123 295 106 b 344 69 341 81 344 79 b 337 55 344 62 343 59 l 333 54 l 197 54 l 61 54 l 58 55 b 50 69 53 59 50 62 b 65 88 50 79 53 81 b 80 97 72 91 74 93 b 117 156 103 113 112 129 b 117 345 117 161 117 222 l 117 528 l 100 503 l 38 406 b 14 383 24 384 23 383 b -1 398 5 383 -1 390 b 4 415 -1 403 1 409 b 16 437 5 416 10 426 l 72 539 l 100 596 b 121 632 119 631 119 631 b 126 637 122 634 125 635 m 171 -1 l 172 -1 l 170 -1 l 171 -1 m 171 673 l 172 673 l 170 673 l 171 673 "},"v2":{"x_min":-1.359375,"x_max":458.6875,"ha":468,"o":"m 197 648 b 216 648 201 648 208 648 b 258 646 232 648 253 648 b 419 546 333 637 393 599 b 432 489 428 528 432 509 b 356 342 432 440 405 384 b 235 278 322 313 288 295 b 69 170 166 256 107 217 b 69 169 69 170 69 169 b 69 169 69 169 69 169 b 74 173 69 169 72 170 b 209 222 112 204 163 222 b 310 195 247 222 274 215 b 371 179 332 184 352 179 b 396 181 379 179 387 179 b 428 202 409 184 423 194 b 442 212 431 209 436 212 b 458 197 450 212 458 206 b 441 148 458 190 449 165 b 299 44 409 84 353 44 b 288 45 295 44 292 44 b 250 61 274 45 268 49 b 122 99 212 86 164 99 b 73 91 104 99 88 97 b 28 63 53 84 34 72 b 14 54 25 56 20 54 b 1 62 9 54 4 56 l -1 65 l -1 79 b 0 99 -1 91 0 95 b 2 113 1 102 2 108 b 164 309 20 197 81 272 b 285 470 232 341 277 398 b 287 487 287 476 287 481 b 171 595 287 551 239 595 b 155 595 166 595 160 595 b 142 592 145 594 142 594 b 145 589 142 592 142 591 b 179 527 168 576 179 551 b 132 455 179 496 163 467 b 104 451 122 452 112 451 b 27 530 62 451 27 487 b 29 555 27 538 27 546 b 197 648 44 601 115 639 m 228 -1 l 230 -1 l 227 -1 l 228 -1 m 228 673 l 230 673 l 227 673 l 228 673 "},"v3":{"x_min":-1.359375,"x_max":409.6875,"ha":418,"o":"m 174 648 b 191 648 176 648 183 648 b 225 648 204 648 220 648 b 402 523 317 638 389 588 b 404 503 404 517 404 510 b 402 484 404 495 404 488 b 264 373 389 437 334 394 b 257 370 259 371 257 371 b 257 370 257 370 257 370 b 264 369 258 370 261 369 b 409 202 359 334 409 267 b 318 72 409 152 381 104 b 200 43 281 52 240 43 b 23 113 134 43 69 68 b 0 169 6 129 0 149 b 77 249 0 210 29 249 l 77 249 b 152 174 125 249 152 212 b 103 102 152 145 137 116 b 103 102 103 102 103 102 b 147 94 103 101 132 95 b 153 94 149 94 151 94 b 265 206 219 94 265 141 b 264 226 265 213 265 219 b 147 355 253 299 204 353 b 126 371 133 356 126 362 b 147 388 126 383 132 388 b 254 474 196 391 238 424 b 259 502 258 484 259 494 b 182 592 259 544 228 582 b 156 595 175 595 166 595 b 115 592 142 595 129 594 l 111 591 l 115 588 b 152 524 141 574 152 549 b 92 449 152 491 130 458 b 76 448 87 448 81 448 b -1 530 32 448 -1 488 b 20 581 -1 548 5 566 b 174 648 55 619 108 641 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 "},"v4":{"x_min":0,"x_max":468.21875,"ha":478,"o":"m 174 637 b 232 638 175 638 189 638 b 277 638 245 638 259 638 l 378 638 l 381 635 b 389 623 386 632 389 627 b 382 609 389 617 386 613 b 366 589 381 606 372 598 l 313 528 l 245 451 l 209 410 l 155 348 l 84 267 b 59 240 72 252 59 240 b 59 240 59 240 59 240 b 151 238 59 238 68 238 l 242 238 l 242 303 b 243 371 242 369 242 370 b 289 426 245 374 254 385 l 303 441 l 317 456 l 338 483 l 360 506 l 371 520 b 386 527 375 526 381 527 b 400 519 392 527 397 524 b 401 440 401 516 401 514 b 401 377 401 423 401 402 l 401 238 l 426 238 b 453 237 449 238 450 238 b 465 217 461 234 465 226 b 460 202 465 212 464 206 b 426 197 454 197 453 197 l 401 197 l 401 180 b 451 88 402 129 412 109 b 468 69 465 81 468 79 b 461 55 468 62 466 59 l 458 54 l 321 54 l 185 54 l 182 55 b 175 69 176 59 175 62 b 191 88 175 79 176 81 b 240 180 230 109 240 129 l 240 197 l 125 197 b 73 195 104 195 87 195 b 8 197 10 195 9 197 b 0 212 2 199 0 205 b 0 212 0 212 0 212 b 20 242 0 219 0 219 b 163 610 104 344 163 492 b 174 637 163 628 166 634 m 234 -1 l 235 -1 l 232 -1 l 234 -1 m 234 673 l 235 673 l 232 673 l 234 673 "},"v5":{"x_min":0,"x_max":409.6875,"ha":418,"o":"m 47 637 b 53 638 49 638 50 638 b 69 634 55 638 61 637 b 210 610 114 619 161 610 b 363 634 259 610 311 619 b 382 638 372 637 378 638 b 392 634 386 638 389 637 b 397 623 396 630 397 627 b 393 610 397 620 396 616 b 298 505 368 552 338 520 b 212 494 277 498 246 494 b 65 517 163 494 106 502 b 61 517 62 517 61 517 b 61 517 61 517 61 517 b 51 408 61 517 51 412 b 51 408 51 408 51 408 b 51 408 51 408 51 408 b 61 412 53 408 55 409 b 125 434 80 421 103 430 b 185 441 145 440 166 441 b 409 244 310 441 409 353 b 401 191 409 227 406 209 b 197 43 375 105 287 43 b 159 47 183 43 171 44 b 23 123 112 56 61 86 b 0 180 6 140 0 159 b 76 260 0 220 31 260 b 92 259 81 260 87 259 b 152 183 132 251 152 216 b 100 112 152 152 134 122 b 95 111 98 112 95 111 b 95 111 95 111 95 111 b 129 98 95 109 119 101 b 148 97 136 97 141 97 b 264 235 206 97 261 158 b 265 248 265 240 265 244 b 210 398 265 312 243 373 b 179 408 201 406 194 408 b 174 408 178 408 176 408 b 53 369 130 408 88 394 b 34 359 39 359 38 359 b 17 374 24 359 17 365 b 39 628 17 384 38 625 b 47 637 40 631 43 635 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 "},"v6":{"x_min":0,"x_max":475.03125,"ha":485,"o":"m 255 648 b 274 648 259 648 266 648 b 314 646 288 648 307 648 b 450 555 374 637 438 594 b 454 530 453 546 454 538 b 375 451 454 485 416 451 b 328 467 359 451 343 455 b 300 526 310 483 300 503 b 352 598 300 557 319 589 b 356 599 355 598 356 599 b 352 602 356 599 355 601 b 288 616 330 612 308 616 b 210 584 257 616 230 605 b 164 433 189 559 174 508 b 160 374 163 415 160 381 b 160 374 160 374 160 374 b 160 374 160 374 160 374 b 168 377 160 374 164 376 b 258 395 200 390 228 395 b 366 367 294 395 328 387 b 475 223 436 333 475 283 b 472 197 475 215 473 206 b 349 65 462 141 419 95 b 259 43 317 51 288 43 b 167 69 230 43 200 52 b 4 290 80 113 20 195 b 0 349 1 309 0 328 b 20 467 0 391 6 433 b 255 648 58 563 155 637 m 269 363 b 257 363 265 363 261 363 b 210 345 236 363 220 356 b 186 226 196 324 186 272 b 187 198 186 216 186 206 b 213 95 191 151 202 112 b 257 76 221 83 238 76 b 270 77 261 76 266 76 b 321 156 299 81 310 99 b 329 229 326 183 329 206 b 321 301 329 252 326 274 b 269 363 311 342 298 359 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 "},"v7":{"x_min":0,"x_max":442.359375,"ha":451,"o":"m 147 648 b 166 649 153 649 160 649 b 313 598 217 649 273 630 b 340 587 323 588 328 587 l 341 587 b 412 628 367 587 390 601 b 427 638 416 635 421 638 b 439 632 431 638 435 637 b 442 623 441 630 442 628 b 430 569 442 616 439 603 b 352 369 408 492 377 410 b 300 259 325 324 313 298 b 273 84 283 205 273 140 b 265 55 273 65 272 59 l 261 54 l 181 54 l 99 54 l 96 55 b 91 61 95 56 92 59 l 89 63 l 89 77 b 147 263 89 133 111 202 b 261 401 176 313 212 355 b 378 541 315 449 349 489 l 382 548 l 375 544 b 240 495 333 512 285 495 b 129 535 198 495 160 509 b 84 560 108 552 95 560 b 76 559 81 560 78 560 b 31 487 59 555 43 530 b 14 470 27 473 24 470 b 1 477 8 470 4 471 l 0 480 l 0 553 l 0 627 l 1 630 b 16 638 4 635 9 638 b 23 635 17 638 20 637 b 49 626 36 626 39 626 b 96 638 59 626 80 630 b 104 639 99 638 102 639 b 117 644 107 641 112 642 b 147 648 125 645 137 648 m 220 -1 l 221 -1 l 219 -1 l 220 -1 m 220 673 l 221 673 l 219 673 l 220 673 "},"v8":{"x_min":0,"x_max":488.640625,"ha":499,"o":"m 217 648 b 245 649 225 648 235 649 b 453 516 343 649 430 595 b 458 478 455 503 458 491 b 412 370 458 440 441 398 b 411 369 412 369 411 369 b 415 365 411 367 412 367 b 488 231 462 331 488 281 b 472 165 488 208 483 186 b 243 43 434 86 338 43 b 63 104 178 43 112 62 b 0 233 20 140 0 186 b 73 365 0 283 24 331 l 77 369 l 72 374 b 29 476 42 406 29 441 b 217 648 29 557 103 635 m 258 605 b 242 606 253 605 247 606 b 157 552 198 606 157 580 b 160 541 157 548 159 544 b 319 413 176 503 242 452 l 337 403 l 338 406 b 359 476 352 428 359 452 b 258 605 359 537 318 595 m 138 326 b 130 330 134 328 130 330 b 130 330 130 330 130 330 b 107 305 127 330 112 313 b 84 231 91 281 84 256 b 243 86 84 156 151 86 b 249 87 245 86 246 87 b 347 156 303 88 347 120 b 344 172 347 162 345 167 b 156 319 325 227 257 281 b 138 326 151 322 144 324 m 243 -1 l 245 -1 l 242 -1 l 243 -1 m 243 673 l 245 673 l 242 673 l 243 673 "},"v9":{"x_min":0,"x_max":475.03125,"ha":485,"o":"m 191 646 b 212 649 198 648 205 649 b 255 644 227 649 243 646 b 458 448 348 616 428 539 b 475 342 469 415 475 378 b 460 244 475 308 469 274 b 193 44 421 124 303 44 b 91 69 157 44 122 51 b 19 161 43 97 19 126 b 21 181 19 167 20 174 b 98 241 32 220 65 241 b 170 186 129 241 160 223 b 172 166 171 179 172 173 b 121 94 172 134 152 102 b 117 93 118 94 117 93 b 121 90 117 93 118 91 b 185 76 142 80 164 76 b 270 119 220 76 251 91 b 308 259 287 145 300 194 b 313 317 310 277 313 310 b 313 317 313 317 313 317 b 313 317 313 317 313 317 b 304 315 313 317 308 316 b 216 295 273 302 245 295 b 145 308 193 295 170 299 b 19 398 88 327 42 360 b 0 469 5 420 0 444 b 24 551 0 496 8 526 b 191 646 54 596 125 637 m 227 614 b 215 616 224 616 220 616 b 202 614 210 616 206 616 b 152 535 174 610 163 592 b 144 463 147 509 144 485 b 152 391 144 440 147 417 b 216 328 163 344 179 328 b 280 391 253 328 269 344 b 288 463 285 417 288 440 b 280 535 288 485 285 509 b 227 614 269 594 258 610 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 "},"va":{"x_min":-149.71875,"x_max":148.359375,"ha":151,"o":"m -8 -1 b -1 0 -5 -1 -4 0 b 16 -11 5 0 13 -4 b 83 -186 17 -12 47 -90 l 148 -358 l 148 -363 b 127 -385 148 -376 138 -385 b 112 -378 122 -385 118 -383 b 54 -226 110 -374 114 -385 b 0 -81 24 -147 0 -81 b -55 -226 -1 -81 -25 -147 b -114 -378 -115 -385 -111 -374 b -129 -385 -119 -383 -123 -385 b -149 -363 -140 -385 -149 -376 l -149 -358 l -84 -186 b -19 -11 -49 -90 -19 -12 b -8 -1 -17 -8 -12 -4 "},"vb":{"x_min":0,"x_max":428.75,"ha":438,"o":"m 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 "},"vc":{"x_min":0,"x_max":447.8125,"ha":457,"o":"m 0 86 l 0 173 l 223 173 l 447 173 l 447 86 l 447 0 l 223 0 l 0 0 l 0 86 "},"vd":{"x_min":0,"x_max":343,"ha":350,"o":"m 329 331 b 333 331 330 331 332 331 b 343 322 338 331 343 327 b 343 320 343 322 343 320 b 318 276 341 317 340 313 b 279 223 291 227 294 230 b 202 208 257 212 236 208 b 144 210 186 208 167 208 b 93 212 123 212 107 212 b 19 195 59 212 39 208 b 8 191 14 192 10 191 b 0 198 5 191 2 194 b 0 201 0 199 0 199 b 23 248 0 205 4 213 b 62 301 50 297 47 292 b 140 316 84 312 104 316 b 197 313 155 316 174 315 b 249 310 217 312 234 310 b 322 328 283 310 303 316 b 329 331 325 328 328 331 "},"ve":{"x_min":-390.640625,"x_max":389.28125,"ha":397,"o":"m -378 502 l -374 503 l 0 503 l 372 503 l 377 502 b 387 491 381 499 385 496 l 389 488 l 389 251 l 389 15 l 387 12 b 367 0 383 4 375 0 b 348 12 360 0 352 4 l 347 15 l 347 174 l 347 335 l 0 335 l -348 335 l -348 174 l -348 15 l -349 12 b -368 0 -353 4 -362 0 b -389 12 -377 0 -385 4 l -390 15 l -390 251 l -390 488 l -389 491 b -378 502 -386 496 -382 499 m -13 131 b -1 133 -9 133 -5 133 b 50 105 19 133 39 123 b 61 70 57 95 61 83 b 50 34 61 58 57 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -58 38 -62 55 b -13 131 -62 98 -44 124 "},"vf":{"x_min":0,"x_max":370.21875,"ha":378,"o":"m 0 0 l 0 277 l 61 277 l 122 277 l 122 0 l 122 -278 l 61 -278 l 0 -278 l 0 0 m 246 -1 l 246 277 l 308 277 l 370 277 l 370 -1 l 370 -278 l 308 -278 l 246 -278 l 246 -1 "},"v10":{"x_min":0,"x_max":559.421875,"ha":571,"o":"m 5 127 b 14 127 6 127 9 127 b 51 126 25 127 43 127 b 175 98 93 122 138 112 l 186 94 b 279 51 210 86 255 65 b 285 47 280 51 283 48 b 319 27 291 44 311 31 l 326 22 b 359 0 332 19 352 4 l 367 -6 b 371 -9 368 -6 370 -8 l 379 -15 b 387 -22 383 -18 386 -20 l 398 -30 l 411 -40 l 417 -47 l 427 -55 l 434 -61 b 441 -66 436 -62 439 -65 l 446 -72 l 453 -77 l 462 -87 b 558 -188 490 -113 549 -176 b 559 -195 559 -191 559 -194 b 548 -205 559 -201 555 -205 b 541 -204 547 -205 544 -205 b 534 -198 539 -201 536 -199 l 525 -191 b 481 -162 518 -187 490 -167 b 472 -155 477 -159 472 -156 b 468 -152 470 -155 469 -154 b 461 -149 466 -152 464 -151 b 428 -130 454 -145 441 -137 b 371 -99 413 -122 372 -99 b 363 -95 371 -99 367 -98 b 353 -91 357 -94 353 -91 b 348 -90 353 -91 352 -91 b 332 -81 343 -87 341 -86 b 27 -12 230 -37 127 -13 b 0 -5 4 -11 2 -11 b 0 58 0 -2 0 27 b 0 122 0 88 0 120 b 5 127 1 124 4 126 "},"v11":{"x_min":-155.171875,"x_max":153.8125,"ha":157,"o":"m -137 353 b -130 353 -136 353 -133 353 b -112 349 -125 353 -119 352 b -100 342 -110 347 -104 344 b 0 317 -69 326 -35 317 b 111 349 38 317 76 328 b 129 353 117 352 123 353 b 153 327 142 353 153 344 b 144 302 153 320 153 317 b 27 6 93 226 50 113 b 21 -13 24 -11 24 -11 b 0 -26 17 -22 8 -26 b -24 -12 -9 -26 -19 -22 b -28 5 -24 -9 -27 -2 b -145 302 -53 117 -95 224 b -155 327 -155 317 -155 320 b -137 353 -155 340 -148 349 "},"v12":{"x_min":0,"x_max":699.609375,"ha":714,"o":"m 0 0 l 0 563 l 65 563 l 132 563 l 132 0 l 132 -564 l 65 -564 l 0 -564 l 0 0 m 181 0 l 181 563 l 197 563 l 215 563 l 215 294 b 215 24 215 95 215 24 b 228 37 216 24 221 30 b 332 245 274 84 311 159 b 344 262 334 258 338 262 b 349 262 347 262 348 262 b 359 244 356 259 357 256 b 488 91 364 158 424 91 b 519 97 499 91 509 94 b 582 306 570 113 582 156 l 582 308 b 544 501 582 423 573 471 b 464 528 525 520 496 528 b 387 512 439 528 412 523 b 381 508 383 509 381 508 b 383 508 381 508 382 508 b 430 473 400 508 421 491 b 436 445 434 464 436 455 b 372 380 436 412 408 380 b 366 380 370 380 368 380 b 304 449 328 384 304 416 b 323 498 304 467 310 484 b 465 555 362 537 413 555 b 656 453 536 555 611 520 b 699 312 686 410 699 360 b 496 66 699 191 617 74 b 487 66 494 66 490 66 b 412 91 461 66 438 74 b 404 97 408 95 405 97 b 404 95 404 97 404 97 b 348 1 404 95 352 9 l 347 0 l 375 -49 b 405 -98 392 -76 404 -98 l 405 -98 b 415 -91 405 -97 409 -94 b 492 -68 438 -74 464 -68 b 598 -105 526 -68 564 -80 b 688 -238 641 -136 673 -184 b 699 -313 695 -263 699 -290 b 594 -516 699 -395 661 -469 b 465 -556 555 -542 510 -556 b 353 -523 426 -556 386 -545 b 304 -460 321 -501 307 -484 b 304 -451 304 -458 304 -453 b 372 -381 304 -410 337 -381 b 408 -392 383 -381 396 -384 b 436 -445 427 -405 436 -426 b 385 -508 436 -474 417 -503 l 379 -509 l 387 -513 b 464 -530 412 -524 438 -530 b 522 -517 485 -530 506 -526 b 579 -390 558 -501 574 -463 b 582 -299 582 -370 582 -334 b 581 -226 582 -272 582 -242 b 519 -98 575 -144 560 -112 b 488 -93 510 -95 499 -93 b 359 -245 424 -93 364 -158 b 345 -263 357 -258 355 -263 b 332 -244 337 -263 336 -260 b 220 -30 310 -155 268 -73 l 215 -24 l 215 -295 l 215 -564 l 197 -564 l 181 -564 l 181 0 "},"v13":{"x_min":-1.359375,"x_max":455.96875,"ha":465,"o":"m 352 541 b 357 542 353 542 355 542 b 377 530 364 542 372 537 l 378 526 l 378 394 l 379 262 l 404 266 b 436 270 420 269 430 270 b 450 265 443 270 446 269 b 455 220 455 259 455 260 l 455 208 l 455 161 l 454 156 b 411 140 449 147 447 147 b 378 133 393 137 379 134 b 378 68 378 133 378 106 b 378 22 378 54 378 38 l 379 -87 l 404 -83 b 436 -79 420 -80 430 -79 b 450 -84 443 -79 446 -80 b 455 -129 455 -90 455 -88 l 455 -141 l 455 -188 l 454 -192 b 413 -209 449 -202 447 -202 b 382 -215 398 -212 383 -215 l 378 -215 l 378 -345 l 378 -380 b 375 -485 378 -484 378 -480 b 357 -494 371 -491 364 -494 b 340 -485 351 -494 344 -491 b 336 -383 337 -480 336 -484 l 336 -349 l 336 -223 l 334 -223 b 291 -231 334 -223 314 -227 l 247 -240 l 247 -371 l 246 -503 l 245 -506 b 225 -519 242 -514 234 -519 b 206 -506 219 -519 210 -514 l 205 -503 l 205 -376 l 205 -248 l 160 -256 l 115 -265 l 115 -396 l 115 -527 l 114 -531 b 95 -544 110 -539 102 -544 b 76 -531 87 -544 78 -539 l 73 -527 l 73 -399 b 73 -273 73 -330 73 -273 b 49 -277 73 -273 61 -274 b 17 -281 32 -280 24 -281 b 4 -276 10 -281 8 -280 b -1 -234 0 -269 -1 -272 b 0 -219 -1 -229 0 -224 l 0 -170 l 1 -167 b 10 -158 2 -163 6 -159 b 49 -149 13 -156 16 -155 l 73 -145 l 73 -34 b 73 76 73 26 73 76 b 49 72 73 76 61 74 b 17 68 32 69 24 68 b 4 73 10 68 8 69 b -1 115 0 80 -1 77 b 0 130 -1 120 0 124 l 0 179 l 1 181 b 10 191 2 186 6 190 b 49 199 13 192 16 194 l 73 204 l 73 338 b 73 374 73 352 73 365 b 77 483 73 484 73 477 b 95 492 81 489 88 492 b 111 483 100 492 107 489 b 115 378 115 477 115 483 l 115 342 b 117 212 115 223 115 212 b 204 229 117 212 200 227 l 205 229 l 205 365 l 205 502 l 206 505 b 225 517 210 513 219 517 b 245 505 234 517 242 513 l 246 502 l 247 369 l 247 237 l 249 237 b 336 254 253 238 336 254 b 337 390 336 254 337 302 l 337 526 l 338 530 b 352 541 341 535 347 539 m 336 15 b 336 126 336 102 336 126 l 336 126 b 291 117 336 126 315 122 l 247 109 l 247 -1 l 247 -112 l 249 -112 b 336 -95 253 -111 336 -95 b 336 15 336 -95 336 -56 m 205 -120 b 205 -55 205 -120 205 -93 b 205 -9 205 -41 205 -24 l 205 101 l 160 93 l 115 84 l 115 -26 b 115 -83 115 -49 115 -69 b 117 -137 115 -133 115 -137 b 205 -120 118 -137 204 -120 "},"v14":{"x_min":-1.359375,"x_max":349.8125,"ha":357,"o":"m 230 287 b 243 287 234 287 238 287 b 266 285 251 287 261 287 b 349 180 319 274 349 227 b 307 95 349 149 336 117 b 208 63 280 74 245 63 b 84 106 166 63 122 79 b 76 113 80 111 77 113 b 76 113 76 113 76 113 b 132 -74 76 112 102 27 b 187 -272 179 -235 187 -263 b 186 -276 187 -273 186 -274 b 166 -288 183 -284 174 -288 b 148 -278 159 -288 152 -285 b -1 231 145 -273 -1 227 b 20 252 -1 244 9 252 b 36 244 25 252 32 249 b 40 234 38 242 39 238 b 167 112 63 174 112 127 l 174 111 l 170 113 b 142 181 152 133 142 158 b 230 287 142 230 176 277 "},"v15":{"x_min":-209.609375,"x_max":208.25,"ha":213,"o":"m -12 248 b -1 249 -9 249 -5 249 b 55 219 20 249 43 237 b 66 180 62 206 66 194 b 36 123 66 158 55 137 b 0 112 25 116 12 112 b -57 142 -21 112 -43 122 b -68 180 -63 154 -68 167 b -12 248 -68 212 -46 242 m -197 19 b 1 20 -194 19 -96 20 b 196 19 98 20 193 19 b 208 -1 204 15 208 6 b 202 -15 208 -5 206 -11 b 95 -22 197 -20 212 -22 b -1 -22 69 -22 38 -22 b -96 -22 -39 -22 -70 -22 b -204 -15 -213 -22 -198 -20 b -209 -1 -208 -11 -209 -5 b -197 19 -209 6 -205 15 "},"v16":{"x_min":-155.171875,"x_max":153.8125,"ha":157,"o":"m -137 353 b -129 355 -134 353 -132 355 b -102 333 -118 355 -111 348 b -8 129 -63 273 -32 205 b 0 106 -4 116 -1 106 b 6 129 0 106 2 116 b 100 333 31 205 62 273 b 114 349 107 344 108 347 b 127 353 118 352 123 353 b 153 327 141 353 153 344 b 144 302 153 320 153 317 b 29 18 96 227 54 123 l 25 -4 b -1 -26 21 -19 13 -26 b -27 -4 -14 -26 -23 -19 l -31 18 b -145 302 -55 123 -98 227 b -155 327 -155 317 -155 320 b -137 353 -155 340 -148 349 "},"v17":{"x_min":0,"x_max":102.078125,"ha":104,"o":"m 42 104 b 47 104 43 104 46 104 b 66 102 54 104 62 102 b 102 51 89 94 102 72 b 76 5 102 33 93 15 b 51 -1 68 1 59 -1 b 10 18 35 -1 20 5 b 0 51 2 27 0 38 b 42 104 0 76 16 99 "},"v18":{"x_min":0,"x_max":323.9375,"ha":331,"o":"m 217 535 b 225 537 220 537 221 537 b 245 524 235 537 242 533 l 246 521 l 247 390 l 247 258 l 273 265 b 306 270 288 269 299 270 b 322 259 315 270 319 267 b 323 208 323 256 323 233 b 322 158 323 184 323 159 b 288 140 318 148 315 147 b 247 130 254 131 247 130 b 247 65 247 130 247 104 b 247 20 247 51 247 36 l 247 -88 l 273 -81 b 306 -76 289 -77 299 -76 b 318 -81 311 -76 315 -77 b 323 -123 323 -87 323 -86 l 323 -138 l 323 -154 b 318 -195 323 -191 323 -190 b 269 -210 314 -199 315 -199 b 249 -216 259 -213 250 -216 l 247 -216 l 247 -349 l 246 -483 l 245 -487 b 225 -499 242 -495 234 -499 b 206 -487 219 -499 210 -495 l 205 -483 l 205 -355 l 205 -227 l 204 -227 l 181 -233 l 138 -244 b 117 -249 127 -247 117 -249 b 115 -385 115 -249 115 -256 l 115 -523 l 114 -526 b 95 -538 110 -534 102 -538 b 74 -526 87 -538 78 -534 l 73 -523 l 73 -391 b 72 -260 73 -269 73 -260 b 72 -260 72 -260 72 -260 b 19 -273 61 -263 23 -273 b 0 -260 10 -273 4 -267 b 0 -209 0 -256 0 -256 l 0 -162 l 1 -158 b 61 -134 5 -148 5 -148 l 73 -131 l 73 -22 b 72 86 73 79 73 86 b 72 86 72 86 72 86 b 19 74 61 83 23 74 b 0 86 10 74 4 79 b 0 137 0 90 0 90 l 0 184 l 1 188 b 61 212 5 198 5 198 l 73 215 l 73 348 l 73 481 l 74 485 b 95 498 78 492 87 498 b 103 495 98 498 100 496 b 114 485 107 494 111 489 l 115 481 l 115 353 l 115 226 l 121 226 b 159 235 123 227 141 231 l 198 247 l 205 248 l 205 384 l 205 521 l 206 524 b 217 535 209 528 212 533 m 205 9 b 205 119 205 70 205 119 l 205 119 b 182 113 204 119 194 116 l 138 102 b 117 97 127 99 117 97 b 115 -12 115 97 115 91 l 115 -122 l 121 -120 b 159 -111 123 -119 141 -115 l 198 -101 l 205 -98 l 205 9 "},"v19":{"x_min":-10.890625,"x_max":366.140625,"ha":363,"o":"m 98 172 b 110 173 102 173 106 173 b 210 120 142 173 172 156 b 281 66 235 95 264 74 b 294 63 285 63 289 63 b 341 87 307 63 322 72 b 356 97 348 94 352 97 b 363 93 359 97 362 95 b 366 87 364 90 366 88 b 355 72 366 83 363 79 b 268 2 317 31 288 9 b 243 -1 259 0 251 -1 b 144 52 212 -1 181 16 b 72 106 119 77 91 98 b 61 109 69 108 65 109 b 13 84 47 109 31 101 b 0 76 5 77 2 76 b -10 86 -6 76 -10 80 b -10 88 -10 87 -10 88 b 62 158 -9 95 43 145 b 98 172 73 165 87 170 "},"v1a":{"x_min":-149.71875,"x_max":148.359375,"ha":151,"o":"m -9 151 b -1 152 -6 151 -2 152 b 1 152 0 152 0 152 l 9 151 b 144 37 72 148 127 99 b 148 -62 148 19 148 15 b 148 -111 148 -76 148 -93 l 148 -216 l 147 -219 b 127 -231 144 -227 136 -231 b 108 -219 119 -231 112 -227 l 107 -216 l 107 -104 b 103 26 106 18 107 12 b -1 109 89 76 46 109 b -38 102 -13 109 -25 106 b -104 27 -70 90 -96 62 b -108 -101 -108 15 -108 22 l -108 -216 l -110 -219 b -129 -231 -114 -227 -122 -231 b -148 -219 -137 -231 -145 -227 l -149 -216 l -149 -99 b -149 -63 -149 -87 -149 -74 b -145 37 -149 26 -149 20 b -9 151 -130 101 -74 148 "},"v1b":{"x_min":0,"x_max":559.421875,"ha":571,"o":"m 544 204 b 548 204 545 204 547 204 b 559 194 555 204 559 199 b 559 190 559 192 559 191 b 530 156 559 188 556 184 b 462 86 510 134 481 104 b 453 76 458 81 454 77 l 446 70 l 441 65 b 434 59 439 63 436 61 l 427 54 b 409 37 426 51 416 44 b 392 23 398 29 394 26 b 387 19 389 22 387 20 b 379 13 386 19 383 16 l 371 8 l 367 5 l 359 -1 l 337 -16 b 285 -48 319 -29 298 -41 l 279 -52 b 186 -95 255 -66 210 -87 l 175 -99 b 23 -129 127 -117 68 -129 b 17 -129 20 -129 19 -129 b 1 -123 2 -129 2 -129 b 0 -49 0 -122 0 -83 b 0 4 0 -22 0 1 b 27 11 2 9 4 9 b 185 31 78 12 145 20 b 198 34 186 31 193 33 b 314 73 234 44 277 58 b 349 88 328 79 340 84 b 353 90 352 90 353 90 b 363 94 353 90 357 93 b 371 98 367 97 371 98 b 428 129 372 98 413 120 b 461 148 441 136 454 144 b 468 151 464 149 466 151 b 472 154 469 152 470 154 b 481 161 473 155 477 158 b 525 190 490 166 518 186 l 534 197 b 540 201 536 198 539 199 b 544 204 541 202 544 204 "},"v1c":{"x_min":0,"x_max":326.671875,"ha":333,"o":"m 10 460 b 20 462 13 462 14 462 b 39 449 28 462 35 458 l 40 446 l 40 326 b 40 205 40 259 40 205 b 127 227 40 205 80 215 b 220 249 196 244 213 249 b 227 247 224 249 225 248 b 238 237 231 245 235 241 l 239 233 l 239 -105 b 239 -262 239 -167 239 -219 b 238 -448 239 -416 239 -445 b 238 -451 238 -449 238 -451 b 238 -452 238 -452 238 -452 b 243 -451 239 -452 240 -451 b 298 -431 262 -448 280 -441 b 308 -427 300 -428 304 -427 b 326 -446 318 -427 326 -435 l 326 -446 l 326 -452 l 321 -462 b 238 -674 283 -520 253 -599 b 219 -695 234 -689 230 -695 b 197 -670 206 -695 202 -689 b 115 -462 179 -591 152 -520 l 110 -452 l 110 -446 l 110 -446 b 127 -427 110 -435 118 -427 b 138 -431 130 -427 134 -428 b 193 -451 155 -441 172 -448 b 198 -452 196 -452 197 -452 b 198 -451 198 -452 198 -452 b 198 -448 198 -451 198 -449 b 197 -323 197 -445 197 -426 b 197 -201 197 -247 197 -201 b 110 -223 196 -201 157 -210 b 17 -245 42 -240 24 -245 b 10 -242 13 -245 13 -244 b 0 -233 6 -241 2 -237 l 0 -230 l 0 108 l 0 446 l 0 449 b 10 460 2 453 6 458 m 197 22 b 197 70 197 41 197 58 b 196 116 197 113 197 116 l 196 116 b 118 97 196 116 160 106 l 40 77 l 40 -18 b 40 -112 40 -69 40 -112 l 119 -93 l 197 -73 l 197 22 "},"v1d":{"x_min":0,"x_max":619.3125,"ha":632,"o":"m 274 184 b 307 186 285 186 296 186 b 616 22 465 186 597 116 b 619 -1 617 13 619 5 b 308 -187 619 -104 483 -187 b 0 -1 133 -187 0 -102 b 5 36 0 11 1 23 b 274 184 29 115 141 176 m 289 161 b 272 162 284 162 277 162 b 171 41 209 162 171 108 b 205 -73 171 5 182 -34 b 345 -163 243 -133 298 -163 b 436 -98 385 -163 420 -142 b 446 -43 443 -80 446 -62 b 289 161 446 47 377 147 "},"v1e":{"x_min":-402.890625,"x_max":401.53125,"ha":410,"o":"m -219 173 b -213 174 -217 174 -215 174 b -202 173 -209 174 -205 173 b -114 86 -200 172 -179 151 b -28 0 -66 37 -28 0 b 40 84 -28 0 2 37 b 117 174 111 173 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b -42 -86 27 0 -4 -38 b -118 -174 -112 -174 -111 -173 b -123 -176 -119 -176 -121 -176 b -133 -174 -126 -176 -130 -174 b -296 -12 -136 -173 -172 -137 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 172 -398 -43 -228 167 b -219 173 -223 172 -220 173 "},"v1f":{"x_min":-340.28125,"x_max":338.921875,"ha":346,"o":"m -32 520 b -29 521 -31 520 -31 521 b -23 519 -27 521 -24 520 b -20 513 -21 517 -20 516 b -21 506 -20 512 -20 509 b -31 474 -23 502 -27 488 l -53 402 l -66 352 l -68 349 l -57 349 b -32 351 -51 349 -40 351 b 123 370 19 352 74 359 b 137 371 127 370 133 371 b 170 356 152 371 164 366 b 171 355 170 355 170 355 b 216 366 174 355 183 358 b 280 378 268 377 266 377 b 287 378 283 378 284 378 b 332 349 307 378 322 369 b 338 319 336 341 338 330 b 332 301 338 310 336 302 b 242 280 329 299 246 280 b 242 280 242 280 242 280 b 235 288 236 280 235 283 b 235 292 235 290 235 291 b 236 302 236 297 236 299 b 220 337 236 316 230 330 l 216 340 l 210 335 b 159 276 189 322 172 301 b 118 149 152 265 156 274 b 81 34 84 36 85 36 b -8 13 78 33 -4 13 b -8 13 -8 13 -8 13 b -14 20 -12 15 -14 15 b -8 44 -14 24 -12 31 b -2 66 -5 55 -2 65 b -2 66 -2 66 -2 66 l -2 66 b -43 41 -2 66 -21 55 b -114 4 -98 8 -98 8 b -144 0 -123 0 -134 0 b -242 99 -197 0 -242 43 b -242 109 -242 102 -242 105 b -212 219 -240 122 -242 116 b -185 312 -197 270 -185 312 l -185 312 b -189 312 -185 312 -186 312 b -259 312 -200 312 -227 312 b -321 310 -291 312 -310 310 b -334 312 -330 310 -334 312 b -340 319 -338 313 -340 316 b -336 326 -340 322 -338 324 b -291 337 -334 326 -314 331 l -247 347 l -210 348 b -172 348 -190 348 -172 348 b -168 363 -172 348 -171 355 b -145 442 -151 424 -145 441 b -133 452 -144 444 -140 446 l -77 489 b -32 520 -53 506 -32 520 m 57 334 b 53 335 55 335 54 335 b 44 334 50 335 49 335 b -70 316 8 326 -28 320 b -78 309 -78 316 -78 316 b -108 202 -80 305 -88 274 b -141 81 -136 112 -141 93 b -140 74 -141 79 -141 77 b -117 49 -137 59 -127 49 b -107 52 -114 49 -110 51 b 16 127 -106 54 14 126 b 42 217 16 127 42 215 b 49 241 42 222 44 229 b 73 320 53 251 73 317 b 57 334 73 327 65 333 "},"v20":{"x_min":-571.671875,"x_max":570.3125,"ha":582,"o":"m -559 351 b -551 352 -556 352 -553 352 b -530 338 -543 352 -533 348 b -529 169 -530 337 -529 291 l -529 1 l -507 27 l -441 112 b -382 174 -394 169 -390 174 b -378 174 -381 174 -379 174 b -281 86 -370 174 -375 179 b -196 0 -234 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 279 172 b 289 174 285 174 288 174 b 300 173 294 174 298 173 b 462 11 303 172 340 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 375 -176 371 -176 b 280 -87 367 -173 347 -152 b 194 0 234 -38 194 0 b 126 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 44 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -140 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -288 -176 b -300 -174 -294 -176 -298 -174 b -464 -11 -303 -173 -374 -102 l -476 0 l -506 -37 b -539 -76 -528 -65 -537 -74 b -551 -80 -543 -79 -547 -80 b -570 -68 -558 -80 -566 -76 l -571 -65 l -571 136 b -570 340 -571 331 -571 337 b -559 351 -568 344 -564 348 "},"v21":{"x_min":-149.71875,"x_max":148.359375,"ha":151,"o":"m -138 229 b -129 230 -136 230 -133 230 b -110 217 -121 230 -114 226 l -108 215 l -108 99 b -104 -29 -108 -23 -108 -16 b -38 -104 -96 -63 -70 -91 b -1 -111 -25 -108 -13 -111 b 103 -27 46 -111 89 -77 b 107 102 107 -13 106 -19 l 107 215 l 108 217 b 127 230 112 226 119 230 b 137 229 130 230 134 230 b 147 217 141 226 145 223 l 148 215 l 148 109 b 148 63 148 91 148 76 b 147 -24 148 -1 148 -13 b -1 -154 134 -101 70 -154 b -38 -148 -13 -154 -25 -151 b -145 -38 -91 -134 -133 -93 b -149 62 -149 -22 -149 -27 b -149 98 -149 73 -149 86 l -149 215 l -148 217 b -138 229 -147 223 -142 226 "},"v22":{"x_min":0,"x_max":432.828125,"ha":442,"o":"m 209 186 b 213 187 210 187 212 187 b 216 187 215 187 216 187 b 224 174 216 186 220 180 b 420 -1 269 105 338 43 b 432 -12 431 -8 432 -9 b 421 -23 432 -15 432 -16 b 228 -180 345 -70 264 -137 b 219 -188 221 -188 221 -188 l 219 -188 b 208 -177 215 -188 215 -188 b 10 1 163 -106 93 -44 b 0 11 0 6 0 8 b 10 22 0 13 0 15 b 202 179 87 69 167 136 b 209 186 206 183 209 186 "},"v23":{"x_min":0,"x_max":133.390625,"ha":136,"o":"m 54 66 b 65 68 58 68 61 68 b 122 37 88 68 110 56 b 133 -1 130 26 133 12 b 104 -58 133 -23 123 -44 b 66 -69 92 -65 78 -69 b 10 -38 44 -69 23 -58 b 0 -1 2 -27 0 -13 b 54 66 0 30 20 61 "},"v24":{"x_min":-627.46875,"x_max":626.109375,"ha":639,"o":"m -69 173 b -53 174 -62 174 -58 174 b -42 172 -49 174 -44 174 b -28 149 -32 166 -28 158 b -42 126 -28 140 -32 131 b -231 73 -44 124 -29 129 l -371 34 l -469 8 b -499 0 -485 2 -499 0 b -469 -9 -499 -1 -485 -4 l -371 -36 l -231 -74 b -40 -129 -21 -131 -44 -124 b -28 -151 -32 -133 -28 -141 b -40 -172 -28 -159 -32 -167 b -54 -176 -44 -174 -49 -176 b -69 -174 -58 -176 -62 -176 l -288 -113 l -552 -41 b -616 -22 -619 -23 -611 -24 b -627 0 -623 -18 -627 -9 b -616 20 -627 8 -623 16 b -615 22 -615 22 -615 22 b -615 22 -615 22 -615 22 b -288 112 -615 23 -598 27 l -69 173 m 44 174 b 51 174 47 174 49 174 b 68 173 55 174 61 174 l 287 112 l 551 40 b 615 20 617 22 609 23 b 626 0 622 16 626 8 b 615 -22 626 -9 622 -18 b 613 -23 613 -23 613 -23 b 613 -23 613 -23 613 -23 b 287 -113 613 -24 597 -29 l 68 -174 b 53 -176 61 -176 57 -176 b 39 -172 47 -176 43 -174 b 27 -151 31 -167 27 -159 b 39 -129 27 -141 31 -133 b 230 -74 43 -124 20 -131 l 370 -36 l 468 -9 b 498 0 484 -4 498 -1 b 468 8 498 0 484 2 l 370 34 l 230 73 b 40 126 28 129 43 124 b 27 149 31 131 27 140 b 44 174 27 161 34 170 "},"v25":{"x_min":0,"x_max":318.5,"ha":325,"o":"m 20 376 b 167 377 23 377 96 377 b 296 376 231 377 294 377 b 318 347 311 371 318 359 b 296 316 318 333 311 320 b 159 315 294 315 227 315 b 21 316 91 315 24 315 b 0 345 6 320 0 333 b 20 376 0 359 6 371 "},"v26":{"x_min":-21.78125,"x_max":483.1875,"ha":493,"o":"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 179 164 199 187 192 l 210 176 l 210 396 l 210 617 l 212 621 b 231 632 216 628 223 632 b 250 620 239 632 247 628 b 251 383 251 616 251 616 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 "},"v27":{"x_min":0,"x_max":432.828125,"ha":442,"o":"m 208 184 b 213 187 209 186 212 187 b 224 176 217 187 221 183 b 245 147 225 172 235 159 b 419 -1 288 90 347 38 b 431 -8 424 -4 431 -8 b 432 -12 432 -9 432 -11 b 430 -18 432 -13 432 -16 b 364 -61 424 -20 383 -47 b 225 -183 307 -102 250 -152 b 223 -187 224 -184 223 -187 b 220 -188 221 -188 220 -188 b 208 -176 216 -188 210 -184 b 187 -148 205 -173 197 -159 b 12 0 144 -90 84 -38 b 0 11 4 5 0 8 b 16 24 0 13 4 18 b 183 158 83 69 141 115 b 208 184 194 169 198 173 m 183 105 b 176 113 181 109 176 113 b 172 109 176 113 175 112 b 92 45 149 90 117 62 l 88 41 l 102 31 b 247 -105 160 -6 210 -55 l 254 -115 l 257 -112 l 269 -102 b 340 -45 287 -87 319 -61 l 344 -43 l 330 -33 b 183 105 272 6 221 54 "},"v28":{"x_min":-73.5,"x_max":72.140625,"ha":74,"o":"m -72 252 l -73 254 l 0 254 l 72 254 l 70 252 b 0 -1 70 248 0 -1 b -72 252 -1 -1 -72 248 "},"v29":{"x_min":-590.71875,"x_max":589.359375,"ha":601,"o":"m 175 273 b 182 274 178 273 181 274 b 202 262 190 274 198 269 b 204 158 204 259 204 259 l 204 56 l 250 112 b 303 174 296 172 298 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 208 -6 213 0 210 -2 l 204 -12 l 204 -147 b 204 -210 204 -173 204 -194 b 198 -292 204 -297 204 -287 b 183 -299 194 -297 189 -299 b 164 -287 175 -299 167 -295 b 163 -174 163 -284 163 -284 l 161 -63 l 119 -117 b 65 -176 76 -170 73 -176 b 61 -176 63 -176 62 -176 b -35 -87 51 -174 57 -180 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -363 174 -374 170 -371 174 b -359 174 -362 174 -360 174 b -262 86 -351 174 -356 179 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 147 11 -13 172 35 123 l 157 -1 l 160 1 l 163 4 l 163 130 b 164 260 163 256 163 258 b 175 273 166 266 170 270 "},"v2a":{"x_min":-21.78125,"x_max":366.140625,"ha":374,"o":"m 276 1378 b 284 1379 279 1379 281 1379 b 306 1360 292 1379 298 1374 b 352 1247 326 1326 343 1286 b 366 1139 362 1213 366 1175 b 347 1009 366 1093 359 1049 l 344 1002 l 347 992 b 352 971 348 986 351 977 b 366 863 362 936 366 899 b 347 732 366 818 359 773 l 344 725 l 347 716 b 352 695 348 710 351 700 b 366 588 362 659 366 623 b 223 262 366 464 314 345 b 189 233 212 252 212 252 b 35 76 126 183 73 129 b -1 16 20 56 2 27 b -19 4 -4 9 -12 4 l -21 4 l -21 137 l -21 270 l -17 270 b 186 344 59 281 134 308 b 319 606 270 399 319 499 b 317 650 319 620 319 635 l 315 659 l 314 655 b 223 537 288 607 258 570 b 189 509 212 528 212 528 b 35 352 126 459 73 405 b -1 292 20 333 2 303 b -19 280 -4 285 -12 280 l -21 280 l -21 413 l -21 546 l -17 546 b 186 620 59 557 134 584 b 319 882 270 675 319 775 b 317 925 319 896 319 911 l 315 935 l 314 931 b 223 813 288 884 258 846 b 189 785 212 805 212 805 b 35 628 126 735 73 681 b -1 569 20 609 2 580 b -19 556 -4 562 -12 556 l -21 556 l -21 689 l -21 823 l -17 823 b 202 907 68 835 152 867 b 319 1157 280 968 319 1061 b 270 1338 319 1218 303 1281 b 262 1358 264 1349 262 1353 b 262 1364 262 1360 262 1363 b 276 1378 265 1371 269 1376 "},"v2b":{"x_min":0,"x_max":386.5625,"ha":394,"o":"m 0 0 l 0 347 l 193 347 l 386 347 l 386 0 l 386 -348 l 193 -348 l 0 -348 l 0 0 "},"v2c":{"x_min":-597.53125,"x_max":596.171875,"ha":608,"o":"m -413 173 b -408 174 -412 174 -409 174 b -397 173 -404 174 -400 173 b -308 86 -394 172 -374 151 b -223 0 -261 37 -223 0 b -153 84 -223 0 -191 37 b -77 174 -83 173 -84 172 b -72 174 -76 174 -74 174 b -62 173 -68 174 -63 173 b 25 86 -59 172 -39 151 b 112 0 73 37 111 0 b 181 84 112 0 144 37 b 257 174 251 173 251 172 b 262 174 258 174 261 174 b 273 173 266 174 270 173 b 436 9 276 172 347 101 l 447 -1 l 477 36 b 522 79 511 79 513 79 l 522 79 b 552 51 533 79 539 73 b 596 -112 582 6 596 -51 b 567 -262 596 -161 586 -213 b 539 -322 558 -287 544 -316 b 524 -327 534 -326 529 -327 b 504 -315 515 -327 507 -323 b 503 -308 503 -312 503 -309 b 511 -285 503 -302 504 -297 b 555 -113 540 -227 555 -169 b 544 -34 555 -86 551 -59 b 522 19 540 -16 530 8 l 521 22 l 481 -26 l 405 -122 b 353 -176 366 -172 362 -176 b 349 -176 352 -176 351 -176 b 253 -87 341 -176 347 -180 b 167 0 206 -38 167 0 b 99 -86 167 0 136 -38 b 21 -174 27 -174 28 -173 b 17 -176 20 -176 19 -176 b 6 -174 13 -176 9 -174 b -81 -87 4 -173 -14 -152 b -167 0 -129 -38 -167 0 b -236 -86 -167 0 -198 -38 b -313 -174 -307 -174 -306 -173 b -318 -176 -314 -176 -315 -176 b -328 -174 -321 -176 -325 -174 b -491 -12 -330 -173 -367 -137 l -503 0 l -530 -34 b -570 -77 -562 -73 -564 -76 b -577 -79 -571 -79 -574 -79 b -597 -58 -588 -79 -597 -69 b -596 -49 -597 -55 -597 -52 b -417 172 -593 -43 -423 167 b -413 173 -417 172 -415 173 "},"v2d":{"x_min":0,"x_max":438.28125,"ha":447,"o":"m 212 190 b 219 191 213 191 216 191 b 236 176 225 191 228 190 b 419 18 277 105 341 49 b 436 5 431 13 434 11 b 438 -1 438 4 438 1 b 424 -16 438 -8 432 -13 b 356 -49 409 -20 379 -36 b 234 -180 306 -83 258 -133 b 219 -192 230 -188 224 -192 b 200 -176 213 -192 206 -187 b 9 -15 157 -102 89 -45 b 0 0 2 -12 0 -6 b 16 18 0 9 2 12 b 200 176 93 48 159 104 b 212 190 205 186 208 188 m 239 113 b 236 117 238 116 238 117 b 230 108 235 117 234 115 b 92 -15 196 58 140 8 b 88 -18 91 -16 88 -18 b 92 -20 88 -18 91 -19 b 198 -116 130 -43 166 -74 b 200 -117 200 -117 200 -117 b 201 -117 200 -117 201 -117 b 264 -43 212 -98 242 -62 b 345 15 288 -19 321 4 b 348 18 347 16 348 16 b 344 20 348 18 347 19 b 239 113 307 41 266 79 "},"v2e":{"x_min":-108.890625,"x_max":251.8125,"ha":257,"o":"m -8 863 b 0 864 -5 864 -2 864 b 12 859 4 864 9 863 b 19 843 16 856 16 853 b 102 631 34 768 65 689 l 107 621 l 107 616 l 107 616 b 89 596 107 605 99 596 b 78 601 85 596 83 598 b 47 614 69 606 55 612 b 19 621 39 617 21 621 b 19 621 19 621 19 621 b 19 619 19 621 19 620 b 20 383 20 616 20 585 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 b -20 619 -21 563 -21 616 b -20 621 -20 620 -20 621 b -20 621 -20 621 -20 621 b -49 614 -23 621 -40 617 b -80 601 -57 612 -70 606 b -91 596 -84 598 -87 596 b -108 616 -100 596 -108 605 l -108 616 l -108 621 l -103 631 b -20 839 -66 689 -38 760 b -8 863 -17 856 -14 859 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 "},"v2f":{"x_min":-1.359375,"x_max":680.5625,"ha":694,"o":"m 597 1042 b 604 1042 600 1042 602 1042 b 642 1002 627 1042 642 1022 b 619 966 642 988 635 974 b 439 927 574 942 503 927 l 426 927 l 426 921 b 430 838 428 893 430 866 b 345 480 430 696 398 560 b 179 391 307 423 249 391 b 156 392 171 391 164 392 b 138 394 149 394 142 394 b 103 434 115 396 103 416 b 129 471 103 451 111 466 b 141 474 133 473 137 474 b 172 459 153 474 164 469 b 181 455 175 456 176 455 b 187 456 182 455 185 455 b 253 520 212 460 234 483 b 315 836 294 605 315 714 b 311 928 315 867 314 898 b 302 945 310 943 311 942 b 245 953 283 950 262 953 b 130 891 193 953 149 931 b 84 860 119 870 102 860 b 36 905 61 860 39 877 b 36 910 36 907 36 909 b 80 970 36 931 50 949 b 249 1017 125 1000 187 1017 b 322 1009 273 1017 299 1014 l 341 1003 b 436 991 372 995 406 991 b 577 1031 495 991 545 1004 b 597 1042 583 1038 590 1041 m 416 360 b 424 360 419 360 421 360 b 481 309 454 360 479 338 b 503 145 484 280 495 199 b 585 -185 525 16 555 -106 b 630 -245 596 -213 613 -237 l 634 -247 l 638 -245 b 647 -244 641 -245 645 -244 b 680 -278 666 -244 680 -262 b 664 -308 680 -290 675 -301 b 638 -312 658 -310 650 -312 b 613 -309 631 -312 623 -310 b 477 -201 555 -303 502 -260 b 417 -2 460 -159 434 -72 b 416 5 417 1 416 5 b 416 5 416 5 416 5 b 411 -5 415 5 413 0 b 359 -97 397 -33 377 -70 b 353 -106 355 -102 353 -105 b 359 -112 353 -108 355 -109 b 409 -130 375 -123 390 -129 b 426 -134 420 -130 421 -131 b 431 -147 428 -137 431 -141 b 420 -162 431 -152 427 -159 b 382 -169 409 -166 396 -169 b 323 -155 363 -169 341 -165 l 317 -152 l 314 -155 b 62 -303 240 -240 148 -295 b 36 -305 55 -305 44 -305 b 23 -303 29 -305 24 -305 b -1 -273 6 -299 -1 -287 b 31 -240 -1 -256 10 -240 b 36 -240 32 -240 34 -240 b 42 -241 38 -241 39 -241 b 134 -204 63 -241 99 -226 b 367 288 265 -115 357 81 b 375 330 368 313 370 320 b 416 360 383 347 400 358 m 360 -359 b 379 -359 363 -359 371 -359 b 424 -360 396 -359 416 -359 b 646 -502 536 -373 624 -430 b 649 -527 649 -510 649 -519 b 530 -673 649 -578 604 -635 l 521 -677 l 529 -681 b 653 -811 592 -714 637 -762 b 660 -853 658 -827 660 -839 b 645 -911 660 -873 656 -892 b 426 -1021 608 -981 519 -1021 b 283 -989 377 -1021 328 -1011 b 235 -949 249 -972 239 -964 b 234 -936 234 -946 234 -941 b 234 -928 234 -934 234 -931 l 235 -925 l 234 -927 l 225 -934 b 87 -982 186 -966 138 -982 b 80 -982 85 -982 83 -982 b 55 -981 70 -981 58 -981 b 17 -943 32 -981 17 -964 b 54 -904 17 -921 35 -904 b 78 -914 62 -904 72 -909 l 83 -918 l 88 -918 b 190 -831 122 -918 166 -881 b 269 -506 242 -727 269 -612 b 268 -462 269 -492 269 -477 b 266 -449 266 -458 266 -452 b 265 -444 266 -445 266 -444 b 257 -446 264 -444 261 -445 b 132 -545 196 -470 152 -505 b 88 -573 122 -563 104 -573 b 39 -523 63 -573 39 -553 b 63 -476 39 -505 44 -494 b 360 -359 136 -408 235 -369 m 419 -424 b 393 -423 411 -423 406 -423 l 375 -423 l 377 -426 b 379 -439 377 -427 378 -434 b 383 -510 382 -463 383 -487 b 314 -811 383 -609 360 -710 b 266 -893 296 -850 285 -870 b 264 -898 265 -896 264 -898 l 264 -898 b 264 -898 264 -898 264 -898 b 268 -898 264 -898 266 -898 b 273 -898 270 -898 272 -898 b 300 -909 283 -898 291 -900 b 426 -957 340 -941 385 -957 b 476 -949 443 -957 460 -954 b 547 -853 522 -931 547 -893 b 485 -745 547 -816 526 -775 b 397 -707 460 -727 432 -714 b 366 -675 375 -703 366 -692 b 396 -642 366 -657 377 -645 b 530 -557 455 -637 511 -601 b 536 -527 534 -548 536 -537 b 419 -424 536 -480 490 -437 "},"v30":{"x_min":-21.78125,"x_max":367.5,"ha":375,"o":"m 276 1900 b 284 1901 279 1900 281 1901 b 306 1883 291 1901 298 1896 b 367 1686 347 1825 367 1757 b 343 1558 367 1643 359 1600 l 338 1549 l 343 1537 b 367 1411 359 1497 367 1454 b 343 1282 367 1367 359 1324 l 338 1272 l 343 1261 b 367 1135 359 1221 367 1178 b 343 1007 367 1090 359 1047 l 338 996 l 343 985 b 367 859 359 945 367 902 b 343 731 367 814 359 771 l 338 720 l 343 709 b 367 582 359 667 367 626 b 289 362 367 503 340 426 b 239 312 276 345 259 330 b 29 77 152 237 76 152 b -1 18 14 54 2 30 b -19 4 -4 11 -12 4 l -21 4 l -21 133 l -20 260 l -13 262 b 98 299 17 269 62 284 b 111 305 103 302 110 305 b 167 334 123 310 156 327 b 319 595 264 391 319 491 b 313 659 319 616 318 638 b 310 667 311 664 311 667 b 307 663 310 667 308 666 b 240 588 289 637 269 614 b 16 331 141 505 62 413 b -1 294 8 316 1 302 b -19 280 -4 287 -12 280 l -21 280 l -21 408 l -20 537 l -13 538 b 98 576 17 545 62 560 b 111 581 103 578 110 581 b 167 610 123 587 156 603 b 319 871 264 667 319 767 b 313 935 319 892 318 913 b 310 942 311 941 311 942 b 307 939 310 942 308 941 b 240 864 289 913 269 889 b 16 607 141 781 62 689 b -1 570 8 592 1 578 b -19 556 -4 563 -12 556 l -21 556 l -21 684 l -20 813 l -13 814 b 98 852 17 821 62 836 b 111 857 103 855 110 857 b 167 886 123 863 156 880 b 319 1147 264 943 319 1043 b 313 1211 319 1168 318 1189 b 310 1218 311 1217 311 1218 b 307 1215 310 1218 308 1217 b 240 1140 289 1188 269 1165 b 16 884 141 1057 62 966 b -1 846 8 868 1 855 b -19 832 -4 839 -12 832 l -21 832 l -21 960 l -20 1089 l -13 1090 b 98 1128 17 1097 62 1111 b 111 1134 103 1131 110 1134 b 167 1163 123 1139 156 1156 b 319 1424 264 1220 319 1320 b 313 1486 319 1444 318 1465 b 310 1494 311 1493 311 1494 b 307 1492 310 1494 308 1493 b 240 1417 289 1464 269 1442 b 16 1160 141 1333 62 1242 b -1 1121 8 1145 1 1131 b -19 1109 -4 1115 -12 1109 l -21 1109 l -21 1236 l -20 1365 l -13 1367 b 98 1404 17 1374 62 1388 b 111 1410 103 1407 110 1410 b 250 1508 172 1437 215 1467 b 319 1701 296 1564 319 1633 b 270 1859 319 1757 303 1814 b 262 1882 265 1868 262 1875 b 276 1900 262 1890 266 1896 "},"v31":{"x_min":0,"x_max":386.5625,"ha":394,"o":"m 0 173 l 0 347 l 193 347 l 386 347 l 386 173 l 386 0 l 193 0 l 0 0 l 0 173 "},"v32":{"x_min":-390.640625,"x_max":389.28125,"ha":397,"o":"m -378 573 l -374 576 l 0 576 l 372 576 l 377 573 b 387 563 381 571 385 567 l 389 559 l 389 287 l 389 15 l 387 12 b 367 0 383 4 375 0 b 348 12 360 0 352 4 l 347 15 l 347 210 l 347 406 l 0 406 l -348 406 l -348 210 l -348 15 l -349 12 b -368 0 -353 4 -362 0 b -389 12 -377 0 -385 4 l -390 15 l -390 287 l -390 559 l -389 563 b -378 573 -386 567 -382 571 m -274 337 l -270 338 l 0 338 l 269 338 l 273 337 b 284 326 279 334 281 330 l 285 323 l 285 169 l 285 15 l 284 12 b 265 -1 280 4 272 -1 b 245 12 257 -1 249 4 l 245 15 l 243 108 l 243 201 l 0 201 l -245 201 l -245 108 l -245 15 l -246 12 b -266 -1 -250 4 -258 -1 b -285 12 -273 -1 -281 4 l -287 15 l -287 169 l -287 323 l -285 326 b -274 337 -283 330 -280 334 m -13 131 b -1 133 -9 133 -5 133 b 50 105 19 133 39 123 b 61 70 57 95 61 83 b 50 34 61 58 57 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -58 38 -62 55 b -13 131 -62 98 -44 124 "},"v33":{"x_min":-423.3125,"x_max":421.9375,"ha":431,"o":"m -10 276 b -2 277 -8 277 -5 277 b 17 265 5 277 13 273 b 19 163 19 260 19 260 l 19 68 l 39 45 b 277 -95 122 -34 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -54 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 200 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 137 b 421 22 421 37 421 29 b 257 -198 421 -86 347 -188 b 242 -198 251 -198 247 -198 b 20 -105 181 -198 95 -163 l 19 -104 l 19 -183 b 19 -216 19 -195 19 -206 b 12 -273 19 -272 17 -267 b -2 -278 8 -277 2 -278 b -21 -266 -10 -278 -19 -274 b -23 -165 -23 -263 -23 -262 l -23 -69 l -44 -47 b -250 86 -117 23 -183 66 b -295 94 -270 93 -284 94 b -315 91 -302 94 -308 94 b -381 5 -356 81 -381 43 b -355 -56 -381 -16 -372 -40 b -299 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -168 -77 -196 -58 -179 -65 b -151 -122 -156 -90 -151 -105 b -179 -174 -151 -141 -160 -162 b -239 -195 -194 -184 -217 -192 b -257 -197 -245 -195 -250 -197 b -423 -5 -349 -197 -423 -113 b -423 0 -423 -4 -423 -1 b -277 194 -420 97 -362 173 b -247 197 -268 197 -258 197 b -24 104 -185 197 -100 162 l -23 102 l -23 181 b -21 265 -23 260 -23 260 b -10 276 -20 269 -14 274 "},"v34":{"x_min":0,"x_max":622.03125,"ha":635,"o":"m 398 417 b 406 419 401 419 404 419 b 427 398 417 419 427 409 b 427 391 427 395 427 392 b 34 -274 424 385 38 -272 b 20 -280 29 -278 25 -280 b 0 -259 9 -280 0 -270 b 0 -252 0 -256 0 -254 b 393 413 2 -247 389 410 b 398 417 394 415 397 416 m 592 417 b 600 419 594 419 597 419 b 622 398 611 419 622 409 b 620 391 622 395 620 392 b 227 -274 617 385 231 -272 b 213 -280 223 -278 219 -280 b 193 -259 202 -280 193 -270 b 194 -252 193 -256 193 -254 b 586 413 196 -247 582 410 b 592 417 588 415 590 416 "},"v35":{"x_min":0,"x_max":323.9375,"ha":331,"o":"m 217 535 b 225 537 220 537 221 537 b 245 524 235 537 242 533 l 246 521 l 247 390 l 247 258 l 273 265 b 306 270 288 269 299 270 b 322 259 315 270 319 267 b 323 208 323 256 323 233 b 322 158 323 184 323 159 b 288 140 318 148 315 147 b 247 130 254 131 247 130 b 247 65 247 130 247 104 b 247 20 247 51 247 36 l 247 -88 l 273 -81 b 306 -76 289 -77 299 -76 b 318 -81 311 -76 315 -77 b 323 -123 323 -87 323 -86 l 323 -138 l 323 -154 b 318 -195 323 -191 323 -190 b 269 -210 314 -199 315 -199 b 249 -216 259 -213 250 -216 l 247 -216 l 247 -349 l 246 -483 l 245 -487 b 225 -499 242 -495 234 -499 b 206 -487 219 -499 210 -495 l 205 -483 l 205 -355 l 205 -227 l 204 -227 l 181 -233 l 138 -244 b 117 -249 127 -247 117 -249 b 115 -385 115 -249 115 -256 l 115 -523 l 114 -526 b 95 -538 110 -534 102 -538 b 74 -526 87 -538 78 -534 l 73 -523 l 73 -391 b 72 -260 73 -269 73 -260 b 72 -260 72 -260 72 -260 b 19 -273 61 -263 23 -273 b 0 -260 10 -273 4 -267 b 0 -209 0 -256 0 -256 l 0 -162 l 1 -158 b 61 -134 5 -148 5 -148 l 73 -131 l 73 -22 b 72 86 73 79 73 86 b 72 86 72 86 72 86 b 19 74 61 83 23 74 b 0 86 10 74 4 79 b 0 137 0 90 0 90 l 0 184 l 1 188 b 61 212 5 198 5 198 l 73 215 l 73 348 l 73 481 l 74 485 b 95 498 78 492 87 498 b 103 495 98 498 100 496 b 114 485 107 494 111 489 l 115 481 l 115 353 l 115 226 l 121 226 b 159 235 123 227 141 231 l 198 247 l 205 248 l 205 384 l 205 521 l 206 524 b 217 535 209 528 212 533 m 205 9 b 205 119 205 70 205 119 l 205 119 b 182 113 204 119 194 116 l 138 102 b 117 97 127 99 117 97 b 115 -12 115 97 115 91 l 115 -122 l 121 -120 b 159 -111 123 -119 141 -115 l 198 -101 l 205 -98 l 205 9 "},"v36":{"x_min":-1.359375,"x_max":1064.390625,"ha":1086,"o":"m 296 692 b 314 694 302 694 307 694 b 386 685 337 694 366 689 b 548 498 480 660 548 580 b 548 481 548 492 548 487 b 455 395 541 426 499 395 b 370 462 420 395 383 417 b 362 496 364 477 362 488 b 377 514 362 509 367 514 b 393 501 386 514 390 510 b 432 474 397 484 413 474 b 470 487 445 474 458 478 b 491 530 484 496 491 510 b 490 544 491 534 491 539 b 333 660 479 606 411 657 l 323 662 l 315 646 b 269 524 285 591 269 556 b 321 431 269 492 287 466 b 349 395 338 413 343 408 b 363 342 359 378 363 362 b 359 312 363 333 362 322 b 285 158 348 266 318 206 b 281 152 283 155 281 152 b 281 152 281 152 281 152 b 287 154 283 152 284 152 b 318 155 298 154 308 155 b 461 98 371 155 419 136 l 464 97 l 483 112 b 503 129 494 120 503 127 b 504 130 503 129 504 129 b 503 138 504 131 503 134 b 500 180 500 152 500 166 b 553 326 500 238 518 288 b 604 366 560 331 592 358 b 649 381 617 376 632 381 b 696 362 665 381 681 374 b 724 302 714 347 724 324 b 695 238 724 278 714 255 b 660 210 691 234 662 212 b 579 148 658 209 582 151 b 579 148 579 148 579 148 b 596 106 579 144 589 119 b 622 77 604 88 609 83 b 657 69 632 72 645 69 b 748 112 688 69 721 84 b 755 123 754 117 755 120 b 755 127 755 124 755 126 b 751 165 752 137 751 151 b 758 219 751 183 754 202 b 894 387 774 290 820 347 b 896 390 896 388 896 388 b 891 398 896 391 895 392 b 622 560 827 477 730 535 b 600 580 605 564 600 569 b 617 596 600 591 607 596 b 628 595 622 596 624 596 b 1057 248 846 552 1020 412 b 1064 191 1061 229 1064 209 b 922 0 1064 94 1005 9 b 902 -1 916 -1 909 -1 b 774 76 847 -1 800 26 b 769 83 770 81 770 83 b 769 81 769 83 769 83 b 627 -1 733 29 677 -1 b 548 27 597 -1 570 8 b 515 88 537 37 525 61 l 513 95 l 510 93 l 453 45 b 390 0 396 0 396 0 b 390 0 390 0 390 0 b 374 15 381 0 377 4 b 268 105 359 69 314 105 b 250 104 262 105 257 105 l 243 102 l 234 90 b 155 1 201 49 159 2 b 147 -1 152 0 149 -1 b 130 15 138 -1 130 6 b 132 20 130 18 132 19 b 136 31 133 22 134 27 b 220 131 149 74 178 109 b 231 137 225 134 230 136 b 302 278 280 202 302 244 b 265 335 302 299 295 309 b 209 442 234 363 213 402 b 209 455 209 446 209 451 b 279 648 209 502 232 564 l 285 659 l 283 659 b 176 627 238 653 210 645 b 57 477 111 594 66 538 b 55 459 55 471 55 464 b 72 409 55 437 61 415 b 93 403 78 405 87 403 b 152 467 123 403 151 431 b 168 488 153 483 157 488 b 185 462 181 488 185 483 l 185 460 b 137 344 183 409 168 369 b 78 322 119 328 98 322 b 13 360 50 322 25 335 b -1 426 4 380 -1 402 b 89 610 -1 488 32 559 b 296 692 147 659 210 685 m 926 348 b 921 353 924 351 922 353 b 914 348 920 353 918 351 b 823 167 857 306 823 237 b 828 124 823 154 826 138 b 890 31 837 79 862 40 b 896 31 892 31 894 31 b 956 104 916 31 940 59 b 970 191 965 129 970 159 b 966 241 970 208 969 224 b 926 348 959 277 945 313 m 627 326 b 619 326 624 326 622 326 b 598 316 611 326 604 323 b 568 215 579 288 568 255 b 568 208 568 213 568 210 b 571 183 570 195 570 184 l 571 183 b 594 201 571 183 582 191 l 634 231 b 660 259 653 247 656 248 b 664 278 662 266 664 272 b 627 326 664 299 649 320 "},"v37":{"x_min":0,"x_max":333.46875,"ha":340,"o":"m 219 818 b 225 821 220 820 223 821 b 239 816 231 821 235 818 b 245 800 242 811 243 810 b 328 587 259 725 291 646 l 333 578 l 333 573 l 333 571 b 315 553 333 560 325 553 b 306 556 313 553 308 555 b 251 577 288 567 270 574 b 246 578 249 577 247 578 b 245 577 246 578 245 578 b 246 576 245 577 246 577 b 247 416 246 574 246 542 l 247 258 l 273 265 b 306 270 288 269 299 270 b 322 259 315 270 319 267 b 323 208 323 256 323 233 b 322 158 323 184 323 159 b 288 140 318 148 315 147 b 247 130 254 131 247 130 b 247 65 247 130 247 104 b 247 20 247 51 247 36 l 247 -88 l 273 -81 b 306 -76 289 -77 299 -76 b 318 -81 311 -76 315 -77 b 323 -123 323 -87 323 -86 l 323 -138 l 323 -154 b 318 -195 323 -191 323 -190 b 269 -210 314 -199 315 -199 b 249 -216 259 -213 250 -216 l 247 -216 l 247 -349 l 246 -483 l 245 -487 b 225 -499 242 -495 234 -499 b 206 -487 219 -499 210 -495 l 205 -483 l 205 -355 l 205 -227 l 204 -227 l 181 -233 l 138 -244 b 117 -249 127 -247 117 -249 b 115 -385 115 -249 115 -256 l 115 -523 l 114 -526 b 95 -538 110 -534 102 -538 b 74 -526 87 -538 78 -534 l 73 -523 l 73 -391 b 72 -260 73 -269 73 -260 b 72 -260 72 -260 72 -260 b 19 -273 61 -263 23 -273 b 0 -260 10 -273 4 -267 b 0 -209 0 -256 0 -256 l 0 -162 l 1 -158 b 61 -134 5 -148 5 -148 l 73 -131 l 73 -22 b 72 86 73 79 73 86 b 72 86 72 86 72 86 b 19 74 61 83 23 74 b 0 86 10 74 4 79 b 0 137 0 90 0 90 l 0 184 l 1 188 b 61 212 5 198 5 198 l 73 215 l 73 348 l 73 481 l 74 485 b 95 498 78 494 87 498 b 114 485 102 498 110 494 l 115 481 l 115 353 l 115 226 l 121 226 b 159 235 123 227 141 231 l 198 247 l 205 248 l 205 409 b 206 574 205 546 205 571 b 206 577 206 576 206 577 b 205 578 206 578 206 578 b 200 577 205 578 202 577 b 147 556 181 574 163 567 b 136 553 142 555 138 553 b 118 571 126 553 118 560 l 118 573 l 118 578 l 123 587 b 205 796 160 646 187 717 b 219 818 209 813 210 816 m 205 9 b 205 119 205 70 205 119 l 205 119 b 182 113 204 119 194 116 l 138 102 b 117 97 127 99 117 97 b 115 -12 115 97 115 91 l 115 -122 l 121 -120 b 159 -111 123 -119 141 -115 l 198 -101 l 205 -98 l 205 9 "},"v38":{"x_min":-1.359375,"x_max":651.96875,"ha":665,"o":"m 389 644 b 405 645 394 645 400 645 b 504 566 450 645 492 613 b 507 541 506 557 507 549 b 480 471 507 514 498 489 l 477 467 l 483 470 b 609 591 539 485 586 531 b 613 601 611 595 613 599 b 631 609 619 607 624 609 b 651 588 641 609 651 602 b 200 -946 651 584 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 537 313 478 300 508 b 389 644 300 585 334 635 "},"v39":{"x_min":-171.5,"x_max":251.8125,"ha":257,"o":"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 553 20 616 20 614 b 20 491 20 503 20 491 l 20 491 b 153 535 47 501 149 535 b 174 514 167 535 174 524 b 164 496 174 508 171 501 b 92 470 164 495 132 484 l 20 445 l 20 390 b 20 363 20 378 20 370 b 20 333 20 340 20 333 l 20 333 b 153 377 47 344 149 377 b 174 356 167 377 174 367 b 164 338 174 349 171 342 b 92 312 164 338 132 326 l 20 288 l 20 219 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 30 -21 -212 -21 -212 b -21 273 -21 163 -21 273 b -84 252 -21 273 -50 263 b -152 230 -133 234 -145 230 b -157 231 -155 230 -156 231 b -171 252 -166 234 -171 244 b -160 270 -171 259 -167 266 b -27 316 -159 270 -93 294 l -21 319 l -21 374 b -21 431 -21 406 -21 431 b -84 409 -21 431 -50 421 b -152 388 -133 392 -145 388 b -157 390 -155 388 -156 388 b -171 409 -166 392 -171 401 b -160 428 -171 417 -167 424 b -27 474 -159 428 -93 451 l -21 476 l -21 546 b -20 620 -21 614 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 "},"v3a":{"x_min":-1.359375,"x_max":227.3125,"ha":232,"o":"m 182 210 b 196 215 189 213 193 215 b 204 209 200 215 202 212 b 205 204 205 206 205 205 b 193 191 205 199 201 195 b 104 54 137 159 104 105 b 122 -8 104 31 110 11 l 123 -11 l 130 -11 b 202 -45 156 -11 185 -24 b 227 -112 219 -65 227 -88 b 172 -205 227 -149 208 -186 b 127 -216 157 -212 142 -216 b -1 -52 59 -216 -1 -144 b 0 -37 -1 -48 0 -43 b 182 210 6 58 80 155 "},"v3b":{"x_min":0,"x_max":484.5625,"ha":494,"o":"m 228 245 b 239 247 234 247 239 247 b 243 247 240 247 242 247 b 303 238 257 247 287 242 b 484 -2 417 208 484 104 b 412 -177 484 -65 461 -127 b 243 -248 363 -226 303 -248 b 6 -63 138 -248 36 -180 b 0 -1 1 -41 0 -20 b 228 245 0 127 98 240 m 255 181 b 240 183 247 183 245 183 b 232 181 238 183 235 183 b 142 152 200 180 168 170 l 138 149 l 190 97 l 242 44 l 294 97 l 345 149 l 340 152 b 255 181 315 169 284 180 m 147 -54 l 197 -1 l 147 51 l 95 104 l 91 99 b 62 -1 72 70 62 34 b 66 -43 62 -15 63 -29 b 91 -101 72 -63 80 -84 l 95 -106 l 147 -54 m 393 99 b 389 104 390 102 389 104 b 337 51 389 104 366 80 l 285 -1 l 337 -54 l 389 -106 l 393 -101 b 421 -1 412 -72 421 -36 b 393 99 421 34 412 69 m 294 -98 b 242 -45 265 -69 242 -45 b 190 -98 242 -45 219 -69 l 138 -151 l 142 -154 b 242 -184 172 -174 206 -184 b 340 -154 276 -184 311 -174 l 345 -151 l 294 -98 "},"v3c":{"x_min":0,"x_max":450.53125,"ha":460,"o":"m 189 302 b 204 303 193 302 198 303 b 303 224 250 303 292 270 b 306 199 304 216 306 208 b 279 129 306 173 296 147 l 276 126 l 281 127 b 408 249 337 142 385 190 b 412 259 409 254 412 258 b 430 267 417 265 423 267 b 450 247 441 267 450 259 b 200 -605 450 242 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 194 111 136 99 165 b 189 302 99 244 133 292 "},"v3d":{"x_min":0,"x_max":677.828125,"ha":692,"o":"m 390 1199 b 396 1200 392 1200 394 1200 b 426 1179 404 1200 412 1195 b 528 975 468 1135 507 1059 b 543 863 537 938 543 900 b 401 533 543 743 494 627 l 364 496 l 344 476 l 345 471 l 355 430 l 383 291 l 385 284 l 387 284 b 420 287 398 285 409 287 b 616 192 494 287 567 251 b 677 18 658 140 677 79 b 502 -244 677 -88 615 -195 b 496 -247 499 -245 496 -247 b 514 -334 496 -247 499 -259 l 526 -394 b 537 -467 536 -437 537 -444 b 307 -700 536 -602 428 -700 b 215 -681 276 -700 245 -695 b 114 -595 174 -663 130 -626 b 103 -544 107 -578 103 -562 b 156 -444 103 -505 122 -466 b 219 -424 175 -431 197 -424 b 303 -463 250 -424 283 -438 b 329 -535 321 -485 329 -510 b 234 -644 329 -588 292 -638 l 224 -644 l 225 -645 b 268 -659 235 -650 254 -656 b 307 -663 281 -662 294 -663 b 498 -494 401 -663 484 -592 b 500 -467 499 -484 500 -476 b 491 -406 500 -452 498 -435 l 480 -348 b 461 -259 466 -284 461 -259 b 461 -259 461 -259 461 -259 b 457 -260 460 -259 458 -259 b 374 -270 430 -267 402 -270 b 190 -222 311 -270 246 -254 b 0 115 68 -151 0 -20 b 46 303 0 179 14 242 b 268 581 80 369 182 496 l 281 595 l 280 605 l 254 730 b 236 850 239 799 236 813 b 235 868 235 857 235 863 b 239 927 235 888 236 903 b 340 1153 250 1010 285 1090 b 390 1199 356 1171 383 1197 m 446 1039 b 434 1041 442 1041 438 1041 b 306 921 389 1041 332 989 b 284 810 291 884 284 849 b 296 705 284 780 288 745 l 308 649 b 313 627 311 637 313 627 l 313 627 b 344 657 314 627 332 645 b 487 957 434 757 487 870 b 483 995 487 970 485 982 b 446 1039 477 1021 468 1034 m 315 437 b 314 442 314 440 314 442 b 314 442 314 442 314 442 b 230 345 311 442 255 378 b 104 101 142 234 115 183 b 102 55 103 86 102 70 b 374 -242 102 -108 225 -242 b 420 -238 389 -242 404 -241 b 454 -229 431 -237 453 -230 b 454 -229 454 -229 454 -229 b 451 -213 454 -227 453 -220 l 441 -162 l 426 -93 l 378 136 b 372 149 375 145 375 149 b 364 147 371 149 368 148 b 270 12 306 123 270 70 b 274 -20 270 1 272 -9 b 333 -101 281 -52 302 -80 b 343 -117 340 -105 343 -112 b 330 -133 343 -124 338 -130 b 328 -133 329 -133 328 -133 b 238 -70 308 -133 262 -101 b 193 61 206 -30 193 15 b 340 272 193 151 247 240 b 348 276 345 274 348 276 b 347 284 348 276 348 280 l 315 437 m 443 155 b 421 156 436 156 428 156 b 412 155 416 156 412 156 b 412 155 412 155 412 155 b 420 117 412 154 416 137 l 435 44 l 449 -19 l 460 -72 l 475 -147 b 488 -212 484 -188 488 -208 b 490 -213 488 -212 490 -213 b 494 -210 490 -213 491 -212 b 571 -134 525 -194 553 -165 b 601 -33 592 -102 601 -66 b 443 155 601 56 539 140 "},"v3e":{"x_min":0,"x_max":406.96875,"ha":415,"o":"m 21 183 b 28 183 24 183 25 183 b 42 181 34 183 39 183 b 127 108 47 179 47 179 b 202 41 168 72 202 41 b 279 108 204 41 238 72 b 357 177 321 145 356 176 b 375 183 363 181 370 183 b 406 151 392 183 406 169 b 404 137 406 147 405 141 b 322 62 401 131 398 129 b 251 0 284 27 251 0 b 322 -63 251 -1 284 -29 b 404 -138 398 -130 401 -133 b 406 -152 405 -142 406 -148 b 375 -184 406 -170 392 -184 b 357 -179 370 -184 363 -183 b 279 -109 356 -177 321 -147 b 202 -43 238 -73 204 -43 b 127 -109 202 -43 168 -73 b 49 -179 85 -147 50 -177 b 31 -184 43 -183 36 -184 b 0 -152 13 -184 0 -170 b 2 -138 0 -148 0 -142 b 83 -63 5 -133 8 -130 b 155 0 122 -29 155 -1 b 83 62 155 0 122 27 b 8 129 43 97 10 127 b 0 151 2 136 0 144 b 21 183 0 165 8 177 "},"v3f":{"x_min":-24.5,"x_max":317.140625,"ha":324,"o":"m -24 -147 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 58 -123 6 -43 31 -86 b 196 -278 93 -173 134 -219 b 317 -570 274 -356 317 -460 b 294 -713 317 -617 308 -666 l 289 -724 l 294 -735 b 317 -873 308 -780 317 -827 b 235 -1132 317 -963 288 -1054 b 209 -1165 228 -1140 224 -1146 b 189 -1177 204 -1172 196 -1177 b 171 -1164 182 -1177 175 -1172 b 168 -1154 170 -1161 168 -1159 b 181 -1132 168 -1149 172 -1142 b 269 -891 238 -1064 269 -975 b 269 -881 269 -886 269 -884 b 262 -814 269 -857 265 -827 b 258 -800 261 -811 259 -806 b 142 -628 240 -731 198 -667 b -8 -589 112 -606 47 -589 b -20 -589 -13 -589 -19 -589 l -24 -589 l -24 -449 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 58 -424 6 -345 31 -388 b 194 -580 93 -476 136 -523 b 259 -660 221 -606 245 -635 b 261 -663 259 -662 261 -663 b 264 -656 262 -663 262 -660 b 269 -587 268 -632 269 -610 b 264 -521 269 -566 268 -544 b 262 -512 264 -517 262 -513 b 258 -498 261 -509 259 -503 b 142 -326 240 -428 198 -365 b -8 -287 112 -303 47 -288 b -20 -287 -13 -287 -19 -287 l -24 -287 l -24 -147 "},"v40":{"x_min":-1.359375,"x_max":436.921875,"ha":446,"o":"m 213 205 b 217 205 215 205 216 205 b 234 194 224 205 234 199 b 236 187 234 194 235 190 l 245 167 l 261 129 l 270 106 b 355 -61 294 54 329 -13 b 420 -163 381 -105 402 -138 b 436 -188 435 -184 436 -184 b 436 -191 436 -190 436 -190 b 421 -206 436 -201 431 -206 l 421 -206 l 416 -206 l 405 -201 b 217 -158 347 -172 283 -158 b 31 -201 153 -158 88 -172 l 20 -206 l 14 -206 l 14 -206 b 0 -191 5 -206 0 -201 b -1 -188 0 -190 -1 -190 b 14 -163 -1 -186 0 -184 b 95 -34 36 -136 72 -77 b 166 106 119 8 148 68 l 175 129 l 183 148 l 200 188 b 213 205 205 199 208 202 "},"v41":{"x_min":-1.359375,"x_max":556.6875,"ha":568,"o":"m 294 322 b 318 323 299 322 308 323 b 360 320 334 323 352 322 b 526 217 430 310 490 273 b 543 166 537 202 543 184 b 447 70 543 117 503 70 b 445 70 447 70 446 70 b 359 159 394 72 359 113 b 368 201 359 173 362 187 b 442 245 382 229 412 245 b 455 244 446 245 451 245 b 460 244 458 244 460 244 b 460 244 460 244 460 244 b 454 248 460 244 458 245 b 325 291 417 276 372 291 b 285 287 313 291 299 290 b 144 -2 183 269 144 190 b 281 -290 144 -208 179 -280 b 304 -291 289 -291 298 -291 b 524 -105 412 -291 506 -212 b 541 -84 526 -88 530 -84 b 556 -101 551 -84 556 -90 b 549 -138 556 -111 553 -122 b 334 -322 521 -237 435 -310 b 302 -324 323 -323 313 -324 b 13 -101 172 -324 54 -234 b -1 -1 4 -68 -1 -34 b 294 322 -1 161 121 303 "},"v42":{"x_min":-348.4375,"x_max":24.5,"ha":25,"o":"m -330 155 b -322 156 -329 156 -326 156 b -315 156 -319 156 -317 156 b -298 147 -311 155 -308 154 b -19 30 -224 98 -122 55 l 2 26 b 24 -1 17 22 24 13 b 2 -27 24 -15 17 -23 l -19 -31 b -298 -148 -122 -56 -224 -99 b -322 -158 -313 -158 -315 -158 b -348 -131 -338 -158 -348 -145 b -344 -117 -348 -127 -347 -122 b -328 -104 -341 -112 -338 -111 b -127 -8 -269 -65 -202 -33 b -106 0 -115 -4 -106 -1 b -127 6 -106 0 -115 2 b -328 102 -202 31 -269 63 b -344 116 -338 109 -341 111 b -348 130 -347 120 -348 124 b -330 155 -348 141 -341 152 "},"v43":{"x_min":-442.359375,"x_max":441,"ha":450,"o":"m -31 487 b -1 488 -21 488 -10 488 b 434 104 216 488 397 330 b 441 27 438 79 441 47 b 439 12 441 20 439 15 b 419 0 435 4 427 0 b 404 5 413 0 408 1 b 398 30 400 11 398 13 b 0 351 390 213 213 351 b -59 348 -20 351 -39 349 b -400 30 -251 324 -393 191 b -405 5 -400 13 -401 11 b -420 0 -409 1 -415 0 b -441 12 -428 0 -436 4 b -442 27 -441 15 -442 20 b -435 104 -442 47 -439 79 b -31 487 -401 316 -235 474 m -13 131 b -1 133 -9 133 -5 133 b 51 105 19 133 39 123 b 61 70 58 95 61 83 b 51 34 61 58 58 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -57 38 -62 54 b -13 131 -62 98 -44 124 "},"v44":{"x_min":-21.78125,"x_max":251.8125,"ha":257,"o":"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 "},"v45":{"x_min":-402.890625,"x_max":401.53125,"ha":410,"o":"m -10 273 b -4 274 -9 273 -6 274 b 16 262 4 274 12 269 b 17 158 17 259 17 259 l 17 56 l 62 112 b 117 174 110 172 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b 21 -6 27 0 24 -2 l 17 -12 l 17 -147 b 17 -210 17 -173 17 -194 b 10 -292 17 -297 16 -287 b -2 -299 6 -297 2 -299 b -21 -287 -10 -299 -19 -295 b -24 -174 -23 -284 -23 -284 l -24 -63 l -66 -117 b -121 -176 -110 -170 -114 -176 b -125 -176 -122 -176 -123 -176 b -296 -12 -134 -174 -125 -184 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 170 -398 -43 -231 165 b -212 174 -221 173 -216 174 b -202 173 -208 174 -205 174 b -39 11 -200 172 -151 122 l -28 -1 l -25 1 l -24 4 l -24 130 b -23 260 -24 256 -24 258 b -10 273 -20 266 -16 270 "},"v46":{"x_min":0,"x_max":627.46875,"ha":640,"o":"m 306 190 b 314 191 308 191 311 191 b 326 184 318 191 322 190 l 336 173 b 510 52 377 127 442 80 b 515 49 513 51 515 49 b 611 16 537 40 579 24 b 627 0 624 13 627 9 b 607 -18 627 -11 624 -13 b 330 -181 490 -49 389 -109 b 314 -192 323 -190 319 -192 b 306 -191 311 -192 308 -192 b 294 -177 302 -188 302 -188 b 257 -140 287 -170 265 -148 b 19 -18 193 -84 114 -44 b 0 0 2 -13 0 -11 b 16 16 0 9 2 13 b 110 49 47 24 89 40 b 117 52 111 49 114 51 b 145 65 126 56 130 58 b 281 163 200 93 245 124 b 300 186 288 170 291 174 b 306 190 300 187 303 188 m 317 137 b 313 142 315 141 314 142 b 308 137 313 142 311 141 b 161 4 276 84 220 33 b 155 0 159 1 155 0 b 163 -4 155 0 159 -2 b 308 -138 220 -34 276 -84 b 313 -142 311 -141 313 -142 b 317 -138 314 -142 315 -141 b 464 -4 351 -84 406 -34 b 470 0 468 -2 470 0 b 464 4 470 0 468 1 b 317 137 406 33 351 84 "},"v47":{"x_min":-24.5,"x_max":315.78125,"ha":322,"o":"m -24 -145 l -24 -5 l -20 -5 b 1 -26 -10 -5 -6 -9 b 175 -241 31 -86 96 -166 b 314 -548 259 -323 304 -420 b 315 -589 315 -555 315 -571 b 314 -630 315 -606 315 -623 b 298 -730 311 -664 306 -699 l 295 -742 l 296 -748 b 314 -850 304 -778 311 -813 b 315 -892 315 -857 315 -874 b 314 -932 315 -909 315 -925 b 298 -1032 311 -967 306 -1002 l 295 -1045 l 296 -1050 b 314 -1153 304 -1081 311 -1115 b 315 -1193 315 -1160 315 -1177 b 314 -1235 315 -1211 315 -1228 b 217 -1526 306 -1338 270 -1444 b 201 -1533 213 -1532 208 -1533 b 182 -1522 193 -1533 185 -1529 b 179 -1514 181 -1518 179 -1517 b 189 -1489 179 -1508 182 -1501 b 266 -1217 240 -1403 266 -1308 b 262 -1156 266 -1196 265 -1177 b 110 -907 247 -1043 190 -950 b 0 -889 87 -895 50 -889 l -1 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 1 -631 -10 -610 -6 -614 b 175 -846 31 -691 96 -771 b 259 -956 213 -884 236 -914 b 265 -966 262 -961 264 -966 b 265 -966 265 -966 265 -966 b 265 -953 265 -964 265 -959 b 266 -920 266 -943 266 -932 b 262 -853 266 -898 265 -873 b 110 -605 247 -741 190 -648 b 0 -587 87 -592 50 -587 l -1 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 1 -328 -10 -308 -6 -312 b 175 -544 31 -388 96 -469 b 259 -655 213 -581 236 -612 b 265 -663 262 -659 264 -663 b 265 -663 265 -663 265 -663 b 265 -650 265 -663 265 -657 b 266 -617 266 -641 266 -630 b 262 -551 266 -595 265 -570 b 110 -303 247 -438 190 -345 b 0 -284 87 -290 50 -284 l -1 -284 l -24 -284 l -24 -145 "},"v48":{"x_min":0,"x_max":720.03125,"ha":735,"o":"m 251 280 b 269 280 258 280 264 280 b 487 215 348 280 432 255 b 594 -2 558 159 594 87 b 590 -55 594 -19 593 -37 b 44 -598 553 -309 330 -533 b 10 -605 25 -603 16 -605 b 1 -599 5 -605 2 -603 b 0 -594 0 -598 0 -595 b 8 -580 0 -587 2 -580 b 43 -566 9 -580 32 -571 b 453 -54 279 -467 434 -274 b 454 -9 454 -48 454 -29 b 453 34 454 9 454 29 b 351 230 443 129 411 192 b 259 255 323 247 292 255 b 70 133 183 255 103 208 b 68 124 68 127 68 124 b 68 123 68 123 68 123 b 70 126 68 123 69 124 b 126 141 88 137 107 141 b 202 109 153 141 182 131 b 234 33 224 87 234 59 b 126 -77 234 -23 191 -77 b 5 61 53 -77 5 -13 b 27 147 5 88 12 119 b 251 280 68 226 151 274 m 672 172 b 677 173 673 173 676 173 b 720 130 700 173 720 152 b 714 111 720 124 717 117 b 677 88 707 95 692 88 b 642 108 664 88 650 95 b 637 130 638 115 637 123 b 672 172 637 151 650 169 m 672 -90 b 677 -90 673 -90 676 -90 b 720 -131 700 -90 720 -109 b 714 -151 720 -138 717 -144 b 677 -174 707 -166 692 -174 b 642 -154 664 -174 650 -167 b 637 -133 638 -147 637 -140 b 672 -90 637 -112 650 -93 "},"v49":{"x_min":0,"x_max":630.203125,"ha":643,"o":"m 308 204 b 314 205 310 205 313 205 b 326 201 319 205 323 204 b 355 154 328 199 338 180 b 401 83 362 142 392 95 l 409 72 b 431 41 412 66 424 49 b 619 -174 498 -51 570 -134 b 630 -192 626 -180 630 -186 b 626 -202 630 -195 628 -199 b 616 -206 623 -205 620 -206 b 552 -188 608 -206 592 -202 b 310 -155 488 -169 392 -155 b 268 -156 295 -155 281 -155 b 77 -188 197 -161 126 -173 b 13 -206 35 -202 20 -206 b 9 -206 12 -206 10 -206 b 0 -191 2 -202 0 -197 b 8 -176 0 -186 2 -180 b 204 49 58 -136 138 -43 l 220 72 l 227 83 b 295 188 245 108 281 166 b 308 204 299 197 304 202 m 315 147 b 314 147 315 147 314 147 b 314 147 314 147 314 147 b 306 129 314 145 310 138 l 296 105 b 281 72 292 97 284 77 l 274 56 b 181 -123 247 -4 212 -72 l 174 -134 l 176 -133 b 314 -123 215 -127 272 -123 b 451 -133 356 -123 413 -127 l 454 -134 l 449 -123 b 353 56 417 -72 381 -4 l 347 72 b 332 105 344 77 336 97 l 322 129 b 315 147 318 138 315 145 "},"v4a":{"x_min":70.78125,"x_max":378.390625,"ha":315,"o":"m 246 373 b 254 373 249 373 251 373 b 372 324 303 373 360 351 b 378 302 377 317 378 309 b 338 251 378 278 362 255 b 328 249 334 249 332 249 b 283 294 303 249 283 270 b 288 315 283 301 284 308 b 289 319 289 317 289 319 b 289 319 289 319 289 319 b 283 320 289 320 287 320 b 270 322 279 322 274 322 b 206 288 242 322 215 308 b 206 283 206 287 206 285 b 257 223 206 267 230 238 b 284 206 272 213 277 210 b 351 90 328 173 351 130 b 340 47 351 74 348 59 b 205 -30 314 -2 264 -30 b 182 -29 198 -30 190 -30 b 84 15 147 -24 103 -5 b 70 48 74 24 70 36 b 108 99 70 70 85 94 b 121 102 112 101 117 102 b 167 56 147 102 167 80 b 159 31 167 48 164 40 l 156 26 l 157 26 b 190 20 167 22 178 20 b 220 26 201 20 212 22 b 258 65 243 34 258 51 b 257 70 258 66 258 69 b 204 126 249 94 234 109 b 114 258 148 158 114 209 b 125 302 114 273 118 288 b 246 373 147 342 193 370 "},"v4b":{"x_min":0,"x_max":503.609375,"ha":514,"o":"m 274 430 b 277 430 276 430 277 430 b 310 394 296 430 310 415 b 308 383 310 391 308 387 b 306 367 307 381 307 374 b 236 120 298 305 272 210 b 40 -273 189 -5 125 -134 b 20 -287 35 -283 27 -287 b 5 -281 14 -287 9 -285 b 0 -267 1 -277 0 -273 b 9 -242 0 -262 2 -255 b 246 395 137 -12 232 242 b 274 430 249 416 257 427 m 468 430 b 472 430 469 430 470 430 b 503 394 490 430 503 415 b 502 383 503 391 503 387 b 499 367 502 381 500 374 b 431 120 491 305 465 210 b 234 -273 382 -5 318 -134 b 213 -287 228 -283 220 -287 b 198 -281 208 -287 202 -285 b 193 -267 194 -277 193 -273 b 202 -242 193 -262 196 -255 b 439 395 330 -12 426 242 b 468 430 442 416 451 427 "},"v4c":{"x_min":-348.4375,"x_max":24.5,"ha":25,"o":"m -330 155 b -322 156 -329 156 -326 156 b -315 156 -319 156 -317 156 b -298 147 -311 155 -308 154 b -6 27 -221 95 -117 52 b 10 23 1 26 8 23 b 24 -1 20 18 24 8 b 12 -23 24 -9 20 -19 b -8 -29 9 -26 9 -26 b -298 -148 -112 -52 -223 -97 b -322 -158 -313 -158 -315 -158 b -348 -133 -338 -158 -348 -147 b -343 -115 -348 -127 -347 -120 b -313 -1 -323 -79 -313 -40 b -337 101 -313 34 -321 69 b -343 113 -338 105 -341 111 b -348 131 -347 119 -348 126 b -330 155 -348 142 -343 152 "},"v4d":{"x_min":-311.6875,"x_max":310.328125,"ha":317,"o":"m -9 388 b -2 390 -8 390 -5 390 b 5 388 1 390 4 390 b 19 378 10 387 16 383 b 23 333 23 371 23 371 b 24 298 23 299 24 298 b 81 276 34 298 65 285 b 213 91 145 240 190 177 b 224 24 217 76 224 36 b 257 24 224 24 235 24 b 299 19 292 24 292 24 b 310 -1 306 15 310 6 b 299 -23 310 -11 306 -19 b 257 -27 292 -27 292 -27 b 224 -29 235 -27 224 -29 b 213 -95 224 -40 217 -80 b 81 -280 190 -181 145 -244 b 24 -301 65 -290 34 -301 b 23 -335 24 -301 23 -303 l 23 -340 b 17 -381 23 -374 23 -374 b -1 -391 13 -388 5 -391 b -21 -381 -9 -391 -17 -388 b -27 -340 -27 -374 -27 -374 l -27 -335 b -28 -301 -27 -303 -27 -301 b -85 -280 -38 -301 -69 -290 b -217 -95 -149 -244 -194 -181 b -228 -29 -221 -80 -228 -40 b -259 -27 -228 -29 -238 -27 b -300 -23 -294 -27 -294 -27 b -311 -2 -307 -19 -311 -11 b -294 23 -311 8 -304 19 b -259 24 -291 23 -284 24 b -228 24 -239 24 -228 24 b -217 91 -228 36 -221 76 b -85 276 -194 177 -149 240 b -28 298 -69 285 -38 298 b -27 333 -27 298 -27 299 b -27 371 -27 362 -27 369 b -9 388 -24 378 -17 385 m -27 136 b -28 247 -27 197 -28 247 b -61 216 -31 247 -53 226 b -123 33 -95 172 -121 98 l -125 24 l -76 24 l -27 24 l -27 136 m 29 242 b 24 247 27 245 24 247 b 23 136 24 247 23 197 l 23 24 l 72 24 l 121 24 l 119 33 b 29 242 115 116 77 206 m -27 -140 l -27 -27 l -76 -27 l -125 -27 l -123 -36 b -61 -220 -121 -102 -95 -176 b -28 -251 -53 -230 -31 -251 b -27 -140 -28 -251 -27 -201 m 119 -36 l 121 -27 l 72 -27 l 23 -27 l 23 -140 b 24 -251 23 -201 24 -251 b 57 -220 27 -251 49 -230 b 119 -36 91 -176 117 -102 "},"v4e":{"x_min":0,"x_max":239.5625,"ha":244,"o":"m 10 460 b 20 462 13 462 14 462 b 39 449 28 462 35 458 l 40 446 l 40 326 b 40 205 40 259 40 205 b 127 227 40 205 80 215 b 220 249 196 244 213 249 b 227 247 224 249 225 248 b 238 237 231 245 235 241 l 239 233 l 239 -106 l 239 -448 l 238 -451 b 219 -463 234 -459 225 -463 b 198 -451 210 -463 202 -459 l 197 -448 l 197 -324 b 197 -201 197 -248 197 -201 b 110 -223 196 -201 157 -210 b 17 -245 42 -240 24 -245 b 10 -242 13 -245 13 -244 b 0 -233 6 -241 2 -237 l 0 -230 l 0 108 l 0 446 l 0 449 b 10 460 2 453 6 458 m 197 22 b 197 70 197 41 197 58 b 196 116 197 113 197 116 l 196 116 b 118 97 196 116 160 106 l 40 77 l 40 -18 b 40 -112 40 -69 40 -112 l 119 -93 l 197 -73 l 197 22 "},"v4f":{"x_min":0,"x_max":193.28125,"ha":197,"o":"m 85 514 b 95 517 88 517 89 517 b 114 505 103 517 110 513 l 115 502 l 115 376 b 115 249 115 306 115 249 b 141 258 117 249 127 252 l 167 266 l 172 266 b 190 254 181 265 187 262 l 193 251 l 193 202 l 193 188 b 187 147 193 149 191 152 b 147 130 183 142 182 141 l 115 119 l 115 9 b 115 -99 115 -51 115 -99 b 141 -91 115 -99 127 -95 b 171 -81 166 -81 167 -81 l 171 -81 b 191 -94 181 -81 189 -87 b 193 -142 191 -97 193 -120 b 191 -195 193 -167 191 -194 b 125 -227 187 -205 187 -204 l 115 -230 l 115 -366 l 115 -503 l 114 -506 b 95 -519 110 -514 102 -519 b 74 -506 87 -519 78 -514 l 73 -503 l 73 -374 b 73 -245 73 -260 73 -245 b 73 -245 73 -245 73 -245 b 55 -252 72 -245 63 -249 l 32 -260 b 19 -263 27 -262 23 -263 b 4 -256 13 -263 8 -260 b 0 -215 0 -251 0 -254 b 0 -199 0 -210 0 -206 l 0 -152 l 1 -149 b 8 -140 2 -145 5 -141 b 42 -127 9 -140 24 -133 l 73 -116 l 73 -5 b 73 23 73 4 73 15 b 73 105 73 70 73 105 b 49 97 73 105 61 101 b 17 88 32 91 23 88 b 4 95 10 88 8 91 b 0 137 0 101 0 98 b 0 151 0 141 0 145 l 0 199 l 1 202 b 43 224 5 212 5 212 l 73 234 l 73 367 l 73 502 l 74 505 b 85 514 77 509 81 513 "},"v50":{"x_min":-111.609375,"x_max":110.25,"ha":113,"o":"m -8 112 b -1 112 -5 112 -2 112 b 110 -1 63 112 110 58 b 87 -69 110 -24 103 -48 b -1 -113 65 -98 32 -113 b -88 -69 -34 -113 -66 -98 b -111 -1 -104 -48 -111 -24 b -8 112 -111 55 -70 108 m 17 94 b 0 95 12 95 6 95 b -53 79 -17 95 -38 90 b -95 -1 -80 61 -95 30 b -72 -63 -95 -23 -88 -45 b -1 -97 -53 -87 -27 -97 b 89 -31 38 -97 74 -73 b 93 0 92 -20 93 -11 b 17 94 93 44 63 83 "},"v51":{"x_min":-1.359375,"x_max":455.96875,"ha":465,"o":"m 352 541 b 357 542 353 542 355 542 b 377 530 364 542 372 537 l 378 526 l 378 394 l 379 262 l 404 266 b 436 270 420 269 430 270 b 450 265 443 270 446 269 b 455 220 455 259 455 260 l 455 208 l 455 161 l 454 156 b 411 140 449 147 447 147 b 378 133 393 137 379 134 b 378 68 378 133 378 106 b 378 22 378 54 378 38 l 379 -87 l 404 -83 b 436 -79 420 -80 430 -79 b 450 -84 443 -79 446 -80 b 455 -129 455 -90 455 -88 l 455 -141 l 455 -188 l 454 -192 b 413 -209 449 -202 447 -202 b 382 -215 398 -212 383 -215 l 378 -215 l 378 -345 l 378 -380 b 375 -485 378 -484 378 -480 b 357 -494 371 -491 364 -494 b 340 -485 351 -494 344 -491 b 336 -383 337 -480 336 -484 l 336 -349 l 336 -223 l 334 -223 b 291 -231 334 -223 314 -227 l 247 -240 l 247 -371 l 246 -503 l 245 -506 b 225 -519 242 -514 234 -519 b 206 -506 219 -519 210 -514 l 205 -503 l 205 -376 l 205 -248 l 160 -256 l 115 -265 l 115 -396 l 115 -527 l 114 -531 b 95 -544 110 -539 102 -544 b 76 -531 87 -544 78 -539 l 73 -527 l 73 -399 b 73 -273 73 -330 73 -273 b 49 -277 73 -273 61 -274 b 17 -281 32 -280 24 -281 b 4 -276 10 -281 8 -280 b -1 -234 0 -269 -1 -272 b 0 -219 -1 -229 0 -224 l 0 -170 l 1 -167 b 10 -158 2 -163 6 -159 b 49 -149 13 -156 16 -155 l 73 -145 l 73 -34 b 73 76 73 26 73 76 b 49 72 73 76 61 74 b 17 68 32 69 24 68 b 4 73 10 68 8 69 b -1 115 0 80 -1 77 b 0 130 -1 120 0 124 l 0 179 l 1 181 b 10 191 2 186 6 190 b 49 199 13 192 16 194 l 73 204 l 73 338 b 73 374 73 352 73 365 b 77 483 73 484 73 477 b 95 492 81 489 88 492 b 111 483 100 492 107 489 b 115 378 115 477 115 483 l 115 342 b 117 212 115 223 115 212 b 204 229 117 212 200 227 l 205 229 l 205 365 l 205 502 l 206 505 b 225 517 210 513 219 517 b 245 505 234 517 242 513 l 246 502 l 247 369 l 247 237 l 249 237 b 336 254 253 238 336 254 b 337 390 336 254 337 302 l 337 526 l 338 530 b 352 541 341 535 347 539 m 336 15 b 336 126 336 102 336 126 l 336 126 b 291 117 336 126 315 122 l 247 109 l 247 -1 l 247 -112 l 249 -112 b 336 -95 253 -111 336 -95 b 336 15 336 -95 336 -56 m 205 -120 b 205 -55 205 -120 205 -93 b 205 -9 205 -41 205 -24 l 205 101 l 160 93 l 115 84 l 115 -26 b 115 -83 115 -49 115 -69 b 117 -137 115 -133 115 -137 b 205 -120 118 -137 204 -120 "},"v52":{"x_min":-10.890625,"x_max":298.078125,"ha":294,"o":"m 138 473 b 142 474 140 473 141 474 b 164 459 148 474 153 470 b 191 402 183 442 191 423 b 181 353 191 388 187 371 b 178 349 179 352 178 349 b 179 348 178 348 179 348 b 185 349 181 348 182 348 b 255 376 210 355 234 363 b 272 381 264 381 266 381 b 298 355 287 381 298 370 b 288 330 298 348 298 345 b 171 34 238 254 194 141 b 166 13 168 16 168 16 b 144 1 161 5 152 1 b 121 15 134 1 125 5 b 115 33 119 18 117 24 b 0 330 91 145 49 252 b -10 355 -9 345 -10 348 b 13 381 -10 371 0 381 b 31 376 19 381 25 380 b 132 345 61 358 103 345 l 136 345 l 137 355 b 145 378 138 359 142 370 b 152 415 149 394 152 405 b 137 452 152 427 148 438 b 133 464 134 458 133 460 b 138 473 133 467 134 470 "},"v53":{"x_min":0,"x_max":902.421875,"ha":921,"o":"m 17 240 b 24 241 19 241 21 241 b 32 240 28 241 31 241 b 46 229 38 238 43 234 b 50 88 50 223 50 237 b 50 -1 50 63 50 34 b 50 -90 50 -36 50 -65 b 46 -231 50 -238 50 -224 b 25 -242 42 -238 34 -242 b 0 -224 14 -242 4 -235 b 0 2 0 -222 0 -108 b 0 223 0 112 0 220 b 17 240 2 230 9 237 m 110 240 b 118 241 111 241 114 241 b 126 240 121 241 123 241 b 142 223 133 237 140 230 b 144 123 144 220 144 205 b 144 29 144 45 144 29 b 144 29 144 29 144 29 b 393 183 166 106 264 167 b 450 186 412 184 431 186 b 756 29 600 186 732 120 b 756 29 756 29 756 29 b 758 123 758 29 758 45 b 760 227 758 226 758 223 b 784 241 766 237 774 241 b 804 229 792 241 800 237 b 809 88 808 223 809 237 l 809 -1 l 809 -90 b 804 -231 809 -238 808 -224 b 784 -242 800 -238 792 -242 b 762 -231 775 -242 766 -238 b 758 -124 756 -224 758 -231 b 756 -30 758 -47 758 -30 b 756 -30 756 -30 756 -30 b 509 -184 736 -108 637 -169 b 450 -187 488 -187 469 -187 b 144 -30 300 -187 168 -122 b 144 -30 144 -30 144 -30 b 144 -124 144 -30 144 -47 b 140 -231 144 -231 144 -224 b 118 -242 134 -238 126 -242 b 92 -224 107 -242 96 -235 b 92 2 92 -222 92 -108 b 92 223 92 112 92 220 b 110 240 95 230 102 237 m 432 161 b 413 162 426 162 420 162 b 313 41 351 162 313 109 b 347 -73 313 5 323 -34 b 487 -163 385 -133 439 -163 b 578 -97 526 -163 562 -142 b 588 -43 585 -80 588 -62 b 432 161 588 47 518 147 m 868 240 b 876 241 869 241 872 241 b 884 240 879 241 882 241 b 898 229 890 238 894 234 b 902 88 902 223 902 237 l 902 -1 l 902 -90 b 898 -231 902 -238 902 -224 b 876 -242 892 -238 884 -242 b 852 -224 865 -242 854 -235 b 850 2 850 -222 850 -108 b 852 223 850 112 850 220 b 868 240 853 230 860 237 "},"v54":{"x_min":-24.5,"x_max":317.140625,"ha":324,"o":"m -24 -161 l -24 -5 l -20 -5 b 0 -24 -9 -5 -2 -12 b 171 -315 21 -124 84 -233 b 317 -660 268 -406 317 -531 b 187 -1014 317 -782 274 -909 b 161 -1034 172 -1034 171 -1034 b 141 -1013 149 -1034 141 -1025 b 152 -991 141 -1004 142 -1002 b 266 -682 228 -899 266 -788 b 174 -430 266 -588 236 -498 b -23 -317 136 -388 66 -348 b -24 -161 -23 -316 -24 -285 "},"v55":{"x_min":0,"x_max":551.25,"ha":563,"o":"m 289 644 b 304 645 294 645 299 645 b 404 566 349 645 392 613 b 406 541 405 557 406 549 b 379 471 406 514 397 489 l 377 467 l 382 470 b 509 591 438 485 485 531 b 513 601 510 595 513 599 b 530 609 518 607 524 609 b 551 588 540 609 551 602 b 200 -605 551 584 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 195 112 136 99 165 b 118 256 99 217 106 238 b 204 303 138 287 171 303 b 292 249 238 303 273 285 b 306 199 302 234 306 217 b 279 129 306 173 296 148 l 276 126 l 281 127 b 408 248 336 142 385 190 b 473 470 409 254 473 469 b 473 470 473 470 473 470 b 465 464 473 470 469 467 b 341 421 428 435 383 421 b 236 458 303 421 266 433 b 200 537 212 478 200 508 b 289 644 200 585 234 635 "},"v56":{"x_min":0,"x_max":1159.671875,"ha":1183,"o":"m 0 0 l 0 347 l 193 347 l 386 347 l 386 0 l 386 -348 l 193 -348 l 0 -348 l 0 0 m 773 -1 l 773 347 l 966 347 l 1159 347 l 1159 -1 l 1159 -348 l 966 -348 l 773 -348 l 773 -1 "},"v57":{"x_min":0,"x_max":272.21875,"ha":278,"o":"m 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 "},"v58":{"x_min":-21.78125,"x_max":367.5,"ha":375,"o":"m 259 1553 b 265 1553 261 1553 264 1553 b 288 1540 272 1553 277 1550 b 367 1351 340 1493 367 1424 b 336 1221 367 1308 357 1263 l 332 1211 l 333 1208 b 367 1077 356 1170 367 1124 b 336 945 367 1032 357 986 l 332 935 l 333 932 b 367 800 356 893 367 848 b 336 669 367 756 357 710 l 332 659 l 333 656 b 367 523 356 617 367 571 b 345 412 367 485 360 446 b 231 273 322 356 284 310 b -1 19 121 195 27 93 b -17 4 -4 11 -10 5 l -21 4 l -21 134 l -21 265 l -17 265 b 133 291 20 265 96 278 b 318 537 245 328 318 433 b 307 603 318 559 315 582 b 303 614 304 612 304 614 b 298 609 302 614 300 613 b 231 549 281 589 258 567 b -1 295 121 471 27 369 b -17 280 -4 287 -10 281 l -21 280 l -21 410 l -21 541 l -17 541 b 133 567 20 541 96 555 b 318 813 245 605 318 709 b 307 880 318 835 315 859 b 303 891 304 888 304 891 b 298 885 302 891 300 888 b 231 825 281 866 258 843 b -1 571 121 748 27 645 b -17 556 -4 563 -10 557 l -21 556 l -21 687 l -21 817 l -17 817 b 133 843 20 817 96 830 b 318 1089 245 881 318 985 b 307 1156 318 1111 315 1134 b 303 1167 304 1164 304 1167 b 298 1161 302 1167 300 1164 b 231 1102 281 1140 258 1120 b -1 848 121 1024 27 921 b -17 832 -4 839 -10 834 l -21 832 l -21 963 l -21 1093 l -17 1093 b 114 1113 12 1093 78 1103 b 313 1314 215 1142 289 1218 b 318 1364 317 1331 318 1347 b 255 1511 318 1422 295 1478 b 243 1532 247 1519 243 1525 b 259 1553 243 1540 250 1550 "},"v59":{"x_min":0,"x_max":464.140625,"ha":474,"o":"m 0 0 l 0 347 l 76 347 l 153 347 l 153 0 l 153 -348 l 76 -348 l 0 -348 l 0 0 m 308 -1 l 308 347 l 386 347 l 464 347 l 464 -1 l 464 -348 l 386 -348 l 308 -348 l 308 -1 "},"v5a":{"x_min":-171.5,"x_max":170.140625,"ha":174,"o":"m -6 566 b 0 567 -5 567 -2 567 b 14 556 6 567 12 563 b 92 285 14 555 50 433 b 170 13 166 33 170 19 b 168 13 170 13 170 13 b 161 1 168 8 167 4 l 159 0 l 122 0 l 84 0 l 81 1 b 21 195 76 5 78 -5 b -32 381 -8 297 -32 381 b -87 197 -32 381 -57 298 b -141 8 -115 94 -140 9 b -155 0 -142 2 -149 0 b -171 15 -163 0 -171 5 b -14 556 -171 18 -24 528 b -6 566 -14 560 -10 564 "},"v5b":{"x_min":-441,"x_max":439.640625,"ha":449,"o":"m -428 -2 b -421 0 -427 -1 -424 0 b -406 -6 -416 0 -409 -2 b -400 -31 -401 -12 -400 -15 b -1 -352 -392 -215 -215 -352 b 58 -349 19 -352 38 -351 b 398 -31 250 -326 392 -192 b 404 -6 398 -15 400 -12 b 419 -1 408 -2 413 -1 b 439 -13 427 -1 435 -5 b 439 -29 439 -16 439 -22 b 434 -105 439 -48 438 -80 b 0 -489 397 -333 213 -489 b -68 -484 -23 -489 -44 -488 b -441 -36 -280 -452 -436 -263 b -441 -30 -441 -34 -441 -31 b -428 -2 -441 -11 -439 -5 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -57 -102 -62 -87 b -13 -9 -62 -44 -44 -16 "},"v5c":{"x_min":0,"x_max":447.8125,"ha":457,"o":"m 0 -87 l 0 0 l 223 0 l 447 0 l 447 -87 l 447 -174 l 223 -174 l 0 -174 l 0 -87 "},"v5d":{"x_min":-1.359375,"x_max":592.078125,"ha":604,"o":"m 280 692 b 295 694 283 692 289 694 b 310 692 300 694 307 692 b 357 630 340 684 357 657 b 336 580 357 612 351 594 b 311 538 321 566 311 549 b 352 492 311 512 330 492 b 366 495 357 492 362 492 b 397 553 390 503 397 517 b 415 603 397 576 402 591 b 460 623 427 617 443 623 b 509 599 479 623 498 614 b 522 559 518 587 522 573 b 494 506 522 538 513 519 b 451 495 481 498 473 496 b 415 488 432 495 426 494 b 394 449 404 483 394 464 b 394 448 394 448 394 448 l 394 440 l 397 433 b 428 409 404 420 413 413 b 438 408 431 408 435 408 b 479 431 450 408 462 415 b 528 455 495 448 510 455 b 548 452 534 455 541 453 b 592 391 577 442 592 416 b 549 331 592 365 577 340 b 528 327 541 328 534 327 b 479 351 510 327 495 335 b 438 374 464 367 450 374 b 417 369 431 374 424 373 b 394 333 402 360 394 348 b 400 312 394 326 396 319 b 451 287 408 294 420 288 b 513 258 484 285 499 278 b 522 223 519 247 522 234 b 461 159 522 190 496 159 b 449 161 457 159 453 159 b 397 229 416 167 397 191 b 366 288 397 265 390 278 b 352 290 362 290 357 290 b 315 262 336 290 321 280 b 311 245 313 256 311 251 b 334 204 311 233 318 220 b 355 170 348 190 351 184 b 357 152 356 166 357 159 b 355 136 357 147 356 140 b 295 88 345 104 321 88 b 232 152 264 88 232 112 b 255 204 232 174 238 186 b 279 244 273 222 279 231 l 279 245 b 238 290 279 270 259 290 b 224 288 234 290 228 290 b 193 229 200 278 193 265 b 141 161 193 191 174 167 b 129 159 137 159 133 159 b 68 223 93 159 68 190 b 77 258 68 234 70 247 b 138 287 91 278 106 285 b 185 302 166 287 175 291 b 196 333 193 312 196 323 b 174 369 196 347 187 360 b 152 374 166 373 159 374 b 111 351 140 374 126 367 b 62 327 95 335 80 327 b 51 328 58 327 54 327 b -1 391 16 334 -1 363 b 53 455 -1 420 17 449 b 62 455 57 455 59 455 b 111 431 80 455 95 448 b 152 408 127 415 140 408 b 161 409 155 408 159 408 b 193 433 176 413 186 420 l 196 440 l 196 448 b 196 451 196 449 196 449 b 190 471 196 459 194 463 b 137 495 182 489 167 495 l 134 495 l 134 495 b 68 560 95 495 68 521 b 129 623 68 596 95 623 b 144 621 134 623 138 623 b 193 553 175 614 193 589 b 224 495 193 517 200 503 b 238 492 228 492 234 492 b 279 538 259 492 279 512 b 254 580 279 549 269 566 b 232 630 239 594 232 612 b 280 692 232 657 250 684 m 307 456 b 295 458 303 458 299 458 b 230 391 258 458 230 426 b 236 360 230 381 231 371 b 295 324 249 337 272 324 b 353 360 318 324 341 337 b 360 391 357 370 360 381 b 307 456 360 421 340 451 "},"v5e":{"x_min":-206.890625,"x_max":428.75,"ha":438,"o":"m -178 811 b -172 811 -175 811 -174 811 b -145 800 -164 811 -157 809 l -114 778 l -50 735 l 13 691 l 77 646 l 141 602 l 205 559 l 269 514 l 332 471 l 394 427 b 428 392 421 409 426 405 b 428 384 428 390 428 387 b 394 349 428 365 412 349 b 375 355 387 349 382 351 b 272 426 372 356 303 403 l 209 469 l 145 513 l 83 556 l -34 638 l -87 674 l -151 718 b -202 759 -196 749 -198 752 b -206 775 -205 764 -206 770 b -178 811 -206 792 -196 809 "},"v5f":{"x_min":-390.640625,"x_max":389.28125,"ha":397,"o":"m -378 -2 b -368 -1 -375 -1 -374 -1 b -349 -13 -360 -1 -353 -5 l -348 -16 l -348 -176 l -348 -337 l 0 -337 l 347 -337 l 347 -176 l 347 -16 l 348 -13 b 367 0 352 -5 360 0 b 387 -13 375 0 383 -5 l 389 -16 l 389 -252 l 389 -489 l 387 -492 b 377 -503 385 -498 381 -501 l 372 -505 l 0 -505 l -374 -505 l -378 -503 b -389 -492 -382 -501 -386 -498 l -390 -489 l -390 -252 l -390 -16 l -389 -13 b -378 -2 -386 -8 -382 -4 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -58 -102 -62 -87 b -13 -9 -62 -44 -44 -16 "},"v60":{"x_min":-590.71875,"x_max":589.359375,"ha":601,"o":"m -367 173 b -362 174 -366 174 -364 174 b -351 173 -357 174 -353 173 b -262 86 -348 172 -328 151 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 72 86 -13 172 6 151 b 157 0 119 37 157 0 b 227 84 159 0 189 37 b 303 174 298 173 296 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 144 -86 213 0 182 -38 b 68 -174 73 -174 74 -173 b 62 -176 66 -176 65 -176 b 53 -174 59 -176 55 -174 b -35 -87 50 -173 29 -152 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -367 173 -375 169 -372 172 "},"v61":{"x_min":-108.890625,"x_max":251.8125,"ha":257,"o":"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 93 -148 206 -40 179 -70 l 38 -199 l 23 -215 l 20 -217 l 20 -241 b 19 -267 20 -260 20 -266 b 19 -270 19 -269 19 -270 b 19 -270 19 -270 19 -270 b 47 -263 21 -270 39 -266 b 78 -249 55 -260 69 -255 b 89 -247 83 -247 85 -247 b 107 -265 99 -247 107 -254 l 107 -265 l 107 -270 l 102 -280 b 19 -492 65 -338 34 -417 b 0 -513 14 -508 10 -513 b -20 -488 -12 -513 -16 -508 b -103 -280 -38 -409 -66 -338 l -108 -270 l -108 -265 l -108 -265 b -91 -247 -108 -254 -100 -247 b -80 -249 -87 -247 -84 -247 b -49 -263 -70 -255 -57 -260 b -20 -270 -40 -266 -23 -270 b -20 -270 -20 -270 -20 -270 b -20 -267 -20 -270 -20 -269 b -21 174 -21 -266 -21 -208 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 "},"v62":{"x_min":46.28125,"x_max":669.671875,"ha":563,"o":"m 183 376 b 189 376 185 376 187 376 b 212 374 197 376 208 376 b 265 337 234 369 253 355 b 274 317 268 331 273 320 b 274 316 274 317 274 316 b 280 323 276 316 276 319 b 311 358 288 337 299 348 b 319 366 315 360 318 365 b 356 376 326 373 340 376 b 382 371 364 376 374 374 b 428 337 400 366 417 352 b 436 317 431 331 436 320 b 438 316 436 317 436 316 b 442 323 438 316 439 319 b 475 358 451 337 462 348 b 483 366 477 360 481 365 b 518 376 488 373 503 376 b 544 373 528 376 536 376 b 604 285 579 360 604 326 b 597 249 604 273 601 258 b 543 63 596 247 544 70 b 541 54 543 61 541 55 b 540 44 540 51 540 47 b 552 23 540 33 545 23 b 552 23 552 23 552 23 b 647 126 586 29 627 72 b 658 138 651 136 653 138 b 660 138 660 138 660 138 b 669 129 666 137 669 136 b 654 88 669 122 665 109 b 562 -12 631 43 602 9 l 549 -19 b 521 -27 540 -24 530 -27 b 447 30 490 -27 458 -4 b 443 58 445 38 443 48 b 450 93 443 72 446 84 b 504 278 453 97 504 272 b 507 288 506 283 506 287 b 509 298 507 292 509 295 b 491 326 509 310 502 320 b 487 327 490 327 488 327 b 479 324 484 327 483 326 b 441 270 462 316 443 288 b 435 249 441 265 436 254 b 398 127 434 248 419 195 b 362 4 379 61 362 5 b 328 -1 359 -1 362 -1 b 314 -1 323 -1 319 -1 b 302 -1 310 -1 306 -1 b 266 4 266 -1 269 -1 b 265 6 265 5 265 5 b 303 144 265 13 272 34 b 343 278 325 216 343 276 b 344 288 343 281 344 285 b 345 298 345 291 345 295 b 330 326 345 310 340 320 b 323 327 328 327 325 327 b 317 324 322 327 321 326 b 279 270 300 316 281 288 b 273 249 279 265 274 254 b 236 127 272 248 255 195 b 200 4 216 61 200 5 b 164 -1 197 -1 198 -1 b 151 -1 161 -1 156 -1 b 140 -1 147 -1 142 -1 b 103 4 104 -1 106 -1 b 103 6 103 5 103 5 b 141 144 103 13 108 34 b 181 278 161 216 179 276 b 182 288 181 281 181 285 b 183 298 182 291 183 295 b 168 324 183 310 178 320 b 160 327 166 326 163 327 b 141 320 156 327 151 324 b 69 230 112 305 85 272 b 57 215 65 217 62 215 b 55 215 57 215 55 215 b 46 224 49 215 46 217 b 59 260 46 231 50 242 b 151 363 81 306 112 341 b 161 369 155 365 160 367 b 183 376 166 371 174 374 "},"v63":{"x_min":-1.359375,"x_max":392,"ha":400,"o":"m 253 341 b 317 341 276 341 298 341 b 363 341 344 341 362 341 b 392 309 379 340 392 326 l 392 309 b 266 -320 392 305 269 -310 b 246 -341 262 -330 255 -337 b 136 -342 243 -342 189 -342 b 21 -341 80 -342 24 -342 b -1 -310 8 -337 -1 -324 b 0 -310 -1 -310 0 -310 b 123 316 0 -306 118 297 b 144 340 126 327 133 335 b 253 341 147 341 151 341 m 321 276 b 250 277 321 277 307 277 b 179 276 194 277 179 277 b 123 -1 179 276 153 151 l 68 -278 l 140 -278 b 167 -278 149 -278 159 -278 b 210 -278 191 -278 210 -278 b 321 276 210 -278 321 274 "},"v64":{"x_min":-355.25,"x_max":353.890625,"ha":361,"o":"m -355 534 l -355 1068 l 0 1068 l 353 1068 l 353 534 l 353 0 l 0 0 l -355 0 l -355 534 m 325 881 l 325 1041 l -1 1041 l -326 1041 l -326 881 l -326 721 l -1 721 l 325 721 l 325 881 m 325 534 l 325 694 l 0 694 l -326 694 l -326 534 l -326 374 l 0 374 l 325 374 l 325 534 m 325 187 l 325 347 l 0 347 l -326 347 l -326 187 l -326 27 l 0 27 l 325 27 l 325 187 "},"v65":{"x_min":-695.53125,"x_max":694.171875,"ha":708,"o":"m -50 1414 b 1 1415 -32 1414 -16 1415 b 683 828 333 1415 626 1168 b 694 706 690 787 694 746 b -1 0 694 323 389 0 b -695 706 -385 0 -695 315 b -50 1413 -695 1079 -415 1386 l -50 1414 m 44 1385 b -2 1386 28 1386 13 1386 b -526 1124 -204 1386 -400 1289 b -564 1068 -539 1107 -564 1070 b -1 1067 -564 1068 -311 1067 b 563 1068 308 1067 563 1068 b 524 1124 563 1070 537 1107 b 44 1385 406 1276 235 1371 m 590 1021 l 581 1039 l -1 1039 l -582 1039 l -592 1021 b -666 728 -637 931 -666 816 l -666 720 l -1 720 l 665 720 l 665 728 b 590 1021 665 816 635 931 m 665 685 l 665 692 l -1 692 l -666 692 l -666 685 b -590 391 -666 596 -637 480 l -582 374 l -1 374 l 579 374 l 589 391 b 665 685 634 480 665 596 m 558 337 l 563 345 l -1 345 l -564 345 l -559 337 b 0 27 -436 142 -223 27 b 148 44 49 27 99 33 b 558 337 315 83 465 191 "},"v66":{"x_min":-73.5,"x_max":72.140625,"ha":74,"o":"m -36 -126 b 0 0 -17 -56 -1 0 b 70 -254 0 0 70 -249 l 72 -255 l 0 -255 l -73 -255 l -72 -254 b -36 -126 -72 -254 -55 -195 "},"v67":{"x_min":-1.359375,"x_max":549.890625,"ha":561,"o":"m 296 692 b 314 694 302 694 307 694 b 386 685 337 694 366 689 b 548 498 480 660 548 580 b 548 481 548 492 548 487 b 455 395 541 426 499 395 b 370 462 420 395 383 417 b 362 496 364 477 362 488 b 377 514 362 509 367 514 b 393 501 386 514 390 510 b 432 474 397 484 413 474 b 470 487 445 474 458 478 b 491 530 484 496 491 510 b 490 544 491 534 491 539 b 333 660 479 606 411 657 l 323 662 l 315 646 b 269 524 285 591 269 556 b 321 431 269 492 287 466 b 349 395 338 413 343 408 b 363 342 359 378 363 362 b 359 312 363 333 362 322 b 285 158 348 266 318 206 b 281 152 283 155 281 152 b 281 152 281 152 281 152 b 287 154 283 152 284 152 b 318 155 298 154 308 155 b 461 98 371 155 419 136 l 464 97 l 495 122 b 534 148 528 148 528 148 b 549 133 544 148 549 142 l 549 133 b 549 130 549 131 549 131 b 509 91 549 124 548 123 l 436 33 b 390 0 397 0 396 0 b 374 15 381 0 377 4 b 268 105 359 69 314 105 b 250 104 262 105 257 105 l 243 102 l 234 90 b 155 1 201 49 159 2 b 147 -1 152 0 149 -1 b 130 15 138 -1 130 6 b 132 20 130 18 132 19 b 136 31 133 22 134 27 b 220 131 149 74 178 109 b 231 137 225 134 230 136 b 302 278 280 202 302 244 b 265 335 302 299 295 309 b 209 442 234 363 213 402 b 209 455 209 446 209 451 b 279 648 209 502 232 564 l 285 659 l 283 659 b 176 627 238 653 210 645 b 57 477 111 594 66 538 b 55 459 55 471 55 464 b 72 409 55 437 61 415 b 93 403 78 405 87 403 b 152 467 123 403 151 431 b 168 488 153 483 157 488 b 185 462 181 488 185 483 l 185 460 b 137 344 183 409 168 369 b 78 322 119 328 98 322 b 13 360 50 322 25 335 b -1 426 4 380 -1 402 b 89 610 -1 488 32 559 b 296 692 147 659 210 685 "},"v68":{"x_min":-597.53125,"x_max":596.171875,"ha":608,"o":"m -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 155 11 -5 172 43 123 l 166 -1 l 168 1 l 170 4 l 170 130 b 171 260 170 256 170 258 b 191 274 175 269 183 274 b 205 267 196 274 201 272 b 212 158 212 262 210 273 l 212 56 l 257 112 b 311 173 304 172 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 216 -6 221 -1 219 -2 l 212 -12 l 212 -147 b 212 -210 212 -173 212 -194 b 205 -292 212 -297 210 -287 b 191 -299 201 -297 196 -299 b 172 -287 183 -299 175 -295 b 170 -174 171 -284 171 -284 l 170 -63 l 127 -117 b 73 -176 84 -170 80 -176 b 68 -176 72 -176 70 -176 b -27 -87 59 -174 65 -180 b -114 0 -74 -38 -112 0 b -182 -86 -114 0 -145 -38 b -258 -174 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 "},"v69":{"x_min":-25.859375,"x_max":347.078125,"ha":354,"o":"m 313 155 b 321 156 315 156 318 156 b 329 156 325 156 328 156 b 347 130 341 152 347 141 b 338 109 347 123 344 115 b 288 79 332 105 307 88 b 126 6 236 49 186 26 b 104 0 114 2 104 0 b 126 -8 104 -1 114 -4 b 326 -104 201 -33 268 -65 b 343 -117 337 -111 340 -112 b 347 -131 345 -122 347 -127 b 321 -158 347 -145 337 -158 b 296 -148 314 -158 311 -158 b 17 -31 223 -99 121 -56 l -4 -27 b -25 0 -19 -23 -25 -15 b -4 26 -25 13 -19 22 l 17 30 b 296 147 121 55 223 98 b 313 155 307 152 310 155 "},"v6a":{"x_min":-85.75,"x_max":84.390625,"ha":86,"o":"m -17 84 b 0 86 -12 86 -6 86 b 84 -1 46 86 84 45 b 83 -18 84 -6 84 -12 b -1 -87 73 -62 36 -87 b -66 -55 -25 -87 -49 -77 b -85 -1 -80 -38 -85 -19 b -17 84 -85 37 -59 74 "},"v6b":{"x_min":-1.359375,"x_max":544.4375,"ha":556,"o":"m 475 834 b 483 835 477 834 480 835 b 514 803 500 835 514 820 b 509 785 514 798 513 791 b 356 742 496 764 424 743 l 341 742 l 341 738 b 344 671 343 716 344 694 b 247 351 344 533 306 401 b 144 315 217 326 185 315 b 121 316 136 315 129 315 b 83 340 98 317 88 323 b 81 348 83 342 81 345 b 114 380 81 366 98 380 b 137 369 122 380 130 377 b 147 365 140 366 142 365 b 191 399 159 365 178 378 b 251 673 230 459 251 560 b 250 739 251 695 251 717 b 239 757 249 756 249 755 b 194 763 224 762 209 763 b 103 712 153 763 121 745 b 68 689 95 696 81 689 b 29 730 47 689 29 703 b 77 785 29 749 43 766 b 198 814 111 805 155 814 b 262 806 220 814 243 811 b 351 793 294 798 323 793 b 462 827 396 793 435 805 b 475 834 466 831 469 832 m 334 290 b 340 290 336 290 338 290 b 386 244 364 290 383 272 b 470 -154 397 115 439 -81 b 509 -195 481 -177 498 -195 b 510 -195 509 -195 510 -195 b 518 -194 513 -194 515 -194 b 544 -223 533 -194 544 -208 b 530 -244 544 -231 540 -240 b 510 -248 526 -247 519 -248 b 450 -235 491 -248 466 -244 b 351 -68 401 -210 381 -176 b 333 5 344 -44 333 1 b 333 5 333 5 333 5 b 326 -8 333 5 329 -1 b 289 -73 313 -34 302 -54 l 281 -84 l 284 -86 b 328 -102 295 -95 313 -102 b 344 -116 340 -104 344 -106 b 323 -131 344 -124 340 -129 b 304 -134 317 -133 311 -134 b 259 -123 289 -134 273 -130 l 254 -120 l 251 -124 b 78 -237 198 -183 141 -222 b 29 -242 63 -241 44 -242 b 16 -241 24 -242 19 -242 b -1 -217 5 -237 -1 -227 b 17 -192 -1 -206 5 -195 b 23 -191 19 -191 20 -191 b 29 -191 24 -191 27 -191 b 32 -191 29 -191 31 -191 b 175 -97 70 -191 132 -152 b 294 237 246 -12 287 105 b 306 273 295 256 298 263 b 334 290 313 281 323 288 m 292 -285 b 311 -285 299 -285 306 -285 b 517 -399 405 -285 496 -334 b 519 -420 518 -406 519 -413 b 427 -535 519 -462 485 -505 l 416 -541 l 427 -546 b 528 -681 491 -580 528 -631 b 518 -724 528 -695 525 -710 b 341 -816 488 -782 417 -816 b 216 -785 299 -816 255 -806 b 186 -750 194 -774 186 -764 b 187 -742 186 -748 186 -745 l 187 -739 l 186 -742 b 66 -784 151 -771 114 -784 b 59 -784 65 -784 62 -784 b 16 -767 31 -784 23 -781 b 13 -753 14 -763 13 -757 b 43 -723 13 -737 27 -723 b 62 -730 50 -723 55 -725 b 70 -734 66 -734 66 -734 b 151 -666 96 -734 130 -705 b 167 -630 153 -660 155 -656 b 213 -444 193 -570 209 -506 b 215 -412 215 -437 215 -426 b 212 -355 215 -385 213 -356 b 212 -353 212 -355 212 -353 b 176 -369 209 -353 187 -363 b 106 -433 145 -385 119 -409 b 69 -458 98 -449 83 -458 b 36 -437 57 -458 44 -451 b 31 -417 32 -431 31 -424 b 53 -378 31 -405 38 -391 b 292 -285 111 -324 191 -294 m 336 -338 b 310 -337 329 -338 318 -337 b 300 -338 304 -337 300 -337 b 300 -338 300 -338 300 -338 b 306 -408 303 -345 306 -381 b 306 -415 306 -410 306 -413 b 247 -657 304 -496 284 -578 b 217 -709 235 -682 228 -695 b 210 -717 215 -713 212 -716 b 210 -717 210 -717 210 -717 b 215 -717 210 -717 212 -717 b 217 -717 215 -717 216 -717 b 220 -717 217 -717 219 -717 b 242 -727 228 -717 232 -718 b 337 -764 273 -752 303 -763 b 341 -764 338 -764 340 -764 b 436 -681 396 -764 436 -728 b 435 -664 436 -675 436 -670 b 319 -566 427 -617 381 -578 b 299 -557 307 -563 304 -562 b 292 -539 294 -552 292 -545 b 317 -513 292 -527 302 -514 b 423 -445 364 -508 409 -480 b 428 -421 427 -437 428 -430 b 336 -338 428 -384 392 -349 "},"v6c":{"x_min":-1.359375,"x_max":193.28125,"ha":197,"o":"m 78 233 b 87 233 81 233 84 233 b 187 140 132 233 174 195 b 193 102 190 127 193 115 b 43 -113 193 22 136 -62 b 27 -119 36 -116 31 -119 b 19 -108 21 -119 19 -115 b 29 -97 19 -102 20 -101 b 102 13 73 -72 102 -27 b 92 51 102 26 98 40 l 91 54 l 84 54 b 8 104 53 54 21 74 b -1 142 1 116 -1 130 b 78 233 -1 187 31 227 "},"v6d":{"x_min":-590.71875,"x_max":589.359375,"ha":601,"o":"m 544 335 b 553 337 548 337 551 337 b 575 313 563 337 570 330 b 589 226 583 285 589 256 b 517 8 589 152 563 76 b 464 -58 507 -4 503 -9 l 401 -136 b 362 -176 372 -172 370 -176 b 357 -176 360 -176 359 -176 b 261 -87 349 -174 355 -180 b 175 0 215 -38 175 0 b 106 -86 175 0 144 -38 b 29 -174 35 -174 36 -173 b 24 -176 28 -176 27 -176 b 14 -174 21 -176 17 -174 b -73 -87 12 -173 -8 -152 b -159 0 -121 -38 -159 0 b -228 -86 -160 0 -190 -38 b -304 -174 -299 -174 -298 -173 b -310 -176 -306 -176 -308 -176 b -319 -174 -314 -176 -318 -174 b -483 -12 -323 -173 -359 -137 l -495 0 l -524 -34 b -562 -77 -553 -73 -556 -76 b -568 -79 -564 -79 -566 -79 b -590 -58 -581 -79 -590 -69 b -588 -49 -590 -55 -589 -52 b -412 170 -585 -43 -417 165 b -398 174 -408 173 -402 174 b -389 173 -394 174 -392 174 b -300 86 -387 172 -366 151 b -215 -1 -254 37 -215 -1 b -145 84 -215 -1 -183 37 b -69 173 -74 173 -76 172 b -63 174 -68 174 -66 174 b -54 173 -61 174 -57 173 b 34 86 -51 172 -31 151 b 119 -1 81 37 119 -1 b 189 84 121 -1 151 37 b 265 173 259 173 258 172 b 270 174 266 174 269 174 b 280 173 274 174 279 173 b 370 84 283 172 303 151 b 455 -1 416 37 455 -1 l 455 -1 b 476 24 455 -1 469 15 b 547 226 522 87 547 159 b 534 302 547 252 543 278 b 532 317 533 308 532 313 b 544 335 532 326 536 333 "},"v6e":{"x_min":-355.25,"x_max":353.890625,"ha":361,"o":"m -27 720 b -13 721 -24 720 -20 721 b 42 718 4 721 34 720 b 343 446 190 699 308 591 b 353 360 349 417 353 390 b 84 9 353 197 245 49 b 0 0 55 2 27 0 b -344 273 -160 0 -306 109 b -355 359 -351 302 -355 331 b -39 718 -355 539 -221 700 l -27 720 m 39 691 b -13 692 32 691 4 692 b -25 692 -19 692 -23 692 b -326 383 -190 675 -314 548 l -326 374 l -1 374 l 325 374 l 325 383 b 39 691 314 541 197 667 m 325 337 l 325 345 l -1 345 l -326 345 l -326 337 b -55 33 -315 184 -204 58 b -1 29 -34 29 -29 29 b 54 33 28 29 32 29 b 325 337 201 58 314 184 "},"v6f":{"x_min":-80.3125,"x_max":78.9375,"ha":81,"o":"m 63 191 b 69 192 65 192 66 192 b 77 188 72 192 76 191 b 78 183 78 187 78 186 b 74 158 78 179 77 172 l 66 115 b 9 -161 49 30 10 -158 b -10 -187 6 -172 -1 -181 b -34 -194 -17 -191 -25 -194 b -80 -147 -58 -194 -80 -174 b -80 -141 -80 -144 -80 -142 b 9 70 -80 -134 -73 -117 l 49 163 b 63 191 59 188 61 190 "},"v70":{"x_min":0,"x_max":436.921875,"ha":446,"o":"m 213 190 b 217 191 215 191 216 191 b 231 184 223 191 228 188 b 249 154 240 167 246 159 b 419 18 292 91 348 45 b 436 -1 435 11 436 8 b 424 -16 436 -9 434 -13 b 308 -87 394 -26 340 -59 b 231 -186 276 -117 257 -142 b 219 -192 228 -191 225 -192 b 198 -174 209 -192 208 -191 b 47 -33 161 -113 110 -63 b 10 -16 34 -26 17 -19 b 0 -1 2 -13 0 -9 b 17 18 0 8 1 11 b 198 173 95 48 156 101 b 213 190 206 187 208 188 "},"v71":{"x_min":-25.859375,"x_max":347.078125,"ha":354,"o":"m 313 155 b 321 156 315 156 318 156 b 334 154 325 156 330 155 b 347 131 343 148 347 140 b 341 113 347 126 345 120 b 336 101 340 111 337 105 b 311 -1 319 69 311 34 b 341 -115 311 -40 322 -79 b 347 -133 345 -120 347 -127 b 321 -158 347 -147 337 -158 b 296 -148 314 -158 311 -158 b 6 -29 221 -97 111 -52 b -13 -23 -10 -26 -10 -26 b -25 -1 -21 -19 -25 -9 b -12 23 -25 8 -21 18 b 5 27 -9 23 -2 26 b 296 147 115 52 220 95 b 313 155 307 152 310 155 "},"v72":{"x_min":-423.3125,"x_max":421.9375,"ha":431,"o":"m -262 197 b -247 197 -257 197 -253 197 b -118 162 -210 197 -163 184 b 40 45 -61 134 -13 98 b 277 -95 119 -33 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -55 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 201 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 136 b 421 22 421 37 421 29 b 245 -199 421 -93 338 -199 b 238 -198 243 -199 240 -199 b -44 -47 148 -194 50 -141 b -250 86 -114 22 -183 66 b -295 94 -270 91 -283 94 b -315 91 -302 94 -307 94 b -381 4 -356 81 -381 43 b -355 -56 -381 -18 -372 -40 b -298 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -178 -69 -200 -58 -189 -62 b -151 -122 -160 -81 -151 -101 b -171 -167 -151 -138 -157 -155 b -239 -195 -185 -181 -213 -192 b -257 -197 -245 -197 -250 -197 b -423 -5 -352 -197 -423 -109 b -412 65 -423 16 -419 40 b -262 197 -389 137 -329 188 "},"v73":{"x_min":0,"x_max":347.078125,"ha":354,"o":"m 231 818 b 239 821 234 820 236 821 b 251 816 243 821 249 818 b 258 800 255 811 255 810 b 341 587 273 725 304 646 l 347 578 l 347 573 l 347 571 b 329 553 347 560 338 553 b 318 556 325 553 322 555 b 264 577 302 567 283 574 b 258 578 261 577 259 578 b 258 577 258 578 258 578 b 258 576 258 577 258 577 b 259 416 259 574 259 542 l 259 258 l 285 265 b 318 270 302 269 311 270 b 336 259 328 270 332 267 b 337 208 336 256 337 233 b 336 158 337 184 336 159 b 302 140 332 148 329 147 b 259 130 266 131 259 130 b 259 65 259 130 259 104 b 259 20 259 51 259 36 l 259 -88 l 285 -81 b 318 -76 302 -77 311 -76 b 332 -81 325 -76 328 -77 b 337 -123 336 -87 337 -86 l 337 -138 l 337 -154 b 332 -195 337 -191 336 -190 b 281 -210 328 -199 328 -199 b 262 -216 272 -213 264 -216 l 259 -216 l 259 -349 l 259 -483 l 258 -487 b 239 -499 254 -495 246 -499 b 220 -487 231 -499 223 -495 l 219 -483 l 217 -355 l 217 -227 l 216 -227 l 194 -233 l 152 -244 b 129 -249 140 -247 130 -249 b 127 -410 127 -249 127 -258 b 127 -576 127 -548 127 -573 b 126 -578 126 -577 126 -578 b 127 -580 126 -578 126 -580 b 133 -578 129 -580 130 -578 b 186 -557 152 -576 170 -569 b 197 -555 190 -556 194 -555 b 215 -573 206 -555 215 -562 l 215 -574 l 215 -580 l 209 -588 b 126 -802 172 -648 141 -727 b 107 -823 123 -817 118 -823 b 87 -798 95 -823 91 -817 b 5 -588 69 -718 40 -648 l 0 -580 l 0 -574 b 0 -573 0 -574 0 -574 b 16 -555 0 -562 6 -555 b 27 -557 20 -555 24 -556 b 81 -578 44 -569 62 -576 b 87 -580 84 -578 85 -580 b 88 -578 88 -580 88 -580 b 87 -576 88 -578 88 -577 b 87 -416 87 -573 87 -549 b 85 -260 87 -270 87 -260 b 85 -260 85 -260 85 -260 b 32 -273 74 -263 35 -273 b 13 -260 24 -273 16 -267 b 12 -209 12 -256 12 -256 l 12 -162 l 13 -158 b 74 -134 17 -148 17 -148 l 87 -131 l 87 -22 b 85 86 87 79 87 86 b 85 86 85 86 85 86 b 32 74 74 83 35 74 b 13 86 24 74 16 79 b 12 137 12 90 12 90 l 12 184 l 13 188 b 73 212 17 198 17 198 l 87 215 l 87 348 l 87 481 l 88 485 b 107 498 92 494 99 498 b 126 485 115 498 122 494 l 127 481 l 127 353 l 127 226 l 133 226 b 172 235 136 227 153 231 l 212 247 l 217 248 l 217 409 b 219 574 217 546 217 571 b 219 577 219 576 219 577 b 219 578 219 578 219 578 b 213 577 217 578 216 577 b 159 556 194 574 175 567 b 148 553 155 555 152 553 b 130 571 138 553 130 560 l 130 573 l 130 578 l 136 587 b 219 796 172 646 200 717 b 231 818 221 813 224 816 m 217 9 b 217 119 217 70 217 119 l 217 119 b 194 113 217 119 206 116 l 152 102 b 129 97 140 99 130 97 b 127 -12 127 97 127 91 l 127 -122 l 133 -120 b 172 -111 136 -119 153 -115 l 212 -101 l 217 -98 l 217 9 "},"v74":{"x_min":-206.890625,"x_max":428.75,"ha":438,"o":"m 389 -351 b 394 -351 390 -351 393 -351 b 428 -385 413 -351 428 -367 b 428 -394 428 -388 428 -391 b 394 -428 426 -406 421 -410 l 332 -473 l 269 -516 l 205 -560 l 141 -603 l 77 -648 l 13 -692 l -50 -737 l -114 -780 l -145 -802 b -171 -813 -157 -810 -163 -813 b -175 -813 -172 -813 -174 -813 b -206 -777 -194 -811 -206 -795 b -202 -760 -206 -771 -205 -766 b -87 -675 -197 -752 -206 -757 l -34 -639 l 83 -557 l 145 -514 l 209 -470 l 272 -427 b 389 -351 375 -356 381 -352 "},"v75":{"x_min":-149.71875,"x_max":148.359375,"ha":151,"o":"m -137 381 b -130 383 -134 383 -133 383 b -111 371 -122 383 -114 378 b -55 224 -110 370 -85 305 b 0 80 -25 145 -1 80 b 54 224 0 80 24 145 b 112 377 114 384 110 373 b 127 384 118 381 122 384 b 148 362 138 384 148 374 l 148 356 l 83 183 b 16 9 47 88 17 11 b -1 0 12 2 5 0 b -14 5 -5 0 -10 1 b -84 183 -19 9 -13 -6 l -149 356 l -149 362 b -137 381 -149 371 -145 378 "},"v76":{"x_min":0,"x_max":737.71875,"ha":753,"o":"m 9 13 b 208 15 10 15 51 15 b 368 15 251 15 304 15 l 726 15 l 729 12 b 737 -1 735 9 737 4 b 729 -15 737 -6 735 -11 l 726 -16 l 660 -16 l 592 -16 l 592 -95 l 592 -174 l 368 -174 l 144 -174 l 144 -95 l 144 -16 l 77 -16 l 9 -16 l 6 -15 b 0 -1 1 -11 0 -6 b 9 13 0 5 2 11 "},"v77":{"x_min":-209.609375,"x_max":208.25,"ha":213,"o":"m -197 19 b 1 20 -194 19 -96 20 b 196 19 98 20 193 19 b 208 -1 204 15 208 6 b 202 -15 208 -6 206 -11 b 95 -22 197 -20 212 -22 b -1 -22 69 -22 38 -22 b -96 -22 -39 -22 -70 -22 b -204 -15 -213 -22 -198 -20 b -209 -1 -208 -11 -209 -6 b -197 19 -209 6 -205 15 "},"v78":{"x_min":0,"x_max":193.28125,"ha":197,"o":"m 85 514 b 95 517 88 517 89 517 b 114 505 103 517 110 513 l 115 502 l 115 376 b 115 249 115 306 115 249 b 141 258 117 249 127 252 l 167 266 l 172 266 b 190 254 181 265 187 262 l 193 251 l 193 202 l 193 188 b 187 147 193 149 191 152 b 147 130 183 142 182 141 l 115 119 l 115 9 b 115 -99 115 -51 115 -99 b 141 -91 115 -99 127 -95 b 171 -81 166 -81 167 -81 l 171 -81 b 191 -94 181 -81 189 -87 b 193 -142 191 -97 193 -120 b 191 -195 193 -167 191 -194 b 125 -227 187 -205 187 -204 l 115 -230 l 115 -366 l 115 -503 l 114 -506 b 95 -519 110 -514 102 -519 b 74 -506 87 -519 78 -514 l 73 -503 l 73 -374 b 73 -245 73 -260 73 -245 b 73 -245 73 -245 73 -245 b 55 -252 72 -245 63 -249 l 32 -260 b 19 -263 27 -262 23 -263 b 4 -256 13 -263 8 -260 b 0 -215 0 -251 0 -254 b 0 -199 0 -210 0 -206 l 0 -152 l 1 -149 b 8 -140 2 -145 5 -141 b 42 -127 9 -140 24 -133 l 73 -116 l 73 -5 b 73 23 73 4 73 15 b 73 105 73 70 73 105 b 49 97 73 105 61 101 b 17 88 32 91 23 88 b 4 95 10 88 8 91 b 0 137 0 101 0 98 b 0 151 0 141 0 145 l 0 199 l 1 202 b 43 224 5 212 5 212 l 73 234 l 73 367 l 73 502 l 74 505 b 85 514 77 509 81 513 "},"v79":{"x_min":-1.359375,"x_max":899.703125,"ha":918,"o":"m 307 349 b 332 351 315 351 323 351 b 443 340 367 351 408 347 b 741 47 607 306 720 195 b 744 0 743 31 744 16 b 660 -303 744 -90 713 -206 b 28 -755 534 -531 304 -695 b 14 -756 23 -755 19 -756 b -1 -741 4 -756 -1 -750 b 21 -720 -1 -731 1 -728 b 567 -56 337 -601 548 -344 b 568 -11 568 -41 568 -24 b 442 285 568 129 525 233 b 325 319 406 308 367 319 b 93 177 232 319 137 266 b 84 154 91 170 84 155 b 84 154 84 154 84 154 b 88 156 84 154 85 155 b 159 177 110 170 134 177 b 257 134 194 177 231 162 b 294 41 281 108 294 73 b 171 -97 294 -24 246 -90 b 156 -98 166 -97 161 -98 b 6 74 73 -98 6 -22 b 6 80 6 76 6 79 b 307 349 10 223 141 340 m 839 215 b 845 216 841 216 842 216 b 862 213 852 216 860 215 b 899 163 887 206 899 184 b 872 117 899 145 890 127 b 847 111 865 112 856 111 b 808 130 833 111 818 117 b 796 162 800 140 796 151 b 839 215 796 187 812 212 m 839 -112 b 845 -112 841 -112 842 -112 b 862 -115 852 -112 860 -113 b 899 -165 887 -122 899 -144 b 872 -210 899 -183 890 -201 b 847 -217 865 -215 856 -217 b 808 -198 833 -217 818 -210 b 796 -165 800 -188 796 -177 b 839 -112 796 -140 812 -116 "},"v7a":{"x_min":-1.359375,"x_max":386.5625,"ha":394,"o":"m 249 535 b 257 537 251 537 253 537 b 276 524 266 537 273 533 l 277 521 l 279 419 l 279 316 l 304 323 b 337 328 319 326 330 328 b 353 316 347 328 349 324 b 355 266 355 315 355 290 b 353 215 355 241 355 217 b 319 198 349 206 347 205 b 279 187 284 190 279 188 b 279 156 279 187 279 174 b 279 136 279 151 279 144 l 279 84 l 289 87 l 330 98 b 367 105 352 102 362 105 b 378 101 372 105 375 104 b 386 61 385 95 386 94 b 386 40 386 55 386 48 l 386 -5 l 385 -8 b 374 -19 383 -12 378 -18 b 291 -40 372 -19 347 -26 b 279 -43 284 -41 279 -43 b 279 -83 279 -43 279 -59 b 279 -95 279 -87 279 -91 l 279 -145 l 304 -140 b 337 -133 321 -136 330 -133 b 349 -140 343 -133 347 -136 b 355 -181 355 -145 355 -142 l 355 -197 l 355 -210 b 349 -252 355 -249 355 -247 b 300 -269 345 -258 347 -258 b 280 -274 291 -272 281 -273 l 279 -274 l 277 -378 l 277 -483 l 276 -487 b 257 -499 273 -495 265 -499 b 238 -487 249 -499 242 -495 l 236 -483 l 236 -384 l 236 -285 l 235 -285 l 212 -291 l 170 -301 b 148 -308 159 -305 148 -306 b 147 -415 147 -308 147 -313 l 147 -523 l 145 -526 b 126 -538 141 -534 133 -538 b 106 -526 118 -538 110 -534 l 104 -523 l 104 -420 b 103 -317 104 -326 104 -317 b 103 -317 103 -317 103 -317 b 50 -330 92 -322 54 -330 b 31 -317 42 -330 35 -326 b 29 -267 29 -315 29 -315 l 29 -219 l 32 -216 b 92 -192 36 -206 36 -206 l 104 -190 l 104 -138 b 103 -87 104 -91 104 -87 b 103 -87 103 -87 103 -87 b 88 -91 103 -87 96 -88 l 49 -101 b 17 -106 32 -105 23 -106 b 6 -102 13 -106 10 -105 b -1 -62 0 -97 -1 -95 b 0 -41 -1 -56 0 -49 l 0 4 l 1 6 b 10 16 2 11 6 15 b 91 37 12 18 38 24 l 104 41 l 104 93 b 103 144 104 140 104 144 b 103 144 103 144 103 144 b 50 131 92 141 54 131 b 31 144 42 131 35 137 b 29 195 29 147 29 148 l 29 242 l 32 245 b 92 269 36 255 36 255 l 104 273 l 104 377 l 104 481 l 106 485 b 126 498 110 492 118 498 b 134 495 129 498 132 496 b 145 485 138 494 142 489 l 147 481 l 147 383 l 147 283 l 152 284 b 190 294 155 285 171 290 l 230 303 l 236 305 l 236 413 l 236 521 l 238 524 b 249 535 240 528 243 533 m 236 126 b 235 177 236 154 236 177 l 235 177 b 213 172 235 177 225 174 l 170 161 b 147 155 157 158 147 155 b 147 124 147 155 147 142 b 147 102 147 117 147 111 l 147 52 l 153 54 l 228 72 l 236 74 l 236 126 m 236 -105 b 235 -54 236 -65 236 -54 l 235 -54 b 231 -55 235 -54 234 -54 b 172 -69 227 -55 204 -62 l 149 -76 l 147 -76 l 147 -127 l 147 -179 l 152 -177 b 190 -167 155 -177 171 -173 l 230 -158 l 236 -156 l 236 -105 "},"v7b":{"x_min":-212.328125,"x_max":210.96875,"ha":215,"o":"m -8 216 b -1 217 -6 216 -4 217 b 19 204 8 217 16 212 b 20 111 20 201 20 199 l 20 20 l 107 20 b 142 20 121 20 133 20 b 205 13 205 20 198 19 b 210 0 209 9 210 4 b 198 -20 210 -9 206 -16 b 107 -22 194 -22 193 -22 l 20 -22 l 20 -112 b 20 -148 20 -126 20 -138 b 13 -212 20 -213 19 -206 b 0 -219 9 -216 4 -219 b -20 -205 -8 -219 -16 -213 b -21 -112 -21 -202 -21 -201 l -21 -22 l -108 -22 b -200 -20 -194 -22 -196 -22 b -212 0 -208 -16 -212 -9 b -206 13 -212 4 -210 9 b -144 20 -200 19 -206 20 b -108 20 -134 20 -122 20 l -21 20 l -21 111 b -20 204 -21 199 -21 201 b -8 216 -17 209 -13 213 "},"v7c":{"x_min":0,"x_max":300.8125,"ha":307,"o":"m 49 505 b 53 506 50 505 51 506 b 70 496 58 506 62 503 b 81 485 73 492 78 488 l 96 473 l 111 459 l 122 449 l 134 438 l 182 396 l 255 330 b 292 291 292 298 292 298 l 292 290 l 292 284 l 283 270 b 209 36 234 197 209 113 b 288 -170 209 -44 235 -119 b 299 -184 295 -179 299 -181 b 300 -191 300 -187 300 -188 b 285 -206 300 -199 294 -206 b 280 -206 283 -206 281 -206 b 247 -201 270 -202 259 -201 b 176 -222 223 -201 197 -208 b 114 -340 136 -249 114 -292 b 172 -471 114 -384 134 -433 b 185 -492 182 -481 185 -487 b 181 -502 185 -496 183 -499 b 171 -508 176 -505 174 -508 b 152 -498 166 -508 160 -503 b 0 -284 65 -428 12 -352 b 0 -260 0 -278 0 -270 b 1 -238 0 -252 0 -242 b 148 -140 16 -177 73 -140 b 209 -148 167 -140 189 -142 b 215 -149 212 -148 215 -149 b 215 -149 215 -149 215 -149 l 215 -149 b 201 -136 215 -148 209 -142 l 157 -97 l 96 -41 b 17 34 21 24 17 29 b 17 37 17 36 17 36 b 17 38 17 37 17 38 b 25 56 17 44 17 44 b 110 298 81 131 110 219 b 46 474 110 367 88 431 b 38 491 40 480 38 487 b 49 505 38 498 42 502 "},"v7d":{"x_min":-1.359375,"x_max":436.921875,"ha":446,"o":"m 213 205 b 217 205 215 205 216 205 b 234 194 224 205 234 199 b 236 187 234 194 235 190 l 245 167 l 261 129 l 270 106 b 355 -61 294 54 329 -13 b 420 -163 381 -105 402 -138 b 436 -188 435 -184 436 -184 b 436 -191 436 -190 436 -190 b 421 -206 436 -201 431 -206 l 421 -206 l 416 -206 l 405 -201 b 217 -158 347 -172 283 -158 b 31 -201 153 -158 88 -172 l 20 -206 l 14 -206 l 14 -206 b 0 -191 5 -206 0 -201 b -1 -188 0 -190 -1 -190 b 14 -163 -1 -186 0 -184 b 95 -34 36 -136 72 -77 b 166 106 119 8 148 68 l 175 129 l 183 148 l 200 188 b 213 205 205 199 208 202 "},"v7e":{"x_min":-390.640625,"x_max":389.28125,"ha":397,"o":"m -377 -1 b -368 0 -375 -1 -372 0 b -362 -1 -366 0 -363 -1 b -343 -24 -356 -4 -352 -8 l -285 -119 l -187 -280 l -88 -444 l -35 -533 b -31 -538 -32 -537 -32 -538 b -28 -534 -31 -538 -29 -537 l -23 -526 l -19 -517 l -13 -509 l -8 -501 l -2 -492 l 2 -483 l 6 -476 l 17 -458 l 23 -449 l 32 -433 l 38 -424 l 42 -416 l 47 -408 l 53 -399 l 58 -391 l 63 -381 l 68 -373 l 73 -365 l 78 -356 l 84 -348 l 89 -340 l 93 -330 l 99 -322 l 104 -315 l 114 -297 l 125 -280 l 129 -272 l 134 -263 l 140 -255 l 145 -247 l 151 -238 l 155 -230 l 160 -220 l 166 -212 l 171 -204 l 176 -195 l 181 -187 l 186 -177 l 191 -169 l 196 -162 l 201 -154 l 206 -144 l 217 -127 l 221 -119 l 227 -111 l 232 -102 l 238 -94 l 242 -86 l 247 -77 l 253 -69 l 258 -59 l 262 -51 l 268 -43 l 273 -34 l 279 -26 l 283 -18 b 321 -1 292 -2 292 -1 b 338 -1 326 -1 332 -1 b 382 -6 378 -1 375 -1 b 389 -20 386 -9 389 -15 b 382 -38 389 -26 386 -31 l 378 -47 l 372 -55 l 367 -63 l 362 -72 l 356 -80 l 351 -90 l 347 -98 l 341 -106 l 336 -115 l 330 -123 l 325 -131 l 321 -141 l 315 -149 l 310 -158 l 304 -166 l 299 -174 b 295 -183 298 -177 296 -181 l 289 -191 l 285 -199 l 280 -208 l 274 -216 l 269 -224 l 264 -233 l 259 -242 l 254 -251 l 249 -259 l 243 -267 l 238 -276 l 234 -284 l 228 -292 l 223 -302 l 217 -310 l 213 -319 l 208 -327 b 202 -335 206 -330 204 -334 l 197 -344 l 193 -351 l 187 -360 l 182 -369 l 176 -377 l 172 -385 l 167 -394 l 161 -403 l 156 -412 l 152 -420 l 147 -428 l 141 -437 l 136 -445 l 130 -455 l 126 -463 l 121 -471 l 115 -480 b 110 -488 114 -483 111 -487 l 106 -496 l 100 -503 l 96 -512 l 89 -521 l 85 -530 l 80 -538 l 74 -546 l 69 -555 l 65 -564 l 59 -573 l 54 -581 l 49 -589 l 43 -598 l 39 -606 l 34 -616 l 28 -624 l 23 -632 b 19 -641 21 -635 20 -638 b 0 -653 14 -649 8 -653 b -25 -631 -10 -653 -14 -649 l -80 -541 l -359 -79 b -389 -29 -375 -52 -389 -30 b -390 -22 -389 -26 -390 -24 b -377 -1 -390 -13 -385 -5 m -13 -9 b -1 -8 -9 -8 -5 -8 b 51 -36 19 -8 39 -19 b 61 -72 58 -47 61 -59 b 51 -106 61 -84 58 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -127 b -62 -72 -57 -102 -62 -87 b -13 -9 -62 -44 -44 -16 "},"v7f":{"x_min":0,"x_max":367.5,"ha":375,"o":"m 0 124 l 0 187 l 61 187 l 122 187 l 122 138 l 122 91 l 153 61 l 183 30 l 213 61 l 243 91 l 243 138 l 243 187 l 306 187 l 367 187 l 367 124 l 367 61 l 321 61 l 274 61 l 243 30 l 213 0 l 243 -31 l 274 -62 l 321 -62 l 367 -62 l 367 -124 l 367 -188 l 306 -188 l 243 -188 l 243 -140 l 243 -93 l 213 -62 l 183 -31 l 153 -62 l 122 -93 l 122 -140 l 122 -188 l 61 -188 l 0 -188 l 0 -124 l 0 -62 l 46 -62 l 92 -62 l 123 -31 l 153 0 l 123 30 l 92 61 l 46 61 l 0 61 l 0 124 "},"v80":{"x_min":29.9375,"x_max":420.578125,"ha":371,"o":"m 115 345 b 221 347 117 345 166 347 b 411 345 306 347 409 345 b 420 330 416 342 420 335 b 415 319 420 326 419 321 b 178 118 397 303 179 118 b 178 117 178 118 178 117 b 181 117 178 117 178 117 b 189 117 182 117 185 117 b 193 117 190 117 191 117 b 247 98 215 117 232 111 b 296 75 266 83 280 76 b 302 75 299 75 300 75 b 322 91 311 75 315 79 b 322 91 322 91 322 91 b 322 91 322 91 322 91 b 319 91 322 91 321 91 b 313 90 318 90 315 90 b 283 107 300 90 288 97 b 277 126 279 114 277 121 b 319 167 277 149 295 167 b 319 167 319 167 319 167 b 362 118 347 167 362 147 b 355 82 362 108 359 96 b 311 33 349 65 340 55 b 224 1 284 12 253 1 b 194 5 213 1 204 2 b 168 18 183 8 178 11 b 110 36 151 30 130 36 b 57 15 88 36 68 29 b 47 11 54 12 51 11 b 31 20 40 11 34 13 b 29 26 31 22 29 25 b 68 66 29 36 39 45 b 285 250 73 71 281 248 b 285 250 285 250 285 250 b 231 252 285 252 261 252 b 137 250 190 252 141 250 b 93 227 122 248 110 241 b 78 220 88 222 83 220 b 66 227 74 220 70 222 b 63 234 65 229 63 231 b 85 291 63 241 69 252 b 115 345 108 342 108 344 "},"v81":{"x_min":0,"x_max":428.75,"ha":438,"o":"m 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 m 366 131 b 352 134 362 133 357 134 b 219 81 321 134 269 115 b 47 -111 126 23 50 -62 b 47 -112 47 -111 47 -112 b 77 -136 47 -129 58 -136 b 264 -45 118 -136 194 -101 b 382 109 336 12 382 76 b 366 131 382 120 377 129 "},"v82":{"x_min":0,"x_max":607.0625,"ha":619,"o":"m 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 m 347 631 b 353 632 348 632 351 632 b 374 620 363 632 371 628 b 375 383 375 616 375 616 l 375 148 l 377 151 b 492 199 415 183 454 199 b 537 191 507 199 522 197 b 607 84 582 176 607 134 b 583 0 607 58 598 29 b 455 -142 562 -40 533 -72 l 378 -215 b 355 -229 364 -229 362 -229 b 334 -216 345 -229 337 -224 l 333 -212 l 333 201 l 333 616 l 334 620 b 347 631 337 624 341 630 m 465 131 b 451 133 461 133 455 133 b 445 133 449 133 446 133 b 379 87 419 129 396 113 l 375 80 l 375 -37 l 375 -156 l 378 -152 b 499 81 451 -72 499 20 l 499 83 b 465 131 499 113 490 126 "},"v83":{"x_min":-1.359375,"x_max":847.96875,"ha":865,"o":"m 488 1499 b 495 1500 490 1500 492 1500 b 541 1465 507 1500 521 1490 b 679 1078 622 1372 679 1210 b 677 1050 679 1068 677 1060 b 477 642 668 893 604 764 l 443 609 l 431 596 l 431 592 l 438 562 l 449 508 l 460 458 b 481 355 475 390 481 355 b 481 355 481 355 481 355 b 490 356 481 355 485 355 b 528 358 495 356 511 358 b 558 356 540 358 552 356 b 839 95 699 338 808 237 b 847 22 845 72 847 47 b 631 -303 847 -113 766 -242 b 620 -309 623 -308 620 -309 l 620 -310 b 631 -359 620 -310 626 -333 l 646 -435 l 660 -496 b 672 -588 668 -535 672 -563 b 664 -653 672 -610 669 -630 b 383 -875 630 -792 509 -875 b 201 -810 321 -875 257 -855 b 129 -680 151 -768 129 -730 b 274 -530 129 -592 200 -530 b 351 -553 300 -530 326 -538 b 412 -669 393 -582 412 -626 b 287 -805 412 -735 366 -800 l 279 -805 l 285 -809 b 383 -830 318 -823 351 -830 b 586 -718 464 -830 540 -789 b 626 -584 612 -678 626 -631 b 619 -528 626 -566 623 -548 b 612 -495 619 -526 616 -510 b 577 -324 590 -387 577 -324 b 577 -324 577 -324 577 -324 b 568 -326 575 -324 571 -324 b 528 -334 558 -328 537 -333 b 465 -338 506 -337 485 -338 b 24 -11 269 -338 87 -206 b -1 145 8 41 -1 93 b 96 442 -1 249 32 351 b 322 714 166 541 236 626 l 352 745 l 345 782 l 332 843 l 315 921 b 303 984 310 950 304 978 b 295 1082 298 1017 295 1049 b 413 1426 295 1208 336 1329 b 488 1499 436 1456 477 1496 m 549 1301 b 541 1301 547 1301 544 1301 b 411 1207 500 1301 447 1263 b 355 1004 374 1152 355 1079 b 359 942 355 984 356 963 b 371 881 362 927 363 917 l 385 818 b 392 782 389 799 392 784 l 392 782 b 434 828 393 782 424 816 b 607 1165 534 941 594 1060 b 608 1193 608 1175 608 1183 b 597 1270 608 1224 604 1254 b 549 1301 589 1286 571 1299 m 398 528 b 393 555 396 542 393 553 b 392 555 393 555 393 555 b 317 470 390 555 347 505 b 190 298 266 408 212 334 b 127 70 148 227 127 148 b 155 -77 127 19 137 -30 b 468 -303 209 -216 333 -303 b 519 -299 484 -303 502 -302 b 568 -284 541 -295 568 -287 l 568 -284 b 563 -263 568 -284 566 -274 l 534 -120 l 511 -13 l 496 61 l 480 133 b 469 187 472 176 469 187 b 468 188 469 187 469 188 b 416 162 462 188 430 172 b 337 13 364 126 337 69 b 413 -124 337 -40 363 -93 b 428 -144 424 -131 428 -137 b 428 -149 428 -145 428 -148 b 409 -166 426 -161 419 -166 b 394 -162 405 -166 400 -165 b 240 77 302 -122 240 -27 l 240 77 b 430 342 240 197 315 301 l 436 344 l 426 394 l 398 528 m 548 194 b 526 195 540 195 532 195 b 519 195 524 195 521 195 l 514 195 l 518 177 l 539 79 l 552 15 l 566 -48 l 594 -187 l 605 -240 b 612 -266 609 -254 611 -266 b 612 -266 612 -266 612 -266 b 641 -248 613 -266 630 -256 b 744 -98 692 -212 730 -156 b 751 -40 749 -79 751 -59 b 548 194 751 76 665 181 "},"v84":{"x_min":25.859375,"x_max":164.6875,"ha":168,"o":"m 34 369 b 40 370 35 370 38 370 b 59 353 49 370 50 367 b 164 40 122 254 155 158 b 164 0 164 33 164 16 b 164 -40 164 -16 164 -34 b 59 -353 155 -158 122 -254 b 40 -371 53 -366 47 -371 b 34 -370 38 -371 36 -370 b 25 -358 28 -367 25 -363 b 31 -337 25 -352 27 -347 b 92 0 72 -234 92 -117 b 31 335 92 116 72 233 b 25 356 27 345 25 352 b 34 369 25 363 28 366 "},"v85":{"x_min":-21.78125,"x_max":251.8125,"ha":257,"o":"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 "},"v86":{"x_min":-571.671875,"x_max":570.3125,"ha":582,"o":"m -386 173 b -381 174 -385 174 -383 174 b -370 173 -377 174 -372 173 b -281 86 -367 172 -347 151 b -196 0 -235 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 277 172 b 289 174 285 174 288 174 b 299 173 294 174 298 173 b 462 11 303 172 338 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 374 -176 371 -176 b 280 -87 367 -173 345 -152 b 194 0 234 -38 194 0 b 125 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 43 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -141 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -289 -176 b -300 -174 -295 -176 -299 -174 b -464 -12 -304 -173 -340 -137 l -476 0 l -504 -34 b -543 -77 -534 -73 -537 -76 b -549 -79 -545 -79 -547 -79 b -571 -58 -562 -79 -571 -69 b -568 -49 -571 -55 -570 -52 b -392 172 -566 -43 -396 167 b -386 173 -390 172 -387 173 "},"v87":{"x_min":0,"x_max":0,"ha":263},"v88":{"x_min":-1.359375,"x_max":413.78125,"ha":422,"o":"m 99 692 b 107 694 102 692 104 694 b 121 688 112 694 117 691 b 126 673 123 685 125 682 b 209 460 141 598 172 519 l 215 451 l 215 445 l 215 445 b 197 426 215 434 206 426 b 186 430 194 426 190 427 b 133 449 170 440 152 446 b 127 451 130 449 129 451 b 126 449 126 451 126 451 b 127 446 126 449 127 448 b 127 324 127 444 127 424 b 129 205 127 259 129 205 b 215 227 129 205 167 215 b 308 249 283 244 300 249 b 315 247 311 249 313 248 b 325 237 319 245 323 241 l 326 233 l 326 -105 b 326 -262 326 -167 326 -219 b 326 -448 326 -416 326 -445 b 325 -451 325 -449 325 -451 b 326 -452 325 -452 325 -452 b 330 -451 326 -452 329 -451 b 385 -431 351 -448 368 -441 b 396 -427 389 -428 393 -427 b 413 -446 405 -427 413 -435 l 413 -446 l 413 -452 l 408 -462 b 325 -674 371 -520 340 -599 b 306 -695 322 -689 317 -695 b 285 -670 294 -695 289 -689 b 204 -462 268 -591 239 -520 l 197 -452 l 197 -446 l 197 -446 b 215 -427 197 -435 205 -427 b 225 -431 219 -427 223 -428 b 280 -451 243 -441 261 -448 b 285 -452 283 -452 284 -452 b 287 -451 287 -452 287 -452 b 285 -448 287 -451 287 -449 b 285 -323 285 -445 285 -426 b 284 -201 285 -247 284 -201 b 197 -223 284 -201 245 -210 b 104 -245 129 -240 111 -245 b 98 -242 102 -245 100 -244 b 88 -233 93 -241 89 -237 l 87 -230 l 87 106 b 87 262 87 169 87 220 b 87 446 87 415 87 444 b 88 449 88 448 88 449 b 87 451 88 451 88 451 b 81 449 85 451 84 451 b 27 430 62 446 44 440 b 16 426 24 427 20 426 b -1 445 6 426 -1 434 b 0 445 -1 445 0 445 l 0 451 l 5 460 b 87 669 40 519 69 589 b 99 692 91 685 92 688 m 284 22 b 285 70 285 41 285 58 b 284 116 285 113 284 116 l 284 116 b 205 97 283 116 247 106 l 127 77 l 127 -18 b 129 -112 127 -69 129 -112 l 206 -93 l 284 -73 l 284 22 "},"v89":{"x_min":0,"x_max":737.71875,"ha":753,"o":"m 144 94 l 144 173 l 368 173 l 592 173 l 592 94 l 592 15 l 660 15 l 726 15 l 729 12 b 737 -1 735 9 737 4 b 729 -15 737 -6 735 -11 l 726 -16 l 368 -16 l 9 -16 l 6 -15 b 0 -1 1 -11 0 -6 b 6 12 0 4 1 9 l 9 15 l 77 15 l 144 15 l 144 94 "},"v8a":{"x_min":-170.140625,"x_max":168.78125,"ha":172,"o":"m -160 567 b -122 567 -159 567 -149 567 l -87 567 l -84 566 b -74 553 -78 563 -77 560 b -20 366 -73 551 -49 466 b 31 186 8 267 31 186 b 85 371 31 186 55 269 b 140 559 114 473 138 557 b 153 567 141 564 148 567 b 168 559 159 567 166 564 b 168 555 168 557 168 557 b 92 281 168 548 159 513 b 14 13 50 134 14 13 b 0 0 14 6 6 0 b -17 15 -8 0 -17 8 b -93 283 -17 15 -51 136 b -170 552 -166 533 -170 548 b -170 553 -170 552 -170 552 b -160 567 -170 560 -167 564 "},"v8b":{"x_min":0,"x_max":319.859375,"ha":326,"o":"m 149 508 b 159 509 152 509 155 509 b 186 494 170 509 181 503 b 190 440 190 487 190 488 l 190 430 l 190 377 l 242 377 l 251 377 b 303 373 298 377 296 377 b 319 345 314 367 319 356 b 304 319 319 335 314 324 b 250 315 296 315 299 315 l 242 315 l 190 315 l 190 262 l 190 252 b 186 198 190 204 190 205 b 159 183 179 188 170 183 b 132 198 148 183 138 188 b 127 252 127 205 127 204 l 127 262 l 127 315 l 76 315 l 68 315 b 14 319 20 315 21 315 b 0 347 4 324 0 335 b 14 373 0 356 4 367 b 68 377 21 377 20 377 l 76 377 l 127 377 l 127 430 l 127 440 b 132 494 127 488 127 487 b 149 508 136 501 142 505 "},"v8c":{"x_min":-330.75,"x_max":329.390625,"ha":336,"o":"m -133 483 b -117 484 -127 484 -122 484 b 31 373 -51 484 9 440 b 35 348 34 365 35 356 b -25 285 35 313 10 285 b -87 331 -55 285 -76 302 b -167 402 -100 376 -133 402 b -191 398 -175 402 -183 401 b -227 341 -215 388 -227 369 b -225 320 -227 334 -227 327 b -13 74 -209 230 -125 133 b 6 65 -4 70 5 66 l 9 63 l 10 65 b 117 231 12 68 40 112 l 189 341 l 242 424 b 268 460 262 456 264 458 b 283 464 273 463 277 464 b 308 438 296 464 308 453 l 308 437 b 287 396 308 430 308 428 l 95 98 l 59 43 l 58 41 l 65 37 b 253 -156 151 -8 217 -77 b 281 -285 272 -199 281 -244 b 148 -481 281 -381 231 -463 b 115 -485 137 -484 126 -485 b -32 -376 51 -485 -9 -442 b -36 -349 -35 -366 -36 -358 b 25 -287 -36 -315 -12 -287 b 85 -333 54 -287 74 -302 b 166 -403 99 -377 133 -403 b 190 -399 174 -403 182 -402 b 225 -342 215 -390 225 -370 b 224 -322 225 -335 225 -328 b 12 -76 208 -231 125 -134 b -8 -66 2 -72 -6 -68 l -10 -65 l -12 -66 b -118 -231 -13 -68 -42 -113 l -190 -342 l -243 -426 b -269 -462 -264 -458 -265 -458 b -284 -466 -274 -464 -279 -466 b -310 -440 -298 -466 -310 -455 l -310 -438 b -288 -398 -310 -430 -308 -430 l -96 -99 l -59 -44 l -59 -43 l -66 -38 b -281 284 -198 33 -281 158 l -281 284 b -133 483 -281 392 -220 474 m 254 177 b 266 179 258 177 262 179 b 319 149 287 179 307 167 b 329 115 326 140 329 127 b 319 79 329 102 326 90 b 268 51 307 61 287 51 b 221 72 250 51 234 58 b 205 115 210 84 205 99 b 254 177 205 142 223 170 m -281 -54 b -269 -52 -277 -52 -273 -52 b -223 -73 -253 -52 -235 -59 b -206 -116 -212 -84 -206 -101 b -216 -151 -206 -129 -209 -141 b -269 -179 -228 -170 -249 -179 b -314 -159 -285 -179 -302 -173 b -330 -116 -325 -147 -330 -131 b -281 -54 -330 -88 -313 -61 "},"v8d":{"x_min":-1.359375,"x_max":255.890625,"ha":261,"o":"m 118 514 b 127 517 121 517 122 517 b 147 505 136 517 142 513 l 148 502 l 148 403 b 148 306 148 351 148 306 b 174 315 149 306 160 310 l 200 324 l 205 323 b 223 312 213 323 220 319 l 225 308 l 225 260 b 225 245 225 255 225 249 b 220 204 225 208 224 209 b 179 188 216 199 215 199 l 148 177 l 148 124 l 148 70 l 189 84 b 236 98 219 94 230 98 b 247 94 240 98 243 97 b 255 52 254 88 255 87 b 255 33 255 47 255 40 l 254 -12 l 253 -15 b 249 -22 253 -18 250 -20 l 245 -24 l 196 -41 l 148 -58 l 148 -108 b 148 -158 148 -136 148 -158 b 174 -148 148 -158 160 -154 b 204 -140 198 -140 200 -140 l 204 -140 b 224 -152 213 -140 221 -145 b 225 -201 224 -155 225 -177 b 224 -254 225 -226 224 -251 b 157 -284 220 -262 220 -262 l 148 -288 l 148 -395 l 148 -503 l 147 -506 b 127 -519 142 -514 134 -519 b 107 -506 119 -519 111 -514 l 106 -503 l 106 -403 b 106 -303 106 -316 106 -303 b 104 -303 104 -303 104 -303 b 88 -310 104 -303 96 -306 l 63 -319 b 51 -322 59 -320 55 -322 b 36 -315 46 -322 40 -319 b 31 -273 32 -309 31 -312 b 31 -258 31 -269 31 -263 l 31 -210 l 34 -206 b 40 -198 35 -204 38 -199 b 74 -186 42 -197 57 -191 l 106 -173 l 106 -123 b 106 -97 106 -112 106 -104 b 106 -72 106 -76 106 -72 b 104 -72 106 -72 106 -72 b 20 -99 89 -79 23 -99 b 0 -84 10 -99 2 -93 b -1 -37 0 -81 -1 -59 b 0 11 -1 -15 0 9 b 58 40 4 22 2 22 l 106 56 l 106 109 b 106 123 106 115 106 119 b 106 162 106 147 106 162 b 81 155 106 162 93 159 b 50 147 65 149 55 147 b 36 152 43 147 40 148 b 31 194 32 158 31 156 b 31 209 31 198 31 204 l 31 256 l 34 260 b 76 281 38 269 38 269 l 106 292 l 106 396 l 106 502 l 107 505 b 118 514 110 509 114 513 "},"v8e":{"x_min":-299.4375,"x_max":298.078125,"ha":304,"o":"m -281 174 b -274 174 -280 174 -277 174 b -259 173 -270 174 -265 174 l -40 112 l 224 40 b 287 20 289 22 283 23 b 298 0 295 16 298 8 b 287 -22 298 -9 295 -18 b 287 -23 287 -23 287 -23 b 287 -23 287 -23 287 -23 b -40 -113 287 -24 270 -29 l -259 -174 b -274 -176 -265 -176 -270 -176 b -288 -172 -280 -176 -284 -174 b -299 -151 -296 -167 -299 -159 b -288 -129 -299 -141 -296 -133 b -98 -74 -284 -124 -307 -131 l 42 -36 l 140 -9 b 170 0 156 -4 170 -1 b 140 8 170 0 156 2 l 42 34 l -98 73 b -287 126 -299 129 -284 124 b -299 149 -295 131 -299 140 b -281 174 -299 161 -294 170 "},"v8f":{"x_min":-21.78125,"x_max":362.0625,"ha":369,"o":"m 302 1031 b 308 1032 304 1032 307 1032 b 330 1016 318 1032 325 1027 b 362 867 351 970 362 920 b 340 738 362 824 353 780 l 336 727 l 340 717 b 362 591 355 677 362 634 b 257 323 362 496 325 401 b 204 272 243 306 227 290 b 20 56 129 206 66 133 b -1 18 12 44 0 22 b -19 4 -4 9 -12 4 l -21 4 l -21 140 l -21 276 l -12 277 b 167 333 61 288 127 309 b 319 598 262 388 319 491 b 311 664 319 620 317 642 l 310 673 l 304 664 b 204 548 279 620 250 587 b 20 333 129 483 66 409 b -1 292 12 320 0 298 b -19 280 -4 285 -12 280 l -21 280 l -21 416 l -21 552 l -12 553 b 167 609 61 564 127 585 b 319 874 264 666 319 770 b 294 992 319 914 311 954 b 288 1011 288 1004 288 1007 b 302 1031 288 1021 294 1028 "},"v90":{"x_min":-171.5,"x_max":483.1875,"ha":493,"o":"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 495 20 616 20 616 b 20 373 20 427 20 373 b 115 410 20 373 63 390 l 210 448 l 210 531 b 212 620 210 614 210 616 b 231 632 215 628 223 632 b 246 627 236 632 242 631 b 251 541 251 620 251 628 l 251 463 l 315 489 b 387 514 368 509 381 514 b 393 513 390 514 392 514 b 406 494 402 510 406 502 b 397 476 406 487 404 480 b 323 446 396 474 363 462 l 251 417 l 251 283 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -19 -217 -9 -229 -16 -224 l -20 -215 l -21 48 l -21 310 l -83 287 b -152 262 -133 266 -145 262 b -157 263 -153 262 -155 262 b -171 283 -166 266 -171 274 b -161 301 -171 290 -167 297 b -91 328 -160 302 -129 315 l -21 356 l -21 487 l -20 617 l -19 621 b -8 631 -17 626 -12 630 m 210 288 b 210 401 210 351 210 401 b 114 365 209 401 167 384 l 20 327 l 20 238 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 180 164 199 187 192 l 209 177 b 209 177 209 177 209 177 b 210 288 210 177 210 199 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 "},"v91":{"x_min":-355.25,"x_max":353.890625,"ha":361,"o":"m -27 720 b -13 721 -24 720 -20 721 b 42 718 4 721 34 720 b 343 446 190 699 308 591 b 353 360 349 417 353 390 b 84 9 353 197 245 49 b 0 0 55 2 27 0 b -344 273 -160 0 -306 109 b -355 359 -351 302 -355 331 b -39 718 -355 539 -221 700 l -27 720 m 39 691 b -13 692 32 691 4 692 b -25 692 -19 692 -23 692 b -322 416 -178 677 -296 566 b -326 360 -325 394 -326 390 b -325 323 -326 341 -325 328 b -36 29 -303 163 -193 51 b -1 29 -31 29 -16 29 b 35 29 14 29 29 29 b 323 323 191 51 302 163 b 325 360 323 328 325 341 b 321 416 325 390 323 394 b 39 691 296 560 185 669 m -12 655 b -4 655 -9 655 -6 655 b 20 652 4 655 14 653 b 66 585 50 642 66 613 b 32 524 66 562 55 538 b 25 521 28 523 25 521 b 16 403 25 520 16 408 b 16 403 16 403 16 403 l 16 403 b 54 448 17 403 34 423 l 92 492 l 89 499 b 87 519 88 506 87 513 b 103 564 87 535 92 552 b 155 589 117 581 136 589 b 216 551 179 589 204 576 b 224 520 221 541 224 530 b 156 449 224 483 193 449 b 136 453 149 449 142 451 l 129 455 l 85 416 b 42 377 61 395 42 378 l 42 377 l 42 377 b 156 387 46 377 156 387 b 160 394 156 387 159 390 b 220 430 172 417 197 430 b 280 394 243 430 266 417 b 288 360 285 384 288 371 b 280 326 288 348 285 337 b 220 291 266 302 243 291 b 160 327 197 291 172 302 b 156 333 159 330 156 333 b 42 342 156 333 46 342 b 42 342 42 342 42 342 l 42 342 b 85 303 42 342 61 324 l 129 265 l 136 267 b 155 270 142 269 148 270 b 198 254 171 270 186 265 b 223 201 216 240 223 220 b 186 138 223 176 210 151 b 155 131 176 133 166 131 b 87 201 119 131 87 162 b 89 220 87 206 88 213 l 92 227 l 54 272 b 16 316 34 297 17 316 l 16 316 b 16 316 16 316 16 316 b 25 199 16 313 25 199 b 32 195 25 199 28 198 b 68 134 55 183 68 158 b 32 73 68 111 55 87 b -1 65 23 68 10 65 b -34 73 -12 65 -24 68 b -69 134 -57 87 -69 111 b -34 195 -69 158 -57 183 b -27 199 -29 198 -27 199 b -17 316 -27 199 -17 313 b -17 316 -17 316 -17 316 l -17 316 b -55 272 -19 316 -35 297 l -93 227 l -91 220 b -88 201 -89 215 -88 208 b -104 156 -88 184 -93 169 b -156 131 -118 140 -137 131 b -217 169 -181 131 -205 144 b -225 201 -223 179 -225 190 b -157 270 -225 238 -194 270 b -137 267 -151 270 -144 269 l -130 265 l -87 303 b -43 342 -62 324 -43 342 l -43 342 b -43 342 -43 342 -43 342 b -157 333 -47 342 -157 333 b -161 327 -159 333 -160 330 b -221 291 -175 302 -198 291 b -281 326 -245 291 -268 302 b -289 360 -287 337 -289 348 b -281 394 -289 371 -287 384 b -221 430 -268 417 -245 430 b -161 394 -198 430 -175 417 b -157 387 -160 390 -159 387 b -43 377 -157 387 -47 377 l -43 377 l -43 377 b -87 416 -43 378 -62 395 l -130 455 l -137 453 b -156 449 -144 451 -149 449 b -200 466 -172 449 -187 455 b -224 520 -217 480 -224 499 b -187 581 -224 545 -212 569 b -156 589 -178 587 -167 589 b -88 520 -121 589 -88 559 b -91 499 -88 513 -89 506 l -93 492 l -55 448 b -17 403 -35 423 -19 403 l -17 403 b -17 403 -17 403 -17 403 b -27 521 -17 408 -27 520 b -34 524 -27 521 -29 523 b -68 585 -57 538 -68 562 b -12 655 -68 617 -47 649 "},"v92":{"x_min":0,"x_max":598.890625,"ha":611,"o":"m 62 181 b 77 183 66 183 72 183 b 91 181 83 183 88 183 b 202 131 100 180 106 177 l 299 87 l 394 131 b 517 183 499 181 502 183 b 519 183 517 183 518 183 b 598 104 567 183 598 144 b 577 49 598 84 592 65 b 518 15 567 38 563 37 b 484 0 499 6 484 0 b 518 -16 484 -1 499 -8 b 577 -51 563 -38 567 -40 b 598 -105 592 -66 598 -86 b 519 -184 598 -145 567 -184 b 517 -184 518 -184 517 -184 b 394 -133 502 -184 499 -183 l 299 -88 l 202 -133 b 81 -184 99 -183 95 -184 b 77 -184 80 -184 78 -184 b 0 -105 29 -184 0 -145 b 20 -51 0 -86 5 -66 b 80 -16 29 -40 34 -38 b 114 -1 98 -8 114 -1 b 80 15 114 0 98 6 b 20 49 34 37 29 38 b 0 104 6 65 0 84 b 62 181 0 140 23 174 m 88 134 b 74 136 85 134 80 136 b 68 134 72 136 69 136 b 46 104 54 130 46 117 b 55 81 46 95 49 88 b 149 34 59 76 53 80 b 224 -1 190 15 224 0 b 144 -38 224 -1 187 -18 b 54 -84 59 -79 58 -79 b 46 -105 49 -90 46 -98 b 76 -137 46 -122 58 -137 b 78 -137 77 -137 77 -137 b 194 -86 87 -137 76 -141 b 298 -36 250 -58 298 -36 b 298 -36 298 -36 298 -36 b 402 -84 299 -36 345 -58 b 518 -137 522 -141 510 -137 b 521 -137 519 -137 519 -137 b 551 -105 539 -137 551 -122 b 541 -83 551 -98 548 -90 b 447 -36 537 -77 544 -81 b 374 -1 406 -16 374 -1 b 447 34 374 0 406 15 b 541 81 544 80 537 76 b 551 104 548 88 551 97 b 521 136 551 120 539 136 b 518 136 519 136 519 136 b 517 136 518 136 517 136 l 517 136 b 402 83 511 136 511 136 b 298 34 345 56 299 34 b 298 34 298 34 298 34 b 194 84 298 34 250 56 b 88 134 137 111 89 133 "},"v93":{"x_min":0,"x_max":438.28125,"ha":447,"o":"m 212 205 b 219 205 213 205 216 205 b 239 183 228 205 231 204 b 421 -163 298 40 363 -83 b 438 -191 434 -180 438 -186 b 436 -197 438 -192 438 -195 b 424 -206 434 -204 431 -206 b 406 -201 420 -206 415 -205 b 216 -156 347 -172 281 -156 b 23 -205 148 -156 80 -173 b 14 -206 20 -206 17 -206 b 0 -191 6 -206 0 -201 b 6 -176 0 -187 1 -183 b 202 192 63 -104 142 45 b 212 205 205 199 208 202 m 264 48 l 249 81 l 243 94 l 242 91 b 89 -126 208 36 137 -66 b 81 -138 85 -133 81 -138 b 81 -138 81 -138 81 -138 b 81 -138 81 -138 81 -138 b 95 -133 81 -138 87 -136 b 280 -94 156 -108 221 -94 b 334 -98 299 -94 317 -95 b 343 -99 338 -99 343 -99 b 343 -99 343 -99 343 -99 b 338 -94 343 -99 341 -97 b 264 48 318 -58 287 1 "},"v94":{"x_min":-149.71875,"x_max":148.359375,"ha":151,"o":"m -9 215 b 0 217 -6 217 -4 217 b 19 205 8 217 14 213 b 20 142 20 202 20 201 l 20 84 l 23 84 b 144 -27 81 74 129 30 b 148 -66 147 -40 148 -54 b 36 -213 148 -134 103 -197 b 0 -219 24 -217 12 -219 b -145 -104 -68 -219 -129 -173 b -149 -68 -148 -91 -149 -79 b -24 84 -149 6 -98 74 l -21 84 l -21 142 b -19 205 -20 201 -20 202 b -9 215 -17 209 -13 213 m -21 -15 b -23 41 -21 37 -21 41 b -23 41 -23 41 -23 41 b -76 11 -35 40 -62 26 b -108 -65 -98 -11 -108 -38 b -1 -176 -108 -122 -65 -176 b 107 -65 63 -176 107 -122 b 74 11 107 -38 96 -11 b 20 41 61 26 32 41 b 20 -15 20 41 20 15 b 19 -74 20 -72 20 -72 b 0 -87 14 -83 6 -87 b -19 -74 -8 -87 -16 -83 b -21 -15 -20 -72 -20 -72 "},"v95":{"x_min":0,"x_max":406.96875,"ha":415,"o":"m 55 181 b 70 183 61 183 66 183 b 111 170 85 183 99 179 b 160 130 115 167 137 149 l 202 95 l 245 130 b 319 181 299 176 302 179 b 334 183 325 183 330 183 b 406 109 375 183 406 148 b 401 81 406 99 405 91 b 348 24 394 65 390 59 b 318 -1 332 11 318 0 b 348 -26 318 -1 332 -12 b 401 -83 390 -61 394 -66 b 406 -111 405 -93 406 -101 b 334 -184 406 -149 375 -184 b 319 -183 330 -184 325 -184 b 245 -131 302 -180 299 -177 l 202 -97 l 160 -131 b 85 -183 107 -177 103 -180 b 70 -184 80 -184 76 -184 b 0 -111 31 -184 0 -149 b 4 -83 0 -101 1 -93 b 58 -26 10 -66 16 -61 b 88 -1 74 -12 88 -1 b 58 24 88 0 74 11 b 10 69 23 54 17 59 b 0 109 2 81 0 95 b 55 181 0 142 21 173 m 83 133 b 72 136 78 136 76 136 b 57 131 66 136 61 134 b 46 109 49 126 46 117 b 50 93 46 104 47 98 b 107 45 51 91 77 70 b 160 0 137 20 160 0 b 107 -47 160 -1 137 -22 b 50 -94 77 -72 51 -93 b 46 -111 47 -99 46 -105 b 59 -134 46 -120 50 -130 b 72 -137 62 -136 68 -137 b 83 -136 76 -137 80 -136 b 144 -84 84 -134 107 -116 b 202 -36 176 -58 202 -36 b 261 -84 202 -36 230 -58 b 323 -136 299 -116 321 -134 b 334 -137 326 -136 330 -137 b 345 -134 338 -137 343 -136 b 360 -111 355 -130 360 -120 b 355 -94 360 -105 359 -99 b 299 -47 353 -93 329 -72 b 245 0 269 -22 245 -1 b 299 45 245 0 269 20 b 355 93 329 70 353 91 b 360 109 359 98 360 104 b 345 133 360 119 355 129 b 334 136 343 134 338 136 b 323 134 330 136 326 134 b 261 83 321 133 299 115 b 202 34 230 56 202 34 b 144 83 202 34 176 56 b 83 133 106 115 84 133 "},"v96":{"x_min":0,"x_max":597.53125,"ha":610,"o":"m 356 341 b 479 341 402 341 445 341 b 570 341 533 341 568 341 b 597 309 586 340 597 326 l 597 309 b 472 -320 597 305 475 -310 b 451 -341 469 -330 462 -337 b 242 -342 450 -342 347 -342 b 21 -341 134 -342 24 -342 b 0 -310 8 -337 0 -324 b 0 -310 0 -310 0 -310 b 123 316 0 -306 118 297 b 144 340 126 327 133 335 b 356 341 147 341 153 341 m 528 276 b 353 277 528 277 492 277 b 179 276 215 277 179 277 b 123 -1 179 276 153 151 l 68 -278 l 242 -278 b 310 -278 266 -278 289 -278 b 416 -278 372 -278 416 -278 b 528 276 417 -278 528 274 "},"v97":{"x_min":-228.671875,"x_max":227.3125,"ha":232,"o":"m -217 487 l -213 488 l 0 488 l 212 488 l 216 487 b 225 476 220 484 224 480 l 227 473 l 227 244 l 227 15 l 225 12 b 206 0 223 4 215 0 b 197 1 204 0 200 0 b 187 12 193 4 189 6 l 186 15 l 186 138 l 186 262 l -1 262 l -187 262 l -187 138 l -187 15 l -189 12 b -208 0 -193 4 -200 0 b -227 12 -216 0 -223 4 l -228 15 l -228 244 l -228 473 l -227 476 b -217 487 -225 480 -221 484 "},"v98":{"x_min":-1.359375,"x_max":427.390625,"ha":436,"o":"m 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 b 272 494 272 616 272 616 l 272 370 l 344 333 b 426 285 426 292 423 294 b 427 277 426 283 427 280 b 405 256 427 266 417 256 b 405 256 405 256 405 256 l 400 256 l 336 290 b 272 322 300 308 272 322 b 272 54 272 322 272 201 b 270 -216 272 -212 272 -212 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b -1 84 9 18 -1 52 b 111 199 -1 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 245 l 231 342 l 157 380 b 81 420 92 413 84 417 b 76 435 77 424 76 430 b 96 456 76 446 84 456 b 98 456 96 456 98 456 l 103 456 l 166 424 b 230 391 201 406 230 391 b 231 503 230 391 231 442 b 232 620 231 614 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 "},"v99":{"x_min":0,"x_max":239.5625,"ha":244,"o":"m 10 460 b 20 462 13 462 14 462 b 39 449 28 462 35 458 l 40 446 l 40 326 b 40 205 40 259 40 205 b 127 227 40 205 80 215 b 220 249 196 244 213 249 b 227 247 224 249 225 248 b 238 237 231 245 235 241 l 239 233 l 239 -106 l 239 -448 l 238 -451 b 219 -463 234 -459 225 -463 b 198 -451 210 -463 202 -459 l 197 -448 l 197 -324 b 197 -201 197 -248 197 -201 b 110 -223 196 -201 157 -210 b 17 -245 42 -240 24 -245 b 10 -242 13 -245 13 -244 b 0 -233 6 -241 2 -237 l 0 -230 l 0 108 l 0 446 l 0 449 b 10 460 2 453 6 458 m 197 22 b 197 70 197 41 197 58 b 196 116 197 113 197 116 l 196 116 b 118 97 196 116 160 106 l 40 77 l 40 -18 b 40 -112 40 -69 40 -112 l 119 -93 l 197 -73 l 197 22 "},"v9a":{"x_min":-21.78125,"x_max":367.5,"ha":375,"o":"m 230 1031 b 238 1032 232 1032 235 1032 b 259 1014 245 1032 251 1027 b 367 662 330 906 367 782 b 364 602 367 641 367 621 b 232 317 352 488 304 384 b 57 120 155 245 103 187 b -1 18 31 84 6 40 b -19 4 -4 11 -12 4 l -21 4 l -21 159 l -21 315 l -16 315 b 96 335 10 315 62 324 b 315 695 227 380 315 527 b 313 738 315 709 314 724 b 224 991 304 825 273 916 b 216 1013 219 999 216 1007 b 230 1031 216 1021 220 1028 "},"v9b":{"x_min":-24.5,"x_max":313.0625,"ha":319,"o":"m -24 -133 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 142 -213 13 -61 74 -144 b 258 -376 196 -269 230 -315 b 313 -605 295 -449 313 -528 b 292 -742 313 -652 306 -699 b 288 -752 289 -748 288 -752 b 288 -752 288 -752 288 -752 b 292 -764 289 -753 291 -757 b 313 -907 306 -811 313 -860 b 292 -1045 313 -954 306 -1002 b 288 -1054 289 -1050 288 -1054 b 288 -1054 288 -1054 288 -1054 b 292 -1067 289 -1054 291 -1060 b 313 -1210 306 -1113 313 -1161 b 292 -1346 313 -1257 306 -1304 b 288 -1357 289 -1353 288 -1357 b 288 -1357 288 -1357 288 -1357 b 292 -1368 289 -1357 291 -1363 b 313 -1512 306 -1415 313 -1464 b 292 -1648 313 -1560 306 -1605 b 288 -1660 289 -1654 288 -1660 b 288 -1660 288 -1660 288 -1660 b 292 -1671 289 -1660 291 -1665 b 313 -1814 306 -1719 313 -1766 b 250 -2040 313 -1897 291 -1977 b 232 -2062 238 -2057 236 -2059 b 221 -2065 230 -2063 225 -2065 b 200 -2045 210 -2065 201 -2057 b 200 -2043 200 -2044 200 -2044 b 208 -2026 200 -2037 202 -2034 b 269 -1826 249 -1966 269 -1897 b 153 -1544 269 -1726 230 -1625 b -9 -1472 115 -1506 58 -1481 b -21 -1471 -14 -1471 -19 -1471 l -24 -1471 l -24 -1343 l -24 -1215 l -20 -1215 b -1 -1229 -12 -1215 -4 -1221 b 142 -1424 13 -1270 74 -1353 b 257 -1582 196 -1478 228 -1524 b 264 -1594 261 -1589 264 -1594 l 264 -1594 b 265 -1582 264 -1594 264 -1589 b 270 -1525 268 -1562 270 -1544 b 153 -1243 270 -1424 228 -1321 b -9 -1170 115 -1203 58 -1178 b -21 -1168 -14 -1170 -19 -1168 l -24 -1168 l -24 -1041 l -24 -913 l -20 -913 b -1 -927 -12 -913 -4 -918 b 142 -1121 13 -967 74 -1050 b 257 -1281 196 -1175 228 -1221 b 264 -1292 261 -1286 264 -1292 l 264 -1292 b 265 -1279 264 -1292 264 -1286 b 270 -1222 268 -1261 270 -1242 b 153 -941 270 -1121 228 -1018 b -9 -867 115 -900 58 -875 b -21 -866 -14 -867 -19 -866 l -24 -866 l -24 -738 l -24 -610 l -20 -610 b -1 -624 -12 -610 -4 -616 b 142 -818 13 -664 74 -749 b 257 -978 196 -873 228 -918 b 264 -989 261 -984 264 -989 l 264 -989 b 265 -977 264 -989 264 -984 b 270 -920 268 -959 270 -939 b 153 -638 270 -818 228 -716 b -9 -564 115 -598 58 -573 b -21 -563 -14 -564 -19 -563 l -24 -563 l -24 -435 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 142 -516 13 -363 74 -446 b 257 -675 196 -571 228 -616 b 264 -687 261 -681 264 -687 l 264 -687 b 265 -674 264 -687 264 -681 b 270 -617 268 -656 270 -637 b 153 -335 270 -516 228 -413 b -9 -262 115 -295 58 -270 b -21 -260 -14 -262 -19 -260 l -24 -260 l -24 -133 "},"v9c":{"x_min":-166.0625,"x_max":-25.859375,"ha":0,"o":"m -49 369 b -42 370 -46 369 -44 370 b -27 360 -36 370 -29 366 b -25 355 -27 359 -25 358 b -32 335 -25 351 -28 347 b -92 52 -66 248 -87 159 b -93 -1 -93 43 -93 20 b -92 -54 -93 -23 -93 -45 b -32 -337 -85 -162 -66 -251 b -25 -355 -27 -349 -25 -352 b -42 -371 -25 -365 -32 -371 b -61 -353 -50 -371 -51 -369 b -163 -63 -119 -262 -153 -165 b -166 -1 -166 -37 -166 -31 b -163 62 -166 30 -166 36 b -61 352 -153 163 -119 260 b -49 369 -54 365 -51 366 "},"v9d":{"x_min":-1.359375,"x_max":326.671875,"ha":333,"o":"m 99 692 b 107 694 102 692 104 694 b 121 688 112 694 117 691 b 126 673 123 685 125 682 b 209 460 141 598 172 519 l 215 451 l 215 445 l 215 445 b 197 426 215 434 206 426 b 186 430 194 426 190 427 b 133 449 170 440 152 446 b 127 451 130 449 129 451 b 126 449 126 451 126 451 b 127 446 126 449 127 448 b 127 324 127 444 127 424 b 129 205 127 259 129 205 b 215 227 129 205 167 215 b 308 249 283 244 300 249 b 315 247 311 249 313 248 b 325 237 319 245 323 241 l 326 233 l 326 -106 l 326 -448 l 325 -451 b 306 -463 321 -459 314 -463 b 287 -451 298 -463 291 -459 l 285 -448 l 285 -324 b 284 -201 285 -248 284 -201 b 197 -223 284 -201 245 -210 b 104 -245 129 -240 111 -245 b 98 -242 102 -245 100 -244 b 88 -233 93 -241 89 -237 l 87 -230 l 87 106 b 87 262 87 169 87 220 b 87 446 87 415 87 444 b 88 449 88 448 88 449 b 87 451 88 451 88 451 b 81 449 85 451 84 451 b 27 430 62 446 44 440 b 16 426 24 427 20 426 b -1 445 6 426 -1 434 b 0 445 -1 445 0 445 l 0 451 l 5 460 b 87 669 40 519 69 589 b 99 692 91 685 92 688 m 284 22 b 285 70 285 41 285 58 b 284 116 285 113 284 116 l 284 116 b 205 97 283 116 247 106 l 127 77 l 127 -18 b 129 -112 127 -69 129 -112 l 206 -93 l 284 -73 l 284 22 "},"v9e":{"x_min":0,"x_max":607.0625,"ha":619,"o":"m 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 m 347 631 b 353 632 348 632 351 632 b 374 620 363 632 371 628 b 375 383 375 616 375 616 l 375 148 l 377 151 b 492 199 415 183 454 199 b 537 191 507 199 522 197 b 607 84 582 176 607 134 b 583 0 607 58 598 29 b 455 -142 562 -40 533 -72 l 378 -215 b 355 -229 364 -229 362 -229 b 334 -216 345 -229 337 -224 l 333 -212 l 333 201 l 333 616 l 334 620 b 347 631 337 624 341 630 m 465 131 b 451 133 461 133 455 133 b 445 133 449 133 446 133 b 379 87 419 129 396 113 l 375 80 l 375 -37 l 375 -156 l 378 -152 b 499 81 451 -72 499 20 l 499 83 b 465 131 499 113 490 126 "},"v9f":{"x_min":-311.6875,"x_max":310.328125,"ha":317,"o":"m -9 388 b -2 390 -8 390 -5 390 b 5 388 1 390 4 390 b 19 378 10 387 16 383 b 23 333 23 371 23 371 l 23 328 l 23 290 l 27 290 b 172 274 62 290 129 283 b 200 259 191 270 196 267 b 215 40 204 249 215 102 b 215 26 215 33 215 26 l 216 24 l 253 24 l 255 24 b 299 19 292 24 292 23 b 310 -1 306 15 310 6 b 299 -23 310 -11 306 -19 b 255 -27 292 -27 292 -27 l 253 -27 l 216 -27 l 215 -30 b 215 -55 215 -31 215 -43 b 202 -244 213 -111 209 -179 b 174 -277 200 -270 198 -273 b 40 -294 132 -285 87 -291 l 23 -294 l 23 -331 b 23 -340 23 -334 23 -337 b 17 -381 23 -376 23 -374 b -1 -391 13 -388 5 -391 b -21 -381 -9 -391 -17 -388 b -27 -340 -27 -374 -27 -376 b -27 -331 -27 -337 -27 -334 l -27 -294 l -44 -294 b -178 -277 -91 -291 -136 -285 b -205 -258 -198 -273 -204 -270 b -219 -44 -210 -215 -219 -94 b -219 -29 -219 -37 -219 -30 l -220 -27 l -255 -27 l -258 -27 b -300 -23 -294 -27 -294 -27 b -311 -2 -307 -19 -311 -11 b -294 23 -311 8 -304 19 b -255 24 -291 23 -284 24 l -220 24 l -219 26 b -219 40 -219 26 -219 33 b -204 259 -219 104 -208 249 b -176 274 -200 267 -196 270 b -31 290 -133 283 -66 290 l -27 290 l -27 328 b -27 371 -27 360 -27 369 b -9 388 -24 378 -17 385 m -27 136 l -27 247 l -28 247 b -103 233 -46 245 -100 235 b -107 197 -103 233 -106 217 b -115 52 -111 147 -114 94 b -115 27 -115 40 -115 29 l -115 24 l -72 24 l -27 24 l -27 136 m 34 245 b 24 247 28 247 24 247 b 23 136 24 247 23 197 l 23 24 l 68 24 l 111 24 l 111 27 b 111 52 111 29 111 40 b 103 197 110 94 107 147 b 99 233 102 217 100 233 b 34 245 98 235 54 244 m -27 -140 l -27 -27 l -72 -27 l -115 -27 l -115 -30 b -115 -56 -115 -33 -115 -44 b -107 -201 -114 -98 -111 -151 b -103 -237 -106 -222 -103 -237 b -28 -251 -100 -240 -40 -251 b -27 -140 -28 -251 -27 -201 m 111 -30 l 111 -27 l 68 -27 l 23 -27 l 23 -140 b 24 -251 23 -201 24 -251 b 99 -237 36 -251 96 -240 b 103 -201 100 -237 102 -222 b 111 -56 107 -151 110 -98 b 111 -30 111 -44 111 -33 "},"va0":{"x_min":0,"x_max":622.03125,"ha":635,"o":"m 398 417 b 406 419 401 419 404 419 b 427 398 417 419 427 409 b 427 391 427 395 427 392 b 34 -274 424 385 38 -272 b 20 -280 29 -278 25 -280 b 0 -259 9 -280 0 -270 b 0 -252 0 -256 0 -254 b 393 413 2 -247 389 410 b 398 417 394 415 397 416 m 592 417 b 600 419 594 419 597 419 b 622 398 611 419 622 409 b 620 391 622 395 620 392 b 227 -274 617 385 231 -272 b 213 -280 223 -278 219 -280 b 193 -259 202 -280 193 -270 b 194 -252 193 -256 193 -254 b 586 413 196 -247 582 410 b 592 417 588 415 590 416 "},"va1":{"x_min":0,"x_max":294,"ha":300,"o":"m 138 381 b 147 381 141 381 144 381 b 221 299 191 381 221 341 b 194 238 221 278 213 255 b 159 210 190 234 161 212 b 78 148 157 209 81 151 b 78 148 78 148 78 148 b 95 106 78 144 88 119 b 121 77 103 88 108 83 b 156 69 132 72 144 69 b 259 127 193 69 232 91 b 273 140 266 137 269 138 b 279 141 274 141 276 141 b 294 124 287 141 294 134 b 292 117 294 123 294 120 b 255 66 289 113 261 72 b 126 -1 220 22 171 -1 b 47 27 96 -1 69 8 b 2 133 31 43 9 93 b 0 180 0 149 0 165 b 53 326 0 237 17 288 b 103 366 59 331 91 358 b 138 381 112 373 129 380 m 126 326 b 118 326 123 326 121 326 b 98 316 110 326 103 323 b 68 215 78 288 68 255 b 68 208 68 213 68 210 b 70 183 69 195 69 184 l 70 183 b 93 201 70 183 81 191 l 133 231 b 159 259 152 247 155 248 b 163 278 161 266 163 272 b 126 326 163 299 148 320 "},"va2":{"x_min":0,"x_max":367.5,"ha":375,"o":"m 0 124 l 0 187 l 61 187 l 122 187 l 122 138 l 122 91 l 153 61 l 183 30 l 213 61 l 243 91 l 243 138 l 243 187 l 306 187 l 367 187 l 367 124 l 367 61 l 321 61 l 274 61 l 243 30 l 213 0 l 243 -31 l 274 -62 l 321 -62 l 367 -62 l 367 -124 l 367 -188 l 306 -188 l 243 -188 l 243 -140 l 243 -93 l 213 -62 l 183 -31 l 153 -62 l 122 -93 l 122 -140 l 122 -188 l 61 -188 l 0 -188 l 0 -124 l 0 -62 l 46 -62 l 92 -62 l 123 -31 l 153 0 l 123 30 l 92 61 l 46 61 l 0 61 l 0 124 "},"va3":{"x_min":58.53125,"x_max":228.671875,"ha":294,"o":"m 138 371 b 142 373 140 371 141 373 b 178 342 149 373 156 366 b 228 251 217 297 228 278 b 228 244 228 248 228 247 b 176 147 227 212 212 184 b 123 73 152 122 132 93 b 121 62 122 70 121 66 b 145 13 121 48 129 31 b 153 -2 151 6 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 145 -11 b 129 -1 140 -11 136 -8 b 61 87 89 37 68 68 b 58 113 59 95 58 105 b 110 215 58 144 74 177 b 163 287 134 240 155 269 b 166 299 166 291 166 295 b 141 348 166 313 157 330 b 133 360 134 356 133 358 b 133 363 133 362 133 362 b 138 371 133 367 136 370 "},"va4":{"x_min":-21.78125,"x_max":483.1875,"ha":493,"o":"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 179 164 199 187 192 l 210 176 l 210 396 l 210 617 l 212 621 b 231 632 216 628 223 632 b 250 620 239 632 247 628 b 251 383 251 616 251 616 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 "},"va5":{"x_min":0,"x_max":349.8125,"ha":357,"o":"m 88 302 b 103 303 93 302 98 303 b 202 224 149 303 191 270 b 205 199 204 216 205 208 b 178 129 205 173 196 147 l 175 126 l 182 127 b 307 249 236 142 284 190 b 313 259 308 254 311 258 b 329 267 317 265 323 267 b 349 247 340 267 349 259 b 201 -263 349 242 204 -258 b 182 -273 197 -270 190 -273 b 163 -260 174 -273 166 -269 b 161 -256 161 -259 161 -258 b 217 -59 161 -248 170 -220 b 272 129 247 43 272 127 b 272 129 272 129 272 129 b 264 122 272 129 268 126 b 140 80 227 94 183 80 b 36 115 102 80 65 91 b 0 194 10 136 0 165 b 88 302 0 244 32 292 "},"va6":{"x_min":0,"x_max":462.78125,"ha":472,"o":"m 8 595 b 14 596 10 596 12 596 b 50 591 21 596 29 595 b 455 248 255 544 420 405 b 462 191 460 229 462 209 b 321 0 462 94 404 9 b 300 -1 314 -1 307 -1 b 149 167 215 -1 149 69 b 294 387 149 258 201 337 b 296 390 295 388 296 388 b 289 398 296 391 294 392 b 21 560 225 477 130 535 b 2 569 9 563 5 566 b 0 580 0 573 0 576 b 8 595 0 587 2 592 m 325 348 b 321 353 322 351 322 353 b 313 348 319 353 317 351 b 223 167 255 306 223 237 b 227 124 223 154 224 138 b 289 31 236 79 261 40 b 295 31 291 31 294 31 b 355 104 315 31 338 59 b 368 191 364 129 368 159 b 364 241 368 208 367 224 b 325 348 357 277 344 313 "},"va7":{"x_min":-155.171875,"x_max":153.8125,"ha":157,"o":"m -9 24 b 0 26 -5 24 -2 26 b 25 2 12 26 21 16 l 29 -19 b 144 -303 54 -124 96 -229 b 153 -328 153 -319 153 -322 b 127 -355 153 -344 142 -355 b 100 -334 115 -355 111 -351 b 6 -130 62 -274 31 -206 b -1 -108 2 -117 0 -108 b -8 -130 -1 -108 -4 -117 b -102 -334 -32 -206 -63 -274 b -129 -355 -112 -351 -117 -355 b -155 -328 -144 -355 -155 -344 b -145 -303 -155 -322 -155 -319 b -31 -19 -98 -229 -55 -124 l -27 2 b -9 24 -24 13 -17 22 "},"va8":{"x_min":-68.0625,"x_max":66.6875,"ha":68,"o":"m -12 66 b -1 68 -9 68 -5 68 b 55 37 20 68 43 56 b 66 -1 62 26 66 12 b 36 -58 66 -23 55 -44 b 0 -69 25 -65 12 -69 b -57 -38 -21 -69 -43 -58 b -68 -1 -63 -27 -68 -13 b -12 66 -68 30 -46 61 "},"va9":{"x_min":-24.5,"x_max":314.421875,"ha":321,"o":"m -24 -145 l -24 -5 l -20 -5 b 0 -23 -9 -5 -2 -12 b 27 -87 4 -38 14 -66 b 138 -220 53 -136 88 -177 b 235 -328 179 -255 208 -288 b 314 -592 287 -409 314 -501 b 292 -732 314 -639 307 -687 l 289 -742 l 294 -756 b 314 -896 307 -802 314 -849 b 292 -1035 314 -943 307 -991 l 289 -1045 l 294 -1057 b 314 -1197 307 -1104 314 -1152 b 292 -1338 314 -1246 307 -1292 l 289 -1347 l 294 -1360 b 314 -1500 307 -1407 314 -1454 b 273 -1689 314 -1565 300 -1628 b 250 -1712 265 -1710 261 -1712 b 228 -1691 236 -1712 228 -1704 l 228 -1685 l 234 -1675 b 270 -1507 258 -1621 270 -1564 b 98 -1193 270 -1381 209 -1261 b 40 -1174 76 -1179 58 -1174 b -10 -1189 24 -1174 8 -1178 b -20 -1192 -14 -1192 -16 -1192 l -24 -1192 l -24 -1052 l -24 -913 l -20 -913 b 0 -931 -9 -913 -2 -920 b 27 -995 4 -946 14 -974 b 138 -1128 53 -1043 88 -1085 b 257 -1275 190 -1172 228 -1220 b 262 -1283 259 -1279 262 -1283 l 262 -1283 b 269 -1249 264 -1282 268 -1260 b 270 -1206 270 -1233 270 -1220 b 98 -891 270 -1075 206 -957 b 40 -871 76 -877 58 -871 b -10 -886 24 -871 8 -875 b -20 -889 -14 -889 -16 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 0 -628 -9 -610 -2 -617 b 27 -692 4 -644 14 -671 b 138 -825 53 -741 88 -782 b 257 -973 190 -870 228 -917 b 262 -981 259 -977 262 -981 l 262 -981 b 269 -946 264 -979 268 -957 b 270 -903 270 -931 270 -917 b 98 -588 270 -774 206 -655 b 40 -569 76 -574 58 -569 b -10 -584 24 -569 8 -574 b -20 -587 -14 -587 -16 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 0 -326 -9 -308 -2 -315 b 27 -390 4 -341 14 -369 b 138 -523 53 -438 88 -480 b 257 -670 190 -567 228 -614 b 262 -678 259 -674 262 -678 b 262 -678 262 -678 262 -678 b 269 -644 264 -677 268 -656 b 270 -601 270 -628 270 -614 b 98 -285 270 -471 206 -352 b 40 -266 76 -273 58 -266 b -10 -281 24 -266 8 -272 b -20 -284 -14 -284 -16 -284 l -24 -284 l -24 -145 "},"vaa":{"x_min":-1.359375,"x_max":752.703125,"ha":768,"o":"m 490 985 b 504 986 495 986 500 986 b 604 907 551 986 593 954 b 607 884 607 900 607 892 b 581 813 607 857 597 831 l 578 810 l 583 811 b 710 932 638 827 687 873 b 714 943 711 936 713 942 b 730 952 720 949 725 952 b 752 931 741 952 752 943 b 200 -946 752 927 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 538 314 477 300 508 b 318 598 300 559 306 580 b 404 645 340 630 372 645 b 494 592 439 645 475 627 b 507 541 502 577 507 559 b 480 471 507 516 498 489 l 477 467 l 483 470 b 608 589 537 485 586 531 b 675 811 611 595 675 810 b 675 811 675 811 675 811 b 666 806 675 811 671 809 b 543 763 628 777 585 763 b 438 799 504 763 468 775 b 401 878 412 820 401 849 b 490 985 401 928 434 977 "},"vab":{"x_min":0,"x_max":272.21875,"ha":278,"o":"m 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 "},"vac":{"x_min":-390.640625,"x_max":389.28125,"ha":397,"o":"m -9 650 b -1 652 -6 650 -4 652 b 19 639 6 652 13 648 l 23 631 b 28 623 24 628 27 626 l 34 614 l 39 606 l 43 598 l 49 588 l 54 580 l 59 571 l 65 563 l 69 555 l 74 546 l 80 537 l 85 528 b 89 520 87 526 89 523 l 95 512 l 100 503 l 106 494 l 111 487 l 115 478 l 121 470 l 126 462 l 130 453 l 136 445 l 141 437 l 147 427 l 151 419 l 156 410 l 161 402 l 167 394 l 172 385 l 176 376 b 182 367 179 374 181 370 l 187 359 l 193 351 l 198 342 l 202 334 l 208 326 l 212 317 l 217 309 l 223 301 l 228 292 l 234 284 l 238 274 l 243 266 l 249 258 l 254 249 l 259 241 l 264 233 l 269 224 b 274 216 270 222 273 217 l 280 206 l 285 198 l 295 180 l 299 174 l 304 165 l 310 156 l 315 148 l 321 140 l 325 131 l 330 123 l 336 113 l 341 105 l 347 97 l 351 88 l 356 80 l 360 72 b 364 66 362 70 363 68 b 370 58 366 65 368 61 l 379 41 b 389 19 386 31 389 24 b 382 4 389 13 386 8 b 347 0 377 0 378 0 b 337 0 344 0 340 0 b 336 0 336 0 336 0 b 287 11 294 0 294 0 l 281 19 l 276 27 l 272 37 l 266 45 l 261 54 l 255 62 l 250 70 l 246 79 l 240 87 l 235 97 l 230 105 l 224 113 l 220 122 l 215 130 l 209 140 l 204 148 l 200 155 l 194 163 b 189 172 193 165 191 169 l 185 180 l 179 188 l 174 198 l 168 206 l 163 215 l 159 223 l 153 231 l 148 240 l 142 249 l 138 258 l 133 266 l 127 274 l 122 283 l 117 292 l 111 301 l 107 308 l 102 316 b 98 324 102 317 99 322 l 92 333 l 87 341 l 81 349 l 77 359 l 72 367 l 66 376 l 61 384 l 55 392 l 51 401 l 46 410 l 40 419 l 35 427 l 31 435 l 24 444 l 20 453 l 14 460 l 10 469 b 5 477 9 470 6 474 l 0 485 l -5 494 l -9 502 l -14 512 b -20 519 -16 513 -19 517 l -24 526 l -28 534 b -31 537 -29 535 -31 537 b -35 533 -32 537 -32 535 l -88 444 l -187 280 l -285 117 l -343 23 b -362 1 -352 6 -356 2 b -368 0 -364 0 -367 0 b -390 20 -381 0 -390 8 l -390 20 b -359 77 -390 27 -390 27 l -80 539 l -25 631 b -9 650 -17 644 -13 648 m -13 133 b -1 134 -9 133 -5 134 b 50 105 19 134 39 123 b 61 70 57 95 61 83 b 50 34 61 58 57 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 70 -57 40 -62 55 b -13 133 -62 98 -44 126 "},"vad":{"x_min":0,"x_max":873.828125,"ha":892,"o":"m 0 0 l 0 703 l 81 703 l 164 703 l 164 0 l 164 -705 l 81 -705 l 0 -705 l 0 0 m 225 0 l 225 703 l 246 703 l 268 703 l 268 366 l 268 30 l 274 36 b 314 79 284 44 302 63 b 413 302 357 137 392 213 b 432 327 419 324 421 327 b 449 306 443 327 447 322 b 611 115 457 195 529 115 b 651 122 624 115 638 117 b 728 316 705 140 724 188 b 729 388 728 342 729 366 b 671 635 729 533 711 602 b 581 662 649 652 616 662 b 477 637 545 662 510 653 l 475 635 l 477 634 b 503 627 488 632 495 631 b 545 556 532 612 545 584 b 491 480 545 524 526 491 b 465 474 481 476 473 474 b 379 563 417 474 379 516 b 389 602 379 576 382 588 b 541 691 409 641 479 681 b 582 694 555 692 568 694 b 865 462 714 694 834 598 b 873 392 871 440 873 416 b 865 317 873 367 871 341 b 639 84 839 194 748 101 b 612 83 630 83 620 83 b 511 116 577 83 543 94 b 504 120 509 119 506 120 b 504 120 504 120 504 120 b 469 59 504 120 488 93 l 432 -1 l 469 -61 b 504 -122 488 -94 504 -122 b 504 -122 504 -122 504 -122 b 511 -117 506 -122 509 -120 b 612 -84 543 -95 577 -84 b 665 -91 630 -84 647 -87 b 869 -338 771 -122 850 -216 b 873 -392 872 -356 873 -374 b 798 -595 873 -469 847 -539 b 581 -695 741 -662 660 -695 b 406 -626 517 -695 454 -671 b 381 -563 389 -607 381 -585 b 465 -477 381 -519 413 -477 b 545 -559 514 -477 545 -519 b 503 -628 545 -587 532 -613 b 477 -635 495 -632 488 -634 l 475 -637 l 477 -638 b 581 -663 510 -655 545 -663 b 671 -637 616 -663 649 -653 b 729 -391 711 -603 729 -534 b 728 -317 729 -367 728 -344 b 623 -117 722 -173 698 -124 b 611 -116 619 -116 615 -116 b 449 -308 528 -116 457 -198 b 432 -328 447 -323 443 -328 b 413 -303 421 -328 419 -326 b 314 -80 392 -215 357 -138 b 274 -37 302 -65 284 -45 l 268 -31 l 268 -367 l 268 -705 l 246 -705 l 225 -705 l 225 0 "},"vae":{"x_min":-108.890625,"x_max":251.8125,"ha":257,"o":"m -8 863 b 0 864 -5 864 -2 864 b 12 859 4 864 9 863 b 19 843 16 856 16 853 b 102 631 34 768 65 689 l 107 621 l 107 616 l 107 616 b 89 596 107 605 99 596 b 78 601 85 596 83 598 b 47 614 69 606 55 612 b 19 621 39 617 21 621 b 19 621 19 621 19 621 b 19 619 19 621 19 620 b 20 383 20 616 20 585 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 93 -148 206 -40 179 -70 l 38 -199 l 23 -215 l 20 -217 l 20 -241 b 19 -267 20 -260 20 -266 b 19 -270 19 -269 19 -270 b 19 -270 19 -270 19 -270 b 47 -263 21 -270 39 -266 b 78 -249 55 -260 69 -255 b 89 -247 83 -247 85 -247 b 107 -265 99 -247 107 -254 l 107 -265 l 107 -270 l 102 -280 b 19 -492 65 -338 34 -417 b 0 -513 14 -508 10 -513 b -20 -488 -12 -513 -16 -508 b -103 -280 -38 -409 -66 -338 l -108 -270 l -108 -265 l -108 -265 b -91 -247 -108 -254 -100 -247 b -80 -249 -87 -247 -84 -247 b -49 -263 -70 -255 -57 -260 b -20 -270 -40 -266 -23 -270 b -20 -270 -20 -270 -20 -270 b -20 -267 -20 -270 -20 -269 b -21 174 -21 -266 -21 -208 b -20 619 -21 559 -21 616 b -20 621 -20 620 -20 621 b -20 621 -20 621 -20 621 b -49 614 -23 621 -40 617 b -80 601 -57 612 -70 606 b -91 596 -84 598 -87 596 b -108 616 -100 596 -108 605 l -108 616 l -108 621 l -103 631 b -20 839 -66 689 -38 760 b -8 863 -17 856 -14 859 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 "},"vaf":{"x_min":-209.609375,"x_max":208.25,"ha":213,"o":"m -197 19 b 1 20 -194 19 -96 20 b 196 19 98 20 193 19 b 208 -1 204 15 208 6 b 202 -15 208 -5 206 -11 b 95 -22 197 -20 212 -22 b -1 -22 69 -22 38 -22 b -96 -22 -39 -22 -70 -22 b -204 -15 -213 -22 -198 -20 b -209 -1 -208 -11 -209 -5 b -197 19 -209 6 -205 15 m -12 -113 b -1 -113 -9 -113 -5 -113 b 55 -144 20 -113 43 -124 b 66 -181 62 -155 66 -169 b 27 -244 66 -208 53 -233 b 0 -251 19 -248 9 -251 b -57 -220 -21 -251 -43 -240 b -68 -181 -63 -208 -68 -195 b -12 -113 -68 -151 -46 -120 "},"vb0":{"x_min":0,"x_max":438.28125,"ha":447,"o":"m 212 205 b 219 205 213 205 216 205 b 239 183 228 205 231 204 b 421 -163 298 40 363 -83 b 438 -191 434 -180 438 -186 b 436 -197 438 -192 438 -195 b 424 -206 434 -204 431 -206 b 406 -201 420 -206 415 -205 b 216 -156 347 -172 281 -156 b 23 -205 148 -156 80 -173 b 14 -206 20 -206 17 -206 b 0 -191 6 -206 0 -201 b 6 -176 0 -187 1 -183 b 202 192 63 -104 142 45 b 212 205 205 199 208 202 m 264 48 l 249 81 l 243 94 l 242 91 b 89 -126 208 36 137 -66 b 81 -138 85 -133 81 -138 b 81 -138 81 -138 81 -138 b 81 -138 81 -138 81 -138 b 95 -133 81 -138 87 -136 b 280 -94 156 -108 221 -94 b 334 -98 299 -94 317 -95 b 343 -99 338 -99 343 -99 b 343 -99 343 -99 343 -99 b 338 -94 343 -99 341 -97 b 264 48 318 -58 287 1 "},"vb1":{"x_min":78.9375,"x_max":485.921875,"ha":417,"o":"m 362 378 b 378 380 367 380 372 380 b 472 348 415 380 453 367 b 485 315 481 338 485 327 b 462 273 485 298 477 281 b 439 267 454 269 446 267 b 398 290 424 267 409 274 b 344 319 385 309 364 319 b 281 269 315 319 289 301 b 279 262 280 266 279 262 b 276 256 279 260 277 258 b 274 249 276 254 274 251 b 238 127 273 248 257 192 b 201 4 217 61 201 5 b 166 -1 198 -1 200 -1 b 153 -1 163 -1 157 -1 b 141 -1 148 -1 144 -1 b 104 4 106 -1 107 -1 b 104 6 104 5 104 5 b 142 144 104 13 110 34 b 182 278 164 219 181 276 b 183 288 182 281 182 285 b 185 302 185 292 185 298 b 164 330 185 317 176 328 b 159 330 163 330 161 330 b 102 302 140 330 119 320 b 91 294 95 295 93 294 b 88 294 91 294 89 294 b 78 303 83 294 78 298 b 81 312 78 306 78 309 b 200 373 106 347 160 373 b 215 371 205 373 209 371 b 266 335 235 367 254 353 b 269 331 268 333 269 331 b 269 331 269 331 269 331 b 273 335 269 331 270 334 b 362 378 298 359 330 376 "},"vb2":{"x_min":-80.3125,"x_max":78.9375,"ha":81,"o":"m 23 191 b 32 192 27 192 29 192 b 78 145 57 192 78 172 b 78 140 78 142 78 141 b -10 -72 78 133 70 116 l -50 -165 b -70 -194 -63 -194 -63 -194 b -80 -184 -77 -194 -80 -192 b -76 -159 -80 -179 -78 -172 l -68 -116 b -12 159 -51 -31 -13 156 b 23 191 -6 176 6 188 "},"vb3":{"x_min":0,"x_max":227.3125,"ha":232,"o":"m 91 213 b 100 215 93 215 96 215 b 227 58 167 215 224 144 b 227 52 227 56 227 54 b 61 -201 227 -43 164 -138 b 29 -216 44 -212 36 -216 b 23 -210 27 -216 24 -213 b 21 -205 21 -208 21 -206 b 34 -192 21 -201 25 -197 b 122 -55 89 -161 122 -106 b 104 6 122 -33 117 -12 l 103 9 l 96 9 b 4 79 57 9 17 38 b 0 112 1 90 0 101 b 91 213 0 163 36 209 "},"vb4":{"x_min":-597.53125,"x_max":596.171875,"ha":608,"o":"m -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 80 86 -5 172 13 151 b 166 -1 127 37 166 -1 b 235 84 166 -1 197 37 b 311 173 306 173 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 152 -86 221 -1 190 -38 b 76 -176 81 -174 83 -173 b 70 -176 74 -176 73 -176 b 61 -174 66 -176 62 -174 b -27 -87 58 -173 38 -152 b -114 -1 -74 -38 -112 -1 b -182 -86 -114 -1 -145 -38 b -258 -176 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 "},"vb5":{"x_min":-170.140625,"x_max":168.78125,"ha":172,"o":"m -160 -1 b -122 -1 -159 -1 -149 -1 l -87 -1 l -84 -2 b -74 -15 -78 -4 -77 -6 b -20 -201 -73 -18 -49 -102 b 31 -383 8 -301 31 -383 b 85 -197 31 -383 55 -299 b 140 -9 114 -95 138 -11 b 153 0 141 -4 148 0 b 168 -9 159 0 166 -4 b 168 -12 168 -11 168 -11 b 92 -287 168 -20 159 -55 b 14 -555 50 -434 14 -555 b 0 -569 14 -562 6 -569 b -17 -553 -8 -569 -17 -560 b -93 -285 -17 -552 -51 -433 b -170 -16 -166 -36 -170 -20 b -170 -15 -170 -15 -170 -15 b -160 -1 -170 -8 -167 -4 "},"vb6":{"x_min":0,"x_max":556.6875,"ha":568,"o":"m 289 545 b 298 546 292 545 295 546 b 318 533 306 546 315 541 b 319 428 319 530 319 528 l 319 327 l 334 327 b 526 223 412 326 485 285 b 543 172 537 206 543 190 b 447 76 543 122 503 76 b 445 76 446 76 446 76 b 359 165 394 77 359 119 b 368 205 359 179 362 192 b 441 251 382 233 412 251 b 455 249 446 251 451 251 b 460 248 458 249 460 248 b 460 248 460 248 460 248 b 454 254 460 249 458 251 b 334 295 419 280 378 294 l 319 295 l 319 4 l 319 -287 l 321 -285 b 328 -285 322 -285 325 -285 b 524 -99 424 -277 507 -198 b 541 -79 526 -84 530 -79 b 556 -97 551 -79 556 -84 b 548 -133 556 -105 553 -117 b 334 -317 521 -233 434 -306 b 322 -319 329 -317 323 -317 l 319 -319 l 319 -424 b 319 -471 319 -444 319 -459 b 313 -541 319 -544 318 -535 b 298 -548 308 -545 303 -548 b 279 -534 289 -548 281 -542 b 277 -424 277 -531 277 -530 l 277 -317 l 273 -317 b 13 -95 153 -305 51 -217 b 0 2 4 -62 0 -29 b 182 295 0 126 66 238 b 274 324 210 309 249 320 l 277 324 l 277 427 b 279 533 277 528 277 530 b 289 545 281 538 285 542 m 277 2 b 277 291 277 161 277 291 b 268 288 277 291 273 290 b 144 1 179 265 144 184 b 276 -284 144 -199 175 -267 l 277 -285 l 277 2 "},"vb7":{"x_min":-176.9375,"x_max":251.8125,"ha":257,"o":"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 503 20 616 20 614 b 20 391 20 442 20 391 b 84 424 20 391 49 406 l 147 456 l 152 456 b 153 456 153 456 153 456 b 175 435 166 456 175 446 b 172 427 175 433 174 430 b 92 380 170 420 172 421 l 20 342 l 20 245 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 54 -21 -212 -21 -212 b -21 322 -21 201 -21 322 b -85 290 -21 322 -50 308 l -148 256 l -153 256 b -155 256 -155 256 -155 256 b -176 277 -167 256 -176 266 b -174 285 -176 280 -175 283 b -93 333 -171 294 -174 292 l -21 370 l -21 494 b -20 620 -21 616 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 "},"vb8":{"x_min":0,"x_max":175.578125,"ha":179,"o":"m 72 231 b 87 233 77 233 81 233 b 175 142 137 233 175 191 b 164 102 175 130 171 116 b 87 54 149 70 118 54 b 24 80 63 54 42 62 b 0 142 6 98 0 120 b 72 231 0 184 27 224 "},"vb9":{"x_min":-122.5,"x_max":121.140625,"ha":124,"o":"m -16 145 b 0 147 -10 147 -5 147 b 121 -1 66 147 121 77 b 114 -49 121 -16 118 -33 b -1 -148 95 -112 47 -148 b -85 -106 -31 -148 -61 -134 b -122 -1 -110 -76 -122 -38 b -16 145 -122 68 -81 134 m 12 111 b 0 113 8 113 4 113 b -68 22 -29 113 -61 73 b -70 0 -69 15 -70 6 b -13 -113 -70 -49 -47 -98 b -1 -115 -9 -115 -5 -115 b 63 -40 24 -115 53 -83 b 68 -1 66 -27 68 -15 b 12 111 68 48 46 97 "},"vba":{"x_min":-118.421875,"x_max":597.53125,"ha":381,"o":"m 460 574 b 464 574 461 574 462 574 b 488 574 470 574 481 574 b 500 573 491 574 498 574 b 594 503 543 570 588 538 b 597 488 596 498 597 494 b 528 417 597 449 564 417 b 502 423 519 417 510 419 b 465 481 477 434 465 458 b 488 528 465 499 472 516 b 490 530 490 530 490 530 b 490 530 490 530 490 530 b 468 517 488 530 475 523 b 349 340 419 485 377 420 b 347 330 348 334 347 330 b 383 328 347 328 363 328 b 428 326 423 328 424 328 b 442 302 438 320 442 312 b 430 281 442 294 438 285 b 385 276 424 277 426 276 l 377 276 l 332 276 l 330 269 b 178 -117 303 126 250 -9 b 1 -249 129 -194 69 -237 b -20 -251 -6 -251 -13 -251 b -114 -187 -65 -251 -100 -227 b -118 -156 -117 -177 -118 -166 b -51 -84 -118 -116 -91 -84 b -31 -87 -46 -84 -39 -86 b 16 -152 0 -95 16 -124 b -12 -205 16 -173 8 -194 b -16 -208 -14 -206 -16 -208 b -14 -208 -16 -208 -14 -208 b -9 -206 -14 -208 -12 -208 b 74 -124 23 -197 54 -166 b 172 224 98 -79 125 22 b 185 276 178 252 183 274 b 185 276 185 276 185 276 b 141 276 185 276 181 276 b 91 280 96 276 96 276 b 77 302 83 285 77 294 b 91 326 77 312 83 320 b 148 328 95 328 96 328 l 198 330 l 202 341 b 460 574 249 473 351 566 "},"vbb":{"x_min":0,"x_max":288.5625,"ha":294,"o":"m 202 341 b 235 341 213 341 225 341 b 261 341 249 341 259 341 b 288 309 276 340 288 326 l 288 309 b 163 -320 288 305 166 -310 b 142 -341 160 -330 153 -337 b 83 -342 140 -342 111 -342 b 21 -341 54 -342 24 -342 b 0 -310 8 -337 0 -324 b 0 -310 0 -310 0 -310 b 123 316 0 -306 118 297 b 144 340 126 327 133 335 b 202 341 147 341 151 341 "},"vbc":{"x_min":-155.171875,"x_max":153.8125,"ha":158,"o":"m -8 24 b -1 26 -6 24 -4 26 b 21 12 8 26 17 20 b 27 -8 24 9 24 9 b 144 -303 50 -115 93 -227 b 153 -322 151 -315 152 -317 b 153 -330 153 -324 153 -327 b 129 -355 153 -344 142 -355 b 111 -351 123 -355 117 -353 b 0 -319 76 -330 38 -319 b -100 -344 -35 -319 -69 -327 b -112 -351 -104 -345 -110 -348 b -129 -355 -119 -355 -123 -355 b -155 -328 -144 -355 -155 -344 b -145 -303 -155 -322 -155 -319 b -28 -6 -95 -226 -53 -119 b -8 24 -24 13 -20 19 "},"vbd":{"x_min":-390.640625,"x_max":389.28125,"ha":397,"o":"m -378 -2 b -368 -1 -375 -1 -374 -1 b -349 -13 -360 -1 -353 -5 l -348 -16 l -348 -212 l -348 -408 l 0 -408 l 347 -408 l 347 -212 l 347 -16 l 348 -13 b 367 0 352 -5 360 0 b 387 -13 375 0 383 -5 l 389 -16 l 389 -288 l 389 -560 l 387 -564 b 377 -574 385 -569 381 -573 l 372 -577 l 0 -577 l -374 -577 l -378 -574 b -389 -564 -382 -573 -386 -569 l -390 -560 l -390 -288 l -390 -16 l -389 -13 b -378 -2 -386 -8 -382 -4 m -274 -2 b -266 -1 -272 -1 -270 -1 b -246 -13 -257 -1 -250 -5 l -245 -16 l -245 -109 l -245 -202 l 0 -202 l 243 -202 l 243 -109 l 245 -16 l 245 -13 b 265 0 249 -5 257 0 b 284 -13 272 0 280 -5 l 285 -16 l 285 -170 l 285 -324 l 284 -327 b 273 -338 281 -331 279 -335 l 269 -340 l 0 -340 l -270 -340 l -274 -338 b -285 -327 -280 -335 -283 -331 l -287 -324 l -287 -170 l -287 -16 l -285 -13 b -274 -2 -283 -8 -280 -4 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -58 -102 -62 -87 b -13 -9 -62 -44 -44 -16 "},"vbe":{"x_min":-122.5,"x_max":121.140625,"ha":124,"o":"m -16 145 b -1 147 -10 147 -5 147 b 119 20 58 147 111 93 b 121 0 119 13 121 6 b 32 -142 121 -66 84 -124 l 24 -144 l 24 -180 b 24 -187 24 -183 24 -184 b 19 -227 24 -222 24 -220 b 0 -237 14 -234 6 -237 b -20 -227 -8 -237 -16 -234 b -25 -187 -25 -220 -25 -222 b -25 -180 -25 -184 -25 -183 l -25 -144 l -34 -142 b -122 0 -85 -124 -122 -66 b -121 20 -122 6 -121 13 b -16 145 -114 84 -70 137 m 12 111 b 0 113 8 113 4 113 b -68 22 -29 113 -61 73 b -69 0 -69 15 -69 6 b -13 -113 -69 -49 -46 -98 b -1 -115 -9 -115 -5 -115 b 63 -40 24 -115 53 -83 b 68 -1 66 -27 68 -15 b 12 111 68 48 46 97 "},"vbf":{"x_min":-53.078125,"x_max":513.140625,"ha":485,"o":"m 185 383 b 196 384 187 383 191 384 b 277 334 230 384 259 365 b 288 301 281 324 288 306 b 288 297 288 298 288 297 b 294 302 289 297 291 299 b 394 370 323 338 367 367 b 404 371 398 370 401 371 b 510 272 453 371 498 328 b 513 237 513 262 513 251 b 507 172 513 217 511 192 b 326 -34 487 59 412 -26 b 314 -36 322 -36 318 -36 b 274 -24 298 -36 283 -31 l 265 -16 b 224 44 246 -1 232 20 b 223 49 224 47 223 49 b 223 49 223 49 223 49 b 149 -197 221 48 149 -194 b 149 -198 149 -197 149 -198 b 170 -210 149 -202 155 -205 b 187 -215 174 -210 175 -212 b 204 -231 201 -219 204 -222 b 197 -245 204 -240 202 -242 l 194 -248 l 76 -248 l -42 -248 l -46 -245 b -53 -231 -51 -242 -53 -240 b -35 -215 -53 -222 -49 -217 b -13 -210 -21 -212 -20 -212 b -6 -208 -10 -209 -8 -208 b 0 -206 -6 -208 -2 -206 b 25 -188 13 -201 21 -195 b 163 280 28 -183 163 276 b 166 291 163 283 164 287 b 167 302 167 295 167 299 b 155 324 167 315 161 324 b 155 324 155 324 155 324 b 65 230 125 322 85 280 b 53 215 61 217 58 215 b 51 215 53 215 51 215 b 42 224 46 215 42 217 b 57 263 42 231 47 244 b 140 360 77 305 104 337 b 152 370 144 365 149 369 b 185 383 157 376 172 381 m 374 306 b 366 308 371 308 368 308 b 300 273 348 308 321 294 b 284 254 288 262 287 259 b 280 242 283 249 281 245 b 257 169 279 240 270 213 l 236 98 l 236 93 b 251 48 238 77 243 61 b 279 27 258 37 272 27 b 281 27 279 27 280 27 b 291 31 281 27 287 30 b 396 170 334 52 378 109 b 406 247 402 197 406 224 b 401 277 406 259 405 270 b 374 306 397 290 383 303 "},"vc0":{"x_min":-571.671875,"x_max":570.3125,"ha":582,"o":"m 156 273 b 163 274 159 273 161 274 b 183 262 171 274 179 269 b 185 158 185 259 185 259 l 185 56 l 231 112 b 284 174 277 172 279 172 b 289 174 285 174 288 174 b 299 173 294 174 298 173 b 462 11 303 172 338 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 374 -176 371 -176 b 280 -87 367 -173 345 -152 b 194 0 234 -38 194 0 b 189 -6 194 0 191 -2 l 185 -12 l 185 -147 b 185 -210 185 -173 185 -194 b 179 -292 185 -297 185 -287 b 164 -299 175 -297 170 -299 b 145 -287 156 -299 148 -295 b 144 -174 144 -284 144 -284 l 142 -63 l 100 -117 b 46 -176 57 -170 54 -176 b 42 -176 44 -176 43 -176 b -54 -87 32 -174 38 -180 b -140 0 -102 -38 -140 0 b -209 -86 -141 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -289 -176 b -300 -174 -295 -176 -299 -174 b -464 -12 -304 -173 -340 -137 l -476 0 l -504 -34 b -543 -77 -534 -73 -537 -76 b -549 -79 -545 -79 -547 -79 b -571 -58 -562 -79 -571 -69 b -568 -49 -571 -55 -570 -52 b -393 170 -566 -43 -398 165 b -379 174 -389 173 -383 174 b -370 173 -375 174 -372 174 b -281 86 -367 172 -347 151 b -196 0 -235 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 127 11 -32 172 16 123 l 138 -1 l 141 1 l 144 4 l 144 130 b 145 260 144 256 144 258 b 156 273 147 266 151 270 "},"vc1":{"x_min":-525.390625,"x_max":524.03125,"ha":535,"o":"m -42 1067 b 1 1068 -27 1068 -13 1068 b 524 534 285 1068 524 831 b 0 0 524 231 283 0 b -118 12 -38 0 -77 4 b -487 335 -284 51 -424 174 b -525 534 -513 402 -525 469 b -42 1067 -525 802 -325 1042 m 38 1038 b 0 1039 25 1039 12 1039 b -460 725 -198 1039 -386 914 l -461 721 l 0 721 l 460 721 l 458 725 b 38 1038 390 899 224 1022 m 472 685 l 470 692 l 0 692 l -470 692 l -473 685 b -496 535 -488 638 -496 587 b -472 377 -496 483 -488 428 l -470 374 l 0 374 l 470 374 l 470 377 b 495 535 487 428 495 483 b 472 685 495 587 488 638 m 458 344 l 460 345 l 0 345 l -461 345 l -460 344 b -402 238 -454 323 -424 269 b 0 27 -303 98 -152 27 b 401 238 151 27 302 98 b 458 344 423 269 453 323 "},"vc2":{"x_min":0,"x_max":337.5625,"ha":344,"o":"m 230 535 b 239 537 232 537 234 537 b 258 524 247 537 254 533 l 259 521 l 259 390 l 259 258 l 285 265 b 318 270 302 269 311 270 b 336 259 328 270 332 267 b 337 208 336 256 337 233 b 336 158 337 184 336 159 b 302 140 332 148 329 147 b 259 130 266 131 259 130 b 259 65 259 130 259 104 b 259 20 259 51 259 36 l 259 -88 l 285 -81 b 318 -76 302 -77 311 -76 b 332 -81 325 -76 328 -77 b 337 -123 336 -87 337 -86 l 337 -138 l 337 -154 b 332 -195 337 -191 336 -190 b 281 -210 328 -199 328 -199 b 262 -216 272 -213 264 -216 l 259 -216 l 259 -349 l 259 -483 l 258 -487 b 239 -499 254 -495 246 -499 b 220 -487 231 -499 223 -495 l 219 -483 l 217 -355 l 217 -227 l 216 -227 l 194 -233 l 152 -244 b 129 -249 140 -247 130 -249 b 127 -410 127 -249 127 -258 b 127 -576 127 -548 127 -573 b 126 -578 126 -577 126 -578 b 127 -580 126 -578 126 -580 b 133 -578 129 -580 130 -578 b 186 -557 152 -576 170 -569 b 197 -555 190 -556 194 -555 b 215 -573 206 -555 215 -562 l 215 -574 l 215 -580 l 209 -588 b 126 -802 172 -648 141 -727 b 107 -823 123 -817 118 -823 b 87 -798 95 -823 91 -817 b 5 -588 69 -718 40 -648 l 0 -580 l 0 -574 b 0 -573 0 -574 0 -574 b 16 -555 0 -562 6 -555 b 27 -557 20 -555 24 -556 b 81 -578 44 -569 62 -576 b 87 -580 84 -578 85 -580 b 88 -578 88 -580 88 -580 b 87 -576 88 -578 88 -577 b 87 -416 87 -573 87 -549 b 85 -260 87 -270 87 -260 b 85 -260 85 -260 85 -260 b 32 -273 74 -263 35 -273 b 13 -260 24 -273 16 -267 b 12 -209 12 -256 12 -256 l 12 -162 l 13 -158 b 74 -134 17 -148 17 -148 l 87 -131 l 87 -22 b 85 86 87 79 87 86 b 85 86 85 86 85 86 b 32 74 74 83 35 74 b 13 86 24 74 16 79 b 12 137 12 90 12 90 l 12 184 l 13 188 b 73 212 17 198 17 198 l 87 215 l 87 348 l 87 481 l 88 485 b 107 498 92 492 99 498 b 117 495 110 498 114 496 b 126 485 121 494 125 489 l 127 481 l 127 353 l 127 226 l 133 226 b 172 235 136 227 153 231 l 212 247 l 217 248 l 217 384 l 219 521 l 220 524 b 230 535 221 528 225 533 m 217 9 b 217 119 217 70 217 119 l 217 119 b 194 113 217 119 206 116 l 152 102 b 129 97 140 99 130 97 b 127 -12 127 97 127 91 l 127 -122 l 133 -120 b 172 -111 136 -119 153 -115 l 212 -101 l 217 -98 l 217 9 "},"vc3":{"x_min":-10.890625,"x_max":299.4375,"ha":294,"o":"m 136 460 b 142 462 137 462 140 462 b 166 449 152 462 161 456 b 171 428 168 446 168 445 b 288 131 194 322 238 209 b 298 115 295 120 296 117 b 299 106 298 112 299 109 b 273 81 299 91 287 81 b 255 86 268 81 261 83 b 155 116 225 104 183 116 l 152 116 l 149 108 b 141 83 148 102 144 91 b 134 48 137 69 134 58 b 149 9 134 34 140 24 b 153 -1 152 5 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 147 -11 b 122 2 138 -11 133 -6 b 95 61 104 20 95 38 b 107 108 95 74 99 90 b 108 113 107 111 108 112 b 107 113 108 113 108 113 b 102 113 106 113 104 113 b 31 86 76 108 53 98 b 14 80 24 81 20 80 b -10 106 0 80 -10 91 b 0 131 -10 115 -9 116 b 115 430 49 209 91 317 b 136 460 119 451 123 456 "}},"cssFontWeight":"normal","ascender":1903,"underlinePosition":-125,"cssFontStyle":"normal","boundingBox":{"yMin":-2065.375,"xMin":-695.53125,"yMax":1901.578125,"xMax":1159.671875},"resolution":1000,"original_font_information":{"postscript_name":"Gonville-18","version_string":"Version 0.1.8904 ","vendor_url":"","full_font_name":"Gonville-18","font_family_name":"Gonville-18","copyright":"No copyright is claimed on this font file.","description":"","trademark":"","designer":"","designer_url":"","unique_font_identifier":"FontForge 2.0 :Gonville-18 :17-3-2010","license_url":"","license_description":"","manufacturer_name":"","font_sub_family_name":"18"},"descender":-2066,"familyName":"Gonville-18","lineHeight":4093,"underlineThickness":50};

	/***/ },
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Renderer = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// Support for different rendering contexts: Canvas, Raphael
		
		/* global document: false */
		
		var _canvascontext = __webpack_require__(11);
		
		var _raphaelcontext = __webpack_require__(12);
		
		var _svgcontext = __webpack_require__(13);
		
		var _vex = __webpack_require__(1);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var lastContext = null;
		
		var Renderer = exports.Renderer = function () {
		  _createClass(Renderer, null, [{
		    key: 'buildContext',
		    value: function buildContext(sel, backend, width, height, background) {
		      var renderer = new Renderer(sel, backend);
		      if (width && height) {
		        renderer.resize(width, height);
		      }
		
		      if (!background) background = '#FFF';
		      var ctx = renderer.getContext();
		      ctx.setBackgroundFillStyle(background);
		      Renderer.lastContext = ctx;
		      return ctx;
		    }
		  }, {
		    key: 'getCanvasContext',
		    value: function getCanvasContext(sel, width, height, background) {
		      return Renderer.buildContext(sel, Renderer.Backends.CANVAS, width, height, background);
		    }
		  }, {
		    key: 'getRaphaelContext',
		    value: function getRaphaelContext(sel, width, height, background) {
		      return Renderer.buildContext(sel, Renderer.Backends.RAPHAEL, width, height, background);
		    }
		  }, {
		    key: 'getSVGContext',
		    value: function getSVGContext(sel, width, height, background) {
		      return Renderer.buildContext(sel, Renderer.Backends.SVG, width, height, background);
		    }
		  }, {
		    key: 'bolsterCanvasContext',
		    value: function bolsterCanvasContext(ctx) {
		      if (Renderer.USE_CANVAS_PROXY) {
		        return new _canvascontext.CanvasContext(ctx);
		      }
		
		      var methodNames = ['clear', 'setFont', 'setRawFont', 'setFillStyle', 'setBackgroundFillStyle', 'setStrokeStyle', 'setShadowColor', 'setShadowBlur', 'setLineWidth', 'setLineCap', 'setLineDash', 'openGroup', 'closeGroup', 'getGroup'];
		
		      ctx.vexFlowCanvasContext = ctx;
		
		      methodNames.forEach(function (methodName) {
		        ctx[methodName] = ctx[methodName] || _canvascontext.CanvasContext.prototype[methodName];
		      });
		
		      return ctx;
		    }
		
		    // Draw a dashed line (horizontal, vertical or diagonal
		    // dashPattern = [3,3] draws a 3 pixel dash followed by a three pixel space.
		    // setting the second number to 0 draws a solid line.
		
		  }, {
		    key: 'drawDashedLine',
		    value: function drawDashedLine(context, fromX, fromY, toX, toY, dashPattern) {
		      context.beginPath();
		
		      var dx = toX - fromX;
		      var dy = toY - fromY;
		      var angle = Math.atan2(dy, dx);
		      var x = fromX;
		      var y = fromY;
		      context.moveTo(fromX, fromY);
		      var idx = 0;
		      var draw = true;
		      while (!((dx < 0 ? x <= toX : x >= toX) && (dy < 0 ? y <= toY : y >= toY))) {
		        var dashLength = dashPattern[idx++ % dashPattern.length];
		        var nx = x + Math.cos(angle) * dashLength;
		        x = dx < 0 ? Math.max(toX, nx) : Math.min(toX, nx);
		        var ny = y + Math.sin(angle) * dashLength;
		        y = dy < 0 ? Math.max(toY, ny) : Math.min(toY, ny);
		        if (draw) {
		          context.lineTo(x, y);
		        } else {
		          context.moveTo(x, y);
		        }
		        draw = !draw;
		      }
		
		      context.closePath();
		      context.stroke();
		    }
		  }, {
		    key: 'Backends',
		    get: function get() {
		      return {
		        CANVAS: 1,
		        RAPHAEL: 2,
		        SVG: 3,
		        VML: 4
		      };
		    }
		
		    // End of line types
		
		  }, {
		    key: 'LineEndType',
		    get: function get() {
		      return {
		        NONE: 1, // No leg
		        UP: 2, // Upward leg
		        DOWN: 3 };
		    }
		
		    // Set this to true if you're using VexFlow inside a runtime
		    // that does not allow modifiying canvas objects. There is a small
		    // performance degradation due to the extra indirection.
		
		  }, {
		    key: 'USE_CANVAS_PROXY',
		    get: function get() {
		      return false;
		    }
		  }, {
		    key: 'lastContext',
		    get: function get() {
		      return lastContext;
		    },
		    set: function set(ctx) {
		      lastContext = ctx;
		    }
		  }]);
		
		  function Renderer(sel, backend) {
		    _classCallCheck(this, Renderer);
		
		    // Verify selector
		    this.sel = sel;
		    if (!this.sel) {
		      throw new _vex.Vex.RERR('BadArgument', 'Invalid selector for renderer.');
		    }
		
		    // Get element from selector
		    this.element = document.getElementById(sel);
		    if (!this.element) this.element = sel;
		
		    // Verify backend and create context
		    this.ctx = null;
		    this.paper = null;
		    this.backend = backend;
		    if (this.backend === Renderer.Backends.CANVAS) {
		      // Create context.
		      if (!this.element.getContext) {
		        throw new _vex.Vex.RERR('BadElement', 'Can\'t get canvas context from element: ' + sel);
		      }
		      this.ctx = Renderer.bolsterCanvasContext(this.element.getContext('2d'));
		    } else if (this.backend === Renderer.Backends.RAPHAEL) {
		      this.ctx = new _raphaelcontext.RaphaelContext(this.element);
		    } else if (this.backend === Renderer.Backends.SVG) {
		      this.ctx = new _svgcontext.SVGContext(this.element);
		    } else {
		      throw new _vex.Vex.RERR('InvalidBackend', 'No support for backend: ' + this.backend);
		    }
		  }
		
		  _createClass(Renderer, [{
		    key: 'resize',
		    value: function resize(width, height) {
		      if (this.backend === Renderer.Backends.CANVAS) {
		        if (!this.element.getContext) {
		          throw new _vex.Vex.RERR('BadElement', 'Can\'t get canvas context from element: ' + this.sel);
		        }
		        this.element.width = width;
		        this.element.height = height;
		        this.ctx = Renderer.bolsterCanvasContext(this.element.getContext('2d'));
		      } else {
		        this.ctx.resize(width, height);
		      }
		
		      return this;
		    }
		  }, {
		    key: 'getContext',
		    value: function getContext() {
		      return this.ctx;
		    }
		  }]);

		  return Renderer;
		}();

	/***/ },
	/* 11 */
	/***/ function(module, exports) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Mohit Muthanna <mohit@muthanna.com>
		//
		// A rendering context for the Raphael backend.
		//
		// Copyright Mohit Cheppudira 2010
		
		/** @constructor */
		var CanvasContext = exports.CanvasContext = function () {
		  _createClass(CanvasContext, null, [{
		    key: 'WIDTH',
		    get: function get() {
		      return 600;
		    }
		  }, {
		    key: 'HEIGHT',
		    get: function get() {
		      return 400;
		    }
		  }]);
		
		  function CanvasContext(context) {
		    _classCallCheck(this, CanvasContext);
		
		    // Use a name that is unlikely to clash with a canvas context
		    // property
		    this.vexFlowCanvasContext = context;
		    if (!context.canvas) {
		      this.canvas = {
		        width: CanvasContext.WIDTH,
		        height: CanvasContext.HEIGHT
		      };
		    } else {
		      this.canvas = context.canvas;
		    }
		  }
		
		  _createClass(CanvasContext, [{
		    key: 'clear',
		    value: function clear() {
		      this.vexFlowCanvasContext.clearRect(0, 0, this.canvas.width, this.canvas.height);
		    }
		
		    // Containers not implemented
		
		  }, {
		    key: 'openGroup',
		    value: function openGroup() {}
		  }, {
		    key: 'closeGroup',
		    value: function closeGroup() {}
		  }, {
		    key: 'add',
		    value: function add() {}
		  }, {
		    key: 'setFont',
		    value: function setFont(family, size, weight) {
		      this.vexFlowCanvasContext.font = (weight || '') + ' ' + size + 'pt ' + family;
		      return this;
		    }
		  }, {
		    key: 'setRawFont',
		    value: function setRawFont(font) {
		      this.vexFlowCanvasContext.font = font;
		      return this;
		    }
		  }, {
		    key: 'setFillStyle',
		    value: function setFillStyle(style) {
		      this.vexFlowCanvasContext.fillStyle = style;
		      return this;
		    }
		  }, {
		    key: 'setBackgroundFillStyle',
		    value: function setBackgroundFillStyle(style) {
		      this.background_fillStyle = style;
		      return this;
		    }
		  }, {
		    key: 'setStrokeStyle',
		    value: function setStrokeStyle(style) {
		      this.vexFlowCanvasContext.strokeStyle = style;
		      return this;
		    }
		  }, {
		    key: 'setShadowColor',
		    value: function setShadowColor(style) {
		      this.vexFlowCanvasContext.shadowColor = style;
		      return this;
		    }
		  }, {
		    key: 'setShadowBlur',
		    value: function setShadowBlur(blur) {
		      this.vexFlowCanvasContext.shadowBlur = blur;
		      return this;
		    }
		  }, {
		    key: 'setLineWidth',
		    value: function setLineWidth(width) {
		      this.vexFlowCanvasContext.lineWidth = width;
		      return this;
		    }
		  }, {
		    key: 'setLineCap',
		    value: function setLineCap(cap_type) {
		      this.vexFlowCanvasContext.lineCap = cap_type;
		      return this;
		    }
		
		    // setLineDash: is the one native method in a canvas context
		    // that begins with set, therefore we don't bolster the method
		    // if it already exists (see renderer.bolsterCanvasContext).
		    // If it doesn't exist, we bolster it and assume it's looking for
		    // a ctx.lineDash method, as previous versions of VexFlow
		    // expected.
		
		  }, {
		    key: 'setLineDash',
		    value: function setLineDash(dash) {
		      this.vexFlowCanvasContext.lineDash = dash;
		      return this;
		    }
		  }, {
		    key: 'scale',
		    value: function scale(x, y) {
		      return this.vexFlowCanvasContext.scale(parseFloat(x), parseFloat(y));
		    }
		  }, {
		    key: 'resize',
		    value: function resize(width, height) {
		      return this.vexFlowCanvasContext.resize(parseInt(width, 10), parseInt(height, 10));
		    }
		  }, {
		    key: 'rect',
		    value: function rect(x, y, width, height) {
		      return this.vexFlowCanvasContext.rect(x, y, width, height);
		    }
		  }, {
		    key: 'fillRect',
		    value: function fillRect(x, y, width, height) {
		      return this.vexFlowCanvasContext.fillRect(x, y, width, height);
		    }
		  }, {
		    key: 'clearRect',
		    value: function clearRect(x, y, width, height) {
		      return this.vexFlowCanvasContext.clearRect(x, y, width, height);
		    }
		  }, {
		    key: 'beginPath',
		    value: function beginPath() {
		      return this.vexFlowCanvasContext.beginPath();
		    }
		  }, {
		    key: 'moveTo',
		    value: function moveTo(x, y) {
		      return this.vexFlowCanvasContext.moveTo(x, y);
		    }
		  }, {
		    key: 'lineTo',
		    value: function lineTo(x, y) {
		      return this.vexFlowCanvasContext.lineTo(x, y);
		    }
		  }, {
		    key: 'bezierCurveTo',
		    value: function bezierCurveTo(x1, y1, x2, y2, x, y) {
		      return this.vexFlowCanvasContext.bezierCurveTo(x1, y1, x2, y2, x, y);
		    }
		  }, {
		    key: 'quadraticCurveTo',
		    value: function quadraticCurveTo(x1, y1, x, y) {
		      return this.vexFlowCanvasContext.quadraticCurveTo(x1, y1, x, y);
		    }
		
		    // This is an attempt (hack) to simulate the HTML5 canvas
		    // arc method.
		
		  }, {
		    key: 'arc',
		    value: function arc(x, y, radius, startAngle, endAngle, antiClockwise) {
		      return this.vexFlowCanvasContext.arc(x, y, radius, startAngle, endAngle, antiClockwise);
		    }
		
		    // Adapted from the source for Raphael's Element.glow
		
		  }, {
		    key: 'glow',
		    value: function glow() {
		      return this.vexFlowCanvasContext.glow();
		    }
		  }, {
		    key: 'fill',
		    value: function fill() {
		      return this.vexFlowCanvasContext.fill();
		    }
		  }, {
		    key: 'stroke',
		    value: function stroke() {
		      return this.vexFlowCanvasContext.stroke();
		    }
		  }, {
		    key: 'closePath',
		    value: function closePath() {
		      return this.vexFlowCanvasContext.closePath();
		    }
		  }, {
		    key: 'measureText',
		    value: function measureText(text) {
		      return this.vexFlowCanvasContext.measureText(text);
		    }
		  }, {
		    key: 'fillText',
		    value: function fillText(text, x, y) {
		      return this.vexFlowCanvasContext.fillText(text, x, y);
		    }
		  }, {
		    key: 'save',
		    value: function save() {
		      return this.vexFlowCanvasContext.save();
		    }
		  }, {
		    key: 'restore',
		    value: function restore() {
		      return this.vexFlowCanvasContext.restore();
		    }
		  }]);

		  return CanvasContext;
		}();

	/***/ },
	/* 12 */
	/***/ function(module, exports) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// A rendering context for the Raphael backend.
		//
		// ## Warning: Deprecated for SVGContext
		// Except in instances where SVG support for IE < 9.0 is
		// needed, SVGContext is recommended.
		
		var RaphaelContext = exports.RaphaelContext = function () {
		  function RaphaelContext(element) {
		    _classCallCheck(this, RaphaelContext);
		
		    this.element = element;
		    this.paper = Raphael(element); // eslint-disable-line
		    this.path = '';
		    this.pen = { x: 0, y: 0 };
		    this.lineWidth = 1.0;
		    this.state = {
		      scale: { x: 1, y: 1 },
		      font_family: 'Arial',
		      font_size: 8,
		      font_weight: 800
		    };
		
		    this.attributes = {
		      'stroke-width': 0.3,
		      'fill': 'black',
		      'stroke': 'black',
		      'font': '10pt Arial'
		    };
		
		    this.background_attributes = {
		      'stroke-width': 0,
		      'fill': 'white',
		      'stroke': 'white',
		      'font': '10pt Arial'
		    };
		
		    this.shadow_attributes = {
		      width: 0,
		      color: 'black'
		    };
		
		    this.state_stack = [];
		  }
		
		  // Containers not implemented
		
		
		  _createClass(RaphaelContext, [{
		    key: 'openGroup',
		    value: function openGroup() {}
		  }, {
		    key: 'closeGroup',
		    value: function closeGroup() {}
		  }, {
		    key: 'add',
		    value: function add() {}
		  }, {
		    key: 'setFont',
		    value: function setFont(family, size, weight) {
		      this.state.font_family = family;
		      this.state.font_size = size;
		      this.state.font_weight = weight;
		      this.attributes.font = (this.state.font_weight || '') + ' ' + this.state.font_size * this.state.scale.x + 'pt ' + this.state.font_family;
		      return this;
		    }
		  }, {
		    key: 'setRawFont',
		    value: function setRawFont(font) {
		      this.attributes.font = font;
		      return this;
		    }
		  }, {
		    key: 'setFillStyle',
		    value: function setFillStyle(style) {
		      this.attributes.fill = style;
		      return this;
		    }
		  }, {
		    key: 'setBackgroundFillStyle',
		    value: function setBackgroundFillStyle(style) {
		      this.background_attributes.fill = style;
		      this.background_attributes.stroke = style;
		      return this;
		    }
		  }, {
		    key: 'setStrokeStyle',
		    value: function setStrokeStyle(style) {
		      this.attributes.stroke = style;
		      return this;
		    }
		  }, {
		    key: 'setShadowColor',
		    value: function setShadowColor(style) {
		      this.shadow_attributes.color = style;
		      return this;
		    }
		  }, {
		    key: 'setShadowBlur',
		    value: function setShadowBlur(blur) {
		      this.shadow_attributes.width = blur;
		      return this;
		    }
		  }, {
		    key: 'setLineWidth',
		    value: function setLineWidth(width) {
		      this.attributes['stroke-width'] = width;
		      this.lineWidth = width;
		    }
		
		    // Empty because there is no equivalent in SVG
		
		  }, {
		    key: 'setLineDash',
		    value: function setLineDash() {
		      return this;
		    }
		  }, {
		    key: 'setLineCap',
		    value: function setLineCap() {
		      return this;
		    }
		  }, {
		    key: 'scale',
		    value: function scale(x, y) {
		      this.state.scale = { x: x, y: y };
		      // The scale() method is deprecated as of Raphael.JS 2.0, and
		      // can no longer be used as an option in an Element.attr() call.
		      // It is preserved here for users running earlier versions of
		      // Raphael.JS, though it has no effect on the SVG output in
		      // Raphael 2 and higher.
		      this.attributes.transform = 'S' + x + ',' + y + ',0,0';
		      this.attributes.scale = x + ',' + y + ',0,0';
		      this.attributes.font = this.state.font_size * this.state.scale.x + 'pt ' + this.state.font_family;
		      this.background_attributes.transform = 'S' + x + ',' + y + ',0,0';
		      this.background_attributes.font = this.state.font_size * this.state.scale.x + 'pt ' + this.state.font_family;
		      return this;
		    }
		  }, {
		    key: 'clear',
		    value: function clear() {
		      this.paper.clear();
		    }
		  }, {
		    key: 'resize',
		    value: function resize(width, height) {
		      this.element.style.width = width;
		      this.paper.setSize(width, height);
		      return this;
		    }
		
		    // Sets the SVG `viewBox` property, which results in auto scaling images when its container
		    // is resized.
		    //
		    // Usage: `ctx.setViewBox("0 0 600 400")`
		
		  }, {
		    key: 'setViewBox',
		    value: function setViewBox(viewBox) {
		      this.paper.canvas.setAttribute('viewBox', viewBox);
		    }
		  }, {
		    key: 'rect',
		    value: function rect(x, y, width, height) {
		      if (height < 0) {
		        y += height;
		        height = -height;
		      }
		
		      this.paper.rect(x, y, width - 0.5, height - 0.5).attr(this.attributes).attr('fill', 'none').attr('stroke-width', this.lineWidth);
		      return this;
		    }
		  }, {
		    key: 'fillRect',
		    value: function fillRect(x, y, width, height) {
		      if (height < 0) {
		        y += height;
		        height = -height;
		      }
		
		      this.paper.rect(x, y, width - 0.5, height - 0.5).attr(this.attributes);
		      return this;
		    }
		  }, {
		    key: 'clearRect',
		    value: function clearRect(x, y, width, height) {
		      if (height < 0) {
		        y += height;
		        height = -height;
		      }
		
		      this.paper.rect(x, y, width - 0.5, height - 0.5).attr(this.background_attributes);
		      return this;
		    }
		  }, {
		    key: 'beginPath',
		    value: function beginPath() {
		      this.path = '';
		      this.pen.x = 0;
		      this.pen.y = 0;
		      return this;
		    }
		  }, {
		    key: 'moveTo',
		    value: function moveTo(x, y) {
		      this.path += 'M' + x + ',' + y;
		      this.pen.x = x;
		      this.pen.y = y;
		      return this;
		    }
		  }, {
		    key: 'lineTo',
		    value: function lineTo(x, y) {
		      this.path += 'L' + x + ',' + y;
		      this.pen.x = x;
		      this.pen.y = y;
		      return this;
		    }
		  }, {
		    key: 'bezierCurveTo',
		    value: function bezierCurveTo(x1, y1, x2, y2, x, y) {
		      this.path += 'C' + x1 + ',' + y1 + ',' + x2 + ',' + y2 + ',' + x + ',' + y;
		      this.pen.x = x;
		      this.pen.y = y;
		      return this;
		    }
		  }, {
		    key: 'quadraticCurveTo',
		    value: function quadraticCurveTo(x1, y1, x, y) {
		      this.path += 'Q' + x1 + ',' + y1 + ',' + x + ',' + y;
		      this.pen.x = x;
		      this.pen.y = y;
		      return this;
		    }
		
		    // This is an attempt (hack) to simulate the HTML5 canvas
		    // arc method.
		
		  }, {
		    key: 'arc',
		    value: function arc(x, y, radius, startAngle, endAngle, antiClockwise) {
		      function normalizeAngle(angle) {
		        while (angle < 0) {
		          angle += Math.PI * 2;
		        }
		
		        while (angle > Math.PI * 2) {
		          angle -= Math.PI * 2;
		        }
		        return angle;
		      }
		
		      startAngle = normalizeAngle(startAngle);
		      endAngle = normalizeAngle(endAngle);
		
		      if (startAngle > endAngle) {
		        var tmp = startAngle;
		        startAngle = endAngle;
		        endAngle = tmp;
		        antiClockwise = !antiClockwise;
		      }
		
		      var delta = endAngle - startAngle;
		
		      if (delta > Math.PI) {
		        this.arcHelper(x, y, radius, startAngle, startAngle + delta / 2, antiClockwise);
		        this.arcHelper(x, y, radius, startAngle + delta / 2, endAngle, antiClockwise);
		      } else {
		        this.arcHelper(x, y, radius, startAngle, endAngle, antiClockwise);
		      }
		      return this;
		    }
		  }, {
		    key: 'arcHelper',
		    value: function arcHelper(x, y, radius, startAngle, endAngle, antiClockwise) {
		      var x1 = x + radius * Math.cos(startAngle);
		      var y1 = y + radius * Math.sin(startAngle);
		
		      var x2 = x + radius * Math.cos(endAngle);
		      var y2 = y + radius * Math.sin(endAngle);
		
		      var largeArcFlag = 0;
		      var sweepFlag = 0;
		      if (antiClockwise) {
		        sweepFlag = 1;
		        if (endAngle - startAngle < Math.PI) {
		          largeArcFlag = 1;
		        }
		      } else if (endAngle - startAngle > Math.PI) {
		        largeArcFlag = 1;
		      }
		
		      this.path += 'M' + x1 + ',' + y1 + ',A' + radius + ',' + radius + ',0,' + largeArcFlag + ',' + sweepFlag + ',' + x2 + ',' + y2 + 'M' + this.pen.x + ',' + this.pen.y;
		    }
		
		    // Adapted from the source for Raphael's Element.glow
		
		  }, {
		    key: 'glow',
		    value: function glow() {
		      var out = this.paper.set();
		      if (this.shadow_attributes.width > 0) {
		        var sa = this.shadow_attributes;
		        var num_paths = sa.width / 2;
		        for (var i = 1; i <= num_paths; i++) {
		          out.push(this.paper.path(this.path).attr({
		            stroke: sa.color,
		            'stroke-linejoin': 'round',
		            'stroke-linecap': 'round',
		            'stroke-width': +(sa.width / num_paths * i).toFixed(3),
		            opacity: +((sa.opacity || 0.3) / num_paths).toFixed(3),
		            // See note in this.scale(): In Raphael the scale() method
		            // is deprecated and removed as of Raphael 2.0 and replaced
		            // by the transform() method.  It is preserved here for
		            // users with earlier versions of Raphael, but has no effect
		            // on the output SVG in Raphael 2.0+.
		            transform: this.attributes.transform,
		            scale: this.attributes.scale
		          }));
		        }
		      }
		      return out;
		    }
		  }, {
		    key: 'fill',
		    value: function fill() {
		      var elem = this.paper.path(this.path).attr(this.attributes).attr('stroke-width', 0);
		      this.glow(elem);
		      return this;
		    }
		  }, {
		    key: 'stroke',
		    value: function stroke() {
		      // The first line of code below is, unfortunately, a bit of a hack:
		      // Raphael's transform() scaling does not scale the stroke-width, so
		      // in order to scale a stroke, we have to manually scale the
		      // stroke-width.
		      //
		      // This works well so long as the X & Y states for this.scale() are
		      // relatively similar.  However, if they are very different, we
		      // would expect horizontal and vertical lines to have different
		      // stroke-widths.
		      //
		      // In the future, if we want to support very divergent values for
		      // horizontal and vertical scaling, we may want to consider
		      // implementing SVG scaling with properties of the SVG viewBox &
		      // viewPort and removing it entirely from the Element.attr() calls.
		      // This would more closely parallel the approach taken in
		      // canvascontext.js as well.
		
		      var strokeWidth = this.lineWidth * (this.state.scale.x + this.state.scale.y) / 2;
		      var elem = this.paper.path(this.path).attr(this.attributes).attr('fill', 'none').attr('stroke-width', strokeWidth);
		      this.glow(elem);
		      return this;
		    }
		  }, {
		    key: 'closePath',
		    value: function closePath() {
		      this.path += 'Z';
		      return this;
		    }
		  }, {
		    key: 'measureText',
		    value: function measureText(text) {
		      var txt = this.paper.text(0, 0, text).attr(this.attributes).attr('fill', 'none').attr('stroke', 'none');
		      var bounds = txt.getBBox();
		      txt.remove();
		
		      return {
		        width: bounds.width,
		        height: bounds.height
		      };
		    }
		  }, {
		    key: 'fillText',
		    value: function fillText(text, x, y) {
		      this.paper.text(x + this.measureText(text).width / 2, y - this.state.font_size / (2.25 * this.state.scale.y), text).attr(this.attributes);
		
		      return this;
		    }
		  }, {
		    key: 'save',
		    value: function save() {
		      // TODO(mmuthanna): State needs to be deep-copied.
		      this.state_stack.push({
		        state: {
		          font_family: this.state.font_family
		        },
		        attributes: {
		          font: this.attributes.font,
		          fill: this.attributes.fill,
		          stroke: this.attributes.stroke,
		          'stroke-width': this.attributes['stroke-width']
		        },
		        shadow_attributes: {
		          width: this.shadow_attributes.width,
		          color: this.shadow_attributes.color
		        }
		      });
		      return this;
		    }
		  }, {
		    key: 'restore',
		    value: function restore() {
		      // TODO(0xfe): State needs to be deep-restored.
		      var state = this.state_stack.pop();
		      this.state.font_family = state.state.font_family;
		      this.attributes.font = state.attributes.font;
		      this.attributes.fill = state.attributes.fill;
		      this.attributes.stroke = state.attributes.stroke;
		      this.attributes['stroke-width'] = state.attributes['stroke-width'];
		      this.shadow_attributes.width = state.shadow_attributes.width;
		      this.shadow_attributes.color = state.shadow_attributes.color;
		      return this;
		    }
		  }]);

		  return RaphaelContext;
		}();

	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.SVGContext = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// @author Gregory Ristow (2015)
		
		var _vex = __webpack_require__(1);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var SVGContext = exports.SVGContext = function () {
		  function SVGContext(element) {
		    _classCallCheck(this, SVGContext);
		
		    // element is the parent DOM object
		    this.element = element;
		    // Create the SVG in the SVG namespace:
		    this.svgNS = 'http://www.w3.org/2000/svg';
		    var svg = this.create('svg');
		    // Add it to the canvas:
		    this.element.appendChild(svg);
		
		    // Point to it:
		    this.svg = svg;
		    this.groups = [this.svg]; // Create the group stack
		    this.parent = this.svg;
		
		    this.path = '';
		    this.pen = { x: 0, y: 0 };
		    this.lineWidth = 1.0;
		    this.state = {
		      scale: { x: 1, y: 1 },
		      'font-family': 'Arial',
		      'font-size': '8pt',
		      'font-weight': 'normal'
		    };
		
		    this.attributes = {
		      'stroke-width': 0.3,
		      'fill': 'black',
		      'stroke': 'black',
		      'stroke-dasharray': 'none',
		      'font-family': 'Arial',
		      'font-size': '10pt',
		      'font-weight': 'normal',
		      'font-style': 'normal'
		    };
		
		    this.background_attributes = {
		      'stroke-width': 0,
		      'fill': 'white',
		      'stroke': 'white',
		      'stroke-dasharray': 'none',
		      'font-family': 'Arial',
		      'font-size': '10pt',
		      'font-weight': 'normal',
		      'font-style': 'normal'
		    };
		
		    this.shadow_attributes = {
		      width: 0,
		      color: 'black'
		    };
		
		    this.state_stack = [];
		
		    // Test for Internet Explorer
		    this.iePolyfill();
		  }
		
		  _createClass(SVGContext, [{
		    key: 'create',
		    value: function create(svgElementType) {
		      return document.createElementNS(this.svgNS, svgElementType);
		    }
		
		    // Allow grouping elements in containers for interactivity.
		
		  }, {
		    key: 'openGroup',
		    value: function openGroup(cls, id, attrs) {
		      var group = this.create('g');
		      this.groups.push(group);
		      this.parent.appendChild(group);
		      this.parent = group;
		      if (cls) group.setAttribute('class', _vex.Vex.Prefix(cls));
		      if (id) group.setAttribute('id', _vex.Vex.Prefix(id));
		
		      if (attrs && attrs.pointerBBox) {
		        group.setAttribute('pointer-events', 'bounding-box');
		      }
		      return group;
		    }
		  }, {
		    key: 'closeGroup',
		    value: function closeGroup() {
		      this.groups.pop();
		      this.parent = this.groups[this.groups.length - 1];
		    }
		  }, {
		    key: 'add',
		    value: function add(elem) {
		      this.parent.appendChild(elem);
		    }
		
		    // Tests if the browser is Internet Explorer; if it is,
		    // we do some tricks to improve text layout.  See the
		    // note at ieMeasureTextFix() for details.
		
		  }, {
		    key: 'iePolyfill',
		    value: function iePolyfill() {
		      if (typeof navigator !== 'undefined') {
		        this.ie = /MSIE 9/i.test(navigator.userAgent) || /MSIE 10/i.test(navigator.userAgent) || /rv:11\.0/i.test(navigator.userAgent) || /Trident/i.test(navigator.userAgent);
		      }
		    }
		
		    // ### Styling & State Methods:
		
		  }, {
		    key: 'setFont',
		    value: function setFont(family, size, weight) {
		      // Unlike canvas, in SVG italic is handled by font-style,
		      // not weight. So: we search the weight argument and
		      // apply bold and italic to weight and style respectively.
		      var bold = false;
		      var italic = false;
		      var style = 'normal';
		      // Weight might also be a number (200, 400, etc...) so we
		      // test its type to be sure we have access to String methods.
		      if (typeof weight === 'string') {
		        // look for "italic" in the weight:
		        if (weight.indexOf('italic') !== -1) {
		          weight = weight.replace(/italic/g, '');
		          italic = true;
		        }
		        // look for "bold" in weight
		        if (weight.indexOf('bold') !== -1) {
		          weight = weight.replace(/bold/g, '');
		          bold = true;
		        }
		        // remove any remaining spaces
		        weight = weight.replace(/ /g, '');
		      }
		      weight = bold ? 'bold' : weight;
		      weight = typeof weight === 'undefined' || weight === '' ? 'normal' : weight;
		
		      style = italic ? 'italic' : style;
		
		      var fontAttributes = {
		        'font-family': family,
		        'font-size': size + 'pt',
		        'font-weight': weight,
		        'font-style': style
		      };
		
		      // Store the font size so that if the browser is Internet
		      // Explorer we can fix its calculations of text width.
		      this.fontSize = Number(size);
		
		      _vex.Vex.Merge(this.attributes, fontAttributes);
		      _vex.Vex.Merge(this.state, fontAttributes);
		
		      return this;
		    }
		  }, {
		    key: 'setRawFont',
		    value: function setRawFont(font) {
		      font = font.trim();
		      // Assumes size first, splits on space -- which is presently
		      // how all existing modules are calling this.
		      var fontArray = font.split(' ');
		
		      this.attributes['font-family'] = fontArray[1];
		      this.state['font-family'] = fontArray[1];
		
		      this.attributes['font-size'] = fontArray[0];
		      this.state['font-size'] = fontArray[0];
		
		      // Saves fontSize for IE polyfill
		      this.fontSize = Number(fontArray[0].match(/\d+/));
		      return this;
		    }
		  }, {
		    key: 'setFillStyle',
		    value: function setFillStyle(style) {
		      this.attributes.fill = style;
		      return this;
		    }
		  }, {
		    key: 'setBackgroundFillStyle',
		    value: function setBackgroundFillStyle(style) {
		      this.background_attributes.fill = style;
		      this.background_attributes.stroke = style;
		      return this;
		    }
		  }, {
		    key: 'setStrokeStyle',
		    value: function setStrokeStyle(style) {
		      this.attributes.stroke = style;
		      return this;
		    }
		  }, {
		    key: 'setShadowColor',
		    value: function setShadowColor(style) {
		      this.shadow_attributes.color = style;
		      return this;
		    }
		  }, {
		    key: 'setShadowBlur',
		    value: function setShadowBlur(blur) {
		      this.shadow_attributes.width = blur;
		      return this;
		    }
		  }, {
		    key: 'setLineWidth',
		    value: function setLineWidth(width) {
		      this.attributes['stroke-width'] = width;
		      this.lineWidth = width;
		    }
		
		    // @param array {lineDash} as [dashInt, spaceInt, dashInt, spaceInt, etc...]
		
		  }, {
		    key: 'setLineDash',
		    value: function setLineDash(lineDash) {
		      if (Object.prototype.toString.call(lineDash) === '[object Array]') {
		        lineDash = lineDash.join(', ');
		        this.attributes['stroke-dasharray'] = lineDash;
		        return this;
		      } else {
		        throw new _vex.Vex.RERR('ArgumentError', 'lineDash must be an array of integers.');
		      }
		    }
		  }, {
		    key: 'setLineCap',
		    value: function setLineCap(lineCap) {
		      this.attributes['stroke-linecap'] = lineCap;
		      return this;
		    }
		
		    // ### Sizing & Scaling Methods:
		
		    // TODO (GCR): See note at scale() -- seperate our internal
		    // conception of pixel-based width/height from the style.width
		    // and style.height properties eventually to allow users to
		    // apply responsive sizing attributes to the SVG.
		
		  }, {
		    key: 'resize',
		    value: function resize(width, height) {
		      this.width = width;
		      this.height = height;
		      this.element.style.width = width;
		      var attributes = {
		        width: width,
		        height: height
		      };
		      this.applyAttributes(this.svg, attributes);
		      return this;
		    }
		  }, {
		    key: 'scale',
		    value: function scale(x, y) {
		      // uses viewBox to scale
		      // TODO (GCR): we may at some point want to distinguish the
		      // style.width / style.height properties that are applied to
		      // the SVG object from our internal conception of the SVG
		      // width/height.  This would allow us to create automatically
		      // scaling SVG's that filled their containers, for instance.
		      //
		      // As this isn't implemented in Canvas or Raphael contexts,
		      // I've left as is for now, but in using the viewBox to
		      // handle internal scaling, am trying to make it possible
		      // for us to eventually move in that direction.
		
		      this.state.scale = { x: x, y: y };
		      var visibleWidth = this.width / x;
		      var visibleHeight = this.height / y;
		      this.setViewBox(0, 0, visibleWidth, visibleHeight);
		
		      return this;
		    }
		  }, {
		    key: 'setViewBox',
		    value: function setViewBox() {
		      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		        args[_key] = arguments[_key];
		      }
		
		      // Override for "x y w h" style:
		      if (args.length === 1) {
		        var viewBox = args[0];
		
		        this.svg.setAttribute('viewBox', viewBox);
		      } else {
		        var xMin = args[0];
		        var yMin = args[1];
		        var width = args[2];
		        var height = args[3];
		
		        var viewBoxString = xMin + ' ' + yMin + ' ' + width + ' ' + height;
		        this.svg.setAttribute('viewBox', viewBoxString);
		      }
		    }
		
		    // ### Drawing helper methods:
		
		  }, {
		    key: 'applyAttributes',
		    value: function applyAttributes(element, attributes) {
		      Object.keys(attributes).forEach(function (propertyName) {
		        return element.setAttributeNS(null, propertyName, attributes[propertyName]);
		      });
		
		      return element;
		    }
		
		    // ### Shape & Path Methods:
		
		  }, {
		    key: 'clear',
		    value: function clear() {
		      // Clear the SVG by removing all inner children.
		
		      // (This approach is usually slightly more efficient
		      // than removing the old SVG & adding a new one to
		      // the container element, since it does not cause the
		      // container to resize twice.  Also, the resize
		      // triggered by removing the entire SVG can trigger
		      // a touchcancel event when the element resizes away
		      // from a touch point.)
		
		      while (this.svg.lastChild) {
		        this.svg.removeChild(this.svg.lastChild);
		      }
		
		      // Replace the viewbox attribute we just removed:
		      this.scale(this.state.scale.x, this.state.scale.y);
		    }
		
		    // ## Rectangles:
		
		  }, {
		    key: 'rect',
		    value: function rect(x, y, width, height, attributes) {
		      // Avoid invalid negative height attribs by
		      // flipping the rectangle on its head:
		      if (height < 0) {
		        y += height;
		        height *= -1;
		      }
		
		      // Create the rect & style it:
		      var rectangle = this.create('rect');
		      if (typeof attributes === 'undefined') {
		        attributes = {
		          fill: 'none',
		          'stroke-width': this.lineWidth,
		          stroke: 'black'
		        };
		      }
		
		      _vex.Vex.Merge(attributes, {
		        x: x,
		        y: y,
		        width: width,
		        height: height
		      });
		
		      this.applyAttributes(rectangle, attributes);
		
		      this.add(rectangle);
		      return this;
		    }
		  }, {
		    key: 'fillRect',
		    value: function fillRect(x, y, width, height) {
		      if (height < 0) {
		        y += height;
		        height *= -1;
		      }
		
		      this.rect(x, y, width, height, this.attributes);
		      return this;
		    }
		  }, {
		    key: 'clearRect',
		    value: function clearRect(x, y, width, height) {
		      // TODO(GCR): Improve implementation of this...
		      // Currently it draws a box of the background color, rather
		      // than creating alpha through lower z-levels.
		      //
		      // See the implementation of this in SVGKit:
		      // http://sourceforge.net/projects/svgkit/
		      // as a starting point.
		      //
		      // Adding a large number of transform paths (as we would
		      // have to do) could be a real performance hit.  Since
		      // tabNote seems to be the only module that makes use of this
		      // it may be worth creating a seperate tabStave that would
		      // draw lines around locations of tablature fingering.
		      //
		
		      this.rect(x, y, width, height, this.background_attributes);
		      return this;
		    }
		
		    // ## Paths:
		
		  }, {
		    key: 'beginPath',
		    value: function beginPath() {
		      this.path = '';
		      this.pen.x = 0;
		      this.pen.y = 0;
		      return this;
		    }
		  }, {
		    key: 'moveTo',
		    value: function moveTo(x, y) {
		      this.path += 'M' + x + ' ' + y;
		      this.pen.x = x;
		      this.pen.y = y;
		      return this;
		    }
		  }, {
		    key: 'lineTo',
		    value: function lineTo(x, y) {
		      this.path += 'L' + x + ' ' + y;
		      this.pen.x = x;
		      this.pen.y = y;
		      return this;
		    }
		  }, {
		    key: 'bezierCurveTo',
		    value: function bezierCurveTo(x1, y1, x2, y2, x, y) {
		      this.path += 'C' + x1 + ' ' + y1 + ',' + x2 + ' ' + y2 + ',' + x + ' ' + y;
		      this.pen.x = x;
		      this.pen.y = y;
		      return this;
		    }
		  }, {
		    key: 'quadraticCurveTo',
		    value: function quadraticCurveTo(x1, y1, x, y) {
		      this.path += 'Q' + x1 + ' ' + y1 + ',' + x + ' ' + y;
		      this.pen.x = x;
		      this.pen.y = y;
		      return this;
		    }
		
		    // This is an attempt (hack) to simulate the HTML5 canvas
		    // arc method.
		
		  }, {
		    key: 'arc',
		    value: function arc(x, y, radius, startAngle, endAngle, antiClockwise) {
		      function normalizeAngle(angle) {
		        while (angle < 0) {
		          angle += Math.PI * 2;
		        }
		
		        while (angle > Math.PI * 2) {
		          angle -= Math.PI * 2;
		        }
		        return angle;
		      }
		
		      startAngle = normalizeAngle(startAngle);
		      endAngle = normalizeAngle(endAngle);
		
		      if (startAngle > endAngle) {
		        var tmp = startAngle;
		        startAngle = endAngle;
		        endAngle = tmp;
		        antiClockwise = !antiClockwise;
		      }
		
		      var delta = endAngle - startAngle;
		
		      if (delta > Math.PI) {
		        this.arcHelper(x, y, radius, startAngle, startAngle + delta / 2, antiClockwise);
		        this.arcHelper(x, y, radius, startAngle + delta / 2, endAngle, antiClockwise);
		      } else {
		        this.arcHelper(x, y, radius, startAngle, endAngle, antiClockwise);
		      }
		      return this;
		    }
		  }, {
		    key: 'arcHelper',
		    value: function arcHelper(x, y, radius, startAngle, endAngle, antiClockwise) {
		      var x1 = x + radius * Math.cos(startAngle);
		      var y1 = y + radius * Math.sin(startAngle);
		
		      var x2 = x + radius * Math.cos(endAngle);
		      var y2 = y + radius * Math.sin(endAngle);
		
		      var largeArcFlag = 0;
		      var sweepFlag = 0;
		      if (antiClockwise) {
		        sweepFlag = 1;
		        if (endAngle - startAngle < Math.PI) {
		          largeArcFlag = 1;
		        }
		      } else if (endAngle - startAngle > Math.PI) {
		        largeArcFlag = 1;
		      }
		
		      this.path += 'M' + x1 + ' ' + y1 + ' A' + radius + ' ' + radius + ' 0 ' + largeArcFlag + ' ' + sweepFlag + ' ' + x2 + ' ' + y2 + 'M' + this.pen.x + ' ' + this.pen.y;
		    }
		  }, {
		    key: 'closePath',
		    value: function closePath() {
		      this.path += 'Z';
		
		      return this;
		    }
		
		    // Adapted from the source for Raphael's Element.glow
		
		  }, {
		    key: 'glow',
		    value: function glow() {
		      // Calculate the width & paths of the glow:
		      if (this.shadow_attributes.width > 0) {
		        var sa = this.shadow_attributes;
		        var num_paths = sa.width / 2;
		        // Stroke at varying widths to create effect of gaussian blur:
		        for (var i = 1; i <= num_paths; i++) {
		          var attributes = {
		            stroke: sa.color,
		            'stroke-linejoin': 'round',
		            'stroke-linecap': 'round',
		            'stroke-width': +(sa.width * 0.4 / num_paths * i).toFixed(3),
		            opacity: +((sa.opacity || 0.3) / num_paths).toFixed(3)
		          };
		
		          var path = this.create('path');
		          attributes.d = this.path;
		          this.applyAttributes(path, attributes);
		          this.add(path);
		        }
		      }
		      return this;
		    }
		  }, {
		    key: 'fill',
		    value: function fill(attributes) {
		      // If our current path is set to glow, make it glow
		      this.glow();
		
		      var path = this.create('path');
		      if (typeof attributes === 'undefined') {
		        attributes = {};
		        _vex.Vex.Merge(attributes, this.attributes);
		        attributes.stroke = 'none';
		      }
		
		      attributes.d = this.path;
		
		      this.applyAttributes(path, attributes);
		      this.add(path);
		      return this;
		    }
		  }, {
		    key: 'stroke',
		    value: function stroke() {
		      // If our current path is set to glow, make it glow.
		      this.glow();
		
		      var path = this.create('path');
		      var attributes = {};
		      _vex.Vex.Merge(attributes, this.attributes);
		      attributes.fill = 'none';
		      attributes['stroke-width'] = this.lineWidth;
		      attributes.d = this.path;
		
		      this.applyAttributes(path, attributes);
		      this.add(path);
		      return this;
		    }
		
		    // ## Text Methods:
		
		  }, {
		    key: 'measureText',
		    value: function measureText(text) {
		      var txt = this.create('text');
		      if (typeof txt.getBBox !== 'function') {
		        return { x: 0, y: 0, width: 0, height: 0 };
		      }
		
		      txt.textContent = text;
		      this.applyAttributes(txt, this.attributes);
		
		      // Temporarily add it to the document for measurement.
		      this.svg.appendChild(txt);
		
		      var bbox = txt.getBBox();
		      if (this.ie && text !== '' && this.attributes['font-style'] === 'italic') {
		        bbox = this.ieMeasureTextFix(bbox, text);
		      }
		
		      this.svg.removeChild(txt);
		      return bbox;
		    }
		  }, {
		    key: 'ieMeasureTextFix',
		    value: function ieMeasureTextFix(bbox) {
		      // Internet Explorer over-pads text in italics,
		      // resulting in giant width estimates for measureText.
		      // To fix this, we use this formula, tested against
		      // ie 11:
		      // overestimate (in pixels) = FontSize(in pt) * 1.196 + 1.96
		      // And then subtract the overestimate from calculated width.
		
		      var fontSize = Number(this.fontSize);
		      var m = 1.196;
		      var b = 1.9598;
		      var widthCorrection = m * fontSize + b;
		      var width = bbox.width - widthCorrection;
		      var height = bbox.height - 1.5;
		
		      // Get non-protected copy:
		      var box = {
		        x: bbox.x,
		        y: bbox.y,
		        width: width,
		        height: height
		      };
		
		      return box;
		    }
		  }, {
		    key: 'fillText',
		    value: function fillText(text, x, y) {
		      var attributes = {};
		      _vex.Vex.Merge(attributes, this.attributes);
		      attributes.stroke = 'none';
		      attributes.x = x;
		      attributes.y = y;
		
		      var txt = this.create('text');
		      txt.textContent = text;
		      this.applyAttributes(txt, attributes);
		      this.add(txt);
		    }
		  }, {
		    key: 'save',
		    value: function save() {
		      // TODO(mmuthanna): State needs to be deep-copied.
		      this.state_stack.push({
		        state: {
		          'font-family': this.state['font-family'],
		          'font-weight': this.state['font-weight'],
		          'font-style': this.state['font-style'],
		          'font-size': this.state['font-size']
		        },
		        attributes: {
		          'font-family': this.attributes['font-family'],
		          'font-weight': this.attributes['font-weight'],
		          'font-style': this.attributes['font-style'],
		          'font-size': this.attributes['font-size'],
		          fill: this.attributes.fill,
		          stroke: this.attributes.stroke,
		          'stroke-width': this.attributes['stroke-width'],
		          'stroke-dasharray': this.attributes['stroke-dasharray']
		        },
		        shadow_attributes: {
		          width: this.shadow_attributes.width,
		          color: this.shadow_attributes.color
		        }
		      });
		      return this;
		    }
		  }, {
		    key: 'restore',
		    value: function restore() {
		      // TODO(0xfe): State needs to be deep-restored.
		      var state = this.state_stack.pop();
		      this.state['font-family'] = state.state['font-family'];
		      this.state['font-weight'] = state.state['font-weight'];
		      this.state['font-style'] = state.state['font-style'];
		      this.state['font-size'] = state.state['font-size'];
		
		      this.attributes['font-family'] = state.attributes['font-family'];
		      this.attributes['font-weight'] = state.attributes['font-weight'];
		      this.attributes['font-style'] = state.attributes['font-style'];
		      this.attributes['font-size'] = state.attributes['font-size'];
		
		      this.attributes.fill = state.attributes.fill;
		      this.attributes.stroke = state.attributes.stroke;
		      this.attributes['stroke-width'] = state.attributes['stroke-width'];
		      this.attributes['stroke-dasharray'] = state.attributes['stroke-dasharray'];
		
		      this.shadow_attributes.width = state.shadow_attributes.width;
		      this.shadow_attributes.color = state.shadow_attributes.color;
		      return this;
		    }
		  }]);

		  return SVGContext;
		}();

	/***/ },
	/* 14 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Formatter = undefined;
		
		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This file implements the formatting and layout algorithms that are used
		// to position notes in a voice. The algorithm can align multiple voices both
		// within a stave, and across multiple staves.
		//
		// To do this, the formatter breaks up voices into a grid of rational-valued
		// `ticks`, to which each note is assigned. Then, minimum widths are assigned
		// to each tick based on the widths of the notes and modifiers in that tick. This
		// establishes the smallest amount of space required for each tick.
		//
		// Finally, the formatter distributes the left over space proportionally to
		// all the ticks, setting the `x` values of the notes in each tick.
		//
		// See `tests/formatter_tests.js` for usage examples. The helper functions included
		// here (`FormatAndDraw`, `FormatAndDrawTab`) also serve as useful usage examples.
		
		var _vex = __webpack_require__(1);
		
		var _beam = __webpack_require__(15);
		
		var _tables = __webpack_require__(2);
		
		var _fraction = __webpack_require__(3);
		
		var _voice = __webpack_require__(18);
		
		var _staveconnector = __webpack_require__(19);
		
		var _stavenote = __webpack_require__(20);
		
		var _note = __webpack_require__(22);
		
		var _modifiercontext = __webpack_require__(27);
		
		var _tickcontext = __webpack_require__(39);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		// To enable logging for this class. Set `Vex.Flow.Formatter.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (Formatter.DEBUG) _vex.Vex.L('Vex.Flow.Formatter', args);
		}
		
		// Helper function to locate the next non-rest note(s).
		function lookAhead(notes, restLine, i, compare) {
		  // If no valid next note group, nextRestLine is same as current.
		  var nextRestLine = restLine;
		
		  // Get the rest line for next valid non-rest note group.
		  for (i += 1; i < notes.length; i += 1) {
		    var note = notes[i];
		    if (!note.isRest() && !note.shouldIgnoreTicks()) {
		      nextRestLine = note.getLineForRest();
		      break;
		    }
		  }
		
		  // Locate the mid point between two lines.
		  if (compare && restLine !== nextRestLine) {
		    var top = Math.max(restLine, nextRestLine);
		    var bot = Math.min(restLine, nextRestLine);
		    nextRestLine = _vex.Vex.MidLine(top, bot);
		  }
		  return nextRestLine;
		}
		
		// Take an array of `voices` and place aligned tickables in the same context. Returns
		// a mapping from `tick` to `ContextType`, a list of `tick`s, and the resolution
		// multiplier.
		//
		// Params:
		// * `voices`: Array of `Voice` instances.
		// * `ContextType`: A context class (e.g., `ModifierContext`, `TickContext`)
		// * `addToContext`: Function to add tickable to context.
		function createContexts(voices, ContextType, addToContext) {
		  if (!voices || !voices.length) {
		    throw new _vex.Vex.RERR('BadArgument', 'No voices to format');
		  }
		
		  // Find out highest common multiple of resolution multipliers.
		  // The purpose of this is to find out a common denominator
		  // for all fractional tick values in all tickables of all voices,
		  // so that the values can be expanded and the numerator used
		  // as an integer tick value.
		  var totalTicks = voices[0].getTotalTicks();
		  var resolutionMultiplier = voices.reduce(function (resolutionMultiplier, voice) {
		    if (!voice.getTotalTicks().equals(totalTicks)) {
		      throw new _vex.Vex.RERR('TickMismatch', 'Voices should have same total note duration in ticks.');
		    }
		
		    if (voice.getMode() === _voice.Voice.Mode.STRICT && !voice.isComplete()) {
		      throw new _vex.Vex.RERR('IncompleteVoice', 'Voice does not have enough notes.');
		    }
		
		    return Math.max(resolutionMultiplier, _fraction.Fraction.LCM(resolutionMultiplier, voice.getResolutionMultiplier()));
		  }, 1);
		
		  // Initialize tick maps.
		  var tickToContextMap = {};
		  var tickList = [];
		  var contexts = [];
		
		  // For each voice, extract notes and create a context for every
		  // new tick that hasn't been seen before.
		  voices.forEach(function (voice) {
		    // Use resolution multiplier as denominator to expand ticks
		    // to suitable integer values, so that no additional expansion
		    // of fractional tick values is needed.
		    var ticksUsed = new _fraction.Fraction(0, resolutionMultiplier);
		
		    voice.getTickables().forEach(function (tickable) {
		      var integerTicks = ticksUsed.numerator;
		
		      // If we have no tick context for this tick, create one.
		      if (!tickToContextMap[integerTicks]) {
		        var newContext = new ContextType();
		        contexts.push(newContext);
		        tickToContextMap[integerTicks] = newContext;
		      }
		
		      // Add this tickable to the TickContext.
		      addToContext(tickable, tickToContextMap[integerTicks]);
		
		      // Maintain a sorted list of tick contexts.
		      tickList.push(integerTicks);
		      ticksUsed.add(tickable.getTicks());
		    });
		  });
		
		  return {
		    map: tickToContextMap,
		    array: contexts,
		    list: _vex.Vex.SortAndUnique(tickList, function (a, b) {
		      return a - b;
		    }, function (a, b) {
		      return a === b;
		    }),
		    resolutionMultiplier: resolutionMultiplier
		  };
		}
		
		var Formatter = exports.Formatter = function () {
		  _createClass(Formatter, null, [{
		    key: 'SimpleFormat',
		
		    // Helper function to layout "notes" one after the other without
		    // regard for proportions. Useful for tests and debugging.
		    value: function SimpleFormat(notes) {
		      var x = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
		
		      var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
		
		      var _ref$paddingBetween = _ref.paddingBetween;
		      var paddingBetween = _ref$paddingBetween === undefined ? 10 : _ref$paddingBetween;
		
		      notes.reduce(function (x, note) {
		        note.addToModifierContext(new _modifiercontext.ModifierContext());
		        var tick = new _tickcontext.TickContext().addTickable(note).preFormat();
		        var extra = tick.getExtraPx();
		        tick.setX(x + extra.left);
		
		        return x + tick.getWidth() + extra.right + paddingBetween;
		      }, x);
		    }
		
		    // Helper function to plot formatter debug info.
		
		  }, {
		    key: 'plotDebugging',
		    value: function plotDebugging(ctx, formatter, xPos, y1, y2) {
		      var x = xPos + _note.Note.STAVEPADDING;
		      var contextGaps = formatter.contextGaps;
		      function stroke(x1, x2, color) {
		        ctx.beginPath();
		        ctx.setStrokeStyle(color);
		        ctx.setFillStyle(color);
		        ctx.setLineWidth(1);
		        ctx.fillRect(x1, y1, x2 - x1, y2 - y1);
		      }
		
		      ctx.save();
		      ctx.setFont('Arial', 8, '');
		
		      contextGaps.gaps.forEach(function (gap) {
		        stroke(x + gap.x1, x + gap.x2, '#aaa');
		        // Vex.drawDot(ctx, xPos + gap.x1, yPos, 'blue');
		        ctx.fillText(Math.round(gap.x2 - gap.x1), x + gap.x1, y2 + 12);
		      });
		
		      ctx.fillText(Math.round(contextGaps.total) + 'px', x - 20, y2 + 12);
		      ctx.setFillStyle('red');
		
		      ctx.fillText('Loss: ' + formatter.lossHistory.map(function (loss) {
		        return Math.round(loss);
		      }), x - 20, y2 + 22);
		      ctx.restore();
		    }
		
		    // Helper function to format and draw a single voice. Returns a bounding
		    // box for the notation.
		    //
		    // Parameters:
		    // * `ctx` - The rendering context
		    // * `stave` - The stave to which to draw (`Stave` or `TabStave`)
		    // * `notes` - Array of `Note` instances (`StaveNote`, `TextNote`, `TabNote`, etc.)
		    // * `params` - One of below:
		    //    * Setting `autobeam` only `(context, stave, notes, true)` or
		    //      `(ctx, stave, notes, {autobeam: true})`
		    //    * Setting `align_rests` a struct is needed `(context, stave, notes, {align_rests: true})`
		    //    * Setting both a struct is needed `(context, stave, notes, {
		    //      autobeam: true, align_rests: true})`
		    //
		    // `autobeam` automatically generates beams for the notes.
		    // `align_rests` aligns rests with nearby notes.
		
		  }, {
		    key: 'FormatAndDraw',
		    value: function FormatAndDraw(ctx, stave, notes, params) {
		      var options = {
		        auto_beam: false,
		        align_rests: false
		      };
		
		      if ((typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object') {
		        _vex.Vex.Merge(options, params);
		      } else if (typeof params === 'boolean') {
		        options.auto_beam = params;
		      }
		
		      // Start by creating a voice and adding all the notes to it.
		      var voice = new _voice.Voice(_tables.Flow.TIME4_4).setMode(_voice.Voice.Mode.SOFT).addTickables(notes);
		
		      // Then create beams, if requested.
		      var beams = options.auto_beam ? _beam.Beam.applyAndGetBeams(voice) : [];
		
		      // Instantiate a `Formatter` and format the notes.
		      new Formatter().joinVoices([voice], { align_rests: options.align_rests }).formatToStave([voice], stave, { align_rests: options.align_rests, stave: stave });
		
		      // Render the voice and beams to the stave.
		      voice.setStave(stave).draw(ctx, stave);
		      beams.forEach(function (beam) {
		        return beam.setContext(ctx).draw();
		      });
		
		      // Return the bounding box of the voice.
		      return voice.getBoundingBox();
		    }
		
		    // Helper function to format and draw aligned tab and stave notes in two
		    // separate staves.
		    //
		    // Parameters:
		    // * `ctx` - The rendering context
		    // * `tabstave` - A `TabStave` instance on which to render `TabNote`s.
		    // * `stave` - A `Stave` instance on which to render `Note`s.
		    // * `notes` - Array of `Note` instances for the stave (`StaveNote`, `BarNote`, etc.)
		    // * `tabnotes` - Array of `Note` instances for the tab stave (`TabNote`, `BarNote`, etc.)
		    // * `autobeam` - Automatically generate beams.
		    // * `params` - A configuration object:
		    //    * `autobeam` automatically generates beams for the notes.
		    //    * `align_rests` aligns rests with nearby notes.
		
		  }, {
		    key: 'FormatAndDrawTab',
		    value: function FormatAndDrawTab(ctx, tabstave, stave, tabnotes, notes, autobeam, params) {
		      var opts = {
		        auto_beam: autobeam,
		        align_rests: false
		      };
		
		      if ((typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object') {
		        _vex.Vex.Merge(opts, params);
		      } else if (typeof params === 'boolean') {
		        opts.auto_beam = params;
		      }
		
		      // Create a `4/4` voice for `notes`.
		      var notevoice = new _voice.Voice(_tables.Flow.TIME4_4).setMode(_voice.Voice.Mode.SOFT).addTickables(notes);
		
		      // Create a `4/4` voice for `tabnotes`.
		      var tabvoice = new _voice.Voice(_tables.Flow.TIME4_4).setMode(_voice.Voice.Mode.SOFT).addTickables(tabnotes);
		
		      // Then create beams, if requested.
		      var beams = opts.auto_beam ? _beam.Beam.applyAndGetBeams(notevoice) : [];
		
		      // Instantiate a `Formatter` and align tab and stave notes.
		      new Formatter().joinVoices([notevoice], { align_rests: opts.align_rests }).joinVoices([tabvoice]).formatToStave([notevoice, tabvoice], stave, { align_rests: opts.align_rests });
		
		      // Render voices and beams to staves.
		      notevoice.draw(ctx, stave);
		      tabvoice.draw(ctx, tabstave);
		      beams.forEach(function (beam) {
		        return beam.setContext(ctx).draw();
		      });
		
		      // Draw a connector between tab and note staves.
		      new _staveconnector.StaveConnector(stave, tabstave).setContext(ctx).draw();
		    }
		
		    // Auto position rests based on previous/next note positions.
		    //
		    // Params:
		    // * `notes`: An array of notes.
		    // * `alignAllNotes`: If set to false, only aligns non-beamed notes.
		    // * `alignTuplets`: If set to false, ignores tuplets.
		
		  }, {
		    key: 'AlignRestsToNotes',
		    value: function AlignRestsToNotes(notes, alignAllNotes, alignTuplets) {
		      notes.forEach(function (note, index) {
		        if (note instanceof _stavenote.StaveNote && note.isRest()) {
		          if (note.tuplet && !alignTuplets) return;
		
		          // If activated rests not on default can be rendered as specified.
		          var position = note.getGlyph().position.toUpperCase();
		          if (position !== 'R/4' && position !== 'B/4') return;
		
		          if (alignAllNotes || note.beam != null) {
		            // Align rests with previous/next notes.
		            var props = note.getKeyProps()[0];
		            if (index === 0) {
		              props.line = lookAhead(notes, props.line, index, false);
		              note.setKeyLine(0, props.line);
		            } else if (index > 0 && index < notes.length) {
		              // If previous note is a rest, use its line number.
		              var restLine = void 0;
		              if (notes[index - 1].isRest()) {
		                restLine = notes[index - 1].getKeyProps()[0].line;
		                props.line = restLine;
		              } else {
		                restLine = notes[index - 1].getLineForRest();
		                // Get the rest line for next valid non-rest note group.
		                props.line = lookAhead(notes, restLine, index, true);
		              }
		              note.setKeyLine(0, props.line);
		            }
		          }
		        }
		      });
		
		      return this;
		    }
		  }]);
		
		  function Formatter() {
		    _classCallCheck(this, Formatter);
		
		    // Minimum width required to render all the notes in the voices.
		    this.minTotalWidth = 0;
		
		    // This is set to `true` after `minTotalWidth` is calculated.
		    this.hasMinTotalWidth = false;
		
		    // Total number of ticks in the voice.
		    this.totalTicks = new _fraction.Fraction(0, 1);
		
		    // Arrays of tick and modifier contexts.
		    this.tickContexts = null;
		    this.modiferContexts = null;
		
		    // Gaps between contexts, for free movement of notes post
		    // formatting.
		    this.contextGaps = {
		      total: 0,
		      gaps: []
		    };
		
		    this.voices = [];
		  }
		
		  // Find all the rests in each of the `voices` and align them
		  // to neighboring notes. If `alignAllNotes` is `false`, then only
		  // align non-beamed notes.
		
		
		  _createClass(Formatter, [{
		    key: 'alignRests',
		    value: function alignRests(voices, alignAllNotes) {
		      if (!voices || !voices.length) {
		        throw new _vex.Vex.RERR('BadArgument', 'No voices to format rests');
		      }
		
		      voices.forEach(function (voice) {
		        return Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes);
		      });
		    }
		
		    // Calculate the minimum width required to align and format `voices`.
		
		  }, {
		    key: 'preCalculateMinTotalWidth',
		    value: function preCalculateMinTotalWidth(voices) {
		      // Cache results.
		      if (this.hasMinTotalWidth) return this.minTotalWidth;
		
		      // Create tick contexts if not already created.
		      if (!this.tickContexts) {
		        if (!voices) {
		          throw new _vex.Vex.RERR('BadArgument', "'voices' required to run preCalculateMinTotalWidth");
		        }
		
		        this.createTickContexts(voices);
		      }
		
		      var _tickContexts = this.tickContexts;
		      var contextList = _tickContexts.list;
		      var contextMap = _tickContexts.map;
		
		      // Go through each tick context and calculate total width.
		
		      this.minTotalWidth = contextList.map(function (tick) {
		        var context = contextMap[tick];
		        context.preFormat();
		        return context.getWidth();
		      }).reduce(function (a, b) {
		        return a + b;
		      }, 0);
		
		      this.hasMinTotalWidth = true;
		
		      return this.minTotalWidth;
		    }
		
		    // Get minimum width required to render all voices. Either `format` or
		    // `preCalculateMinTotalWidth` must be called before this method.
		
		  }, {
		    key: 'getMinTotalWidth',
		    value: function getMinTotalWidth() {
		      if (!this.hasMinTotalWidth) {
		        throw new _vex.Vex.RERR('NoMinTotalWidth', "Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'");
		      }
		
		      return this.minTotalWidth;
		    }
		
		    // Create `ModifierContext`s for each tick in `voices`.
		
		  }, {
		    key: 'createModifierContexts',
		    value: function createModifierContexts(voices) {
		      var contexts = createContexts(voices, _modifiercontext.ModifierContext, function (tickable, context) {
		        return tickable.addToModifierContext(context);
		      });
		
		      this.modiferContexts = contexts;
		      return contexts;
		    }
		
		    // Create `TickContext`s for each tick in `voices`. Also calculate the
		    // total number of ticks in voices.
		
		  }, {
		    key: 'createTickContexts',
		    value: function createTickContexts(voices) {
		      var contexts = createContexts(voices, _tickcontext.TickContext, function (tickable, context) {
		        return context.addTickable(tickable);
		      });
		
		      contexts.array.forEach(function (context) {
		        context.tContexts = contexts.array;
		      });
		
		      this.totalTicks = voices[0].getTicksUsed().clone();
		      this.tickContexts = contexts;
		      return contexts;
		    }
		
		    // This is the core formatter logic. Format voices and justify them
		    // to `justifyWidth` pixels. `renderingContext` is required to justify elements
		    // that can't retreive widths without a canvas. This method sets the `x` positions
		    // of all the tickables/notes in the formatter.
		
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      var justifyWidth = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
		      var renderingContext = arguments[1];
		
		      var _this = this;
		
		      var voices = arguments[2];
		      var stave = arguments[3];
		
		      // Initialize context maps.
		      var contexts = this.tickContexts;
		      var contextList = contexts.list;
		      var contextMap = contexts.map;
		      var resolutionMultiplier = contexts.resolutionMultiplier;
		
		      // If voices and a stave were provided, set the Stave for each voice
		      // and preFormat to apply Y values to the notes;
		
		      if (voices && stave) {
		        voices.forEach(function (voice) {
		          return voice.setStave(stave).preFormat();
		        });
		      }
		
		      // Now distribute the ticks to each tick context, and assign them their
		      // own X positions.
		      var x = 0;
		      var shift = 0;
		      var centerX = justifyWidth / 2;
		      this.minTotalWidth = 0;
		
		      // Pass 1: Give each note maximum width requested by context.
		      contextList.forEach(function (tick) {
		        var context = contextMap[tick];
		        if (renderingContext) context.setContext(renderingContext);
		
		        // Make sure that all tickables in this context have calculated their
		        // space requirements.
		        context.preFormat();
		
		        var width = context.getWidth();
		        _this.minTotalWidth += width;
		
		        var metrics = context.getMetrics();
		        x = x + shift + metrics.extraLeftPx;
		        context.setX(x);
		
		        // Calculate shift for the next tick.
		        shift = width - metrics.extraLeftPx;
		      });
		
		      this.minTotalWidth = x + shift;
		      this.hasMinTotalWidth = true;
		
		      // No justification needed. End formatting.
		      if (justifyWidth <= 0) return;
		
		      // Pass 2: Take leftover width, and distribute it to proportionately to
		      // all notes.
		      var remainingX = justifyWidth - this.minTotalWidth;
		      var leftoverPxPerTick = remainingX / (this.totalTicks.value() * resolutionMultiplier);
		      var spaceAccum = 0;
		
		      contextList.forEach(function (tick, index) {
		        var prevTick = contextList[index - 1] || 0;
		        var context = contextMap[tick];
		        var tickSpace = (tick - prevTick) * leftoverPxPerTick;
		
		        spaceAccum += tickSpace;
		        context.setX(context.getX() + spaceAccum);
		
		        // Move center aligned tickables to middle
		        context.getCenterAlignedTickables().forEach(function (tickable) {
		          // eslint-disable-line
		          tickable.center_x_shift = centerX - context.getX();
		        });
		      });
		
		      // Just one context. Done formatting.
		      if (contextList.length === 1) return;
		
		      this.justifyWidth = justifyWidth;
		      this.lossHistory = [];
		      this.evaluate();
		    }
		
		    // Calculate the total cost of this formatting decision.
		
		  }, {
		    key: 'evaluate',
		    value: function evaluate() {
		      var _this2 = this;
		
		      var justifyWidth = this.justifyWidth;
		      // Calculate available slack per tick context. This works out how much freedom
		      // to move a context has in either direction, without affecting other notes.
		      this.contextGaps = { total: 0, gaps: [] };
		      this.tickContexts.list.forEach(function (tick, index) {
		        if (index === 0) return;
		        var prevTick = _this2.tickContexts.list[index - 1];
		        var prevContext = _this2.tickContexts.map[prevTick];
		        var context = _this2.tickContexts.map[tick];
		        var prevMetrics = prevContext.getMetrics();
		
		        var insideRightEdge = prevContext.getX() + prevMetrics.width;
		        var insideLeftEdge = context.getX();
		        var gap = insideLeftEdge - insideRightEdge;
		        _this2.contextGaps.total += gap;
		        _this2.contextGaps.gaps.push({ x1: insideRightEdge, x2: insideLeftEdge });
		
		        // Tell the tick contexts how much they can reposition themselves.
		        context.getFormatterMetrics().freedom.left = gap;
		        prevContext.getFormatterMetrics().freedom.right = gap;
		      });
		
		      // Calculate mean distance in each voice for each duration type, then calculate
		      // how far each note is from the mean.
		      var durationStats = this.durationStats = {};
		
		      function updateStats(duration, space) {
		        var stats = durationStats[duration];
		        if (stats === undefined) {
		          durationStats[duration] = { mean: space, count: 1 };
		        } else {
		          stats.count += 1;
		          stats.mean = (stats.mean + space) / 2;
		        }
		      }
		
		      this.voices.forEach(function (voice) {
		        voice.getTickables().forEach(function (note, i, notes) {
		          var duration = note.getTicks().clone().simplify().toString();
		          var metrics = note.getMetrics();
		          var formatterMetrics = note.getFormatterMetrics();
		          var leftNoteEdge = note.getX() + metrics.noteWidth + metrics.modRightPx + metrics.extraRightPx;
		          var space = 0;
		
		          if (i < notes.length - 1) {
		            var rightNote = notes[i + 1];
		            var rightMetrics = rightNote.getMetrics();
		            var rightNoteEdge = rightNote.getX() - rightMetrics.modLeftPx - rightMetrics.extraLeftPx;
		
		            space = rightNoteEdge - leftNoteEdge;
		            formatterMetrics.space.used = rightNote.getX() - note.getX();
		            rightNote.getFormatterMetrics().freedom.left = space;
		          } else {
		            space = justifyWidth - leftNoteEdge;
		            formatterMetrics.space.used = justifyWidth - note.getX();
		          }
		
		          formatterMetrics.freedom.right = space;
		          updateStats(duration, formatterMetrics.space.used);
		        });
		      });
		
		      // Calculate how much each note deviates from the mean. Loss function is square
		      // root of the sum of squared deviations.
		      var totalDeviation = 0;
		      this.voices.forEach(function (voice) {
		        voice.getTickables().forEach(function (note) {
		          var duration = note.getTicks().clone().simplify().toString();
		          var metrics = note.getFormatterMetrics();
		          metrics.iterations += 1;
		          metrics.space.deviation = metrics.space.used - durationStats[duration].mean;
		          metrics.duration = duration;
		          metrics.space.mean = durationStats[duration].mean;
		
		          totalDeviation += Math.pow(durationStats[duration].mean, 2);
		        });
		      });
		
		      this.totalCost = Math.sqrt(totalDeviation);
		      this.lossHistory.push(this.totalCost);
		      return this;
		    }
		
		    // Run a single iteration of rejustification. At a high level, this method calculates
		    // the overall "loss" (or cost) of this layout, and repositions tickcontexts in an
		    // attempt to reduce the cost. You can call this method multiple times until it finds
		    // and oscillates around a global minimum.
		
		  }, {
		    key: 'tune',
		    value: function tune() {
		      var _this3 = this;
		
		      var sum = function sum(means) {
		        return means.reduce(function (a, b) {
		          return a + b;
		        });
		      };
		
		      // Move `current` tickcontext by `shift` pixels, and adjust the freedom
		      // on adjacent tickcontexts.
		      function move(current, prev, next, shift) {
		        current.setX(current.getX() + shift);
		        current.getFormatterMetrics().freedom.left += shift;
		        current.getFormatterMetrics().freedom.right -= shift;
		
		        if (prev) prev.getFormatterMetrics().freedom.right += shift;
		        if (next) next.getFormatterMetrics().freedom.left -= shift;
		      }
		
		      var shift = 0;
		      this.tickContexts.list.forEach(function (tick, index, list) {
		        var context = _this3.tickContexts.map[tick];
		        var prevContext = index > 0 ? _this3.tickContexts.map[list[index - 1]] : null;
		        var nextContext = index < list.length - 1 ? _this3.tickContexts.map[list[index + 1]] : null;
		
		        move(context, prevContext, nextContext, shift);
		
		        var cost = -sum(context.getTickables().map(function (t) {
		          return t.getFormatterMetrics().space.deviation;
		        }));
		
		        if (cost > 0) {
		          shift = -Math.min(context.getFormatterMetrics().freedom.right, Math.abs(cost));
		        } else if (cost < 0) {
		          if (nextContext) {
		            shift = Math.min(nextContext.getFormatterMetrics().freedom.right, Math.abs(cost));
		          } else {
		            shift = 0;
		          }
		        }
		
		        var minShift = Math.min(5, Math.abs(shift));
		        shift = shift > 0 ? minShift : -minShift;
		      });
		
		      return this.evaluate();
		    }
		
		    // This is the top-level call for all formatting logic completed
		    // after `x` *and* `y` values have been computed for the notes
		    // in the voices.
		
		  }, {
		    key: 'postFormat',
		    value: function postFormat() {
		      var postFormatContexts = function postFormatContexts(contexts) {
		        return contexts.list.forEach(function (tick) {
		          return contexts.map[tick].postFormat();
		        });
		      };
		
		      postFormatContexts(this.modiferContexts);
		      postFormatContexts(this.tickContexts);
		
		      return this;
		    }
		
		    // Take all `voices` and create `ModifierContext`s out of them. This tells
		    // the formatters that the voices belong on a single stave.
		
		  }, {
		    key: 'joinVoices',
		    value: function joinVoices(voices) {
		      this.createModifierContexts(voices);
		      this.hasMinTotalWidth = false;
		      return this;
		    }
		
		    // Align rests in voices, justify the contexts, and position the notes
		    // so voices are aligned and ready to render onto the stave. This method
		    // mutates the `x` positions of all tickables in `voices`.
		    //
		    // Voices are full justified to fit in `justifyWidth` pixels.
		    //
		    // Set `options.context` to the rendering context. Set `options.align_rests`
		    // to true to enable rest alignment.
		
		  }, {
		    key: 'format',
		    value: function format(voices, justifyWidth, options) {
		      var opts = {
		        align_rests: false,
		        context: null,
		        stave: null
		      };
		
		      _vex.Vex.Merge(opts, options);
		      this.voices = voices;
		      this.alignRests(voices, opts.align_rests);
		      this.createTickContexts(voices);
		      this.preFormat(justifyWidth, opts.context, voices, opts.stave);
		
		      // Only postFormat if a stave was supplied for y value formatting
		      if (opts.stave) this.postFormat();
		
		      return this;
		    }
		
		    // This method is just like `format` except that the `justifyWidth` is inferred
		    // from the `stave`.
		
		  }, {
		    key: 'formatToStave',
		    value: function formatToStave(voices, stave, options) {
		      var justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - 10;
		      L('Formatting voices to width: ', justifyWidth);
		      var opts = { context: stave.getContext() };
		      _vex.Vex.Merge(opts, options);
		      return this.format(voices, justifyWidth, opts);
		    }
		  }]);

		  return Formatter;
		}();

	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Beam = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _element = __webpack_require__(5);
		
		var _fraction = __webpack_require__(3);
		
		var _tuplet = __webpack_require__(16);
		
		var _stem = __webpack_require__(17);
		
		function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This file implements `Beams` that span over a set of `StemmableNotes`.
		
		function calculateStemDirection(notes) {
		  var lineSum = 0;
		  notes.forEach(function (note) {
		    if (note.keyProps) {
		      note.keyProps.forEach(function (keyProp) {
		        lineSum += keyProp.line - 3;
		      });
		    }
		  });
		
		  if (lineSum >= 0) {
		    return _stem.Stem.DOWN;
		  }
		  return _stem.Stem.UP;
		}
		
		var getStemSlope = function getStemSlope(firstNote, lastNote) {
		  var firstStemTipY = firstNote.getStemExtents().topY;
		  var firstStemX = firstNote.getStemX();
		  var lastStemTipY = lastNote.getStemExtents().topY;
		  var lastStemX = lastNote.getStemX();
		  return (lastStemTipY - firstStemTipY) / (lastStemX - firstStemX);
		};
		
		var Beam = exports.Beam = function (_Element) {
		  _inherits(Beam, _Element);
		
		  _createClass(Beam, null, [{
		    key: 'getDefaultBeamGroups',
		
		    // Gets the default beam groups for a provided time signature.
		    // Attempts to guess if the time signature is not found in table.
		    // Currently this is fairly naive.
		    value: function getDefaultBeamGroups(time_sig) {
		      if (!time_sig || time_sig === 'c') {
		        time_sig = '4/4';
		      }
		
		      var defaults = {
		        '1/2': ['1/2'],
		        '2/2': ['1/2'],
		        '3/2': ['1/2'],
		        '4/2': ['1/2'],
		
		        '1/4': ['1/4'],
		        '2/4': ['1/4'],
		        '3/4': ['1/4'],
		        '4/4': ['1/4'],
		
		        '1/8': ['1/8'],
		        '2/8': ['2/8'],
		        '3/8': ['3/8'],
		        '4/8': ['2/8'],
		
		        '1/16': ['1/16'],
		        '2/16': ['2/16'],
		        '3/16': ['3/16'],
		        '4/16': ['2/16']
		      };
		
		      var groups = defaults[time_sig];
		
		      if (groups === undefined) {
		        // If no beam groups found, naively determine
		        // the beam groupings from the time signature
		        var beatTotal = parseInt(time_sig.split('/')[0], 10);
		        var beatValue = parseInt(time_sig.split('/')[1], 10);
		
		        var tripleMeter = beatTotal % 3 === 0;
		
		        if (tripleMeter) {
		          return [new _fraction.Fraction(3, beatValue)];
		        } else if (beatValue > 4) {
		          return [new _fraction.Fraction(2, beatValue)];
		        } else if (beatValue <= 4) {
		          return [new _fraction.Fraction(1, beatValue)];
		        }
		      } else {
		        return groups.map(function (group) {
		          return new _fraction.Fraction().parse(group);
		        });
		      }
		
		      return [new _fraction.Fraction(1, 4)];
		    }
		
		    // A helper function to automatically build basic beams for a voice. For more
		    // complex auto-beaming use `Beam.generateBeams()`.
		    //
		    // Parameters:
		    // * `voice` - The voice to generate the beams for
		    // * `stem_direction` - A stem direction to apply to the entire voice
		    // * `groups` - An array of `Fraction` representing beat groupings for the beam
		
		  }, {
		    key: 'applyAndGetBeams',
		    value: function applyAndGetBeams(voice, stem_direction, groups) {
		      return Beam.generateBeams(voice.getTickables(), {
		        groups: groups,
		        stem_direction: stem_direction
		      });
		    }
		
		    // A helper function to autimatically build beams for a voice with
		    // configuration options.
		    //
		    // Example configuration object:
		    //
		    // ```
		    // config = {
		    //   groups: [new Vex.Flow.Fraction(2, 8)],
		    //   stem_direction: -1,
		    //   beam_rests: true,
		    //   beam_middle_only: true,
		    //   show_stemlets: false
		    // };
		    // ```
		    //
		    // Parameters:
		    // * `notes` - An array of notes to create the beams for
		    // * `config` - The configuration object
		    //    * `groups` - Array of `Fractions` that represent the beat structure to beam the notes
		    //    * `stem_direction` - Set to apply the same direction to all notes
		    //    * `beam_rests` - Set to `true` to include rests in the beams
		    //    * `beam_middle_only` - Set to `true` to only beam rests in the middle of the beat
		    //    * `show_stemlets` - Set to `true` to draw stemlets for rests
		    //    * `maintain_stem_directions` - Set to `true` to not apply new stem directions
		    //
		
		  }, {
		    key: 'generateBeams',
		    value: function generateBeams(notes, config) {
		      if (!config) config = {};
		
		      if (!config.groups || !config.groups.length) {
		        config.groups = [new _fraction.Fraction(2, 8)];
		      }
		
		      // Convert beam groups to tick amounts
		      var tickGroups = config.groups.map(function (group) {
		        if (!group.multiply) {
		          throw new _vex.Vex.RuntimeError('InvalidBeamGroups', 'The beam groups must be an array of Vex.Flow.Fractions');
		        }
		        return group.clone().multiply(_tables.Flow.RESOLUTION, 1);
		      });
		
		      var unprocessedNotes = notes;
		      var currentTickGroup = 0;
		      var noteGroups = [];
		      var currentGroup = [];
		
		      function getTotalTicks(vf_notes) {
		        return vf_notes.reduce(function (memo, note) {
		          return note.getTicks().clone().add(memo);
		        }, new _fraction.Fraction(0, 1));
		      }
		
		      function nextTickGroup() {
		        if (tickGroups.length - 1 > currentTickGroup) {
		          currentTickGroup += 1;
		        } else {
		          currentTickGroup = 0;
		        }
		      }
		
		      function createGroups() {
		        var nextGroup = [];
		
		        unprocessedNotes.forEach(function (unprocessedNote) {
		          nextGroup = [];
		          if (unprocessedNote.shouldIgnoreTicks()) {
		            noteGroups.push(currentGroup);
		            currentGroup = nextGroup;
		            return; // Ignore untickables (like bar notes)
		          }
		
		          currentGroup.push(unprocessedNote);
		          var ticksPerGroup = tickGroups[currentTickGroup].clone();
		          var totalTicks = getTotalTicks(currentGroup);
		
		          // Double the amount of ticks in a group, if it's an unbeamable tuplet
		          var unbeamable = _tables.Flow.durationToNumber(unprocessedNote.duration) < 8;
		          if (unbeamable && unprocessedNote.tuplet) {
		            ticksPerGroup.numerator *= 2;
		          }
		
		          // If the note that was just added overflows the group tick total
		          if (totalTicks.greaterThan(ticksPerGroup)) {
		            // If the overflow note can be beamed, start the next group
		            // with it. Unbeamable notes leave the group overflowed.
		            if (!unbeamable) {
		              nextGroup.push(currentGroup.pop());
		            }
		            noteGroups.push(currentGroup);
		            currentGroup = nextGroup;
		            nextTickGroup();
		          } else if (totalTicks.equals(ticksPerGroup)) {
		            noteGroups.push(currentGroup);
		            currentGroup = nextGroup;
		            nextTickGroup();
		          }
		        });
		
		        // Adds any remainder notes
		        if (currentGroup.length > 0) {
		          noteGroups.push(currentGroup);
		        }
		      }
		
		      function getBeamGroups() {
		        return noteGroups.filter(function (group) {
		          if (group.length > 1) {
		            var beamable = true;
		            group.forEach(function (note) {
		              if (note.getIntrinsicTicks() >= _tables.Flow.durationToTicks('4')) {
		                beamable = false;
		              }
		            });
		            return beamable;
		          }
		          return false;
		        });
		      }
		
		      // Splits up groups by Rest
		      function sanitizeGroups() {
		        var sanitizedGroups = [];
		        noteGroups.forEach(function (group) {
		          var tempGroup = [];
		          group.forEach(function (note, index, group) {
		            var isFirstOrLast = index === 0 || index === group.length - 1;
		            var prevNote = group[index - 1];
		
		            var breaksOnEachRest = !config.beam_rests && note.isRest();
		            var breaksOnFirstOrLastRest = config.beam_rests && config.beam_middle_only && note.isRest() && isFirstOrLast;
		
		            var breakOnStemChange = false;
		            if (config.maintain_stem_directions && prevNote && !note.isRest() && !prevNote.isRest()) {
		              var prevDirection = prevNote.getStemDirection();
		              var currentDirection = note.getStemDirection();
		              breakOnStemChange = currentDirection !== prevDirection;
		            }
		
		            var isUnbeamableDuration = parseInt(note.duration, 10) < 8;
		
		            // Determine if the group should be broken at this note
		            var shouldBreak = breaksOnEachRest || breaksOnFirstOrLastRest || breakOnStemChange || isUnbeamableDuration;
		
		            if (shouldBreak) {
		              // Add current group
		              if (tempGroup.length > 0) {
		                sanitizedGroups.push(tempGroup);
		              }
		
		              // Start a new group. Include the current note if the group
		              // was broken up by stem direction, as that note needs to start
		              // the next group of notes
		              tempGroup = breakOnStemChange ? [note] : [];
		            } else {
		              // Add note to group
		              tempGroup.push(note);
		            }
		          });
		
		          // If there is a remaining group, add it as well
		          if (tempGroup.length > 0) {
		            sanitizedGroups.push(tempGroup);
		          }
		        });
		
		        noteGroups = sanitizedGroups;
		      }
		
		      function formatStems() {
		        noteGroups.forEach(function (group) {
		          var stemDirection = void 0;
		          if (config.maintain_stem_directions) {
		            var note = findFirstNote(group);
		            stemDirection = note ? note.getStemDirection() : _stem.Stem.UP;
		          } else {
		            if (config.stem_direction) {
		              stemDirection = config.stem_direction;
		            } else {
		              stemDirection = calculateStemDirection(group);
		            }
		          }
		          applyStemDirection(group, stemDirection);
		        });
		      }
		
		      function findFirstNote(group) {
		        for (var i = 0; i < group.length; i++) {
		          var note = group[i];
		          if (!note.isRest()) {
		            return note;
		          }
		        }
		
		        return false;
		      }
		
		      function applyStemDirection(group, direction) {
		        group.forEach(function (note) {
		          note.setStemDirection(direction);
		        });
		      }
		
		      // Get all of the tuplets in all of the note groups
		      function getTuplets() {
		        var uniqueTuplets = [];
		
		        // Go through all of the note groups and inspect for tuplets
		        noteGroups.forEach(function (group) {
		          var tuplet = null;
		          group.forEach(function (note) {
		            if (note.tuplet && tuplet !== note.tuplet) {
		              tuplet = note.tuplet;
		              uniqueTuplets.push(tuplet);
		            }
		          });
		        });
		        return uniqueTuplets;
		      }
		
		      // Using closures to store the variables throughout the various functions
		      // IMO Keeps it this process lot cleaner - but not super consistent with
		      // the rest of the API's style - Silverwolf90 (Cyril)
		      createGroups();
		      sanitizeGroups();
		      formatStems();
		
		      // Get the notes to be beamed
		      var beamedNoteGroups = getBeamGroups();
		
		      // Get the tuplets in order to format them accurately
		      var allTuplets = getTuplets();
		
		      // Create a Vex.Flow.Beam from each group of notes to be beamed
		      var beams = [];
		      beamedNoteGroups.forEach(function (group) {
		        var beam = new Beam(group);
		
		        if (config.show_stemlets) {
		          beam.render_options.show_stemlets = true;
		        }
		        if (config.secondary_breaks) {
		          beam.render_options.secondary_break_ticks = _tables.Flow.durationToTicks(config.secondary_breaks);
		        }
		        if (config.flat_beams === true) {
		          beam.render_options.flat_beams = true;
		          beam.render_options.flat_beam_offset = config.flat_beam_offset;
		        }
		        beams.push(beam);
		      });
		
		      // Reformat tuplets
		      allTuplets.forEach(function (tuplet) {
		        // Set the tuplet location based on the stem direction
		        var direction = tuplet.notes[0].stem_direction === _stem.Stem.DOWN ? _tuplet.Tuplet.LOCATION_BOTTOM : _tuplet.Tuplet.LOCATION_TOP;
		        tuplet.setTupletLocation(direction);
		
		        // If any of the notes in the tuplet are not beamed, draw a bracket.
		        var bracketed = false;
		        for (var i = 0; i < tuplet.notes.length; i++) {
		          var note = tuplet.notes[i];
		          if (note.beam === null) {
		            bracketed = true;
		            break;
		          }
		        }
		        tuplet.setBracketed(bracketed);
		      });
		
		      return beams;
		    }
		  }]);
		
		  function Beam(notes, auto_stem) {
		    _classCallCheck(this, Beam);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Beam).call(this));
		
		    _this.setAttribute('type', 'Beam');
		
		    if (!notes || notes === []) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'No notes provided for beam.');
		    }
		
		    if (notes.length === 1) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'Too few notes for beam.');
		    }
		
		    // Validate beam line, direction and ticks.
		    _this.ticks = notes[0].getIntrinsicTicks();
		
		    if (_this.ticks >= _tables.Flow.durationToTicks('4')) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'Beams can only be applied to notes shorter than a quarter note.');
		    }
		
		    var i = void 0; // shared iterator
		    var note = void 0;
		
		    _this.stem_direction = _stem.Stem.UP;
		
		    for (i = 0; i < notes.length; ++i) {
		      note = notes[i];
		      if (note.hasStem()) {
		        _this.stem_direction = note.getStemDirection();
		        break;
		      }
		    }
		
		    var stem_direction = _this.stem_direction;
		    // Figure out optimal stem direction based on given notes
		    if (auto_stem && notes[0].getCategory() === 'stavenotes') {
		      stem_direction = calculateStemDirection(notes);
		    } else if (auto_stem && notes[0].getCategory() === 'tabnotes') {
		      // Auto Stem TabNotes
		      var stem_weight = notes.reduce(function (memo, note) {
		        return memo + note.stem_direction;
		      }, 0);
		
		      stem_direction = stem_weight > -1 ? _stem.Stem.UP : _stem.Stem.DOWN;
		    }
		
		    // Apply stem directions and attach beam to notes
		    for (i = 0; i < notes.length; ++i) {
		      note = notes[i];
		      if (auto_stem) {
		        note.setStemDirection(stem_direction);
		        _this.stem_direction = stem_direction;
		      }
		      note.setBeam(_this);
		    }
		
		    _this.postFormatted = false;
		    _this.notes = notes;
		    _this.beam_count = _this.getBeamCount();
		    _this.break_on_indices = [];
		    _this.render_options = {
		      beam_width: 5,
		      max_slope: 0.25,
		      min_slope: -0.25,
		      slope_iterations: 20,
		      slope_cost: 100,
		      show_stemlets: false,
		      stemlet_extension: 7,
		      partial_beam_length: 10,
		      flat_beams: false,
		      min_flat_beam_offset: 15
		    };
		    return _this;
		  }
		
		  // Get the notes in this beam
		
		
		  _createClass(Beam, [{
		    key: 'getNotes',
		    value: function getNotes() {
		      return this.notes;
		    }
		
		    // Get the max number of beams in the set of notes
		
		  }, {
		    key: 'getBeamCount',
		    value: function getBeamCount() {
		      var beamCounts = this.notes.map(function (note) {
		        return note.getGlyph().beam_count;
		      });
		
		      var maxBeamCount = beamCounts.reduce(function (max, beamCount) {
		        return beamCount > max ? beamCount : max;
		      });
		
		      return maxBeamCount;
		    }
		
		    // Set which note `indices` to break the secondary beam at
		
		  }, {
		    key: 'breakSecondaryAt',
		    value: function breakSecondaryAt(indices) {
		      this.break_on_indices = indices;
		      return this;
		    }
		
		    // Return the y coordinate for linear function
		
		  }, {
		    key: 'getSlopeY',
		    value: function getSlopeY(x, first_x_px, first_y_px, slope) {
		      return first_y_px + (x - first_x_px) * slope;
		    }
		
		    // Calculate the best possible slope for the provided notes
		
		  }, {
		    key: 'calculateSlope',
		    value: function calculateSlope() {
		      var notes = this.notes;
		      var stemDirection = this.stem_direction;
		      var _render_options = this.render_options;
		      var max_slope = _render_options.max_slope;
		      var min_slope = _render_options.min_slope;
		      var slope_iterations = _render_options.slope_iterations;
		      var slope_cost = _render_options.slope_cost;
		
		
		      var firstNote = notes[0];
		      var initialSlope = getStemSlope(firstNote, notes[notes.length - 1]);
		      var increment = (max_slope - min_slope) / slope_iterations;
		      var minCost = Number.MAX_VALUE;
		      var bestSlope = 0;
		      var yShift = 0;
		
		      // iterate through slope values to find best weighted fit
		      for (var slope = min_slope; slope <= max_slope; slope += increment) {
		        var totalStemExtension = 0;
		        var yShiftTemp = 0;
		
		        // iterate through notes, calculating y shift and stem extension
		        for (var i = 1; i < notes.length; ++i) {
		          var note = notes[i];
		          var adjustedStemTipY = this.getSlopeY(note.getStemX(), firstNote.getStemX(), firstNote.getStemExtents().topY, slope) + yShiftTemp;
		
		          var stemTipY = note.getStemExtents().topY;
		          // beam needs to be shifted up to accommodate note
		          if (stemTipY * stemDirection < adjustedStemTipY * stemDirection) {
		            var diff = Math.abs(stemTipY - adjustedStemTipY);
		            yShiftTemp += diff * -stemDirection;
		            totalStemExtension += diff * i;
		          } else {
		            // beam overshoots note, account for the difference
		            totalStemExtension += (stemTipY - adjustedStemTipY) * stemDirection;
		          }
		        }
		
		        // most engraving books suggest aiming for a slope about half the angle of the
		        // difference between the first and last notes' stem length;
		        var idealSlope = initialSlope / 2;
		        var distanceFromIdeal = Math.abs(idealSlope - slope);
		
		        // This tries to align most beams to something closer to the idealSlope, but
		        // doesn't go crazy. To disable, set this.render_options.slope_cost = 0
		        var cost = slope_cost * distanceFromIdeal + Math.abs(totalStemExtension);
		
		        // update state when a more ideal slope is found
		        if (cost < minCost) {
		          minCost = cost;
		          bestSlope = slope;
		          yShift = yShiftTemp;
		        }
		      }
		
		      this.slope = bestSlope;
		      this.y_shift = yShift;
		    }
		
		    // Calculate a slope and y-shift for flat beams
		
		  }, {
		    key: 'calculateFlatSlope',
		    value: function calculateFlatSlope() {
		      var notes = this.notes;
		      var stem_direction = this.stem_direction;
		      var _render_options2 = this.render_options;
		      var beam_width = _render_options2.beam_width;
		      var min_flat_beam_offset = _render_options2.min_flat_beam_offset;
		      var flat_beam_offset = _render_options2.flat_beam_offset;
		
		      // If a flat beam offset has not yet been supplied or calculated,
		      // generate one based on the notes in this particular note group
		
		      var total = 0;
		      var extremeY = 0; // Store the highest or lowest note here
		      var extremeBeamCount = 0; // The beam count of the extreme note
		      var currentExtreme = 0;
		      for (var i = 0; i < notes.length; i++) {
		        // Total up all of the offsets so we can average them out later
		        var note = notes[i];
		        var stemTipY = note.getStemExtents().topY;
		        total += stemTipY;
		
		        // Store the highest (stems-up) or lowest (stems-down) note so the
		        //  offset can be adjusted in case the average isn't enough
		        if (stem_direction === _stem.Stem.DOWN && currentExtreme < stemTipY) {
		          currentExtreme = stemTipY;
		          extremeY = Math.max.apply(Math, _toConsumableArray(note.getYs()));
		          extremeBeamCount = note.getBeamCount();
		        } else if (stem_direction === _stem.Stem.UP && (currentExtreme === 0 || currentExtreme > stemTipY)) {
		          currentExtreme = stemTipY;
		          extremeY = Math.min.apply(Math, _toConsumableArray(note.getYs()));
		          extremeBeamCount = note.getBeamCount();
		        }
		      }
		
		      // Average the offsets to try and come up with a reasonable one that
		      //  works for all of the notes in the beam group.
		      var offset = total / notes.length;
		
		      // In case the average isn't long enough, add or subtract some more
		      //  based on the highest or lowest note (again, based on the stem
		      //  direction). This also takes into account the added height due to
		      //  the width of the beams.
		      var beamWidth = beam_width * 1.5;
		      var extremeTest = min_flat_beam_offset + extremeBeamCount * beamWidth;
		      var newOffset = extremeY + extremeTest * -stem_direction;
		      if (stem_direction === _stem.Stem.DOWN && offset < newOffset) {
		        offset = extremeY + extremeTest;
		      } else if (stem_direction === _stem.Stem.UP && offset > newOffset) {
		        offset = extremeY - extremeTest;
		      }
		
		      if (!flat_beam_offset) {
		        // Set the offset for the group based on the calculations above.
		        this.render_options.flat_beam_offset = offset;
		      } else if (stem_direction === _stem.Stem.DOWN && offset > flat_beam_offset) {
		        this.render_options.flat_beam_offset = offset;
		      } else if (stem_direction === _stem.Stem.UP && offset < flat_beam_offset) {
		        this.render_options.flat_beam_offset = offset;
		      }
		
		      // for flat beams, the slope and y_shift are simply 0
		      this.slope = 0;
		      this.y_shift = 0;
		    }
		
		    // Create new stems for the notes in the beam, so that each stem
		    // extends into the beams.
		
		  }, {
		    key: 'applyStemExtensions',
		    value: function applyStemExtensions() {
		      var notes = this.notes;
		      var slope = this.slope;
		      var y_shift = this.y_shift;
		      var stem_direction = this.stem_direction;
		      var beam_count = this.beam_count;
		      var _render_options3 = this.render_options;
		      var show_stemlets = _render_options3.show_stemlets;
		      var flat_beam_offset = _render_options3.flat_beam_offset;
		      var flat_beams = _render_options3.flat_beams;
		      var stemlet_extension = _render_options3.stemlet_extension;
		      var beam_width = _render_options3.beam_width;
		
		
		      var firstNote = notes[0];
		      var firstStemTipY = firstNote.getStemExtents().topY;
		
		      // If rendering flat beams, and an offset exists, set the y-coordinat`e to
		      //  the offset so the stems all end at the beam offset.
		      if (flat_beams && flat_beam_offset) {
		        firstStemTipY = flat_beam_offset;
		      }
		      var firstStemX = firstNote.getStemX();
		
		      for (var i = 0; i < notes.length; ++i) {
		        var note = notes[i];
		        var stemX = note.getStemX();
		
		        var _note$getStemExtents = note.getStemExtents();
		
		        var stemTipY = _note$getStemExtents.topY;
		
		        var beamedStemTipY = this.getSlopeY(stemX, firstStemX, firstStemTipY, slope) + y_shift;
		        var preBeamExtension = note.getStem().getExtension();
		        var beamExtension = stem_direction === _stem.Stem.UP ? stemTipY - beamedStemTipY : beamedStemTipY - stemTipY;
		
		        note.stem.setExtension(preBeamExtension + beamExtension);
		        note.stem.renderHeightAdjustment = -_stem.Stem.WIDTH / 2;
		
		        if (note.isRest() && show_stemlets) {
		          var beamWidth = beam_width;
		          var totalBeamWidth = (beam_count - 1) * beamWidth * 1.5 + beamWidth;
		          note.stem.setVisibility(true).setStemlet(true, totalBeamWidth + stemlet_extension);
		        }
		      }
		    }
		
		    // Get the x coordinates for the beam lines of specific `duration`
		
		  }, {
		    key: 'getBeamLines',
		    value: function getBeamLines(duration) {
		      var beam_lines = [];
		      var beam_started = false;
		      var current_beam = null;
		      var partial_beam_length = this.render_options.partial_beam_length;
		      var previous_should_break = false;
		      var tick_tally = 0;
		      for (var i = 0; i < this.notes.length; ++i) {
		        var note = this.notes[i];
		
		        // See if we need to break secondary beams on this note.
		        var ticks = note.ticks.value();
		        tick_tally += ticks;
		        var should_break = false;
		
		        // 8th note beams are always drawn.
		        if (parseInt(duration, 10) >= 8) {
		          // First, check to see if any indices were set up through breakSecondaryAt()
		          should_break = this.break_on_indices.indexOf(i) !== -1;
		
		          // If the secondary breaks were auto-configured in the render options,
		          //  handle that as well.
		          if (this.render_options.secondary_break_ticks && tick_tally >= this.render_options.secondary_break_ticks) {
		            tick_tally = 0;
		            should_break = true;
		          }
		        }
		        var note_gets_beam = note.getIntrinsicTicks() < _tables.Flow.durationToTicks(duration);
		
		        var stem_x = note.getStemX() - _stem.Stem.WIDTH / 2;
		
		        // Check to see if the next note in the group will get a beam at this
		        //  level. This will help to inform the partial beam logic below.
		        var next_note = this.notes[i + 1];
		        var beam_next = next_note && next_note.getIntrinsicTicks() < _tables.Flow.durationToTicks(duration);
		        if (note_gets_beam) {
		          // This note gets a beam at the current level
		          if (beam_started) {
		            // We're currently in the middle of a beam. Just continue it on to
		            //  the stem X of the current note.
		            current_beam = beam_lines[beam_lines.length - 1];
		            current_beam.end = stem_x;
		
		            // If a secondary beam break is set up, end the beam right now.
		            if (should_break) {
		              beam_started = false;
		              if (next_note && !beam_next && current_beam.end === null) {
		                // This note gets a beam,.but the next one does not. This means
		                //  we need a partial pointing right.
		                current_beam.end = current_beam.start - partial_beam_length;
		              }
		            }
		          } else {
		            // No beam started yet. Start a new one.
		            current_beam = { start: stem_x, end: null };
		            beam_started = true;
		            if (!beam_next) {
		              // The next note doesn't get a beam. Draw a partial.
		              if ((previous_should_break || i === 0) && next_note) {
		                // This is the first note (but not the last one), or it is
		                //  following a secondary break. Draw a partial to the right.
		                current_beam.end = current_beam.start + partial_beam_length;
		              } else {
		                // By default, draw a partial to the left.
		                current_beam.end = current_beam.start - partial_beam_length;
		              }
		            } else if (should_break) {
		              // This note should have a secondary break after it. Even though
		              //  we just started a beam, it needs to end immediately.
		              current_beam.end = current_beam.start - partial_beam_length;
		              beam_started = false;
		            }
		            beam_lines.push(current_beam);
		          }
		        } else {
		          // The current note does not get a beam.
		          beam_started = false;
		        }
		
		        // Store the secondary break flag to inform the partial beam logic in
		        //  the next iteration of the loop.
		        previous_should_break = should_break;
		      }
		
		      // Add a partial beam pointing left if this is the last note in the group
		      var last_beam = beam_lines[beam_lines.length - 1];
		      if (last_beam && last_beam.end === null) {
		        last_beam.end = last_beam.start - partial_beam_length;
		      }
		      return beam_lines;
		    }
		
		    // Render the stems for each notes
		
		  }, {
		    key: 'drawStems',
		    value: function drawStems() {
		      var _this2 = this;
		
		      this.notes.forEach(function (note) {
		        if (note.getStem()) {
		          note.getStem().setContext(_this2.context).draw();
		        }
		      }, this);
		    }
		
		    // Render the beam lines
		
		  }, {
		    key: 'drawBeamLines',
		    value: function drawBeamLines() {
		      this.checkContext();
		
		      var valid_beam_durations = ['4', '8', '16', '32', '64'];
		
		      var firstNote = this.notes[0];
		
		      var firstStemTipY = firstNote.getStemExtents().topY;
		      var beamY = firstStemTipY;
		
		      // For flat beams, set the first and last Y to the offset, rather than
		      //  using the note's stem extents.
		      if (this.render_options.flat_beams && this.render_options.flat_beam_offset) {
		        beamY = this.render_options.flat_beam_offset;
		      }
		
		      var firstStemX = firstNote.getStemX();
		      var beamThickness = this.render_options.beam_width * this.stem_direction;
		
		      // Draw the beams.
		      for (var i = 0; i < valid_beam_durations.length; ++i) {
		        var duration = valid_beam_durations[i];
		        var beamLines = this.getBeamLines(duration);
		
		        for (var j = 0; j < beamLines.length; ++j) {
		          var beam_line = beamLines[j];
		          var startBeamX = beam_line.start;
		
		          var startBeamY = this.getSlopeY(startBeamX, firstStemX, beamY, this.slope);
		          var lastBeamX = beam_line.end;
		          var lastBeamY = this.getSlopeY(lastBeamX, firstStemX, beamY, this.slope);
		
		          this.context.beginPath();
		          this.context.moveTo(startBeamX, startBeamY);
		          this.context.lineTo(startBeamX, startBeamY + beamThickness);
		          this.context.lineTo(lastBeamX + 1, lastBeamY + beamThickness);
		          this.context.lineTo(lastBeamX + 1, lastBeamY);
		          this.context.closePath();
		          this.context.fill();
		        }
		
		        beamY += beamThickness * 1.5;
		      }
		    }
		
		    // Pre-format the beam
		
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      return this;
		    }
		
		    // Post-format the beam. This can only be called after
		    // the notes in the beam have both `x` and `y` values. ie: they've
		    // been formatted and have staves
		
		  }, {
		    key: 'postFormat',
		    value: function postFormat() {
		      if (this.postFormatted) return;
		
		      // Calculate a smart slope if we're not forcing the beams to be flat.
		      if (this.notes[0].getCategory() === 'tabnotes' || this.render_options.flat_beams) {
		        this.calculateFlatSlope();
		      } else {
		        this.calculateSlope();
		      }
		      this.applyStemExtensions();
		
		      this.postFormatted = true;
		    }
		
		    // Render the beam to the canvas context
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      this.setRendered();
		      if (this.unbeamable) return;
		
		      if (!this.postFormatted) {
		        this.postFormat();
		      }
		      this.drawStems();
		      this.drawBeamLines();
		    }
		  }]);

		  return Beam;
		}(_element.Element);

	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Tuplet = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		var _formatter = __webpack_require__(14);
		
		var _glyph = __webpack_require__(4);
		
		var _stem = __webpack_require__(17);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		
		/**
		 * ## Description
		 *
		 * Create a new tuplet from the specified notes. The notes must
		 * be part of the same voice. If they are of different rhythmic
		 * values, then options.num_notes must be set.
		 *
		 * @constructor
		 * @param {Array.<Vex.Flow.StaveNote>} A set of notes: staveNotes,
		 *   notes, etc... any class that inherits stemmableNote at some
		 *   point in its prototype chain.
		 * @param options: object {
		 *
		 *   num_notes: fit this many notes into...
		 *   notes_occupied: ...the space of this many notes
		 *
		 *       Together, these two properties make up the tuplet ratio
		 *     in the form of num_notes : notes_occupied.
		 *       num_notes defaults to the number of notes passed in, so
		 *     it is important that if you omit this property, all of
		 *     the notes passed should be of the same note value.
		 *       notes_occupied defaults to 2 -- so you should almost
		 *     certainly pass this parameter for anything other than
		 *     a basic triplet.
		 *
		 *   location:
		 *     default 1, which is above the notes: ┌─── 3 ───┐
		 *      -1 is below the notes └─── 3 ───┘
		 *
		 *   bracketed: boolean, draw a bracket around the tuplet number
		 *     when true: ┌─── 3 ───┐   when false: 3
		 *     defaults to true if notes are not beamed, false otherwise
		 *
		 *   ratioed: boolean
		 *     when true: ┌─── 7:8 ───┐, when false: ┌─── 7 ───┐
		 *     defaults to true if the difference between num_notes and
		 *     notes_occupied is greater than 1.
		 *
		 *   y_offset: int, default 0
		 *     manually offset a tuplet, for instance to avoid collisions
		 *     with articulations, etc...
		 * }
		 */
		
		var Tuplet = exports.Tuplet = function (_Element) {
		  _inherits(Tuplet, _Element);
		
		  _createClass(Tuplet, null, [{
		    key: 'LOCATION_TOP',
		    get: function get() {
		      return 1;
		    }
		  }, {
		    key: 'LOCATION_BOTTOM',
		    get: function get() {
		      return -1;
		    }
		  }, {
		    key: 'NESTING_OFFSET',
		    get: function get() {
		      return 15;
		    }
		  }]);
		
		  function Tuplet(notes, options) {
		    _classCallCheck(this, Tuplet);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Tuplet).call(this));
		
		    _this.setAttribute('type', 'Tuplet');
		    if (!notes || !notes.length) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'No notes provided for tuplet.');
		    }
		
		    if (notes.length === 1) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'Too few notes for tuplet.');
		    }
		
		    _this.options = _vex.Vex.Merge({}, options);
		    _this.notes = notes;
		    _this.num_notes = 'num_notes' in _this.options ? _this.options.num_notes : notes.length;
		
		    // We accept beats_occupied, but warn that it's deprecated:
		    // the preferred property name is now notes_occupied.
		    if (_this.options.beats_occupied) {
		      _this.beatsOccupiedDeprecationWarning();
		    }
		    _this.notes_occupied = _this.options.notes_occupied || _this.options.beats_occupied || 2;
		    if ('bracketed' in _this.options) {
		      _this.bracketed = _this.options.bracketed;
		    } else {
		      _this.bracketed = notes.some(function (note) {
		        return note.beam === null;
		      });
		    }
		
		    _this.ratioed = 'ratioed' in _this.options ? _this.options.ratioed : Math.abs(_this.notes_occupied - _this.num_notes) > 1;
		    _this.point = 28;
		    _this.y_pos = 16;
		    _this.x_pos = 100;
		    _this.width = 200;
		    _this.location = _this.options.location || Tuplet.LOCATION_TOP;
		
		    _formatter.Formatter.AlignRestsToNotes(notes, true, true);
		    _this.resolveGlyphs();
		    _this.attach();
		    return _this;
		  }
		
		  _createClass(Tuplet, [{
		    key: 'attach',
		    value: function attach() {
		      for (var i = 0; i < this.notes.length; i++) {
		        var note = this.notes[i];
		        note.setTuplet(this);
		      }
		    }
		  }, {
		    key: 'detach',
		    value: function detach() {
		      for (var i = 0; i < this.notes.length; i++) {
		        var note = this.notes[i];
		        note.resetTuplet(this);
		      }
		    }
		
		    /**
		     * Set whether or not the bracket is drawn.
		     */
		
		  }, {
		    key: 'setBracketed',
		    value: function setBracketed(bracketed) {
		      this.bracketed = !!bracketed;
		      return this;
		    }
		
		    /**
		     * Set whether or not the ratio is shown.
		     */
		
		  }, {
		    key: 'setRatioed',
		    value: function setRatioed(ratioed) {
		      this.ratioed = !!ratioed;
		      return this;
		    }
		
		    /**
		     * Set the tuplet to be displayed either on the top or bottom of the stave
		     */
		
		  }, {
		    key: 'setTupletLocation',
		    value: function setTupletLocation(location) {
		      if (!location) {
		        location = Tuplet.LOCATION_TOP;
		      } else if (location !== Tuplet.LOCATION_TOP && location !== Tuplet.LOCATION_BOTTOM) {
		        throw new _vex.Vex.RERR('BadArgument', 'Invalid tuplet location: ' + location);
		      }
		
		      this.location = location;
		      return this;
		    }
		  }, {
		    key: 'getNotes',
		    value: function getNotes() {
		      return this.notes;
		    }
		  }, {
		    key: 'getNoteCount',
		    value: function getNoteCount() {
		      return this.num_notes;
		    }
		  }, {
		    key: 'beatsOccupiedDeprecationWarning',
		    value: function beatsOccupiedDeprecationWarning() {
		      var msg = ['beats_occupied has been deprecated as an ', 'option for tuplets. Please use notes_occupied ', 'instead. Calls to getBeatsOccupied and ', 'setBeatsOccupied should now be routed to ', 'getNotesOccupied and setNotesOccupied instead'].join('');
		
		      if (console && console.warn) {
		        // eslint-disable-line no-console
		        console.warn(msg); // eslint-disable-line no-console
		      } else if (console) {
		        console.log(msg); // eslint-disable-line no-console
		      }
		    }
		  }, {
		    key: 'getBeatsOccupied',
		    value: function getBeatsOccupied() {
		      this.beatsOccupiedDeprecationWarning();
		      return this.getNotesOccupied();
		    }
		  }, {
		    key: 'setBeatsOccupied',
		    value: function setBeatsOccupied(beats) {
		      this.beatsOccupiedDeprecationWarning();
		      return this.setNotesOccupied(beats);
		    }
		  }, {
		    key: 'getNotesOccupied',
		    value: function getNotesOccupied() {
		      return this.notes_occupied;
		    }
		  }, {
		    key: 'setNotesOccupied',
		    value: function setNotesOccupied(notes) {
		      this.detach();
		      this.notes_occupied = notes;
		      this.resolveGlyphs();
		      this.attach();
		    }
		  }, {
		    key: 'resolveGlyphs',
		    value: function resolveGlyphs() {
		      this.num_glyphs = [];
		      var n = this.num_notes;
		      while (n >= 1) {
		        this.num_glyphs.push(new _glyph.Glyph('v' + n % 10, this.point));
		        n = parseInt(n / 10, 10);
		      }
		
		      this.denom_glyphs = [];
		      n = this.notes_occupied;
		      while (n >= 1) {
		        this.denom_glyphs.push(new _glyph.Glyph('v' + n % 10, this.point));
		        n = parseInt(n / 10, 10);
		      }
		    }
		
		    // determine how many tuplets are nested within this tuplet
		    // on the same side (above/below), to calculate a y
		    // offset for this tuplet:
		
		  }, {
		    key: 'getNestedTupletCount',
		    value: function getNestedTupletCount() {
		      var location = this.location;
		      var first_note = this.notes[0];
		      var maxTupletCount = countTuplets(first_note, location);
		      var minTupletCount = countTuplets(first_note, location);
		
		      // Count the tuplets that are on the same side (above/below)
		      // as this tuplet:
		      function countTuplets(note, location) {
		        return note.tupletStack.filter(function (tuplet) {
		          return tuplet.location === location;
		        }).length;
		      }
		
		      this.notes.forEach(function (note) {
		        var tupletCount = countTuplets(note, location);
		        maxTupletCount = tupletCount > maxTupletCount ? tupletCount : maxTupletCount;
		        minTupletCount = tupletCount < minTupletCount ? tupletCount : minTupletCount;
		      });
		
		      return maxTupletCount - minTupletCount;
		    }
		
		    // determine the y position of the tuplet:
		
		  }, {
		    key: 'getYPosition',
		    value: function getYPosition() {
		      // offset the tuplet for any nested tuplets between
		      // it and the notes:
		      var nested_tuplet_y_offset = this.getNestedTupletCount() * Tuplet.NESTING_OFFSET * -this.location;
		
		      // offset the tuplet for any manual y_offset:
		      var y_offset = this.options.y_offset || 0;
		
		      // now iterate through the notes and find our highest
		      // or lowest locations, to form a base y_pos
		      var first_note = this.notes[0];
		      var y_pos = void 0;
		      if (this.location === Tuplet.LOCATION_TOP) {
		        y_pos = first_note.getStave().getYForLine(0) - 15;
		        // y_pos = first_note.getStemExtents().topY - 10;
		
		        for (var i = 0; i < this.notes.length; ++i) {
		          var top_y = this.notes[i].getStemDirection() === _stem.Stem.UP ? this.notes[i].getStemExtents().topY - 10 : this.notes[i].getStemExtents().baseY - 20;
		
		          if (top_y < y_pos) {
		            y_pos = top_y;
		          }
		        }
		      } else {
		        y_pos = first_note.getStave().getYForLine(4) + 20;
		
		        for (var _i = 0; _i < this.notes.length; ++_i) {
		          var bottom_y = this.notes[_i].getStemDirection() === _stem.Stem.UP ? this.notes[_i].getStemExtents().baseY + 20 : this.notes[_i].getStemExtents().topY + 10;
		          if (bottom_y > y_pos) {
		            y_pos = bottom_y;
		          }
		        }
		      }
		
		      return y_pos + nested_tuplet_y_offset + y_offset;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var _this2 = this;
		
		      this.checkContext();
		      this.setRendered();
		
		      // determine x value of left bound of tuplet
		      var first_note = this.notes[0];
		      var last_note = this.notes[this.notes.length - 1];
		
		      if (!this.bracketed) {
		        this.x_pos = first_note.getStemX();
		        this.width = last_note.getStemX() - this.x_pos;
		      } else {
		        this.x_pos = first_note.getTieLeftX() - 5;
		        this.width = last_note.getTieRightX() - this.x_pos + 5;
		      }
		
		      // determine y value for tuplet
		      this.y_pos = this.getYPosition();
		
		      var addGlyphWidth = function addGlyphWidth(width, glyph) {
		        return width + glyph.getMetrics().width;
		      };
		
		      // calculate total width of tuplet notation
		      var width = this.num_glyphs.reduce(addGlyphWidth, 0);
		      if (this.ratioed) {
		        width = this.denom_glyphs.reduce(addGlyphWidth, width);
		        width += this.point * 0.32;
		      }
		
		      var notation_center_x = this.x_pos + this.width / 2;
		      var notation_start_x = notation_center_x - width / 2;
		
		      // draw bracket if the tuplet is not beamed
		      if (this.bracketed) {
		        var line_width = this.width / 2 - width / 2 - 5;
		
		        // only draw the bracket if it has positive length
		        if (line_width > 0) {
		          this.context.fillRect(this.x_pos, this.y_pos, line_width, 1);
		          this.context.fillRect(this.x_pos + this.width / 2 + width / 2 + 5, this.y_pos, line_width, 1);
		          this.context.fillRect(this.x_pos, this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM), 1, this.location * 10);
		          this.context.fillRect(this.x_pos + this.width, this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM), 1, this.location * 10);
		        }
		      }
		
		      // draw numerator glyphs
		      var x_offset = 0;
		      this.num_glyphs.forEach(function (glyph) {
		        glyph.render(_this2.context, notation_start_x + x_offset, _this2.y_pos + _this2.point / 3 - 2);
		        x_offset += glyph.getMetrics().width;
		      });
		
		      // display colon and denominator if the ratio is to be shown
		      if (this.ratioed) {
		        var colon_x = notation_start_x + x_offset + this.point * 0.16;
		        var colon_radius = this.point * 0.06;
		        this.context.beginPath();
		        this.context.arc(colon_x, this.y_pos - this.point * 0.08, colon_radius, 0, Math.PI * 2, true);
		        this.context.closePath();
		        this.context.fill();
		        this.context.beginPath();
		        this.context.arc(colon_x, this.y_pos + this.point * 0.12, colon_radius, 0, Math.PI * 2, true);
		        this.context.closePath();
		        this.context.fill();
		        x_offset += this.point * 0.32;
		        this.denom_glyphs.forEach(function (glyph) {
		          glyph.render(_this2.context, notation_start_x + x_offset, _this2.y_pos + _this2.point / 3 - 2);
		          x_offset += glyph.getMetrics().width;
		        });
		      }
		    }
		  }]);

		  return Tuplet;
		}(_element.Element);

	/***/ },
	/* 17 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Stem = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		var _tables = __webpack_require__(2);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// This file implements the `Stem` object. Generally this object is handled
		// by its parent `StemmableNote`.
		
		// To enable logging for this class. Set `Vex.Flow.Stem.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (Stem.DEBUG) _vex.Vex.L('Vex.Flow.Stem', args);
		}
		
		var Stem = exports.Stem = function (_Element) {
		  _inherits(Stem, _Element);
		
		  _createClass(Stem, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'stem';
		    }
		
		    // Stem directions
		
		  }, {
		    key: 'UP',
		    get: function get() {
		      return 1;
		    }
		  }, {
		    key: 'DOWN',
		    get: function get() {
		      return -1;
		    }
		
		    // Theme
		
		  }, {
		    key: 'WIDTH',
		    get: function get() {
		      return _tables.Flow.STEM_WIDTH;
		    }
		  }, {
		    key: 'HEIGHT',
		    get: function get() {
		      return _tables.Flow.STEM_HEIGHT;
		    }
		  }]);
		
		  function Stem() {
		    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
		
		    _classCallCheck(this, Stem);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Stem).call(this));
		
		    _this.setAttribute('type', 'Stem');
		
		    // Default notehead x bounds
		    _this.x_begin = options.x_begin || 0;
		    _this.x_end = options.x_end || 0;
		
		    // Y bounds for top/bottom most notehead
		    _this.y_top = options.y_top || 0;
		    _this.y_bottom = options.y_bottom || 0;
		
		    // Stem top extension
		    _this.stem_extension = options.stem_extension || 0;
		
		    // Direction of the stem
		    _this.stem_direction = options.stem_direction || 0;
		
		    // Flag to override all draw calls
		    _this.hide = options.hide || false;
		
		    _this.isStemlet = options.isStemlet || false;
		    _this.stemletHeight = options.stemletHeight || 0;
		
		    // Use to adjust the rendered height without affecting
		    // the results of `.getExtents()`
		    _this.renderHeightAdjustment = 0;
		    return _this;
		  }
		
		  // Set the x bounds for the default notehead
		
		
		  _createClass(Stem, [{
		    key: 'setNoteHeadXBounds',
		    value: function setNoteHeadXBounds(x_begin, x_end) {
		      this.x_begin = x_begin;
		      this.x_end = x_end;
		      return this;
		    }
		
		    // Set the direction of the stem in relation to the noteheads
		
		  }, {
		    key: 'setDirection',
		    value: function setDirection(direction) {
		      this.stem_direction = direction;
		    }
		
		    // Set the extension for the stem, generally for flags or beams
		
		  }, {
		    key: 'setExtension',
		    value: function setExtension(ext) {
		      this.stem_extension = ext;
		    }
		  }, {
		    key: 'getExtension',
		    value: function getExtension() {
		      return this.stem_extension;
		    }
		
		    // The the y bounds for the top and bottom noteheads
		
		  }, {
		    key: 'setYBounds',
		    value: function setYBounds(y_top, y_bottom) {
		      this.y_top = y_top;
		      this.y_bottom = y_bottom;
		    }
		
		    // The category of the object
		
		  }, {
		    key: 'getCategory',
		    value: function getCategory() {
		      return Stem.CATEGORY;
		    }
		
		    // Gets the entire height for the stem
		
		  }, {
		    key: 'getHeight',
		    value: function getHeight() {
		      return (this.y_bottom - this.y_top) * this.stem_direction + (Stem.HEIGHT + this.stem_extension) * this.stem_direction;
		    }
		  }, {
		    key: 'getBoundingBox',
		    value: function getBoundingBox() {
		      throw new _vex.Vex.RERR('NotImplemented', 'getBoundingBox() not implemented.');
		    }
		
		    // Get the y coordinates for the very base of the stem to the top of
		    // the extension
		
		  }, {
		    key: 'getExtents',
		    value: function getExtents() {
		      var isStemUp = this.stem_direction === Stem.UP;
		      var ys = [this.y_top, this.y_bottom];
		      var stemHeight = Stem.HEIGHT + this.stem_extension;
		      var innerMostNoteheadY = (isStemUp ? Math.min : Math.max).apply(undefined, ys);
		      var outerMostNoteheadY = (isStemUp ? Math.max : Math.min).apply(undefined, ys);
		      var stemTipY = innerMostNoteheadY + stemHeight * -this.stem_direction;
		
		      return { topY: stemTipY, baseY: outerMostNoteheadY };
		    }
		
		    // set the draw style of a stem:
		
		  }, {
		    key: 'setStyle',
		    value: function setStyle(style) {
		      this.style = style;return this;
		    }
		  }, {
		    key: 'getStyle',
		    value: function getStyle() {
		      return this.style;
		    }
		  }, {
		    key: 'setVisibility',
		    value: function setVisibility(isVisible) {
		      this.hide = !isVisible;
		      return this;
		    }
		  }, {
		    key: 'setStemlet',
		    value: function setStemlet(isStemlet, stemletHeight) {
		      this.isStemlet = isStemlet;
		      this.stemletHeight = stemletHeight;
		      return this;
		    }
		
		    // Apply current style to Canvas `context`
		
		  }, {
		    key: 'applyStyle',
		    value: function applyStyle(context) {
		      var style = this.getStyle();
		      if (style) {
		        if (style.shadowColor) context.setShadowColor(style.shadowColor);
		        if (style.shadowBlur) context.setShadowBlur(style.shadowBlur);
		        if (style.strokeStyle) context.setStrokeStyle(style.strokeStyle);
		      }
		      return this;
		    }
		
		    // Render the stem onto the canvas
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.setRendered();
		      if (this.hide) return;
		      var ctx = this.checkContext();
		
		      var stem_x = void 0;
		      var stem_y = void 0;
		      var stem_direction = this.stem_direction;
		
		      if (stem_direction === Stem.DOWN) {
		        // Down stems are rendered to the left of the head.
		        stem_x = this.x_begin;
		        stem_y = this.y_top;
		      } else {
		        // Up stems are rendered to the right of the head.
		        stem_x = this.x_end;
		        stem_y = this.y_bottom;
		      }
		
		      var stemHeight = this.getHeight();
		
		      L('Rendering stem - ', 'Top Y: ', this.y_top, 'Bottom Y: ', this.y_bottom);
		
		      // The offset from the stem's base which is required fo satisfy the stemlet height
		      var stemletYOffset = this.isStemlet ? stemHeight - this.stemletHeight * this.stem_direction : 0;
		
		      // Draw the stem
		      ctx.save();
		      this.applyStyle(ctx);
		      ctx.beginPath();
		      ctx.setLineWidth(Stem.WIDTH);
		      ctx.moveTo(stem_x, stem_y - stemletYOffset);
		      ctx.lineTo(stem_x, stem_y - stemHeight - this.renderHeightAdjustment * stem_direction);
		      ctx.stroke();
		      ctx.restore();
		    }
		  }]);

		  return Stem;
		}(_element.Element);

	/***/ },
	/* 18 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Voice = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		var _tables = __webpack_require__(2);
		
		var _fraction = __webpack_require__(3);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This file implements the main Voice class. It's mainly a container
		// object to group `Tickables` for formatting.
		
		var Voice = exports.Voice = function (_Element) {
		  _inherits(Voice, _Element);
		
		  _createClass(Voice, null, [{
		    key: 'Mode',
		
		    // Modes allow the addition of ticks in three different ways:
		    //
		    // STRICT: This is the default. Ticks must fill the voice.
		    // SOFT:   Ticks can be added without restrictions.
		    // FULL:   Ticks do not need to fill the voice, but can't exceed the maximum
		    //         tick length.
		    get: function get() {
		      return {
		        STRICT: 1,
		        SOFT: 2,
		        FULL: 3
		      };
		    }
		  }]);
		
		  function Voice(time) {
		    _classCallCheck(this, Voice);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Voice).call(this));
		
		    _this.setAttribute('type', 'Voice');
		
		    // Time signature shortcut: "4/4", "3/8", etc.
		    if (typeof time === 'string') {
		      var match = time.match(/(\d+)\/(\d+)/);
		      if (match) {
		        time = {
		          num_beats: match[1],
		          beat_value: match[2],
		          resolution: _tables.Flow.RESOLUTION
		        };
		      }
		    }
		
		    // Default time sig is 4/4
		    _this.time = _vex.Vex.Merge({
		      num_beats: 4,
		      beat_value: 4,
		      resolution: _tables.Flow.RESOLUTION
		    }, time);
		
		    // Recalculate total ticks.
		    _this.totalTicks = new _fraction.Fraction(_this.time.num_beats * (_this.time.resolution / _this.time.beat_value), 1);
		
		    _this.resolutionMultiplier = 1;
		
		    // Set defaults
		    _this.tickables = [];
		    _this.ticksUsed = new _fraction.Fraction(0, 1);
		    _this.smallestTickCount = _this.totalTicks.clone();
		    _this.largestTickWidth = 0;
		    _this.stave = null;
		    // Do we care about strictly timed notes
		    _this.mode = Voice.Mode.STRICT;
		
		    // This must belong to a VoiceGroup
		    _this.voiceGroup = null;
		    return _this;
		  }
		
		  // Get the total ticks in the voice
		
		
		  _createClass(Voice, [{
		    key: 'getTotalTicks',
		    value: function getTotalTicks() {
		      return this.totalTicks;
		    }
		
		    // Get the total ticks used in the voice by all the tickables
		
		  }, {
		    key: 'getTicksUsed',
		    value: function getTicksUsed() {
		      return this.ticksUsed;
		    }
		
		    // Get the largest width of all the tickables
		
		  }, {
		    key: 'getLargestTickWidth',
		    value: function getLargestTickWidth() {
		      return this.largestTickWidth;
		    }
		
		    // Get the tick count for the shortest tickable
		
		  }, {
		    key: 'getSmallestTickCount',
		    value: function getSmallestTickCount() {
		      return this.smallestTickCount;
		    }
		
		    // Get the tickables in the voice
		
		  }, {
		    key: 'getTickables',
		    value: function getTickables() {
		      return this.tickables;
		    }
		
		    // Get/set the voice mode, use a value from `Voice.Mode`
		
		  }, {
		    key: 'getMode',
		    value: function getMode() {
		      return this.mode;
		    }
		  }, {
		    key: 'setMode',
		    value: function setMode(mode) {
		      this.mode = mode;return this;
		    }
		
		    // Get the resolution multiplier for the voice
		
		  }, {
		    key: 'getResolutionMultiplier',
		    value: function getResolutionMultiplier() {
		      return this.resolutionMultiplier;
		    }
		
		    // Get the actual tick resolution for the voice
		
		  }, {
		    key: 'getActualResolution',
		    value: function getActualResolution() {
		      return this.resolutionMultiplier * this.time.resolution;
		    }
		
		    // Set the voice's stave
		
		  }, {
		    key: 'setStave',
		    value: function setStave(stave) {
		      this.stave = stave;
		      this.boundingBox = null; // Reset bounding box so we can reformat
		      return this;
		    }
		
		    // Get the bounding box for the voice
		
		  }, {
		    key: 'getBoundingBox',
		    value: function getBoundingBox() {
		      var stave = void 0;
		      var boundingBox = void 0;
		      var bb = void 0;
		      var i = void 0;
		
		      if (!this.boundingBox) {
		        if (!this.stave) throw new _vex.Vex.RERR('NoStave', "Can't get bounding box without stave.");
		        stave = this.stave;
		        boundingBox = null;
		
		        for (i = 0; i < this.tickables.length; ++i) {
		          this.tickables[i].setStave(stave);
		
		          bb = this.tickables[i].getBoundingBox();
		          if (!bb) continue;
		
		          boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;
		        }
		
		        this.boundingBox = boundingBox;
		      }
		      return this.boundingBox;
		    }
		
		    // Every tickable must be associated with a voiceGroup. This allows formatters
		    // and preformatters to associate them with the right modifierContexts.
		
		  }, {
		    key: 'getVoiceGroup',
		    value: function getVoiceGroup() {
		      if (!this.voiceGroup) {
		        throw new _vex.Vex.RERR('NoVoiceGroup', 'No voice group for voice.');
		      }
		
		      return this.voiceGroup;
		    }
		
		    // Set the voice group
		
		  }, {
		    key: 'setVoiceGroup',
		    value: function setVoiceGroup(g) {
		      this.voiceGroup = g;return this;
		    }
		
		    // Set the voice mode to strict or soft
		
		  }, {
		    key: 'setStrict',
		    value: function setStrict(strict) {
		      this.mode = strict ? Voice.Mode.STRICT : Voice.Mode.SOFT;
		      return this;
		    }
		
		    // Determine if the voice is complete according to the voice mode
		
		  }, {
		    key: 'isComplete',
		    value: function isComplete() {
		      if (this.mode === Voice.Mode.STRICT || this.mode === Voice.Mode.FULL) {
		        return this.ticksUsed.equals(this.totalTicks);
		      } else {
		        return true;
		      }
		    }
		
		    // Add a tickable to the voice
		
		  }, {
		    key: 'addTickable',
		    value: function addTickable(tickable) {
		      if (!tickable.shouldIgnoreTicks()) {
		        var ticks = tickable.getTicks();
		
		        // Update the total ticks for this line.
		        this.ticksUsed.add(ticks);
		
		        if ((this.mode === Voice.Mode.STRICT || this.mode === Voice.Mode.FULL) && this.ticksUsed.greaterThan(this.totalTicks)) {
		          this.totalTicks.subtract(ticks);
		          throw new _vex.Vex.RERR('BadArgument', 'Too many ticks.');
		        }
		
		        // Track the smallest tickable for formatting.
		        if (ticks.lessThan(this.smallestTickCount)) {
		          this.smallestTickCount = ticks.clone();
		        }
		
		        this.resolutionMultiplier = this.ticksUsed.denominator;
		
		        // Expand total ticks using denominator from ticks used.
		        this.totalTicks.add(0, this.ticksUsed.denominator);
		      }
		
		      // Add the tickable to the line.
		      this.tickables.push(tickable);
		      tickable.setVoice(this);
		      return this;
		    }
		
		    // Add an array of tickables to the voice.
		
		  }, {
		    key: 'addTickables',
		    value: function addTickables(tickables) {
		      for (var i = 0; i < tickables.length; ++i) {
		        this.addTickable(tickables[i]);
		      }
		
		      return this;
		    }
		
		    // Preformats the voice by applying the voice's stave to each note.
		
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      var _this2 = this;
		
		      if (this.preFormatted) return this;
		
		      this.tickables.forEach(function (tickable) {
		        if (!tickable.getStave()) {
		          tickable.setStave(_this2.stave);
		        }
		      });
		
		      this.preFormatted = true;
		      return this;
		    }
		
		    // Render the voice onto the canvas `context` and an optional `stave`.
		    // If `stave` is omitted, it is expected that the notes have staves
		    // already set.
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var context = arguments.length <= 0 || arguments[0] === undefined ? this.context : arguments[0];
		      var stave = arguments.length <= 1 || arguments[1] === undefined ? this.stave : arguments[1];
		
		      this.setRendered();
		      var boundingBox = null;
		      for (var i = 0; i < this.tickables.length; ++i) {
		        var tickable = this.tickables[i];
		
		        // Set the stave if provided
		        if (stave) tickable.setStave(stave);
		
		        if (!tickable.getStave()) {
		          throw new _vex.Vex.RuntimeError('MissingStave', 'The voice cannot draw tickables without staves.');
		        }
		
		        if (i === 0) boundingBox = tickable.getBoundingBox();
		
		        if (i > 0 && boundingBox) {
		          var tickable_bb = tickable.getBoundingBox();
		          if (tickable_bb) boundingBox.mergeWith(tickable_bb);
		        }
		
		        tickable.setContext(context);
		        tickable.draw();
		      }
		
		      this.boundingBox = boundingBox;
		    }
		  }]);

		  return Voice;
		}(_element.Element);

	/***/ },
	/* 19 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.StaveConnector = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		var _tables = __webpack_require__(2);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		
		function drawBoldDoubleLine(ctx, type, topX, topY, botY) {
		  if (type !== StaveConnector.type.BOLD_DOUBLE_LEFT && type !== StaveConnector.type.BOLD_DOUBLE_RIGHT) {
		    throw new _vex.Vex.RERR('InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.');
		  }
		
		  var x_shift = 3;
		  var variableWidth = 3.5; // Width for avoiding anti-aliasing width issues
		  var thickLineOffset = 2; // For aesthetics
		
		  if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {
		    x_shift = -5; // Flips the side of the thin line
		    variableWidth = 3;
		  }
		
		  // Thin line
		  ctx.fillRect(topX + x_shift, topY, 1, botY - topY);
		  // Thick line
		  ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);
		}
		
		var StaveConnector = exports.StaveConnector = function (_Element) {
		  _inherits(StaveConnector, _Element);
		
		  _createClass(StaveConnector, null, [{
		    key: 'type',
		
		    // SINGLE_LEFT and SINGLE are the same value for compatibility
		    // with older versions of vexflow which didn't have right sided
		    // stave connectors
		    get: function get() {
		      return {
		        SINGLE_RIGHT: 0,
		        SINGLE_LEFT: 1,
		        SINGLE: 1,
		        DOUBLE: 2,
		        BRACE: 3,
		        BRACKET: 4,
		        BOLD_DOUBLE_LEFT: 5,
		        BOLD_DOUBLE_RIGHT: 6,
		        THIN_DOUBLE: 7,
		        NONE: 8
		      };
		    }
		  }, {
		    key: 'typeString',
		    get: function get() {
		      return {
		        singleRight: StaveConnector.type.SINGLE_RIGHT,
		        singleLeft: StaveConnector.type.SINGLE_LEFT,
		        single: StaveConnector.type.SINGLE,
		        double: StaveConnector.type.DOUBLE,
		        brace: StaveConnector.type.BRACE,
		        bracket: StaveConnector.type.BRACKET,
		        boldDoubleLeft: StaveConnector.type.BOLD_DOUBLE_LEFT,
		        boldDoubleRight: StaveConnector.type.BOLD_DOUBLE_RIGHT,
		        thinDouble: StaveConnector.type.THIN_DOUBLE,
		        none: StaveConnector.type.NONE
		      };
		    }
		  }]);
		
		  function StaveConnector(top_stave, bottom_stave) {
		    _classCallCheck(this, StaveConnector);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StaveConnector).call(this));
		
		    _this.setAttribute('type', 'StaveConnector');
		
		    _this.thickness = _tables.Flow.STAVE_LINE_THICKNESS;
		    _this.width = 3;
		    _this.top_stave = top_stave;
		    _this.bottom_stave = bottom_stave;
		    _this.type = StaveConnector.type.DOUBLE;
		    _this.font = {
		      family: 'times',
		      size: 16,
		      weight: 'normal'
		    };
		    // 1. Offset Bold Double Left to align with offset Repeat Begin bars
		    // 2. Offset BRACE type not to overlap with another StaveConnector
		    _this.x_shift = 0;
		    _this.texts = [];
		    return _this;
		  }
		
		  _createClass(StaveConnector, [{
		    key: 'setType',
		    value: function setType(type) {
		      type = typeof type === 'string' ? StaveConnector.typeString[type] : type;
		
		      if (type >= StaveConnector.type.SINGLE_RIGHT && type <= StaveConnector.type.NONE) {
		        this.type = type;
		      }
		      return this;
		    }
		  }, {
		    key: 'setText',
		    value: function setText(text, options) {
		      this.texts.push({
		        content: text,
		        options: _vex.Vex.Merge({ shift_x: 0, shift_y: 0 }, options)
		      });
		      return this;
		    }
		  }, {
		    key: 'setFont',
		    value: function setFont(font) {
		      _vex.Vex.Merge(this.font, font);
		    }
		  }, {
		    key: 'setXShift',
		    value: function setXShift(x_shift) {
		      if (typeof x_shift !== 'number') {
		        throw _vex.Vex.RERR('InvalidType', 'x_shift must be a Number');
		      }
		
		      this.x_shift = x_shift;
		      return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var ctx = this.checkContext();
		      this.setRendered();
		
		      var topY = this.top_stave.getYForLine(0);
		      var botY = this.bottom_stave.getYForLine(this.bottom_stave.getNumLines() - 1) + this.thickness;
		      var width = this.width;
		      var topX = this.top_stave.getX();
		
		      var isRightSidedConnector = this.type === StaveConnector.type.SINGLE_RIGHT || this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT || this.type === StaveConnector.type.THIN_DOUBLE;
		
		      if (isRightSidedConnector) {
		        topX = this.top_stave.getX() + this.top_stave.width;
		      }
		
		      var attachment_height = botY - topY;
		      switch (this.type) {
		        case StaveConnector.type.SINGLE:
		          width = 1;
		          break;
		        case StaveConnector.type.SINGLE_LEFT:
		          width = 1;
		          break;
		        case StaveConnector.type.SINGLE_RIGHT:
		          width = 1;
		          break;
		        case StaveConnector.type.DOUBLE:
		          topX -= this.width + 2;
		          break;
		        case StaveConnector.type.BRACE:
		          {
		            width = 12;
		            // May need additional code to draw brace
		            var x1 = this.top_stave.getX() - 2 + this.x_shift;
		            var y1 = topY;
		            var x3 = x1;
		            var y3 = botY;
		            var x2 = x1 - width;
		            var y2 = y1 + attachment_height / 2.0;
		            var cpx1 = x2 - 0.90 * width;
		            var cpy1 = y1 + 0.2 * attachment_height;
		            var cpx2 = x1 + 1.10 * width;
		            var cpy2 = y2 - 0.135 * attachment_height;
		            var cpx3 = cpx2;
		            var cpy3 = y2 + 0.135 * attachment_height;
		            var cpx4 = cpx1;
		            var cpy4 = y3 - 0.2 * attachment_height;
		            var cpx5 = x2 - width;
		            var cpy5 = cpy4;
		            var cpx6 = x1 + 0.40 * width;
		            var cpy6 = y2 + 0.135 * attachment_height;
		            var cpx7 = cpx6;
		            var cpy7 = y2 - 0.135 * attachment_height;
		            var cpx8 = cpx5;
		            var cpy8 = cpy1;
		            ctx.beginPath();
		            ctx.moveTo(x1, y1);
		            ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);
		            ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);
		            ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);
		            ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);
		            ctx.fill();
		            ctx.stroke();
		            break;
		          }case StaveConnector.type.BRACKET:
		          topY -= 4;
		          botY += 4;
		          attachment_height = botY - topY;
		          _glyph.Glyph.renderGlyph(ctx, topX - 5, topY - 3, 40, 'v1b', true);
		          _glyph.Glyph.renderGlyph(ctx, topX - 5, botY + 3, 40, 'v10', true);
		          topX -= this.width + 2;
		          break;
		        case StaveConnector.type.BOLD_DOUBLE_LEFT:
		          drawBoldDoubleLine(ctx, this.type, topX + this.x_shift, topY, botY);
		          break;
		        case StaveConnector.type.BOLD_DOUBLE_RIGHT:
		          drawBoldDoubleLine(ctx, this.type, topX, topY, botY);
		          break;
		        case StaveConnector.type.THIN_DOUBLE:
		          width = 1;
		          break;
		        case StaveConnector.type.NONE:
		          break;
		        default:
		          throw new _vex.Vex.RERR('InvalidType', 'The provided StaveConnector.type (' + this.type + ') is invalid');
		      }
		
		      if (this.type !== StaveConnector.type.BRACE && this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT && this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT && this.type !== StaveConnector.type.NONE) {
		        ctx.fillRect(topX, topY, width, attachment_height);
		      }
		
		      // If the connector is a thin double barline, draw the paralell line
		      if (this.type === StaveConnector.type.THIN_DOUBLE) {
		        ctx.fillRect(topX - 3, topY, width, attachment_height);
		      }
		
		      ctx.save();
		      ctx.lineWidth = 2;
		      ctx.setFont(this.font.family, this.font.size, this.font.weight);
		      // Add stave connector text
		      for (var i = 0; i < this.texts.length; i++) {
		        var text = this.texts[i];
		        var text_width = ctx.measureText('' + text.content).width;
		        var x = this.top_stave.getX() - text_width - 24 + text.options.shift_x;
		        var y = (this.top_stave.getYForLine(0) + this.bottom_stave.getBottomLineY()) / 2 + text.options.shift_y;
		
		        ctx.fillText('' + text.content, x, y + 4);
		      }
		      ctx.restore();
		    }
		  }]);

		  return StaveConnector;
		}(_element.Element);

	/***/ },
	/* 20 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.StaveNote = undefined;
		
		var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _boundingbox = __webpack_require__(8);
		
		var _stem = __webpack_require__(17);
		
		var _notehead = __webpack_require__(21);
		
		var _stemmablenote = __webpack_require__(24);
		
		var _modifier = __webpack_require__(25);
		
		var _dot = __webpack_require__(26);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// This file implements notes for standard notation. This consists of one or
		// more `NoteHeads`, an optional stem, and an optional flag.
		//
		// *Throughout these comments, a "note" refers to the entire `StaveNote`,
		// and a "key" refers to a specific pitch/notehead within a note.*
		//
		// See `tests/stavenote_tests.js` for usage examples.
		
		// To enable logging for this class. Set `Vex.Flow.StaveNote.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (StaveNote.DEBUG) _vex.Vex.L('Vex.Flow.StaveNote', args);
		}
		
		var getStemAdjustment = function getStemAdjustment(note) {
		  return _stem.Stem.WIDTH / (2 * -note.getStemDirection());
		};
		
		var isInnerNoteIndex = function isInnerNoteIndex(note, index) {
		  return index === (note.getStemDirection() === _stem.Stem.UP ? note.keyProps.length - 1 : 0);
		};
		
		// Helper methods for rest positioning in ModifierContext.
		function shiftRestVertical(rest, note, dir) {
		  var delta = (note.isrest ? 0.0 : 1.0) * dir;
		
		  rest.line += delta;
		  rest.maxLine += delta;
		  rest.minLine += delta;
		  rest.note.setKeyLine(0, rest.note.getKeyLine(0) + delta);
		}
		
		// Called from formatNotes :: center a rest between two notes
		function centerRest(rest, noteU, noteL) {
		  var delta = rest.line - _vex.Vex.MidLine(noteU.minLine, noteL.maxLine);
		  rest.note.setKeyLine(0, rest.note.getKeyLine(0) - delta);
		  rest.line -= delta;
		  rest.maxLine -= delta;
		  rest.minLine -= delta;
		}
		
		var StaveNote = exports.StaveNote = function (_StemmableNote) {
		  _inherits(StaveNote, _StemmableNote);
		
		  _createClass(StaveNote, null, [{
		    key: 'format',
		
		
		    // ## Static Methods
		    //
		    // Format notes inside a ModifierContext.
		    value: function format(notes, state) {
		      if (!notes || notes.length < 2) return false;
		
		      if (notes[0].getStave() != null) return StaveNote.formatByY(notes, state);
		
		      var notesList = [];
		
		      for (var i = 0; i < notes.length; i++) {
		        var props = notes[i].getKeyProps();
		        var line = props[0].line;
		        var minL = props[props.length - 1].line;
		        var stemDirection = notes[i].getStemDirection();
		        var stemMax = notes[i].getStemLength() / 10;
		        var stemMin = notes[i].getStemMinumumLength() / 10;
		
		        var maxL = void 0;
		        if (notes[i].isRest()) {
		          maxL = line + notes[i].glyph.line_above;
		          minL = line - notes[i].glyph.line_below;
		        } else {
		          maxL = stemDirection === 1 ? props[props.length - 1].line + stemMax : props[props.length - 1].line;
		
		          minL = stemDirection === 1 ? props[0].line : props[0].line - stemMax;
		        }
		
		        notesList.push({
		          line: props[0].line, // note/rest base line
		          maxLine: maxL, // note/rest upper bounds line
		          minLine: minL, // note/rest lower bounds line
		          isrest: notes[i].isRest(),
		          stemDirection: stemDirection,
		          stemMax: stemMax, // Maximum (default) note stem length;
		          stemMin: stemMin, // minimum note stem length
		          voice_shift: notes[i].getVoiceShiftWidth(),
		          is_displaced: notes[i].isDisplaced(), // note manually displaced
		          note: notes[i]
		        });
		      }
		
		      var voices = notesList.length;
		
		      var noteU = notesList[0];
		      var noteM = voices > 2 ? notesList[1] : null;
		      var noteL = voices > 2 ? notesList[2] : notesList[1];
		
		      // for two voice backward compatibility, ensure upper voice is stems up
		      // for three voices, the voices must be in order (upper, middle, lower)
		      if (voices === 2 && noteU.stemDirection === -1 && noteL.stemDirection === 1) {
		        noteU = notesList[1];
		        noteL = notesList[0];
		      }
		
		      var voiceXShift = Math.max(noteU.voice_shift, noteL.voice_shift);
		      var xShift = 0;
		      var stemDelta = void 0;
		
		      // Test for two voice note intersection
		      if (voices === 2) {
		        var lineSpacing = noteU.stemDirection === noteL.stemDirection ? 0.0 : 0.5;
		        // if top voice is a middle voice, check stem intersection with lower voice
		        if (noteU.stemDirection === noteL.stemDirection && noteU.minLine <= noteL.maxLine) {
		          if (!noteU.isrest) {
		            stemDelta = Math.abs(noteU.line - (noteL.maxLine + 0.5));
		            stemDelta = Math.max(stemDelta, noteU.stemMin);
		            noteU.minLine = noteU.line - stemDelta;
		            noteU.note.setStemLength(stemDelta * 10);
		          }
		        }
		        if (noteU.minLine <= noteL.maxLine + lineSpacing) {
		          if (noteU.isrest) {
		            // shift rest up
		            shiftRestVertical(noteU, noteL, 1);
		          } else if (noteL.isrest) {
		            // shift rest down
		            shiftRestVertical(noteL, noteU, -1);
		          } else {
		            xShift = voiceXShift;
		            if (noteU.stemDirection === noteL.stemDirection) {
		              // upper voice is middle voice, so shift it right
		              noteU.note.setXShift(xShift + 3);
		            } else {
		              // shift lower voice right
		              noteL.note.setXShift(xShift);
		            }
		          }
		        }
		
		        // format complete
		        return true;
		      }
		
		      // Check middle voice stem intersection with lower voice
		      if (noteM !== null && noteM.minLine < noteL.maxLine + 0.5) {
		        if (!noteM.isrest) {
		          stemDelta = Math.abs(noteM.line - (noteL.maxLine + 0.5));
		          stemDelta = Math.max(stemDelta, noteM.stemMin);
		          noteM.minLine = noteM.line - stemDelta;
		          noteM.note.setStemLength(stemDelta * 10);
		        }
		      }
		
		      // For three voices, test if rests can be repositioned
		      //
		      // Special case 1 :: middle voice rest between two notes
		      //
		      if (noteM.isrest && !noteU.isrest && !noteL.isrest) {
		        if (noteU.minLine <= noteM.maxLine || noteM.minLine <= noteL.maxLine) {
		          var restHeight = noteM.maxLine - noteM.minLine;
		          var space = noteU.minLine - noteL.maxLine;
		          if (restHeight < space) {
		            // center middle voice rest between the upper and lower voices
		            centerRest(noteM, noteU, noteL);
		          } else {
		            xShift = voiceXShift + 3; // shift middle rest right
		            noteM.note.setXShift(xShift);
		          }
		          // format complete
		          return true;
		        }
		      }
		
		      // Special case 2 :: all voices are rests
		      if (noteU.isrest && noteM.isrest && noteL.isrest) {
		        // Shift upper voice rest up
		        shiftRestVertical(noteU, noteM, 1);
		        // Shift lower voice rest down
		        shiftRestVertical(noteL, noteM, -1);
		        // format complete
		        return true;
		      }
		
		      // Test if any other rests can be repositioned
		      if (noteM.isrest && noteU.isrest && noteM.minLine <= noteL.maxLine) {
		        // Shift middle voice rest up
		        shiftRestVertical(noteM, noteL, 1);
		      }
		      if (noteM.isrest && noteL.isrest && noteU.minLine <= noteM.maxLine) {
		        // Shift middle voice rest down
		        shiftRestVertical(noteM, noteU, -1);
		      }
		      if (noteU.isrest && noteU.minLine <= noteM.maxLine) {
		        // shift upper voice rest up;
		        shiftRestVertical(noteU, noteM, 1);
		      }
		      if (noteL.isrest && noteM.minLine <= noteL.maxLine) {
		        // shift lower voice rest down
		        shiftRestVertical(noteL, noteM, -1);
		      }
		
		      // If middle voice intersects upper or lower voice
		      if (!noteU.isrest && !noteM.isrest && noteU.minLine <= noteM.maxLine + 0.5 || !noteM.isrest && !noteL.isrest && noteM.minLine <= noteL.maxLine) {
		        xShift = voiceXShift + 3; // shift middle note right
		        noteM.note.setXShift(xShift);
		      }
		
		      return true;
		    }
		  }, {
		    key: 'formatByY',
		    value: function formatByY(notes, state) {
		      // NOTE: this function does not support more than two voices per stave
		      // use with care.
		      var hasStave = true;
		
		      for (var i = 0; i < notes.length; i++) {
		        hasStave = hasStave && notes[i].getStave() != null;
		      }
		
		      if (!hasStave) {
		        throw new _vex.Vex.RERR('Stave Missing', 'All notes must have a stave - Vex.Flow.ModifierContext.formatMultiVoice!');
		      }
		
		      var xShift = 0;
		
		      for (var _i = 0; _i < notes.length - 1; _i++) {
		        var topNote = notes[_i];
		        var bottomNote = notes[_i + 1];
		
		        if (topNote.getStemDirection() === _stem.Stem.DOWN) {
		          topNote = notes[_i + 1];
		          bottomNote = notes[_i];
		        }
		
		        var topKeys = topNote.getKeyProps();
		        var bottomKeys = bottomNote.getKeyProps();
		
		        var HALF_NOTEHEAD_HEIGHT = 0.5;
		
		        // `keyProps` and `stave.getYForLine` have different notions of a `line`
		        // so we have to convert the keyProps value by subtracting 5.
		        // See https://github.com/0xfe/vexflow/wiki/Development-Gotchas
		        //
		        // We also extend the y for each note by a half notehead because the
		        // notehead's origin is centered
		        var topNotBottomY = topNote.getStave().getYForLine(5 - topKeys[0].line + HALF_NOTEHEAD_HEIGHT);
		
		        var bottomNoteTopY = bottomNote.getStave().getYForLine(5 - bottomKeys[bottomKeys.length - 1].line - HALF_NOTEHEAD_HEIGHT);
		
		        var areNotesColliding = bottomNoteTopY - topNotBottomY < 0;
		
		        if (areNotesColliding) {
		          xShift = topNote.getVoiceShiftWidth();
		          bottomNote.setXShift(xShift);
		        }
		      }
		
		      state.right_shift += xShift;
		    }
		  }, {
		    key: 'postFormat',
		    value: function postFormat(notes) {
		      if (!notes) return false;
		
		      notes.forEach(function (note) {
		        return note.postFormat();
		      });
		
		      return true;
		    }
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'stavenotes';
		    }
		  }, {
		    key: 'STEM_UP',
		    get: function get() {
		      return _stem.Stem.UP;
		    }
		  }, {
		    key: 'STEM_DOWN',
		    get: function get() {
		      return _stem.Stem.DOWN;
		    }
		  }, {
		    key: 'DEFAULT_LEDGER_LINE_OFFSET',
		    get: function get() {
		      return 3;
		    }
		  }]);
		
		  function StaveNote(noteStruct) {
		    _classCallCheck(this, StaveNote);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StaveNote).call(this, noteStruct));
		
		    _this.setAttribute('type', 'StaveNote');
		
		    _this.keys = noteStruct.keys;
		    _this.clef = noteStruct.clef;
		    _this.octave_shift = noteStruct.octave_shift;
		    _this.beam = null;
		
		    // Pull note rendering properties
		    _this.glyph = _tables.Flow.durationToGlyph(_this.duration, _this.noteType);
		
		    if (!_this.glyph) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'Invalid note initialization data (No glyph found): ' + JSON.stringify(noteStruct));
		    }
		
		    // if true, displace note to right
		    _this.displaced = false;
		    _this.dot_shiftY = 0;
		    // per-pitch properties
		    _this.keyProps = [];
		    // for displaced ledger lines
		    _this.use_default_head_x = false;
		
		    // Drawing
		    _this.note_heads = [];
		    _this.modifiers = [];
		
		    _vex.Vex.Merge(_this.render_options, {
		      // font size for note heads and rests
		      glyph_font_scale: noteStruct.glyph_font_scale || _tables.Flow.DEFAULT_NOTATION_FONT_SCALE,
		      // number of stroke px to the left and right of head
		      stroke_px: noteStruct.stroke_px || StaveNote.DEFAULT_LEDGER_LINE_OFFSET
		    });
		
		    _this.calculateKeyProps();
		    _this.buildStem();
		
		    // Set the stem direction
		    if (noteStruct.auto_stem) {
		      _this.autoStem();
		    } else {
		      _this.setStemDirection(noteStruct.stem_direction);
		    }
		    _this.reset();
		    _this.buildFlag();
		    _this.calcExtraPx();
		    return _this;
		  }
		
		  _createClass(StaveNote, [{
		    key: 'reset',
		    value: function reset() {
		      var _this2 = this;
		
		      _get(Object.getPrototypeOf(StaveNote.prototype), 'reset', this).call(this);
		      this.buildNoteHeads();
		      if (this.stave) {
		        this.note_heads.forEach(function (head) {
		          return head.setStave(_this2.stave);
		        });
		      }
		    }
		  }, {
		    key: 'getCategory',
		    value: function getCategory() {
		      return StaveNote.CATEGORY;
		    }
		
		    // Builds a `Stem` for the note
		
		  }, {
		    key: 'buildStem',
		    value: function buildStem() {
		      var glyph = this.getGlyph();
		      var yExtend = glyph.code_head === 'v95' || glyph.code_head === 'v3e' ? -4 : 0;
		
		      this.setStem(new _stem.Stem({
		        yExtend: yExtend,
		        hide: !!this.isRest()
		      }));
		    }
		
		    // Builds a `NoteHead` for each key in the note
		
		  }, {
		    key: 'buildNoteHeads',
		    value: function buildNoteHeads() {
		      this.note_heads = [];
		      var stemDirection = this.getStemDirection();
		      var keys = this.getKeys();
		
		      var lastLine = null;
		      var lineDiff = null;
		      var displaced = false;
		
		      // Draw notes from bottom to top.
		
		      // For down-stem notes, we draw from top to bottom.
		      var start = void 0;
		      var end = void 0;
		      var step = void 0;
		      if (stemDirection === _stem.Stem.UP) {
		        start = 0;
		        end = keys.length;
		        step = 1;
		      } else if (stemDirection === _stem.Stem.DOWN) {
		        start = keys.length - 1;
		        end = -1;
		        step = -1;
		      }
		
		      for (var i = start; i !== end; i += step) {
		        var noteProps = this.keyProps[i];
		        var line = noteProps.line;
		
		        // Keep track of last line with a note head, so that consecutive heads
		        // are correctly displaced.
		        if (lastLine === null) {
		          lastLine = line;
		        } else {
		          lineDiff = Math.abs(lastLine - line);
		          if (lineDiff === 0 || lineDiff === 0.5) {
		            displaced = !displaced;
		          } else {
		            displaced = false;
		            this.use_default_head_x = true;
		          }
		        }
		        lastLine = line;
		
		        var notehead = new _notehead.NoteHead({
		          duration: this.duration,
		          note_type: this.noteType,
		          displaced: displaced,
		          stem_direction: stemDirection,
		          custom_glyph_code: noteProps.code,
		          glyph_font_scale: this.render_options.glyph_font_scale,
		          x_shift: noteProps.shift_right,
		          line: noteProps.line
		        });
		
		        this.note_heads[i] = notehead;
		      }
		    }
		
		    // Automatically sets the stem direction based on the keys in the note
		
		  }, {
		    key: 'autoStem',
		    value: function autoStem() {
		      // Figure out optimal stem direction based on given notes
		      this.minLine = this.keyProps[0].line;
		      this.maxLine = this.keyProps[this.keyProps.length - 1].line;
		
		      var MIDDLE_LINE = 3;
		      var decider = (this.minLine + this.maxLine) / 2;
		      var stemDirection = decider < MIDDLE_LINE ? _stem.Stem.UP : _stem.Stem.DOWN;
		
		      this.setStemDirection(stemDirection);
		    }
		
		    // Calculates and stores the properties for each key in the note
		
		  }, {
		    key: 'calculateKeyProps',
		    value: function calculateKeyProps() {
		      var lastLine = null;
		      for (var i = 0; i < this.keys.length; ++i) {
		        var key = this.keys[i];
		
		        // All rests use the same position on the line.
		        // if (this.glyph.rest) key = this.glyph.position;
		        if (this.glyph.rest) this.glyph.position = key;
		
		        var options = { octave_shift: this.octave_shift || 0 };
		        var props = _tables.Flow.keyProperties(key, this.clef, options);
		
		        if (!props) {
		          throw new _vex.Vex.RuntimeError('BadArguments', 'Invalid key for note properties: ' + key);
		        }
		
		        // Override line placement for default rests
		        if (props.key === 'R') {
		          if (this.duration === '1' || this.duration === 'w') {
		            props.line = 4;
		          } else {
		            props.line = 3;
		          }
		        }
		
		        // Calculate displacement of this note
		        var line = props.line;
		        if (lastLine === null) {
		          lastLine = line;
		        } else {
		          if (Math.abs(lastLine - line) === 0.5) {
		            this.displaced = true;
		            props.displaced = true;
		
		            // Have to mark the previous note as
		            // displaced as well, for modifier placement
		            if (this.keyProps.length > 0) {
		              this.keyProps[i - 1].displaced = true;
		            }
		          }
		        }
		
		        lastLine = line;
		        this.keyProps.push(props);
		      }
		
		      // Sort the notes from lowest line to highest line
		      lastLine = -Infinity;
		      this.keyProps.forEach(function (key) {
		        if (key.line < lastLine) {
		          _vex.Vex.W('Unsorted keys in note will be sorted. ' + 'See https://github.com/0xfe/vexflow/issues/104 for details.');
		        }
		        lastLine = key.line;
		      });
		      this.keyProps.sort(function (a, b) {
		        return a.line - b.line;
		      });
		    }
		
		    // Get the `BoundingBox` for the entire note
		
		  }, {
		    key: 'getBoundingBox',
		    value: function getBoundingBox() {
		      if (!this.preFormatted) {
		        throw new _vex.Vex.RERR('UnformattedNote', "Can't call getBoundingBox on an unformatted note.");
		      }
		
		      var _getMetrics = this.getMetrics();
		
		      var w = _getMetrics.width;
		      var modLeftPx = _getMetrics.modLeftPx;
		      var extraLeftPx = _getMetrics.extraLeftPx;
		
		      var x = this.getAbsoluteX() - modLeftPx - extraLeftPx;
		
		      var minY = 0;
		      var maxY = 0;
		      var halfLineSpacing = this.getStave().getSpacingBetweenLines() / 2;
		      var lineSpacing = halfLineSpacing * 2;
		
		      if (this.isRest()) {
		        var y = this.ys[0];
		        var frac = _tables.Flow.durationToFraction(this.duration);
		        if (frac.equals(1) || frac.equals(2)) {
		          minY = y - halfLineSpacing;
		          maxY = y + halfLineSpacing;
		        } else {
		          minY = y - this.glyph.line_above * lineSpacing;
		          maxY = y + this.glyph.line_below * lineSpacing;
		        }
		      } else if (this.glyph.stem) {
		        var ys = this.getStemExtents();
		        ys.baseY += halfLineSpacing * this.stem_direction;
		        minY = Math.min(ys.topY, ys.baseY);
		        maxY = Math.max(ys.topY, ys.baseY);
		      } else {
		        minY = null;
		        maxY = null;
		
		        for (var i = 0; i < this.ys.length; ++i) {
		          var yy = this.ys[i];
		          if (i === 0) {
		            minY = yy;
		            maxY = yy;
		          } else {
		            minY = Math.min(yy, minY);
		            maxY = Math.max(yy, maxY);
		          }
		        }
		        minY -= halfLineSpacing;
		        maxY += halfLineSpacing;
		      }
		
		      return new _boundingbox.BoundingBox(x, minY, w, maxY - minY);
		    }
		
		    // Gets the line number of the top or bottom note in the chord.
		    // If `isTopNote` is `true` then get the top note
		
		  }, {
		    key: 'getLineNumber',
		    value: function getLineNumber(isTopNote) {
		      if (!this.keyProps.length) {
		        throw new _vex.Vex.RERR('NoKeyProps', "Can't get bottom note line, because note is not initialized properly.");
		      }
		
		      var resultLine = this.keyProps[0].line;
		
		      // No precondition assumed for sortedness of keyProps array
		      for (var i = 0; i < this.keyProps.length; i++) {
		        var thisLine = this.keyProps[i].line;
		        if (isTopNote) {
		          if (thisLine > resultLine) resultLine = thisLine;
		        } else {
		          if (thisLine < resultLine) resultLine = thisLine;
		        }
		      }
		
		      return resultLine;
		    }
		
		    // Determine if current note is a rest
		
		  }, {
		    key: 'isRest',
		    value: function isRest() {
		      return this.glyph.rest;
		    }
		
		    // Determine if the current note is a chord
		
		  }, {
		    key: 'isChord',
		    value: function isChord() {
		      return !this.isRest() && this.keys.length > 1;
		    }
		
		    // Determine if the `StaveNote` has a stem
		
		  }, {
		    key: 'hasStem',
		    value: function hasStem() {
		      return this.glyph.stem;
		    }
		  }, {
		    key: 'hasFlag',
		    value: function hasFlag() {
		      return _get(Object.getPrototypeOf(StaveNote.prototype), 'hasFlag', this).call(this) && !this.isRest();
		    }
		  }, {
		    key: 'getStemX',
		    value: function getStemX() {
		      if (this.noteType === 'r') {
		        return this.getCenterGlyphX();
		      } else {
		        // We adjust the origin of the stem because we want the stem left-aligned
		        // with the notehead if stemmed-down, and right-aligned if stemmed-up
		        return _get(Object.getPrototypeOf(StaveNote.prototype), 'getStemX', this).call(this) + getStemAdjustment(this);
		      }
		    }
		
		    // Get the `y` coordinate for text placed on the top/bottom of a
		    // note at a desired `text_line`
		
		  }, {
		    key: 'getYForTopText',
		    value: function getYForTopText(textLine) {
		      var extents = this.getStemExtents();
		      return Math.min(this.stave.getYForTopText(textLine), extents.topY - this.render_options.annotation_spacing * (textLine + 1));
		    }
		  }, {
		    key: 'getYForBottomText',
		    value: function getYForBottomText(textLine) {
		      var extents = this.getStemExtents();
		      return Math.max(this.stave.getYForTopText(textLine), extents.baseY + this.render_options.annotation_spacing * textLine);
		    }
		
		    // Sets the current note to the provided `stave`. This applies
		    // `y` values to the `NoteHeads`.
		
		  }, {
		    key: 'setStave',
		    value: function setStave(stave) {
		      _get(Object.getPrototypeOf(StaveNote.prototype), 'setStave', this).call(this, stave);
		
		      var ys = this.note_heads.map(function (notehead) {
		        notehead.setStave(stave);
		        return notehead.getY();
		      });
		
		      this.setYs(ys);
		
		      if (this.stem) {
		        var _getNoteHeadBounds = this.getNoteHeadBounds();
		
		        var y_top = _getNoteHeadBounds.y_top;
		        var y_bottom = _getNoteHeadBounds.y_bottom;
		
		        this.stem.setYBounds(y_top, y_bottom);
		      }
		
		      return this;
		    }
		
		    // Get the pitches in the note
		
		  }, {
		    key: 'getKeys',
		    value: function getKeys() {
		      return this.keys;
		    }
		
		    // Get the properties for all the keys in the note
		
		  }, {
		    key: 'getKeyProps',
		    value: function getKeyProps() {
		      return this.keyProps;
		    }
		
		    // Check if note is shifted to the right
		
		  }, {
		    key: 'isDisplaced',
		    value: function isDisplaced() {
		      return this.displaced;
		    }
		
		    // Sets whether shift note to the right. `displaced` is a `boolean`
		
		  }, {
		    key: 'setNoteDisplaced',
		    value: function setNoteDisplaced(displaced) {
		      this.displaced = displaced;
		      return this;
		    }
		
		    // Get the starting `x` coordinate for a `StaveTie`
		
		  }, {
		    key: 'getTieRightX',
		    value: function getTieRightX() {
		      var tieStartX = this.getAbsoluteX();
		      tieStartX += this.getGlyphWidth() + this.x_shift + this.extraRightPx;
		      if (this.modifierContext) tieStartX += this.modifierContext.getExtraRightPx();
		      return tieStartX;
		    }
		
		    // Get the ending `x` coordinate for a `StaveTie`
		
		  }, {
		    key: 'getTieLeftX',
		    value: function getTieLeftX() {
		      var tieEndX = this.getAbsoluteX();
		      tieEndX += this.x_shift - this.extraLeftPx;
		      return tieEndX;
		    }
		
		    // Get the stave line on which to place a rest
		
		  }, {
		    key: 'getLineForRest',
		    value: function getLineForRest() {
		      var restLine = this.keyProps[0].line;
		      if (this.keyProps.length > 1) {
		        var lastLine = this.keyProps[this.keyProps.length - 1].line;
		        var top = Math.max(restLine, lastLine);
		        var bot = Math.min(restLine, lastLine);
		        restLine = _vex.Vex.MidLine(top, bot);
		      }
		
		      return restLine;
		    }
		
		    // Get the default `x` and `y` coordinates for the provided `position`
		    // and key `index`
		
		  }, {
		    key: 'getModifierStartXY',
		    value: function getModifierStartXY(position, index) {
		      if (!this.preFormatted) {
		        throw new _vex.Vex.RERR('UnformattedNote', "Can't call GetModifierStartXY on an unformatted note");
		      }
		
		      if (this.ys.length === 0) {
		        throw new _vex.Vex.RERR('NoYValues', 'No Y-Values calculated for this note.');
		      }
		
		      var _Modifier$Position = _modifier.Modifier.Position;
		      var ABOVE = _Modifier$Position.ABOVE;
		      var BELOW = _Modifier$Position.BELOW;
		      var LEFT = _Modifier$Position.LEFT;
		      var RIGHT = _Modifier$Position.RIGHT;
		
		      var x = 0;
		      if (position === LEFT) {
		        // extra_left_px
		        // FIXME: What are these magic numbers?
		        x = -1 * 2;
		      } else if (position === RIGHT) {
		        // extra_right_px
		        // FIXME: What is this magical +2?
		        x = this.getGlyphWidth() + this.x_shift + 2;
		
		        if (this.stem_direction === _stem.Stem.UP && this.hasFlag() && isInnerNoteIndex(this, index)) {
		          x += this.flag.getMetrics().width;
		        }
		      } else if (position === BELOW || position === ABOVE) {
		        x = this.getGlyphWidth() / 2;
		      }
		
		      return {
		        x: this.getAbsoluteX() + x,
		        y: this.ys[index]
		      };
		    }
		
		    // Sets the style of the complete StaveNote, including all keys
		    // and the stem.
		
		  }, {
		    key: 'setStyle',
		    value: function setStyle(style) {
		      this.note_heads.forEach(function (notehead) {
		        return notehead.setStyle(style);
		      });
		      this.stem.setStyle(style);
		    }
		
		    // Sets the notehead at `index` to the provided coloring `style`.
		    //
		    // `style` is an `object` with the following properties: `shadowColor`,
		    // `shadowBlur`, `fillStyle`, `strokeStyle`
		
		  }, {
		    key: 'setKeyStyle',
		    value: function setKeyStyle(index, style) {
		      this.note_heads[index].setStyle(style);
		      return this;
		    }
		  }, {
		    key: 'setKeyLine',
		    value: function setKeyLine(index, line) {
		      this.keyProps[index].line = line;
		      this.note_heads[index].setLine(line);
		      return this;
		    }
		  }, {
		    key: 'getKeyLine',
		    value: function getKeyLine(index) {
		      return this.keyProps[index].line;
		    }
		
		    // Add self to modifier context. `mContext` is the `ModifierContext`
		    // to be added to.
		
		  }, {
		    key: 'addToModifierContext',
		    value: function addToModifierContext(mContext) {
		      this.setModifierContext(mContext);
		      for (var i = 0; i < this.modifiers.length; ++i) {
		        this.modifierContext.addModifier(this.modifiers[i]);
		      }
		      this.modifierContext.addModifier(this);
		      this.setPreFormatted(false);
		      return this;
		    }
		
		    // Generic function to add modifiers to a note
		    //
		    // Parameters:
		    // * `index`: The index of the key that we're modifying
		    // * `modifier`: The modifier to add
		
		  }, {
		    key: 'addModifier',
		    value: function addModifier(index, modifier) {
		      modifier.setNote(this);
		      modifier.setIndex(index);
		      this.modifiers.push(modifier);
		      this.setPreFormatted(false);
		      return this;
		    }
		
		    // Helper function to add an accidental to a key
		
		  }, {
		    key: 'addAccidental',
		    value: function addAccidental(index, accidental) {
		      return this.addModifier(index, accidental);
		    }
		
		    // Helper function to add an articulation to a key
		
		  }, {
		    key: 'addArticulation',
		    value: function addArticulation(index, articulation) {
		      return this.addModifier(index, articulation);
		    }
		
		    // Helper function to add an annotation to a key
		
		  }, {
		    key: 'addAnnotation',
		    value: function addAnnotation(index, annotation) {
		      return this.addModifier(index, annotation);
		    }
		
		    // Helper function to add a dot on a specific key
		
		  }, {
		    key: 'addDot',
		    value: function addDot(index) {
		      var dot = new _dot.Dot();
		      dot.setDotShiftY(this.glyph.dot_shiftY);
		      this.dots++;
		      return this.addModifier(index, dot);
		    }
		
		    // Convenience method to add dot to all keys in note
		
		  }, {
		    key: 'addDotToAll',
		    value: function addDotToAll() {
		      for (var i = 0; i < this.keys.length; ++i) {
		        this.addDot(i);
		      }
		      return this;
		    }
		
		    // Get all accidentals in the `ModifierContext`
		
		  }, {
		    key: 'getAccidentals',
		    value: function getAccidentals() {
		      return this.modifierContext.getModifiers('accidentals');
		    }
		
		    // Get all dots in the `ModifierContext`
		
		  }, {
		    key: 'getDots',
		    value: function getDots() {
		      return this.modifierContext.getModifiers('dots');
		    }
		
		    // Get the width of the note if it is displaced. Used for `Voice`
		    // formatting
		
		  }, {
		    key: 'getVoiceShiftWidth',
		    value: function getVoiceShiftWidth() {
		      // TODO: may need to accomodate for dot here.
		      return this.getGlyphWidth() * (this.displaced ? 2 : 1);
		    }
		
		    // Calculates and sets the extra pixels to the left or right
		    // if the note is displaced.
		
		  }, {
		    key: 'calcExtraPx',
		    value: function calcExtraPx() {
		      this.setExtraLeftPx(this.displaced && this.stem_direction === _stem.Stem.DOWN ? this.getGlyphWidth() : 0);
		
		      // For upstems with flags, the extra space is unnecessary, since it's taken
		      // up by the flag.
		      this.setExtraRightPx(!this.hasFlag() && this.displaced && this.stem_direction === _stem.Stem.UP ? this.getGlyphWidth() : 0);
		    }
		
		    // Pre-render formatting
		
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      if (this.preFormatted) return;
		      if (this.modifierContext) this.modifierContext.preFormat();
		
		      var width = this.getGlyphWidth() + this.extraLeftPx + this.extraRightPx;
		
		      // For upward flagged notes, the width of the flag needs to be added
		      if (this.glyph.flag && this.beam === null && this.stem_direction === _stem.Stem.UP) {
		        width += this.getGlyphWidth();
		      }
		
		      this.setWidth(width);
		      this.setPreFormatted(true);
		    }
		
		    // Gets the staff line and y value for the highest and lowest noteheads
		
		  }, {
		    key: 'getNoteHeadBounds',
		    value: function getNoteHeadBounds() {
		      // Top and bottom Y values for stem.
		      var yTop = null;
		      var yBottom = null;
		
		      var highestLine = this.stave.getNumLines();
		      var lowestLine = 1;
		
		      this.note_heads.forEach(function (notehead) {
		        var line = notehead.getLine();
		        var y = notehead.getY();
		
		        if (yTop === null || y < yTop) {
		          yTop = y;
		        }
		
		        if (yBottom === null || y > yBottom) {
		          yBottom = y;
		        }
		
		        highestLine = line > highestLine ? line : highestLine;
		        lowestLine = line < lowestLine ? line : lowestLine;
		      }, this);
		
		      return {
		        y_top: yTop,
		        y_bottom: yBottom,
		        highest_line: highestLine,
		        lowest_line: lowestLine
		      };
		    }
		
		    // Get the starting `x` coordinate for the noteheads
		
		  }, {
		    key: 'getNoteHeadBeginX',
		    value: function getNoteHeadBeginX() {
		      return this.getAbsoluteX() + this.x_shift;
		    }
		
		    // Get the ending `x` coordinate for the noteheads
		
		  }, {
		    key: 'getNoteHeadEndX',
		    value: function getNoteHeadEndX() {
		      var xBegin = this.getNoteHeadBeginX();
		      return xBegin + this.getGlyphWidth();
		    }
		
		    // Draw the ledger lines between the stave and the highest/lowest keys
		
		  }, {
		    key: 'drawLedgerLines',
		    value: function drawLedgerLines() {
		      var _this3 = this;
		
		      var note_heads = this.note_heads;
		      var stave = this.stave;
		      var use_default_head_x = this.use_default_head_x;
		      var x_shift = this.x_shift;
		      var glyph = this.glyph;
		      var stroke_px = this.render_options.stroke_px;
		      var ctx = this.context;
		
		
		      if (this.isRest()) return;
		      if (!ctx) {
		        throw new _vex.Vex.RERR('NoCanvasContext', "Can't draw without a canvas context.");
		      }
		
		      var _getNoteHeadBounds2 = this.getNoteHeadBounds();
		
		      var highest_line = _getNoteHeadBounds2.highest_line;
		      var lowest_line = _getNoteHeadBounds2.lowest_line;
		
		      var headX = note_heads[0].getAbsoluteX();
		
		      var drawLedgerLine = function drawLedgerLine(y) {
		        if (use_default_head_x === true) {
		          headX = _this3.getAbsoluteX() + x_shift;
		        }
		        var x = headX - stroke_px;
		        var length = headX + glyph.getWidth() - headX + stroke_px * 2;
		
		        ctx.fillRect(x, y, length, 1);
		      };
		
		      for (var line = 6; line <= highest_line; ++line) {
		        drawLedgerLine(stave.getYForNote(line));
		      }
		
		      for (var _line = 0; _line >= lowest_line; --_line) {
		        drawLedgerLine(stave.getYForNote(_line));
		      }
		    }
		
		    // Draw all key modifiers
		
		  }, {
		    key: 'drawModifiers',
		    value: function drawModifiers() {
		      if (!this.context) {
		        throw new _vex.Vex.RERR('NoCanvasContext', "Can't draw without a canvas context.");
		      }
		
		      var ctx = this.context;
		      ctx.openGroup('modifiers');
		      for (var i = 0; i < this.modifiers.length; i++) {
		        var modifier = this.modifiers[i];
		        var notehead = this.note_heads[modifier.getIndex()];
		        var noteheadStyle = notehead.getStyle();
		        if (noteheadStyle) {
		          ctx.save();
		          notehead.applyStyle(ctx);
		        }
		        modifier.setContext(ctx);
		        modifier.draw();
		        if (noteheadStyle) {
		          ctx.restore();
		        }
		      }
		      ctx.closeGroup();
		    }
		
		    // Draw the flag for the note
		
		  }, {
		    key: 'drawFlag',
		    value: function drawFlag() {
		      var stem = this.stem;
		      var beam = this.beam;
		      var ctx = this.context;
		
		
		      if (!ctx) {
		        throw new _vex.Vex.RERR('NoCanvasContext', "Can't draw without a canvas context.");
		      }
		
		      var shouldRenderFlag = beam === null;
		      var glyph = this.getGlyph();
		
		      if (glyph.flag && shouldRenderFlag) {
		        var _getNoteHeadBounds3 = this.getNoteHeadBounds();
		
		        var y_top = _getNoteHeadBounds3.y_top;
		        var y_bottom = _getNoteHeadBounds3.y_bottom;
		
		        var noteStemHeight = stem.getHeight();
		        var flagX = this.getStemX();
		        // FIXME: What's with the magic +/- 2
		        var flagY = this.getStemDirection() === _stem.Stem.DOWN
		        // Down stems have flags on the left
		        ? y_top - noteStemHeight + 2
		        // Up stems have flags on the eft.
		        : y_bottom - noteStemHeight - 2;
		
		        // Draw the Flag
		        ctx.openGroup('flag', null, { pointerBBox: true });
		        this.flag.render(ctx, flagX, flagY);
		        ctx.closeGroup();
		      }
		    }
		
		    // Draw the NoteHeads
		
		  }, {
		    key: 'drawNoteHeads',
		    value: function drawNoteHeads() {
		      var _this4 = this;
		
		      this.note_heads.forEach(function (notehead) {
		        _this4.context.openGroup('notehead', null, { pointerBBox: true });
		        notehead.setContext(_this4.context).draw();
		        _this4.context.closeGroup();
		      });
		    }
		
		    // Render the stem onto the canvas
		
		  }, {
		    key: 'drawStem',
		    value: function drawStem(stemStruct) {
		      if (!this.context) {
		        throw new _vex.Vex.RERR('NoCanvasContext', "Can't draw without a canvas context.");
		      }
		
		      if (stemStruct) {
		        this.setStem(new _stem.Stem(stemStruct));
		      }
		
		      this.context.openGroup('stem', null, { pointerBBox: true });
		      this.stem.setContext(this.context).draw();
		      this.context.closeGroup();
		    }
		
		    // Draws all the `StaveNote` parts. This is the main drawing method.
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      if (!this.context) {
		        throw new _vex.Vex.RERR('NoCanvasContext', "Can't draw without a canvas context.");
		      }
		      if (!this.stave) {
		        throw new _vex.Vex.RERR('NoStave', "Can't draw without a stave.");
		      }
		      if (this.ys.length === 0) {
		        throw new _vex.Vex.RERR('NoYValues', "Can't draw note without Y values.");
		      }
		
		      var xBegin = this.getNoteHeadBeginX();
		      var shouldRenderStem = this.hasStem() && !this.beam;
		
		      // Format note head x positions
		      this.note_heads.forEach(function (notehead) {
		        return notehead.setX(xBegin);
		      });
		
		      // Format stem x positions
		      var stemX = this.getStemX();
		      this.stem.setNoteHeadXBounds(stemX, stemX);
		
		      L('Rendering ', this.isChord() ? 'chord :' : 'note :', this.keys);
		
		      // Draw each part of the note
		      this.drawLedgerLines();
		
		      this.setAttribute('el', this.context.openGroup('stavenote', this.getAttribute('id')));
		      this.context.openGroup('note', null, { pointerBBox: true });
		      if (shouldRenderStem) this.drawStem();
		      this.drawNoteHeads();
		      this.drawFlag();
		      this.context.closeGroup();
		      this.drawModifiers();
		      this.context.closeGroup();
		      this.setRendered();
		    }
		  }]);

		  return StaveNote;
		}(_stemmablenote.StemmableNote);

	/***/ },
	/* 21 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.NoteHead = undefined;
		
		var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _note = __webpack_require__(22);
		
		var _stem = __webpack_require__(17);
		
		var _stavenote = __webpack_require__(20);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This file implements `NoteHeads`. `NoteHeads` are typically not manipulated
		// directly, but used internally in `StaveNote`.
		//
		// See `tests/notehead_tests.js` for usage examples.
		
		// To enable logging for this class. Set `Vex.Flow.NoteHead.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (NoteHead.DEBUG) _vex.Vex.L('Vex.Flow.NoteHead', args);
		}
		
		// Draw slashnote head manually. No glyph exists for this.
		//
		// Parameters:
		// * `ctx`: the Canvas context
		// * `duration`: the duration of the note. ex: "4"
		// * `x`: the x coordinate to draw at
		// * `y`: the y coordinate to draw at
		// * `stem_direction`: the direction of the stem
		function drawSlashNoteHead(ctx, duration, x, y, stem_direction, staveSpace) {
		  var width = _tables.Flow.SLASH_NOTEHEAD_WIDTH;
		  ctx.save();
		  ctx.setLineWidth(_tables.Flow.STEM_WIDTH);
		
		  var fill = false;
		
		  if (_tables.Flow.durationToNumber(duration) > 2) {
		    fill = true;
		  }
		
		  if (!fill) x -= _tables.Flow.STEM_WIDTH / 2 * stem_direction;
		
		  ctx.beginPath();
		  ctx.moveTo(x, y + staveSpace);
		  ctx.lineTo(x, y + 1);
		  ctx.lineTo(x + width, y - staveSpace);
		  ctx.lineTo(x + width, y);
		  ctx.lineTo(x, y + staveSpace);
		  ctx.closePath();
		
		  if (fill) {
		    ctx.fill();
		  } else {
		    ctx.stroke();
		  }
		
		  if (_tables.Flow.durationToFraction(duration).equals(0.5)) {
		    var breve_lines = [-3, -1, width + 1, width + 3];
		    for (var i = 0; i < breve_lines.length; i++) {
		      ctx.beginPath();
		      ctx.moveTo(x + breve_lines[i], y - 10);
		      ctx.lineTo(x + breve_lines[i], y + 11);
		      ctx.stroke();
		    }
		  }
		
		  ctx.restore();
		}
		
		var NoteHead = exports.NoteHead = function (_Note) {
		  _inherits(NoteHead, _Note);
		
		  _createClass(NoteHead, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'notehead';
		    }
		  }]);
		
		  function NoteHead(head_options) {
		    _classCallCheck(this, NoteHead);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(NoteHead).call(this, head_options));
		
		    _this.setAttribute('type', 'NoteHead');
		
		    _this.index = head_options.index;
		    _this.x = head_options.x || 0;
		    _this.y = head_options.y || 0;
		    _this.note_type = head_options.note_type;
		    _this.duration = head_options.duration;
		    _this.displaced = head_options.displaced || false;
		    _this.stem_direction = head_options.stem_direction || _stavenote.StaveNote.STEM_UP;
		    _this.line = head_options.line;
		
		    // Get glyph code based on duration and note type. This could be
		    // regular notes, rests, or other custom codes.
		    _this.glyph = _tables.Flow.durationToGlyph(_this.duration, _this.note_type);
		    if (!_this.glyph) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'No glyph found for duration \'' + _this.duration + '\' and type \'' + _this.note_type + '\'');
		    }
		
		    _this.glyph_code = _this.glyph.code_head;
		    _this.x_shift = head_options.x_shift;
		    if (head_options.custom_glyph_code) {
		      _this.custom_glyph = true;
		      _this.glyph_code = head_options.custom_glyph_code;
		    }
		
		    _this.style = head_options.style;
		    _this.slashed = head_options.slashed;
		
		    _vex.Vex.Merge(_this.render_options, {
		      // font size for note heads
		      glyph_font_scale: head_options.glyph_font_scale || _tables.Flow.DEFAULT_NOTATION_FONT_SCALE,
		      // number of stroke px to the left and right of head
		      stroke_px: 3
		    });
		
		    _this.setWidth(_this.glyph.getWidth(_this.render_options.glyph_font_scale));
		    return _this;
		  }
		
		  _createClass(NoteHead, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return NoteHead.CATEGORY;
		    }
		
		    // Get the width of the notehead
		
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      return this.width;
		    }
		
		    // Determine if the notehead is displaced
		
		  }, {
		    key: 'isDisplaced',
		    value: function isDisplaced() {
		      return this.displaced === true;
		    }
		
		    // Get/set the notehead's style
		    //
		    // `style` is an `object` with the following properties: `shadowColor`,
		    // `shadowBlur`, `fillStyle`, `strokeStyle`
		
		  }, {
		    key: 'getStyle',
		    value: function getStyle() {
		      return this.style;
		    }
		  }, {
		    key: 'setStyle',
		    value: function setStyle(style) {
		      this.style = style;return this;
		    }
		
		    // Get the glyph data
		
		  }, {
		    key: 'getGlyph',
		    value: function getGlyph() {
		      return this.glyph;
		    }
		
		    // Set the X coordinate
		
		  }, {
		    key: 'setX',
		    value: function setX(x) {
		      this.x = x;return this;
		    }
		
		    // get/set the Y coordinate
		
		  }, {
		    key: 'getY',
		    value: function getY() {
		      return this.y;
		    }
		  }, {
		    key: 'setY',
		    value: function setY(y) {
		      this.y = y;return this;
		    }
		
		    // Get/set the stave line the notehead is placed on
		
		  }, {
		    key: 'getLine',
		    value: function getLine() {
		      return this.line;
		    }
		  }, {
		    key: 'setLine',
		    value: function setLine(line) {
		      this.line = line;return this;
		    }
		
		    // Get the canvas `x` coordinate position of the notehead.
		
		  }, {
		    key: 'getAbsoluteX',
		    value: function getAbsoluteX() {
		      // If the note has not been preformatted, then get the static x value
		      // Otherwise, it's been formatted and we should use it's x value relative
		      // to its tick context
		      var x = !this.preFormatted ? this.x : _get(Object.getPrototypeOf(NoteHead.prototype), 'getAbsoluteX', this).call(this);
		
		      // For a more natural displaced notehead, we adjust the displacement amount
		      // by half the stem width in order to maintain a slight overlap with the stem
		      var displacementStemAdjustment = _stem.Stem.WIDTH / 2;
		
		      return x + (this.displaced ? (this.width - displacementStemAdjustment) * this.stem_direction : 0);
		    }
		
		    // Get the `BoundingBox` for the `NoteHead`
		
		  }, {
		    key: 'getBoundingBox',
		    value: function getBoundingBox() {
		      if (!this.preFormatted) {
		        throw new _vex.Vex.RERR('UnformattedNote', "Can't call getBoundingBox on an unformatted note.");
		      }
		
		      var spacing = this.stave.getSpacingBetweenLines();
		      var half_spacing = spacing / 2;
		      var min_y = this.y - half_spacing;
		
		      return new _tables.Flow.BoundingBox(this.getAbsoluteX(), min_y, this.width, spacing);
		    }
		
		    // Apply current style to Canvas `context`
		
		  }, {
		    key: 'applyStyle',
		    value: function applyStyle(context) {
		      var style = this.getStyle();
		      if (style.shadowColor) context.setShadowColor(style.shadowColor);
		      if (style.shadowBlur) context.setShadowBlur(style.shadowBlur);
		      if (style.fillStyle) context.setFillStyle(style.fillStyle);
		      if (style.strokeStyle) context.setStrokeStyle(style.strokeStyle);
		      return this;
		    }
		
		    // Set notehead to a provided `stave`
		
		  }, {
		    key: 'setStave',
		    value: function setStave(stave) {
		      var line = this.getLine();
		
		      this.stave = stave;
		      this.setY(stave.getYForNote(line));
		      this.context = this.stave.context;
		      return this;
		    }
		
		    // Pre-render formatting
		
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      if (this.preFormatted) return this;
		
		      var width = this.getWidth() + this.extraLeftPx + this.extraRightPx;
		
		      this.setWidth(width);
		      this.setPreFormatted(true);
		      return this;
		    }
		
		    // Draw the notehead
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      this.setRendered();
		
		      var ctx = this.context;
		      var head_x = this.getAbsoluteX();
		      var y = this.y;
		
		      L("Drawing note head '", this.note_type, this.duration, "' at", head_x, y);
		
		      // Begin and end positions for head.
		      var stem_direction = this.stem_direction;
		      var glyph_font_scale = this.render_options.glyph_font_scale;
		      var line = this.line;
		
		      // If note above/below the staff, draw the small staff
		      if (line <= 0 || line >= 6) {
		        var line_y = y;
		        var floor = Math.floor(line);
		        if (line < 0 && floor - line === -0.5) {
		          line_y -= 5;
		        } else if (line > 6 && floor - line === -0.5) {
		          line_y += 5;
		        }
		
		        if (this.note_type !== 'r') {
		          ctx.fillRect(head_x - this.render_options.stroke_px, line_y, this.getWidth() + this.render_options.stroke_px * 2, 1);
		        }
		      }
		
		      if (this.note_type === 's') {
		        var staveSpace = this.stave.getSpacingBetweenLines();
		        drawSlashNoteHead(ctx, this.duration, head_x, y, stem_direction, staveSpace);
		      } else {
		        if (this.style) {
		          ctx.save();
		          this.applyStyle(ctx);
		          _glyph.Glyph.renderGlyph(ctx, head_x, y, glyph_font_scale, this.glyph_code);
		          ctx.restore();
		        } else {
		          _glyph.Glyph.renderGlyph(ctx, head_x, y, glyph_font_scale, this.glyph_code);
		        }
		      }
		    }
		  }]);

		  return NoteHead;
		}(_note.Note);

	/***/ },
	/* 22 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Note = undefined;
		
		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _tickable = __webpack_require__(23);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This file implements an abstract interface for notes and chords that
		// are rendered on a stave. Notes have some common properties: All of them
		// have a value (e.g., pitch, fret, etc.) and a duration (quarter, half, etc.)
		//
		// Some notes have stems, heads, dots, etc. Most notational elements that
		// surround a note are called *modifiers*, and every note has an associated
		// array of them. All notes also have a rendering context and belong to a stave.
		
		var Note = exports.Note = function (_Tickable) {
		  _inherits(Note, _Tickable);
		
		  _createClass(Note, null, [{
		    key: 'plotMetrics',
		
		
		    // Debug helper. Displays various note metrics for the given
		    // note.
		    value: function plotMetrics(ctx, note, yPos) {
		      var metrics = note.getMetrics();
		      var xStart = note.getAbsoluteX() - metrics.modLeftPx - metrics.extraLeftPx;
		      var xPre1 = note.getAbsoluteX() - metrics.extraLeftPx;
		      var xAbs = note.getAbsoluteX();
		      var xPost1 = note.getAbsoluteX() + metrics.noteWidth;
		      var xPost2 = note.getAbsoluteX() + metrics.noteWidth + metrics.extraRightPx;
		      var xEnd = note.getAbsoluteX() + metrics.noteWidth + metrics.extraRightPx + metrics.modRightPx;
		      var xFreedomRight = xEnd + note.getFormatterMetrics().freedom.right;
		
		      var xWidth = xEnd - xStart;
		      ctx.save();
		      ctx.setFont('Arial', 8, '');
		      ctx.fillText(Math.round(xWidth) + 'px', xStart + note.getXShift(), yPos);
		
		      var y = yPos + 7;
		      function stroke(x1, x2, color) {
		        var yy = arguments.length <= 3 || arguments[3] === undefined ? y : arguments[3];
		
		        ctx.beginPath();
		        ctx.setStrokeStyle(color);
		        ctx.setFillStyle(color);
		        ctx.setLineWidth(3);
		        ctx.moveTo(x1 + note.getXShift(), yy);
		        ctx.lineTo(x2 + note.getXShift(), yy);
		        ctx.stroke();
		      }
		
		      stroke(xStart, xPre1, 'red');
		      stroke(xPre1, xAbs, '#999');
		      stroke(xAbs, xPost1, 'green');
		      stroke(xPost1, xPost2, '#999');
		      stroke(xPost2, xEnd, 'red');
		      stroke(xEnd, xFreedomRight, '#DD0');
		      stroke(xStart - note.getXShift(), xStart, '#BBB'); // Shift
		      _vex.Vex.drawDot(ctx, xAbs + note.getXShift(), y, 'blue');
		
		      var formatterMetrics = note.getFormatterMetrics();
		      if (formatterMetrics.iterations > 0) {
		        var spaceDeviation = formatterMetrics.space.deviation;
		        var prefix = spaceDeviation >= 0 ? '+' : '';
		        ctx.setFillStyle('red');
		        ctx.fillText(prefix + Math.round(spaceDeviation), xAbs + note.getXShift(), yPos - 10);
		      }
		      ctx.restore();
		    }
		
		    // Every note is a tickable, i.e., it can be mutated by the `Formatter` class for
		    // positioning and layout.
		    // To create a new note you need to provide a `note_struct`, which consists
		    // of the following fields:
		    //
		    // `type`: The note type (e.g., `r` for rest, `s` for slash notes, etc.)
		    // `dots`: The number of dots, which affects the duration.
		    // `duration`: The time length (e.g., `q` for quarter, `h` for half, `8` for eighth etc.)
		    //
		    // The range of values for these parameters are available in `src/tables.js`.
		
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'note';
		    }
		  }, {
		    key: 'STAVEPADDING',
		    get: function get() {
		      return 12;
		    }
		  }]);
		
		  function Note(note_struct) {
		    _classCallCheck(this, Note);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Note).call(this));
		
		    _this.setAttribute('type', 'Note');
		
		    if (!note_struct) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'Note must have valid initialization data to identify duration and type.');
		    }
		
		    // Parse `note_struct` and get note properties.
		    var initData = _tables.Flow.parseNoteData(note_struct);
		    if (!initData) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'Invalid note initialization object: ' + JSON.stringify(note_struct));
		    }
		
		    // Set note properties from parameters.
		    _this.duration = initData.duration;
		    _this.dots = initData.dots;
		    _this.noteType = initData.type;
		
		    if (note_struct.duration_override) {
		      // Custom duration
		      _this.setDuration(note_struct.duration_override);
		    } else {
		      // Default duration
		      _this.setIntrinsicTicks(initData.ticks);
		    }
		
		    _this.modifiers = [];
		
		    // Get the glyph code for this note from the font.
		    _this.glyph = _tables.Flow.durationToGlyph(_this.duration, _this.noteType);
		
		    if (_this.positions && (_typeof(_this.positions) !== 'object' || !_this.positions.length)) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'Note keys must be array type.');
		    }
		
		    // Note to play for audio players.
		    _this.playNote = null;
		
		    // Positioning contexts used by the Formatter.
		    _this.tickContext = null; // The current tick context.
		    _this.modifierContext = null;
		    _this.ignore_ticks = false;
		
		    // Positioning variables
		    _this.width = 0; // Width in pixels calculated after preFormat
		    _this.extraLeftPx = 0; // Extra room on left for offset note head
		    _this.extraRightPx = 0; // Extra room on right for offset note head
		    _this.x_shift = 0; // X shift from tick context X
		    _this.left_modPx = 0; // Max width of left modifiers
		    _this.right_modPx = 0; // Max width of right modifiers
		    _this.voice = null; // The voice that this note is in
		    _this.preFormatted = false; // Is this note preFormatted?
		    _this.ys = []; // list of y coordinates for each note
		    // we need to hold on to these for ties and beams.
		
		    if (note_struct.align_center) {
		      _this.setCenterAlignment(note_struct.align_center);
		    }
		
		    // The render surface.
		    _this.stave = null;
		    _this.render_options = {
		      annotation_spacing: 5,
		      stave_padding: Note.STAVEPADDING
		    };
		    return _this;
		  }
		
		  // Get and set the play note, which is arbitrary data that can be used by an
		  // audio player.
		
		
		  _createClass(Note, [{
		    key: 'getPlayNote',
		    value: function getPlayNote() {
		      return this.playNote;
		    }
		  }, {
		    key: 'setPlayNote',
		    value: function setPlayNote(note) {
		      this.playNote = note;return this;
		    }
		
		    // Don't play notes by default, call them rests. This is also used by things like
		    // beams and dots for positioning.
		
		  }, {
		    key: 'isRest',
		    value: function isRest() {
		      return false;
		    }
		
		    // TODO(0xfe): Why is this method here?
		
		  }, {
		    key: 'addStroke',
		    value: function addStroke(index, stroke) {
		      stroke.setNote(this);
		      stroke.setIndex(index);
		      this.modifiers.push(stroke);
		      this.setPreFormatted(false);
		      return this;
		    }
		
		    // Get and set the target stave.
		
		  }, {
		    key: 'getStave',
		    value: function getStave() {
		      return this.stave;
		    }
		  }, {
		    key: 'setStave',
		    value: function setStave(stave) {
		      this.stave = stave;
		      this.setYs([stave.getYForLine(0)]); // Update Y values if the stave is changed.
		      this.context = this.stave.context;
		      return this;
		    }
		
		    // `Note` is not really a modifier, but is used in
		    // a `ModifierContext`.
		
		  }, {
		    key: 'getCategory',
		    value: function getCategory() {
		      return Note.CATEGORY;
		    }
		
		    // Set the rendering context for the note.
		
		  }, {
		    key: 'setContext',
		    value: function setContext(context) {
		      this.context = context;return this;
		    }
		
		    // Get and set spacing to the left and right of the notes.
		
		  }, {
		    key: 'getExtraLeftPx',
		    value: function getExtraLeftPx() {
		      return this.extraLeftPx;
		    }
		  }, {
		    key: 'getExtraRightPx',
		    value: function getExtraRightPx() {
		      return this.extraRightPx;
		    }
		  }, {
		    key: 'setExtraLeftPx',
		    value: function setExtraLeftPx(x) {
		      this.extraLeftPx = x;return this;
		    }
		  }, {
		    key: 'setExtraRightPx',
		    value: function setExtraRightPx(x) {
		      this.extraRightPx = x;return this;
		    }
		
		    // Returns true if this note has no duration (e.g., bar notes, spacers, etc.)
		
		  }, {
		    key: 'shouldIgnoreTicks',
		    value: function shouldIgnoreTicks() {
		      return this.ignore_ticks;
		    }
		
		    // Get the stave line number for the note.
		
		  }, {
		    key: 'getLineNumber',
		    value: function getLineNumber() {
		      return 0;
		    }
		
		    // Get the stave line number for rest.
		
		  }, {
		    key: 'getLineForRest',
		    value: function getLineForRest() {
		      return 0;
		    }
		
		    // Get the glyph associated with this note.
		
		  }, {
		    key: 'getGlyph',
		    value: function getGlyph() {
		      return this.glyph;
		    }
		  }, {
		    key: 'getGlyphWidth',
		    value: function getGlyphWidth() {
		      return this.glyph.getWidth(this.render_options.glyph_font_scale);
		    }
		
		    // Set and get Y positions for this note. Each Y value is associated with
		    // an individual pitch/key within the note/chord.
		
		  }, {
		    key: 'setYs',
		    value: function setYs(ys) {
		      this.ys = ys;return this;
		    }
		  }, {
		    key: 'getYs',
		    value: function getYs() {
		      if (this.ys.length === 0) {
		        throw new _vex.Vex.RERR('NoYValues', 'No Y-values calculated for this note.');
		      }
		
		      return this.ys;
		    }
		
		    // Get the Y position of the space above the stave onto which text can
		    // be rendered.
		
		  }, {
		    key: 'getYForTopText',
		    value: function getYForTopText(text_line) {
		      if (!this.stave) {
		        throw new _vex.Vex.RERR('NoStave', 'No stave attached to this note.');
		      }
		
		      return this.stave.getYForTopText(text_line);
		    }
		
		    // Get a `BoundingBox` for this note.
		
		  }, {
		    key: 'getBoundingBox',
		    value: function getBoundingBox() {
		      return null;
		    }
		
		    // Returns the voice that this note belongs in.
		
		  }, {
		    key: 'getVoice',
		    value: function getVoice() {
		      if (!this.voice) throw new _vex.Vex.RERR('NoVoice', 'Note has no voice.');
		      return this.voice;
		    }
		
		    // Attach this note to `voice`.
		
		  }, {
		    key: 'setVoice',
		    value: function setVoice(voice) {
		      this.voice = voice;
		      this.preFormatted = false;
		      return this;
		    }
		
		    // Get and set the `TickContext` for this note.
		
		  }, {
		    key: 'getTickContext',
		    value: function getTickContext() {
		      return this.tickContext;
		    }
		  }, {
		    key: 'setTickContext',
		    value: function setTickContext(tc) {
		      this.tickContext = tc;
		      this.preFormatted = false;
		      return this;
		    }
		
		    // Accessors for the note type.
		
		  }, {
		    key: 'getDuration',
		    value: function getDuration() {
		      return this.duration;
		    }
		  }, {
		    key: 'isDotted',
		    value: function isDotted() {
		      return this.dots > 0;
		    }
		  }, {
		    key: 'hasStem',
		    value: function hasStem() {
		      return false;
		    }
		  }, {
		    key: 'getDots',
		    value: function getDots() {
		      return this.dots;
		    }
		  }, {
		    key: 'getNoteType',
		    value: function getNoteType() {
		      return this.noteType;
		    }
		  }, {
		    key: 'setBeam',
		    value: function setBeam() {
		      return this;
		    } // ignore parameters
		
		    // Attach this note to a modifier context.
		
		  }, {
		    key: 'setModifierContext',
		    value: function setModifierContext(mc) {
		      this.modifierContext = mc;return this;
		    }
		
		    // Attach a modifier to this note.
		
		  }, {
		    key: 'addModifier',
		    value: function addModifier(modifier) {
		      var index = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
		
		      modifier.setNote(this);
		      modifier.setIndex(index);
		      this.modifiers.push(modifier);
		      this.setPreFormatted(false);
		      return this;
		    }
		
		    // Get the coordinates for where modifiers begin.
		
		  }, {
		    key: 'getModifierStartXY',
		    value: function getModifierStartXY() {
		      if (!this.preFormatted) {
		        throw new _vex.Vex.RERR('UnformattedNote', "Can't call GetModifierStartXY on an unformatted note");
		      }
		
		      return {
		        x: this.getAbsoluteX(),
		        y: this.ys[0]
		      };
		    }
		
		    // Get bounds and metrics for this note.
		    //
		    // Returns a struct with fields:
		    // `width`: The total width of the note (including modifiers.)
		    // `noteWidth`: The width of the note head only.
		    // `left_shift`: The horizontal displacement of the note.
		    // `modLeftPx`: Start `X` for left modifiers.
		    // `modRightPx`: Start `X` for right modifiers.
		    // `extraLeftPx`: Extra space on left of note.
		    // `extraRightPx`: Extra space on right of note.
		
		  }, {
		    key: 'getMetrics',
		    value: function getMetrics() {
		      if (!this.preFormatted) {
		        throw new _vex.Vex.RERR('UnformattedNote', "Can't call getMetrics on an unformatted note.");
		      }
		
		      var modLeftPx = 0;
		      var modRightPx = 0;
		      if (this.modifierContext != null) {
		        modLeftPx = this.modifierContext.state.left_shift;
		        modRightPx = this.modifierContext.state.right_shift;
		      }
		
		      var width = this.getWidth();
		      return {
		        width: width,
		        noteWidth: width - modLeftPx - modRightPx - this.extraLeftPx - this.extraRightPx,
		        left_shift: this.x_shift, // TODO(0xfe): Make style consistent
		
		        // Modifiers, accidentals etc.
		        modLeftPx: modLeftPx,
		        modRightPx: modRightPx,
		
		        // Displaced note head on left or right.
		        extraLeftPx: this.extraLeftPx,
		        extraRightPx: this.extraRightPx
		      };
		    }
		
		    // Get and set width of note. Used by the formatter for positioning.
		
		  }, {
		    key: 'setWidth',
		    value: function setWidth(width) {
		      this.width = width;
		    }
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      if (!this.preFormatted) {
		        throw new _vex.Vex.RERR('UnformattedNote', "Can't call GetWidth on an unformatted note.");
		      }
		
		      return this.width + (this.modifierContext ? this.modifierContext.getWidth() : 0);
		    }
		
		    // Displace note by `x` pixels. Used by the formatter.
		
		  }, {
		    key: 'setXShift',
		    value: function setXShift(x) {
		      this.x_shift = x;return this;
		    }
		  }, {
		    key: 'getXShift',
		    value: function getXShift() {
		      return this.x_shift;
		    }
		
		    // Get `X` position of this tick context.
		
		  }, {
		    key: 'getX',
		    value: function getX() {
		      if (!this.tickContext) {
		        throw new _vex.Vex.RERR('NoTickContext', 'Note needs a TickContext assigned for an X-Value');
		      }
		
		      return this.tickContext.getX() + this.x_shift;
		    }
		
		    // Get the absolute `X` position of this note's tick context. This
		    // excludes x_shift, so you'll need to factor it in if you're
		    // looking for the post-formatted x-position.
		
		  }, {
		    key: 'getAbsoluteX',
		    value: function getAbsoluteX() {
		      if (!this.tickContext) {
		        throw new _vex.Vex.RERR('NoTickContext', 'Note needs a TickContext assigned for an X-Value');
		      }
		
		      // Position note to left edge of tick context.
		      var x = this.tickContext.getX();
		      if (this.stave) {
		        x += this.stave.getNoteStartX() + this.render_options.stave_padding;
		      }
		
		      if (this.isCenterAligned()) {
		        x += this.getCenterXShift();
		      }
		
		      return x;
		    }
		  }, {
		    key: 'setPreFormatted',
		    value: function setPreFormatted(value) {
		      this.preFormatted = value;
		
		      // Maintain the width of left and right modifiers in pixels.
		      if (this.preFormatted) {
		        var extra = this.tickContext.getExtraPx();
		        this.left_modPx = Math.max(this.left_modPx, extra.left);
		        this.right_modPx = Math.max(this.right_modPx, extra.right);
		      }
		    }
		  }]);

		  return Note;
		}(_tickable.Tickable);

	/***/ },
	/* 23 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Tickable = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		var _tables = __webpack_require__(2);
		
		var _fraction = __webpack_require__(3);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// The tickable interface. Tickables are things that sit on a score and
		// have a duration, i.e., they occupy space in the musical rendering dimension.
		
		var Tickable = exports.Tickable = function (_Element) {
		  _inherits(Tickable, _Element);
		
		  function Tickable() {
		    _classCallCheck(this, Tickable);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Tickable).call(this));
		
		    _this.setAttribute('type', 'Tickable');
		
		    // These properties represent the duration of
		    // this tickable element.
		    _this.ticks = new _fraction.Fraction(0, 1);
		    _this.intrinsicTicks = 0;
		    _this.tickMultiplier = new _fraction.Fraction(1, 1);
		
		    _this.width = 0;
		    _this.x_shift = 0; // Shift from tick context
		    _this.voice = null;
		    _this.tickContext = null;
		    _this.modifierContext = null;
		    _this.modifiers = [];
		    _this.preFormatted = false;
		    _this.postFormatted = false;
		    _this.tuplet = null;
		    _this.tupletStack = [];
		
		    _this.align_center = false;
		    _this.center_x_shift = 0; // Shift from tick context if center aligned
		
		    // This flag tells the formatter to ignore this tickable during
		    // formatting and justification. It is set by tickables such as BarNote.
		    _this.ignore_ticks = false;
		
		    // This is a space for an external formatting class or function to maintain
		    // metrics.
		    _this.formatterMetrics = {
		      // The freedom of a tickable is the distance it can move without colliding
		      // with neighboring elements. A formatter can set these values during its
		      // formatting pass, which a different formatter can then use to fine tune.
		      freedom: { left: 0, right: 0 },
		
		      // The simplified rational duration of this tick as a string. It can be
		      // used as an index to a map or hashtable.
		      duration: '',
		
		      // The number of formatting iterations undergone.
		      iterations: 0,
		
		      // The space in pixels allocated by this formatter, along with the mean space
		      // for tickables of this duration, and the deviation from the mean.
		      space: {
		        used: 0,
		        mean: 0,
		        deviation: 0
		      }
		    };
		    return _this;
		  }
		
		  _createClass(Tickable, [{
		    key: 'reset',
		    value: function reset() {
		      return this;
		    }
		  }, {
		    key: 'getTicks',
		    value: function getTicks() {
		      return this.ticks;
		    }
		  }, {
		    key: 'shouldIgnoreTicks',
		    value: function shouldIgnoreTicks() {
		      return this.ignore_ticks;
		    }
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      return this.width;
		    }
		  }, {
		    key: 'getFormatterMetrics',
		    value: function getFormatterMetrics() {
		      return this.formatterMetrics;
		    }
		  }, {
		    key: 'setXShift',
		    value: function setXShift(x) {
		      this.x_shift = x;
		    }
		  }, {
		    key: 'getCenterXShift',
		    value: function getCenterXShift() {
		      if (this.isCenterAligned()) {
		        return this.center_x_shift;
		      }
		
		      return 0;
		    }
		  }, {
		    key: 'isCenterAligned',
		    value: function isCenterAligned() {
		      return this.align_center;
		    }
		  }, {
		    key: 'setCenterAlignment',
		    value: function setCenterAlignment(align_center) {
		      this.align_center = align_center;
		      return this;
		    }
		
		    // Every tickable must be associated with a voice. This allows formatters
		    // and preFormatter to associate them with the right modifierContexts.
		
		  }, {
		    key: 'getVoice',
		    value: function getVoice() {
		      if (!this.voice) throw new _vex.Vex.RERR('NoVoice', 'Tickable has no voice.');
		      return this.voice;
		    }
		  }, {
		    key: 'setVoice',
		    value: function setVoice(voice) {
		      this.voice = voice;
		    }
		  }, {
		    key: 'getTuplet',
		    value: function getTuplet() {
		      return this.tuplet;
		    }
		
		    /*
		     * resetTuplet
		     * @param tuplet -- the specific tuplet to reset
		     *   if this is not provided, all tuplets are reset.
		     * @returns this
		     *
		     * Removes any prior tuplets from the tick calculation and
		     * resets the intrinsic tick value to
		     */
		
		  }, {
		    key: 'resetTuplet',
		    value: function resetTuplet(tuplet) {
		      var noteCount = void 0;
		      var notesOccupied = void 0;
		      if (tuplet) {
		        var i = this.tupletStack.indexOf(tuplet);
		        if (i !== -1) {
		          this.tupletStack.splice(i, 1);
		          noteCount = tuplet.getNoteCount();
		          notesOccupied = tuplet.getNotesOccupied();
		
		          // Revert old multiplier by inverting numerator & denom.:
		          this.applyTickMultiplier(noteCount, notesOccupied);
		        }
		        return this;
		      }
		
		      while (this.tupletStack.length) {
		        tuplet = this.tupletStack.pop();
		        noteCount = tuplet.getNoteCount();
		        notesOccupied = tuplet.getNotesOccupied();
		
		        // Revert old multiplier by inverting numerator & denom.:
		        this.applyTickMultiplier(noteCount, notesOccupied);
		      }
		      return this;
		    }
		  }, {
		    key: 'setTuplet',
		    value: function setTuplet(tuplet) {
		      // Attach to new tuplet
		
		      if (tuplet) {
		        this.tupletStack.push(tuplet);
		
		        var noteCount = tuplet.getNoteCount();
		        var notesOccupied = tuplet.getNotesOccupied();
		
		        this.applyTickMultiplier(notesOccupied, noteCount);
		      }
		
		      this.tuplet = tuplet;
		
		      return this;
		    }
		
		    /** optional, if tickable has modifiers **/
		
		  }, {
		    key: 'addToModifierContext',
		    value: function addToModifierContext(mc) {
		      this.modifierContext = mc;
		      // Add modifiers to modifier context (if any)
		      this.preFormatted = false;
		    }
		
		    /** optional, if tickable has modifiers **/
		
		  }, {
		    key: 'addModifier',
		    value: function addModifier(mod) {
		      this.modifiers.push(mod);
		      this.preFormatted = false;
		      return this;
		    }
		  }, {
		    key: 'setTickContext',
		    value: function setTickContext(tc) {
		      this.tickContext = tc;
		      this.preFormatted = false;
		    }
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      if (this.preFormatted) return;
		
		      this.width = 0;
		      if (this.modifierContext) {
		        this.modifierContext.preFormat();
		        this.width += this.modifierContext.getWidth();
		      }
		    }
		  }, {
		    key: 'postFormat',
		    value: function postFormat() {
		      if (this.postFormatted) return this;
		      this.postFormatted = true;
		      return this;
		    }
		  }, {
		    key: 'getIntrinsicTicks',
		    value: function getIntrinsicTicks() {
		      return this.intrinsicTicks;
		    }
		  }, {
		    key: 'setIntrinsicTicks',
		    value: function setIntrinsicTicks(intrinsicTicks) {
		      this.intrinsicTicks = intrinsicTicks;
		      this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);
		    }
		  }, {
		    key: 'getTickMultiplier',
		    value: function getTickMultiplier() {
		      return this.tickMultiplier;
		    }
		  }, {
		    key: 'applyTickMultiplier',
		    value: function applyTickMultiplier(numerator, denominator) {
		      this.tickMultiplier.multiply(numerator, denominator);
		      this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);
		    }
		  }, {
		    key: 'setDuration',
		    value: function setDuration(duration) {
		      var ticks = duration.numerator * (_tables.Flow.RESOLUTION / duration.denominator);
		      this.ticks = this.tickMultiplier.clone().multiply(ticks);
		      this.intrinsicTicks = this.ticks.value();
		    }
		  }]);

		  return Tickable;
		}(_element.Element);

	/***/ },
	/* 24 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.StemmableNote = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _stem = __webpack_require__(17);
		
		var _glyph = __webpack_require__(4);
		
		var _note = __webpack_require__(22);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// `StemmableNote` is an abstract interface for notes with optional stems.
		// Examples of stemmable notes are `StaveNote` and `TabNote`
		
		var StemmableNote = exports.StemmableNote = function (_Note) {
		  _inherits(StemmableNote, _Note);
		
		  function StemmableNote(note_struct) {
		    _classCallCheck(this, StemmableNote);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StemmableNote).call(this, note_struct));
		
		    _this.setAttribute('type', 'StemmableNote');
		
		    _this.stem = null;
		    _this.stemExtensionOverride = null;
		    _this.beam = null;
		    return _this;
		  }
		
		  // Get and set the note's `Stem`
		
		
		  _createClass(StemmableNote, [{
		    key: 'getStem',
		    value: function getStem() {
		      return this.stem;
		    }
		  }, {
		    key: 'setStem',
		    value: function setStem(stem) {
		      this.stem = stem;return this;
		    }
		
		    // Builds and sets a new stem
		
		  }, {
		    key: 'buildStem',
		    value: function buildStem() {
		      var stem = new _stem.Stem();
		      this.setStem(stem);
		      return this;
		    }
		  }, {
		    key: 'buildFlag',
		    value: function buildFlag() {
		      var glyph = this.glyph;
		      var beam = this.beam;
		
		      var shouldRenderFlag = beam === null;
		
		      if (glyph && glyph.flag && shouldRenderFlag) {
		        var flagCode = this.getStemDirection() === _stem.Stem.DOWN ? glyph.code_flag_downstem : glyph.code_flag_upstem;
		
		        this.flag = new _glyph.Glyph(flagCode, this.render_options.glyph_font_scale);
		      }
		    }
		
		    // Get the full length of stem
		
		  }, {
		    key: 'getStemLength',
		    value: function getStemLength() {
		      return _stem.Stem.HEIGHT + this.getStemExtension();
		    }
		
		    // Get the number of beams for this duration
		
		  }, {
		    key: 'getBeamCount',
		    value: function getBeamCount() {
		      var glyph = this.getGlyph();
		
		      if (glyph) {
		        return glyph.beam_count;
		      } else {
		        return 0;
		      }
		    }
		
		    // Get the minimum length of stem
		
		  }, {
		    key: 'getStemMinumumLength',
		    value: function getStemMinumumLength() {
		      var frac = _tables.Flow.durationToFraction(this.duration);
		      var length = frac.value() <= 1 ? 0 : 20;
		      // if note is flagged, cannot shorten beam
		      switch (this.duration) {
		        case '8':
		          if (this.beam == null) length = 35;
		          break;
		        case '16':
		          length = this.beam == null ? 35 : 25;
		          break;
		        case '32':
		          length = this.beam == null ? 45 : 35;
		          break;
		        case '64':
		          length = this.beam == null ? 50 : 40;
		          break;
		        case '128':
		          length = this.beam == null ? 55 : 45;
		          break;
		        default:
		          break;
		      }
		      return length;
		    }
		
		    // Get/set the direction of the stem
		
		  }, {
		    key: 'getStemDirection',
		    value: function getStemDirection() {
		      return this.stem_direction;
		    }
		  }, {
		    key: 'setStemDirection',
		    value: function setStemDirection(direction) {
		      if (!direction) direction = _stem.Stem.UP;
		      if (direction !== _stem.Stem.UP && direction !== _stem.Stem.DOWN) {
		        throw new _vex.Vex.RERR('BadArgument', 'Invalid stem direction: ' + direction);
		      }
		
		      this.stem_direction = direction;
		      if (this.stem) {
		        this.stem.setDirection(direction);
		        this.stem.setExtension(this.getStemExtension());
		      }
		
		      this.reset();
		      if (this.flag) {
		        this.buildFlag();
		      }
		
		      this.beam = null;
		      if (this.preFormatted) {
		        this.preFormat();
		      }
		      return this;
		    }
		
		    // Get the `x` coordinate of the stem
		
		  }, {
		    key: 'getStemX',
		    value: function getStemX() {
		      var x_begin = this.getAbsoluteX() + this.x_shift;
		      var x_end = this.getAbsoluteX() + this.x_shift + this.getGlyphWidth();
		      var stem_x = this.stem_direction === _stem.Stem.DOWN ? x_begin : x_end;
		      return stem_x;
		    }
		
		    // Get the `x` coordinate for the center of the glyph.
		    // Used for `TabNote` stems and stemlets over rests
		
		  }, {
		    key: 'getCenterGlyphX',
		    value: function getCenterGlyphX() {
		      return this.getAbsoluteX() + this.x_shift + this.getGlyphWidth() / 2;
		    }
		
		    // Get the stem extension for the current duration
		
		  }, {
		    key: 'getStemExtension',
		    value: function getStemExtension() {
		      var glyph = this.getGlyph();
		
		      if (this.stemExtensionOverride != null) {
		        return this.stemExtensionOverride;
		      }
		
		      if (glyph) {
		        return this.getStemDirection() === 1 ? glyph.stem_up_extension : glyph.stem_down_extension;
		      }
		
		      return 0;
		    }
		
		    // Set the stem length to a specific. Will override the default length.
		
		  }, {
		    key: 'setStemLength',
		    value: function setStemLength(height) {
		      this.stemExtensionOverride = height - _stem.Stem.HEIGHT;
		      return this;
		    }
		
		    // Get the top and bottom `y` values of the stem.
		
		  }, {
		    key: 'getStemExtents',
		    value: function getStemExtents() {
		      return this.stem.getExtents();
		    }
		
		    // Sets the current note's beam
		
		  }, {
		    key: 'setBeam',
		    value: function setBeam(beam) {
		      this.beam = beam;return this;
		    }
		
		    // Get the `y` value for the top/bottom modifiers at a specific `textLine`
		
		  }, {
		    key: 'getYForTopText',
		    value: function getYForTopText(textLine) {
		      var extents = this.getStemExtents();
		      if (this.hasStem()) {
		        return Math.min(this.stave.getYForTopText(textLine), extents.topY - this.render_options.annotation_spacing * (textLine + 1));
		      } else {
		        return this.stave.getYForTopText(textLine);
		      }
		    }
		  }, {
		    key: 'getYForBottomText',
		    value: function getYForBottomText(textLine) {
		      var extents = this.getStemExtents();
		      if (this.hasStem()) {
		        return Math.max(this.stave.getYForTopText(textLine), extents.baseY + this.render_options.annotation_spacing * textLine);
		      } else {
		        return this.stave.getYForBottomText(textLine);
		      }
		    }
		  }, {
		    key: 'hasFlag',
		    value: function hasFlag() {
		      return _tables.Flow.durationToGlyph(this.duration).flag && !this.beam;
		    }
		
		    // Post format the note
		
		  }, {
		    key: 'postFormat',
		    value: function postFormat() {
		      if (this.beam) this.beam.postFormat();
		
		      this.postFormatted = true;
		
		      return this;
		    }
		
		    // Render the stem onto the canvas
		
		  }, {
		    key: 'drawStem',
		    value: function drawStem(stem_struct) {
		      this.checkContext();
		      this.setRendered();
		
		      this.setStem(new _stem.Stem(stem_struct));
		      this.stem.setContext(this.context).draw();
		    }
		  }]);

		  return StemmableNote;
		}(_note.Note);

	/***/ },
	/* 25 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Modifier = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// `Modifier` is an abstract interface for notational elements that modify
		// a `Note`. Examples of modifiers are `Accidental`, `Annotation`, `Stroke`, etc.
		//
		// For a `Modifier` instance to be positioned correctly, it must be part of
		// a `ModifierContext`. All modifiers in the same context are rendered relative to
		// one another.
		//
		// Typically, all modifiers to a note are part of the same `ModifierContext` instance. Also,
		// in multi-voice staves, all modifiers to notes on the same `tick` are part of the same
		// `ModifierContext`. This ensures that multiple voices don't trample all over each other.
		
		// To enable logging for this class. Set `Vex.Flow.Modifier.DEBUG` to `true`.
		// function L(...args) { if (Modifier.DEBUG) Vex.L('Vex.Flow.Modifier', args); }
		
		var Modifier = exports.Modifier = function (_Element) {
		  _inherits(Modifier, _Element);
		
		  _createClass(Modifier, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'none';
		    }
		
		    // Modifiers can be positioned almost anywhere, relative to a note.
		
		  }, {
		    key: 'Position',
		    get: function get() {
		      return {
		        LEFT: 1,
		        RIGHT: 2,
		        ABOVE: 3,
		        BELOW: 4
		      };
		    }
		  }, {
		    key: 'PositionString',
		    get: function get() {
		      return {
		        above: Modifier.Position.ABOVE,
		        below: Modifier.Position.BELOW,
		        left: Modifier.Position.LEFT,
		        right: Modifier.Position.RIGHT
		      };
		    }
		  }]);
		
		  function Modifier() {
		    _classCallCheck(this, Modifier);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Modifier).call(this));
		
		    _this.setAttribute('type', 'Modifier');
		
		    _this.width = 0;
		
		    // Modifiers are attached to a note and an index. An index is a
		    // specific head in a chord.
		    _this.note = null;
		    _this.index = null;
		
		    // The `text_line` is reserved space above or below a stave.
		    _this.text_line = 0;
		    _this.position = Modifier.Position.LEFT;
		    _this.modifier_context = null;
		    _this.x_shift = 0;
		    _this.y_shift = 0;
		    _this.spacingFromNextModifier = 0;
		    return _this;
		  }
		
		  // Every modifier has a category. The `ModifierContext` uses this to determine
		  // the type and order of the modifiers.
		
		
		  _createClass(Modifier, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Modifier.CATEGORY;
		    }
		
		    // Get and set modifier widths.
		
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      return this.width;
		    }
		  }, {
		    key: 'setWidth',
		    value: function setWidth(width) {
		      this.width = width;return this;
		    }
		
		    // Get and set attached note (`StaveNote`, `TabNote`, etc.)
		
		  }, {
		    key: 'getNote',
		    value: function getNote() {
		      return this.note;
		    }
		  }, {
		    key: 'setNote',
		    value: function setNote(note) {
		      this.note = note;return this;
		    }
		
		    // Get and set note index, which is a specific note in a chord.
		
		  }, {
		    key: 'getIndex',
		    value: function getIndex() {
		      return this.index;
		    }
		  }, {
		    key: 'setIndex',
		    value: function setIndex(index) {
		      this.index = index;return this;
		    }
		
		    // Every modifier must be part of a `ModifierContext`.
		
		  }, {
		    key: 'getModifierContext',
		    value: function getModifierContext() {
		      return this.modifier_context;
		    }
		  }, {
		    key: 'setModifierContext',
		    value: function setModifierContext(c) {
		      this.modifier_context = c;return this;
		    }
		
		    // Get and set articulation position.
		
		  }, {
		    key: 'getPosition',
		    value: function getPosition() {
		      return this.position;
		    }
		  }, {
		    key: 'setPosition',
		    value: function setPosition(position) {
		      this.position = typeof position === 'string' ? Modifier.PositionString[position] : position;
		      return this;
		    }
		
		    // Set the `text_line` for the modifier.
		
		  }, {
		    key: 'setTextLine',
		    value: function setTextLine(line) {
		      this.text_line = line;return this;
		    }
		
		    // Shift modifier down `y` pixels. Negative values shift up.
		
		  }, {
		    key: 'setYShift',
		    value: function setYShift(y) {
		      this.y_shift = y;return this;
		    }
		  }, {
		    key: 'setSpacingFromNextModifier',
		    value: function setSpacingFromNextModifier(x) {
		      this.spacingFromNextModifier = x;
		    }
		  }, {
		    key: 'getSpacingFromNextModifier',
		    value: function getSpacingFromNextModifier() {
		      return this.spacingFromNextModifier;
		    }
		
		    // Shift modifier `x` pixels in the direction of the modifier. Negative values
		    // shift reverse.
		
		  }, {
		    key: 'setXShift',
		    value: function setXShift(x) {
		      this.x_shift = 0;
		      if (this.position === Modifier.Position.LEFT) {
		        this.x_shift -= x;
		      } else {
		        this.x_shift += x;
		      }
		    }
		  }, {
		    key: 'getXShift',
		    value: function getXShift() {
		      return this.x_shift;
		    }
		
		    // Render the modifier onto the canvas.
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      throw new _vex.Vex.RERR('MethodNotImplemented', 'draw() not implemented for this modifier.');
		    }
		  }]);

		  return Modifier;
		}(_element.Element);

	/***/ },
	/* 26 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Dot = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _modifier = __webpack_require__(25);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // VexFlow - Music Engraving for HTML5
		// Copyright Mohit Muthanna 2010
		//
		// This class implements dot modifiers for notes.
		
		var Dot = exports.Dot = function (_Modifier) {
		  _inherits(Dot, _Modifier);
		
		  _createClass(Dot, null, [{
		    key: 'format',
		
		
		    // Arrange dots inside a ModifierContext.
		    value: function format(dots, state) {
		      var right_shift = state.right_shift;
		      var dot_spacing = 1;
		
		      if (!dots || dots.length === 0) return false;
		
		      var dot_list = [];
		      for (var i = 0; i < dots.length; ++i) {
		        var dot = dots[i];
		        var note = dot.getNote();
		
		        var props = void 0;
		        var shift = void 0;
		        // Only StaveNote has .getKeyProps()
		        if (typeof note.getKeyProps === 'function') {
		          props = note.getKeyProps()[dot.getIndex()];
		          shift = props.displaced ? note.getExtraRightPx() : 0;
		        } else {
		          // Else it's a TabNote
		          props = { line: 0.5 }; // Shim key props for dot placement
		          shift = 0;
		        }
		
		        dot_list.push({ line: props.line, shift: shift, note: note, dot: dot });
		      }
		
		      // Sort dots by line number.
		      dot_list.sort(function (a, b) {
		        return b.line - a.line;
		      });
		
		      var dot_shift = right_shift;
		      var x_width = 0;
		      var last_line = null;
		      var last_note = null;
		      var prev_dotted_space = null;
		      var half_shiftY = 0;
		
		      for (var _i = 0; _i < dot_list.length; ++_i) {
		        var _dot_list$_i = dot_list[_i];
		        var _dot = _dot_list$_i.dot;
		        var _note = _dot_list$_i.note;
		        var _shift = _dot_list$_i.shift;
		        var line = _dot_list$_i.line;
		
		        // Reset the position of the dot every line.
		
		        if (line !== last_line || _note !== last_note) {
		          dot_shift = _shift;
		        }
		
		        if (!_note.isRest() && line !== last_line) {
		          if (Math.abs(line % 1) === 0.5) {
		            // note is on a space, so no dot shift
		            half_shiftY = 0;
		          } else if (!_note.isRest()) {
		            // note is on a line, so shift dot to space above the line
		            half_shiftY = 0.5;
		            if (last_note != null && !last_note.isRest() && last_line - line === 0.5) {
		              // previous note on a space, so shift dot to space below the line
		              half_shiftY = -0.5;
		            } else if (line + half_shiftY === prev_dotted_space) {
		              // previous space is dotted, so shift dot to space below the line
		              half_shiftY = -0.5;
		            }
		          }
		        }
		
		        // convert half_shiftY to a multiplier for dots.draw()
		        _dot.dot_shiftY = -half_shiftY;
		        prev_dotted_space = line + half_shiftY;
		
		        _dot.setXShift(dot_shift);
		        dot_shift += _dot.getWidth() + dot_spacing; // spacing
		        x_width = dot_shift > x_width ? dot_shift : x_width;
		        last_line = line;
		        last_note = _note;
		      }
		
		      // Update state.
		      state.right_shift += x_width;
		      return true;
		    }
		
		    /**
		     * @constructor
		     */
		
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'dots';
		    }
		  }]);
		
		  function Dot() {
		    _classCallCheck(this, Dot);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Dot).call(this));
		
		    _this.setAttribute('type', 'Dot');
		
		    _this.note = null;
		    _this.index = null;
		    _this.position = _modifier.Modifier.Position.RIGHT;
		
		    _this.radius = 2;
		    _this.setWidth(5);
		    _this.dot_shiftY = 0;
		    return _this;
		  }
		
		  _createClass(Dot, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Dot.CATEGORY;
		    }
		  }, {
		    key: 'setNote',
		    value: function setNote(note) {
		      this.note = note;
		
		      if (this.note.getCategory() === 'gracenotes') {
		        this.radius *= 0.50;
		        this.setWidth(3);
		      }
		    }
		  }, {
		    key: 'setDotShiftY',
		    value: function setDotShiftY(y) {
		      this.dot_shiftY = y;return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      this.setRendered();
		
		      if (!this.note || this.index === null) {
		        throw new _vex.Vex.RERR('NoAttachedNote', "Can't draw dot without a note and index.");
		      }
		
		      var lineSpace = this.note.stave.options.spacing_between_lines_px;
		
		      var start = this.note.getModifierStartXY(this.position, this.index);
		
		      // Set the starting y coordinate to the base of the stem for TabNotes
		      if (this.note.getCategory() === 'tabnotes') {
		        start.y = this.note.getStemExtents().baseY;
		      }
		
		      var x = start.x + this.x_shift + this.width - this.radius;
		      var y = start.y + this.y_shift + this.dot_shiftY * lineSpace;
		      var ctx = this.context;
		
		      ctx.beginPath();
		      ctx.arc(x, y, this.radius, 0, Math.PI * 2, false);
		      ctx.fill();
		    }
		  }]);

		  return Dot;
		}(_modifier.Modifier);

	/***/ },
	/* 27 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.ModifierContext = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This class implements various types of modifiers to notes (e.g. bends,
		// fingering positions etc.)
		
		var _vex = __webpack_require__(1);
		
		var _stavenote = __webpack_require__(20);
		
		var _dot = __webpack_require__(26);
		
		var _frethandfinger = __webpack_require__(28);
		
		var _accidental = __webpack_require__(29);
		
		var _notesubgroup = __webpack_require__(31);
		
		var _gracenotegroup = __webpack_require__(32);
		
		var _strokes = __webpack_require__(35);
		
		var _stringnumber = __webpack_require__(36);
		
		var _articulation = __webpack_require__(37);
		
		var _ornament = __webpack_require__(38);
		
		var _annotation = __webpack_require__(40);
		
		var _bend = __webpack_require__(41);
		
		var _vibrato = __webpack_require__(42);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		// To enable logging for this class. Set `Vex.Flow.ModifierContext.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (ModifierContext.DEBUG) _vex.Vex.L('Vex.Flow.ModifierContext', args);
		}
		
		var ModifierContext = exports.ModifierContext = function () {
		  function ModifierContext() {
		    _classCallCheck(this, ModifierContext);
		
		    // Current modifiers
		    this.modifiers = {};
		
		    // Formatting data.
		    this.preFormatted = false;
		    this.postFormatted = false;
		    this.width = 0;
		    this.spacing = 0;
		    this.state = {
		      left_shift: 0,
		      right_shift: 0,
		      text_line: 0,
		      top_text_line: 0
		    };
		
		    // Add new modifiers to this array. The ordering is significant -- lower
		    // modifiers are formatted and rendered before higher ones.
		    this.PREFORMAT = [_stavenote.StaveNote, _dot.Dot, _frethandfinger.FretHandFinger, _accidental.Accidental, _gracenotegroup.GraceNoteGroup, _notesubgroup.NoteSubGroup, _strokes.Stroke, _stringnumber.StringNumber, _articulation.Articulation, _ornament.Ornament, _annotation.Annotation, _bend.Bend, _vibrato.Vibrato];
		
		    // If post-formatting is required for an element, add it to this array.
		    this.POSTFORMAT = [_stavenote.StaveNote];
		  }
		
		  _createClass(ModifierContext, [{
		    key: 'addModifier',
		    value: function addModifier(modifier) {
		      var type = modifier.getCategory();
		      if (!this.modifiers[type]) this.modifiers[type] = [];
		      this.modifiers[type].push(modifier);
		      modifier.setModifierContext(this);
		      this.preFormatted = false;
		      return this;
		    }
		  }, {
		    key: 'getModifiers',
		    value: function getModifiers(type) {
		      return this.modifiers[type];
		    }
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      return this.width;
		    }
		  }, {
		    key: 'getExtraLeftPx',
		    value: function getExtraLeftPx() {
		      return this.state.left_shift;
		    }
		  }, {
		    key: 'getExtraRightPx',
		    value: function getExtraRightPx() {
		      return this.state.right_shift;
		    }
		  }, {
		    key: 'getState',
		    value: function getState() {
		      return this.state;
		    }
		  }, {
		    key: 'getMetrics',
		    value: function getMetrics() {
		      if (!this.formatted) {
		        throw new _vex.Vex.RERR('UnformattedModifier', 'Unformatted modifier has no metrics.');
		      }
		
		      return {
		        width: this.state.left_shift + this.state.right_shift + this.spacing,
		        spacing: this.spacing,
		        extra_left_px: this.state.left_shift,
		        extra_right_px: this.state.right_shift
		      };
		    }
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      var _this = this;
		
		      if (this.preFormatted) return;
		      this.PREFORMAT.forEach(function (modifier) {
		        L('Preformatting ModifierContext: ', modifier.CATEGORY);
		        modifier.format(_this.getModifiers(modifier.CATEGORY), _this.state, _this);
		      });
		
		      // Update width of this modifier context
		      this.width = this.state.left_shift + this.state.right_shift;
		      this.preFormatted = true;
		    }
		  }, {
		    key: 'postFormat',
		    value: function postFormat() {
		      var _this2 = this;
		
		      if (this.postFormatted) return;
		      this.POSTFORMAT.forEach(function (modifier) {
		        L('Postformatting ModifierContext: ', modifier.CATEGORY);
		        modifier.postFormat(_this2.getModifiers(modifier.CATEGORY), _this2);
		      });
		    }
		  }]);

		  return ModifierContext;
		}();

	/***/ },
	/* 28 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.FretHandFinger = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _modifier = __webpack_require__(25);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // VexFlow - Music Engraving for HTML5
		// Copyright Mohit Muthanna 2010
		// Author Larry Kuhns 2013
		// Class to draws string numbers into the notation.
		
		/**
		 * @constructor
		 */
		var FretHandFinger = exports.FretHandFinger = function (_Modifier) {
		  _inherits(FretHandFinger, _Modifier);
		
		  _createClass(FretHandFinger, null, [{
		    key: 'format',
		
		
		    // Arrange fingerings inside a ModifierContext.
		    value: function format(nums, state) {
		      var left_shift = state.left_shift;
		      var right_shift = state.right_shift;
		
		      var num_spacing = 1;
		
		      if (!nums || nums.length === 0) return false;
		
		      var nums_list = [];
		      var prev_note = null;
		      var shiftLeft = 0;
		      var shiftRight = 0;
		
		      for (var i = 0; i < nums.length; ++i) {
		        var num = nums[i];
		        var note = num.getNote();
		        var pos = num.getPosition();
		        var props = note.getKeyProps()[num.getIndex()];
		        if (note !== prev_note) {
		          for (var n = 0; n < note.keys.length; ++n) {
		            var props_tmp = note.getKeyProps()[n];
		            if (left_shift === 0) {
		              shiftLeft = props_tmp.displaced ? note.getExtraLeftPx() : shiftLeft;
		            }
		            if (right_shift === 0) {
		              shiftRight = props_tmp.displaced ? note.getExtraRightPx() : shiftRight;
		            }
		          }
		          prev_note = note;
		        }
		
		        nums_list.push({
		          note: note,
		          num: num,
		          pos: pos,
		          line: props.line,
		          shiftL: shiftLeft,
		          shiftR: shiftRight
		        });
		      }
		
		      // Sort fingernumbers by line number.
		      nums_list.sort(function (a, b) {
		        return b.line - a.line;
		      });
		
		      var numShiftL = 0;
		      var numShiftR = 0;
		      var xWidthL = 0;
		      var xWidthR = 0;
		      var lastLine = null;
		      var lastNote = null;
		
		      for (var _i = 0; _i < nums_list.length; ++_i) {
		        var num_shift = 0;
		        var _nums_list$_i = nums_list[_i];
		        var _note = _nums_list$_i.note;
		        var _pos = _nums_list$_i.pos;
		        var _num = _nums_list$_i.num;
		        var line = _nums_list$_i.line;
		        var shiftL = _nums_list$_i.shiftL;
		        var shiftR = _nums_list$_i.shiftR;
		
		        // Reset the position of the string number every line.
		
		        if (line !== lastLine || _note !== lastNote) {
		          numShiftL = left_shift + shiftL;
		          numShiftR = right_shift + shiftR;
		        }
		
		        var numWidth = _num.getWidth() + num_spacing;
		        if (_pos === _modifier.Modifier.Position.LEFT) {
		          _num.setXShift(left_shift + numShiftL);
		          num_shift = left_shift + numWidth; // spacing
		          xWidthL = num_shift > xWidthL ? num_shift : xWidthL;
		        } else if (_pos === _modifier.Modifier.Position.RIGHT) {
		          _num.setXShift(numShiftR);
		          num_shift = shiftRight + numWidth; // spacing
		          xWidthR = num_shift > xWidthR ? num_shift : xWidthR;
		        }
		        lastLine = line;
		        lastNote = _note;
		      }
		
		      state.left_shift += xWidthL;
		      state.right_shift += xWidthR;
		
		      return true;
		    }
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'frethandfinger';
		    }
		  }]);
		
		  function FretHandFinger(number) {
		    _classCallCheck(this, FretHandFinger);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(FretHandFinger).call(this));
		
		    _this.setAttribute('type', 'FretHandFinger');
		
		    _this.note = null;
		    _this.index = null;
		    _this.finger = number;
		    _this.width = 7;
		    _this.position = _modifier.Modifier.Position.LEFT; // Default position above stem or note head
		    _this.x_shift = 0;
		    _this.y_shift = 0;
		    _this.x_offset = 0; // Horizontal offset from default
		    _this.y_offset = 0; // Vertical offset from default
		    _this.font = {
		      family: 'sans-serif',
		      size: 9,
		      weight: 'bold'
		    };
		    return _this;
		  }
		
		  _createClass(FretHandFinger, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return FretHandFinger.CATEGORY;
		    }
		  }, {
		    key: 'setFretHandFinger',
		    value: function setFretHandFinger(number) {
		      this.finger = number;return this;
		    }
		  }, {
		    key: 'setOffsetX',
		    value: function setOffsetX(x) {
		      this.x_offset = x;return this;
		    }
		  }, {
		    key: 'setOffsetY',
		    value: function setOffsetY(y) {
		      this.y_offset = y;return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		
		      if (!this.note || this.index == null) {
		        throw new _vex.Vex.RERR('NoAttachedNote', "Can't draw string number without a note and index.");
		      }
		
		      this.setRendered();
		      var ctx = this.context;
		      var start = this.note.getModifierStartXY(this.position, this.index);
		      var dot_x = start.x + this.x_shift + this.x_offset;
		      var dot_y = start.y + this.y_shift + this.y_offset + 5;
		
		      switch (this.position) {
		        case _modifier.Modifier.Position.ABOVE:
		          dot_x -= 4;
		          dot_y -= 12;
		          break;
		        case _modifier.Modifier.Position.BELOW:
		          dot_x -= 2;
		          dot_y += 10;
		          break;
		        case _modifier.Modifier.Position.LEFT:
		          dot_x -= this.width;
		          break;
		        case _modifier.Modifier.Position.RIGHT:
		          dot_x += 1;
		          break;
		        default:
		          throw new _vex.Vex.RERR('InvalidPostion', 'The position ' + this.position + ' does not exist');
		      }
		
		      ctx.save();
		      ctx.setFont(this.font.family, this.font.size, this.font.weight);
		      ctx.fillText('' + this.finger, dot_x, dot_y);
		      ctx.restore();
		    }
		  }]);

		  return FretHandFinger;
		}(_modifier.Modifier);

	/***/ },
	/* 29 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Accidental = undefined;
		
		var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _fraction = __webpack_require__(3);
		
		var _tables = __webpack_require__(2);
		
		var _music = __webpack_require__(30);
		
		var _modifier = __webpack_require__(25);
		
		var _glyph = __webpack_require__(4);
		
		function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// @author Mohit Cheppudira
		// @author Greg Ristow (modifications)
		//
		// ## Description
		//
		// This file implements accidentals as modifiers that can be attached to
		// notes. Support is included for both western and microtonal accidentals.
		//
		// See `tests/accidental_tests.js` for usage examples.
		
		// To enable logging for this class. Set `Vex.Flow.Accidental.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (Accidental.DEBUG) _vex.Vex.L('Vex.Flow.Accidental', args);
		}
		
		var getGlyphWidth = function getGlyphWidth(glyph) {
		  return glyph.getMetrics().width;
		};
		
		// An `Accidental` inherits from `Modifier`, and is formatted within a
		// `ModifierContext`.
		
		var Accidental = exports.Accidental = function (_Modifier) {
		  _inherits(Accidental, _Modifier);
		
		  _createClass(Accidental, null, [{
		    key: 'format',
		
		
		    // Arrange accidentals inside a ModifierContext.
		    value: function format(accidentals, state) {
		      var _this2 = this;
		
		      var noteheadAccidentalPadding = 1;
		      var leftShift = state.left_shift + noteheadAccidentalPadding;
		      var accidentalSpacing = 3;
		
		      // If there are no accidentals, we needn't format their positions
		      if (!accidentals || accidentals.length === 0) return;
		
		      var accList = [];
		      var prevNote = null;
		      var shiftL = 0;
		
		      // First determine the accidentals' Y positions from the note.keys
		      var propsTemp = void 0;
		      for (var i = 0; i < accidentals.length; ++i) {
		        var acc = accidentals[i];
		        var note = acc.getNote();
		        var stave = note.getStave();
		        var props = note.getKeyProps()[acc.getIndex()];
		        if (note !== prevNote) {
		          // Iterate through all notes to get the displaced pixels
		          for (var n = 0; n < note.keys.length; ++n) {
		            propsTemp = note.getKeyProps()[n];
		            shiftL = propsTemp.displaced ? note.getExtraLeftPx() : shiftL;
		          }
		          prevNote = note;
		        }
		        if (stave !== null) {
		          var lineSpace = stave.options.spacing_between_lines_px;
		          var y = stave.getYForLine(props.line);
		          var accLine = Math.round(y / lineSpace * 2) / 2;
		          accList.push({ y: y, line: accLine, shift: shiftL, acc: acc, lineSpace: lineSpace });
		        } else {
		          accList.push({ line: props.line, shift: shiftL, acc: acc });
		        }
		      }
		
		      // Sort accidentals by line number.
		      accList.sort(function (a, b) {
		        return b.line - a.line;
		      });
		
		      // FIXME: Confusing name. Each object in this array has a property called `line`.
		      // So if this is a list of lines, you end up with: `line.line` which is very awkward.
		      var lineList = [];
		
		      // amount by which all accidentals must be shifted right or left for
		      // stem flipping, notehead shifting concerns.
		      var accShift = 0;
		      var previousLine = null;
		
		      // Create an array of unique line numbers (lineList) from accList
		      for (var _i = 0; _i < accList.length; _i++) {
		        var _acc = accList[_i];
		
		        // if this is the first line, or a new line, add a lineList
		        if (previousLine === null || previousLine !== _acc.line) {
		          lineList.push({
		            line: _acc.line,
		            flatLine: true,
		            dblSharpLine: true,
		            numAcc: 0,
		            width: 0
		          });
		        }
		        // if this accidental is not a flat, the accidental needs 3.0 lines lower
		        // clearance instead of 2.5 lines for b or bb.
		        // FIXME: Naming could use work. acc.acc is very awkward
		        if (_acc.acc.type !== 'b' && _acc.acc.type !== 'bb') {
		          lineList[lineList.length - 1].flatLine = false;
		        }
		
		        // if this accidental is not a double sharp, the accidental needs 3.0 lines above
		        if (_acc.acc.type !== '##') {
		          lineList[lineList.length - 1].dblSharpLine = false;
		        }
		
		        // Track how many accidentals are on this line:
		        lineList[lineList.length - 1].numAcc++;
		
		        // Track the total x_offset needed for this line which will be needed
		        // for formatting lines w/ multiple accidentals:
		
		        // width = accidental width + universal spacing between accidentals
		        lineList[lineList.length - 1].width += _acc.acc.getWidth() + accidentalSpacing;
		
		        // if this accShift is larger, use it to keep first column accidentals in the same line
		        accShift = _acc.shift > accShift ? _acc.shift : accShift;
		
		        previousLine = _acc.line;
		      }
		
		      // ### Place Accidentals in Columns
		      //
		      // Default to a classic triangular layout (middle accidental farthest left),
		      // but follow exceptions as outlined in G. Read's _Music Notation_ and
		      // Elaine Gould's _Behind Bars_.
		      //
		      // Additionally, this implements different vertical collision rules for
		      // flats (only need 2.5 lines clearance below) and double sharps (only
		      // need 2.5 lines of clearance above or below).
		      //
		      // Classic layouts and exception patterns are found in the 'tables.js'
		      // in 'Vex.Flow.accidentalColumnsTable'
		      //
		      // Beyond 6 vertical accidentals, default to the parallel ascending lines approach,
		      // using as few columns as possible for the verticle structure.
		      //
		      // TODO (?): Allow column to be specified for an accidental at run-time?
		
		      var totalColumns = 0;
		
		      // establish the boundaries for a group of notes with clashing accidentals:
		
		      var _loop = function _loop(_i3) {
		        var noFurtherConflicts = false;
		        var groupStart = _i3;
		        var groupEnd = _i3;
		
		        while (groupEnd + 1 < lineList.length && !noFurtherConflicts) {
		          // if this note conflicts with the next:
		          if (_this2.checkCollision(lineList[groupEnd], lineList[groupEnd + 1])) {
		            // include the next note in the group:
		            groupEnd++;
		          } else {
		            noFurtherConflicts = true;
		          }
		        }
		
		        // Gets an a line from the `lineList`, relative to the current group
		        var getGroupLine = function getGroupLine(index) {
		          return lineList[groupStart + index];
		        };
		        var getGroupLines = function getGroupLines(indexes) {
		          return indexes.map(getGroupLine);
		        };
		        var lineDifference = function lineDifference(indexA, indexB) {
		          var _getGroupLines$map = getGroupLines([indexA, indexB]).map(function (item) {
		            return item.line;
		          });
		
		          var _getGroupLines$map2 = _slicedToArray(_getGroupLines$map, 2);
		
		          var a = _getGroupLines$map2[0];
		          var b = _getGroupLines$map2[1];
		
		          return a - b;
		        };
		
		        var notColliding = function notColliding() {
		          for (var _len2 = arguments.length, indexPairs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
		            indexPairs[_key2] = arguments[_key2];
		          }
		
		          return indexPairs.map(getGroupLines).every(function (lines) {
		            return !_this2.checkCollision.apply(_this2, _toConsumableArray(lines));
		          });
		        };
		
		        // Set columns for the lines in this group:
		        var groupLength = groupEnd - groupStart + 1;
		
		        // Set the accidental column for each line of the group
		        var endCase = _this2.checkCollision(lineList[groupStart], lineList[groupEnd]) ? 'a' : 'b';
		
		        switch (groupLength) {
		          case 3:
		            if (endCase === 'a' && lineDifference(1, 2) === 0.5 && lineDifference(0, 1) !== 0.5) {
		              endCase = 'second_on_bottom';
		            }
		            break;
		          case 4:
		            if (notColliding([0, 2], [1, 3])) {
		              endCase = 'spaced_out_tetrachord';
		            }
		            break;
		          case 5:
		            if (endCase === 'b' && notColliding([1, 3])) {
		              endCase = 'spaced_out_pentachord';
		              if (notColliding([0, 2], [2, 4])) {
		                endCase = 'very_spaced_out_pentachord';
		              }
		            }
		            break;
		          case 6:
		            if (notColliding([0, 3], [1, 4], [2, 5])) {
		              endCase = 'spaced_out_hexachord';
		            }
		            if (notColliding([0, 2], [2, 4], [1, 3], [3, 5])) {
		              endCase = 'very_spaced_out_hexachord';
		            }
		            break;
		          default:
		            break;
		        }
		
		        var groupMember = void 0;
		        var column = void 0;
		        // If the group contains more than seven members, use ascending parallel lines
		        // of accidentals, using as few columns as possible while avoiding collisions.
		        if (groupLength >= 7) {
		          // First, determine how many columns to use:
		          var patternLength = 2;
		          var collisionDetected = true;
		          while (collisionDetected === true) {
		            collisionDetected = false;
		            for (var line = 0; line + patternLength < lineList.length; line++) {
		              if (_this2.checkCollision(lineList[line], lineList[line + patternLength])) {
		                collisionDetected = true;
		                patternLength++;
		                break;
		              }
		            }
		          }
		          // Then, assign a column to each line of accidentals
		          for (groupMember = _i3; groupMember <= groupEnd; groupMember++) {
		            column = (groupMember - _i3) % patternLength + 1;
		            lineList[groupMember].column = column;
		            totalColumns = totalColumns > column ? totalColumns : column;
		          }
		
		          // Otherwise, if the group contains fewer than seven members, use the layouts from
		          // the accidentalsColumnsTable housed in tables.js.
		        } else {
		          for (groupMember = _i3; groupMember <= groupEnd; groupMember++) {
		            column = _tables.Flow.accidentalColumnsTable[groupLength][endCase][groupMember - _i3];
		            lineList[groupMember].column = column;
		            totalColumns = totalColumns > column ? totalColumns : column;
		          }
		        }
		
		        // Increment i to the last note that was set, so that if a lower set of notes
		        // does not conflict at all with this group, it can have its own classic shape.
		        _i3 = groupEnd;
		        _i2 = _i3;
		      };
		
		      for (var _i2 = 0; _i2 < lineList.length; _i2++) {
		        _loop(_i2);
		      }
		
		      // ### Convert Columns to x_offsets
		      //
		      // This keeps columns aligned, even if they have different accidentals within them
		      // which sometimes results in a larger x_offset than is an accidental might need
		      // to preserve the symmetry of the accidental shape.
		      //
		      // Neither A.C. Vinci nor G. Read address this, and it typically only happens in
		      // music with complex chord clusters.
		      //
		      // TODO (?): Optionally allow closer compression of accidentals, instead of forcing
		      // parallel columns.
		
		      // track each column's max width, which will be used as initial shift of later columns:
		      var columnWidths = [];
		      var columnXOffsets = [];
		      for (var _i4 = 0; _i4 <= totalColumns; _i4++) {
		        columnWidths[_i4] = 0;
		        columnXOffsets[_i4] = 0;
		      }
		
		      columnWidths[0] = accShift + leftShift;
		      columnXOffsets[0] = accShift + leftShift;
		
		      // Fill columnWidths with widest needed x-space;
		      // this is what keeps the columns parallel.
		      lineList.forEach(function (line) {
		        if (line.width > columnWidths[line.column]) columnWidths[line.column] = line.width;
		      });
		
		      for (var _i5 = 1; _i5 < columnWidths.length; _i5++) {
		        // this column's offset = this column's width + previous column's offset
		        columnXOffsets[_i5] = columnWidths[_i5] + columnXOffsets[_i5 - 1];
		      }
		
		      var totalShift = columnXOffsets[columnXOffsets.length - 1];
		      // Set the xShift for each accidental according to column offsets:
		      var accCount = 0;
		      lineList.forEach(function (line) {
		        var lineWidth = 0;
		        var lastAccOnLine = accCount + line.numAcc;
		        // handle all of the accidentals on a given line:
		        for (accCount; accCount < lastAccOnLine; accCount++) {
		          var xShift = columnXOffsets[line.column - 1] + lineWidth;
		          accList[accCount].acc.setXShift(xShift);
		          // keep track of the width of accidentals we've added so far, so that when
		          // we loop, we add space for them.
		          lineWidth += accList[accCount].acc.getWidth() + accidentalSpacing;
		          L('Line, accCount, shift: ', line.line, accCount, xShift);
		        }
		      });
		
		      // update the overall layout with the full width of the accidental shapes:
		      state.left_shift += totalShift;
		    }
		
		    // Helper function to determine whether two lines of accidentals collide vertically
		
		  }, {
		    key: 'checkCollision',
		    value: function checkCollision(line1, line2) {
		      var clearance = line2.line - line1.line;
		      var clearanceRequired = 3;
		      // But less clearance is required for certain accidentals: b, bb and ##.
		      if (clearance > 0) {
		        // then line 2 is on top
		        clearanceRequired = line2.flatLine || line2.dblSharpLine ? 2.5 : 3.0;
		        if (line1.dblSharpLine) clearance -= 0.5;
		      } else {
		        // line 1 is on top
		        clearanceRequired = line1.flatLine || line1.dblSharpLine ? 2.5 : 3.0;
		        if (line2.dblSharpLine) clearance -= 0.5;
		      }
		      var collision = Math.abs(clearance) < clearanceRequired;
		      L('Line_1, Line_2, Collision: ', line1.line, line2.line, collision);
		      return collision;
		    }
		
		    // Use this method to automatically apply accidentals to a set of `voices`.
		    // The accidentals will be remembered between all the voices provided.
		    // Optionally, you can also provide an initial `keySignature`.
		
		  }, {
		    key: 'applyAccidentals',
		    value: function applyAccidentals(voices, keySignature) {
		      var tickPositions = [];
		      var tickNoteMap = {};
		
		      // Sort the tickables in each voice by their tick position in the voice
		      voices.forEach(function (voice) {
		        var tickPosition = new _fraction.Fraction(0, 1);
		        var notes = voice.getTickables();
		        notes.forEach(function (note) {
		          var notesAtPosition = tickNoteMap[tickPosition.value()];
		
		          if (!notesAtPosition) {
		            tickPositions.push(tickPosition.value());
		            tickNoteMap[tickPosition.value()] = [note];
		          } else {
		            notesAtPosition.push(note);
		          }
		
		          tickPosition.add(note.getTicks());
		        });
		      });
		
		      var music = new _music.Music();
		
		      // Default key signature is C major
		      if (!keySignature) keySignature = 'C';
		
		      // Get the scale map, which represents the current state of each pitch
		      var scaleMap = music.createScaleMap(keySignature);
		
		      tickPositions.forEach(function (tick) {
		        var notes = tickNoteMap[tick];
		
		        // Array to store all pitches that modified accidental states
		        // at this tick position
		        var modifiedPitches = [];
		
		        notes.forEach(function (note) {
		          if (note.isRest()) return;
		
		          // Go through each key and determine if an accidental should be
		          // applied
		          note.keys.forEach(function (keyString, keyIndex) {
		            var key = music.getNoteParts(keyString.split('/')[0]);
		
		            // Force a natural for every key without an accidental
		            var accidentalString = key.accidental || 'n';
		            var pitch = key.root + accidentalString;
		
		            // Determine if the current pitch has the same accidental
		            // as the scale state
		            var sameAccidental = scaleMap[key.root] === pitch;
		
		            // Determine if an identical pitch in the chord already
		            // modified the accidental state
		            var previouslyModified = modifiedPitches.indexOf(pitch) > -1;
		
		            // Add the accidental to the StaveNote
		            if (!sameAccidental || sameAccidental && previouslyModified) {
		              // Modify the scale map so that the root pitch has an
		              // updated state
		              scaleMap[key.root] = pitch;
		
		              // Create the accidental
		              var accidental = new Accidental(accidentalString);
		
		              // Attach the accidental to the StaveNote
		              note.addAccidental(keyIndex, accidental);
		
		              // Add the pitch to list of pitches that modified accidentals
		              modifiedPitches.push(pitch);
		            }
		          });
		        });
		      });
		    }
		
		    // Create accidental. `type` can be a value from the
		    // `Vex.Flow.accidentalCodes.accidentals` table in `tables.js`. For
		    // example: `#`, `##`, `b`, `n`, etc.
		
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'accidentals';
		    }
		  }]);
		
		  function Accidental() {
		    var type = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];
		
		    _classCallCheck(this, Accidental);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Accidental).call(this));
		
		    _this.setAttribute('type', 'Accidental');
		
		    L('New accidental: ', type);
		
		    _this.note = null;
		    // The `index` points to a specific note in a chord.
		    _this.index = null;
		    _this.type = type;
		    _this.position = _modifier.Modifier.Position.LEFT;
		
		    _this.render_options = {
		      // Font size for glyphs
		      font_scale: 38,
		
		      // Length of stroke across heads above or below the stave.
		      stroke_px: 3,
		
		      // Padding between accidental and parentheses on each side
		      parenLeftPadding: 2,
		      parenRightPadding: 2
		    };
		
		    _this.accidental = _tables.Flow.accidentalCodes(_this.type);
		    if (!_this.accidental) {
		      throw new _vex.Vex.RERR('ArgumentError', 'Unknown accidental type: ' + type);
		    }
		
		    // Cautionary accidentals have parentheses around them
		    _this.cautionary = false;
		    _this.parenLeft = null;
		    _this.parenRight = null;
		
		    _this.reset();
		    return _this;
		  }
		
		  _createClass(Accidental, [{
		    key: 'reset',
		    value: function reset() {
		      var fontScale = this.render_options.font_scale;
		      this.glyph = new _glyph.Glyph(this.accidental.code, fontScale);
		      this.glyph.setOriginX(1.0);
		
		      if (this.cautionary) {
		        this.parenLeft = new _glyph.Glyph(_tables.Flow.accidentalCodes('{').code, fontScale);
		        this.parenRight = new _glyph.Glyph(_tables.Flow.accidentalCodes('}').code, fontScale);
		        this.parenLeft.setOriginX(1.0);
		        this.parenRight.setOriginX(1.0);
		      }
		    }
		  }, {
		    key: 'getCategory',
		    value: function getCategory() {
		      return Accidental.CATEGORY;
		    }
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      var parenWidth = this.cautionary ? getGlyphWidth(this.parenLeft) + getGlyphWidth(this.parenRight) + this.render_options.parenLeftPadding + this.render_options.parenRightPadding : 0;
		
		      return getGlyphWidth(this.glyph) + parenWidth;
		    }
		
		    // Attach this accidental to `note`, which must be a `StaveNote`.
		
		  }, {
		    key: 'setNote',
		    value: function setNote(note) {
		      if (!note) {
		        throw new _vex.Vex.RERR('ArgumentError', 'Bad note value: ' + note);
		      }
		
		      this.note = note;
		
		      // Accidentals attached to grace notes are rendered smaller.
		      if (this.note.getCategory() === 'gracenotes') {
		        this.render_options.font_scale = 25;
		        this.reset();
		      }
		    }
		
		    // If called, draws parenthesis around accidental.
		
		  }, {
		    key: 'setAsCautionary',
		    value: function setAsCautionary() {
		      this.cautionary = true;
		      this.render_options.font_scale = 28;
		      this.reset();
		      return this;
		    }
		
		    // Render accidental onto canvas.
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var context = this.context;
		      var type = this.type;
		      var position = this.position;
		      var note = this.note;
		      var index = this.index;
		      var cautionary = this.cautionary;
		      var x_shift = this.x_shift;
		      var y_shift = this.y_shift;
		      var glyph = this.glyph;
		      var parenLeft = this.parenLeft;
		      var parenRight = this.parenRight;
		      var _render_options = this.render_options;
		      var parenLeftPadding = _render_options.parenLeftPadding;
		      var parenRightPadding = _render_options.parenRightPadding;
		
		
		      this.checkContext();
		
		      if (!(note && index != null)) {
		        throw new _vex.Vex.RERR('NoAttachedNote', "Can't draw accidental without a note and index.");
		      }
		
		      // Figure out the start `x` and `y` coordinates for note and index.
		      var start = note.getModifierStartXY(position, index);
		      var accX = start.x + x_shift;
		      var accY = start.y + y_shift;
		      L('Rendering: ', type, accX, accY);
		
		      if (!cautionary) {
		        glyph.render(context, accX, accY);
		      } else {
		        // Render the accidental in parentheses.
		        parenRight.render(context, accX, accY);
		        accX -= getGlyphWidth(parenRight);
		        accX -= parenRightPadding;
		        accX -= this.accidental.parenRightPaddingAdjustment;
		        glyph.render(context, accX, accY);
		        accX -= getGlyphWidth(glyph);
		        accX -= parenLeftPadding;
		        parenLeft.render(context, accX, accY);
		      }
		
		      this.setRendered();
		    }
		  }]);

		  return Accidental;
		}(_modifier.Modifier);

	/***/ },
	/* 30 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Music = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// This class implements some standard music theory routines.
		
		var _vex = __webpack_require__(1);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var Music = exports.Music = function () {
		  function Music() {
		    _classCallCheck(this, Music);
		  }
		
		  _createClass(Music, [{
		    key: 'isValidNoteValue',
		    value: function isValidNoteValue(note) {
		      if (note == null || note < 0 || note >= Music.NUM_TONES) {
		        return false;
		      }
		      return true;
		    }
		  }, {
		    key: 'isValidIntervalValue',
		    value: function isValidIntervalValue(interval) {
		      return this.isValidNoteValue(interval);
		    }
		  }, {
		    key: 'getNoteParts',
		    value: function getNoteParts(noteString) {
		      if (!noteString || noteString.length < 1) {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);
		      }
		
		      if (noteString.length > 3) {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);
		      }
		
		      var note = noteString.toLowerCase();
		
		      var regex = /^([cdefgab])(b|bb|n|#|##)?$/;
		      var match = regex.exec(note);
		
		      if (match != null) {
		        var root = match[1];
		        var accidental = match[2];
		
		        return {
		          root: root,
		          accidental: accidental
		        };
		      } else {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);
		      }
		    }
		  }, {
		    key: 'getKeyParts',
		    value: function getKeyParts(keyString) {
		      if (!keyString || keyString.length < 1) {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid key: ' + keyString);
		      }
		
		      var key = keyString.toLowerCase();
		
		      // Support Major, Minor, Melodic Minor, and Harmonic Minor key types.
		      var regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;
		      var match = regex.exec(key);
		
		      if (match != null) {
		        var root = match[1];
		        var accidental = match[2];
		        var type = match[3];
		
		        // Unspecified type implies major
		        if (!type) type = 'M';
		
		        return {
		          root: root,
		          accidental: accidental,
		          type: type
		        };
		      } else {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid key: ' + keyString);
		      }
		    }
		  }, {
		    key: 'getNoteValue',
		    value: function getNoteValue(noteString) {
		      var value = Music.noteValues[noteString];
		      if (value == null) {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);
		      }
		
		      return value.int_val;
		    }
		  }, {
		    key: 'getIntervalValue',
		    value: function getIntervalValue(intervalString) {
		      var value = Music.intervals[intervalString];
		      if (value == null) {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid interval name: ${intervalString}');
		      }
		
		      return value;
		    }
		  }, {
		    key: 'getCanonicalNoteName',
		    value: function getCanonicalNoteName(noteValue) {
		      if (!this.isValidNoteValue(noteValue)) {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid note value: ' + noteValue);
		      }
		
		      return Music.canonical_notes[noteValue];
		    }
		  }, {
		    key: 'getCanonicalIntervalName',
		    value: function getCanonicalIntervalName(intervalValue) {
		      if (!this.isValidIntervalValue(intervalValue)) {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid interval value: ' + intervalValue);
		      }
		
		      return Music.diatonic_intervals[intervalValue];
		    }
		
		    /* Given a note, interval, and interval direction, product the
		     * relative note.
		     */
		
		  }, {
		    key: 'getRelativeNoteValue',
		    value: function getRelativeNoteValue(noteValue, intervalValue, direction) {
		      if (direction == null) direction = 1;
		
		      if (direction !== 1 && direction !== -1) {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid direction: ' + direction);
		      }
		
		      var sum = (noteValue + direction * intervalValue) % Music.NUM_TONES;
		      if (sum < 0) sum += Music.NUM_TONES;
		
		      return sum;
		    }
		  }, {
		    key: 'getRelativeNoteName',
		    value: function getRelativeNoteName(root, noteValue) {
		      var parts = this.getNoteParts(root);
		      var rootValue = this.getNoteValue(parts.root);
		      var interval = noteValue - rootValue;
		
		      if (Math.abs(interval) > Music.NUM_TONES - 3) {
		        var multiplier = 1;
		        if (interval > 0) multiplier = -1;
		
		        // Possibly wrap around. (Add +1 for modulo operator)
		        var reverse_interval = (noteValue + 1 + (rootValue + 1)) % Music.NUM_TONES * multiplier;
		
		        if (Math.abs(reverse_interval) > 2) {
		          throw new _vex.Vex.RERR('BadArguments', 'Notes not related: ' + root + ', ' + noteValue + ')');
		        } else {
		          interval = reverse_interval;
		        }
		      }
		
		      if (Math.abs(interval) > 2) {
		        throw new _vex.Vex.RERR('BadArguments', 'Notes not related: ' + root + ', ' + noteValue + ')');
		      }
		
		      var relativeNoteName = parts.root;
		      if (interval > 0) {
		        for (var i = 1; i <= interval; ++i) {
		          relativeNoteName += '#';
		        }
		      } else if (interval < 0) {
		        for (var _i = -1; _i >= interval; --_i) {
		          relativeNoteName += 'b';
		        }
		      }
		
		      return relativeNoteName;
		    }
		
		    /* Return scale tones, given intervals. Each successive interval is
		     * relative to the previous one, e.g., Major Scale:
		     *
		     *   TTSTTTS = [2,2,1,2,2,2,1]
		     *
		     * When used with key = 0, returns C scale (which is isomorphic to
		     * interval list).
		     */
		
		  }, {
		    key: 'getScaleTones',
		    value: function getScaleTones(key, intervals) {
		      var tones = [key];
		
		      var nextNote = key;
		      for (var i = 0; i < intervals.length; i += 1) {
		        nextNote = this.getRelativeNoteValue(nextNote, intervals[i]);
		        if (nextNote !== key) tones.push(nextNote);
		      }
		
		      return tones;
		    }
		
		    /* Returns the interval of a note, given a diatonic scale.
		     *
		     * E.g., Given the scale C, and the note E, returns M3
		     */
		
		  }, {
		    key: 'getIntervalBetween',
		    value: function getIntervalBetween(note1, note2, direction) {
		      if (direction == null) direction = 1;
		
		      if (direction !== 1 && direction !== -1) {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid direction: ' + direction);
		      }
		
		      if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2)) {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid notes: ' + note1 + ', ' + note2);
		      }
		
		      var difference = direction === 1 ? note2 - note1 : note1 - note2;
		
		      if (difference < 0) difference += Music.NUM_TONES;
		
		      return difference;
		    }
		
		    // Create a scale map that represents the pitch state for a
		    // `keySignature`. For example, passing a `G` to `keySignature` would
		    // return a scale map with every note naturalized except for `F` which
		    // has an `F#` state.
		
		  }, {
		    key: 'createScaleMap',
		    value: function createScaleMap(keySignature) {
		      var keySigParts = this.getKeyParts(keySignature);
		      var scaleName = Music.scaleTypes[keySigParts.type];
		
		      var keySigString = keySigParts.root;
		      if (keySigParts.accidental) keySigString += keySigParts.accidental;
		
		      if (!scaleName) throw new _vex.Vex.RERR('BadArguments', 'Unsupported key type: ' + keySignature);
		
		      var scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);
		      var noteLocation = Music.root_indices[keySigParts.root];
		
		      var scaleMap = {};
		      for (var i = 0; i < Music.roots.length; ++i) {
		        var index = (noteLocation + i) % Music.roots.length;
		        var rootName = Music.roots[index];
		        var noteName = this.getRelativeNoteName(rootName, scale[i]);
		
		        if (noteName.length === 1) {
		          noteName += 'n';
		        }
		
		        scaleMap[rootName] = noteName;
		      }
		
		      return scaleMap;
		    }
		  }], [{
		    key: 'NUM_TONES',
		    get: function get() {
		      return 12;
		    }
		  }, {
		    key: 'roots',
		    get: function get() {
		      return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];
		    }
		  }, {
		    key: 'root_values',
		    get: function get() {
		      return [0, 2, 4, 5, 7, 9, 11];
		    }
		  }, {
		    key: 'root_indices',
		    get: function get() {
		      return {
		        'c': 0,
		        'd': 1,
		        'e': 2,
		        'f': 3,
		        'g': 4,
		        'a': 5,
		        'b': 6
		      };
		    }
		  }, {
		    key: 'canonical_notes',
		    get: function get() {
		      return ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'];
		    }
		  }, {
		    key: 'diatonic_intervals',
		    get: function get() {
		      return ['unison', 'm2', 'M2', 'm3', 'M3', 'p4', 'dim5', 'p5', 'm6', 'M6', 'b7', 'M7', 'octave'];
		    }
		  }, {
		    key: 'diatonic_accidentals',
		    get: function get() {
		      return {
		        'unison': { note: 0, accidental: 0 },
		        'm2': { note: 1, accidental: -1 },
		        'M2': { note: 1, accidental: 0 },
		        'm3': { note: 2, accidental: -1 },
		        'M3': { note: 2, accidental: 0 },
		        'p4': { note: 3, accidental: 0 },
		        'dim5': { note: 4, accidental: -1 },
		        'p5': { note: 4, accidental: 0 },
		        'm6': { note: 5, accidental: -1 },
		        'M6': { note: 5, accidental: 0 },
		        'b7': { note: 6, accidental: -1 },
		        'M7': { note: 6, accidental: 0 },
		        'octave': { note: 7, accidental: 0 }
		      };
		    }
		  }, {
		    key: 'intervals',
		    get: function get() {
		      return {
		        'u': 0, 'unison': 0,
		        'm2': 1, 'b2': 1, 'min2': 1, 'S': 1, 'H': 1,
		        '2': 2, 'M2': 2, 'maj2': 2, 'T': 2, 'W': 2,
		        'm3': 3, 'b3': 3, 'min3': 3,
		        'M3': 4, '3': 4, 'maj3': 4,
		        '4': 5, 'p4': 5,
		        '#4': 6, 'b5': 6, 'aug4': 6, 'dim5': 6,
		        '5': 7, 'p5': 7,
		        '#5': 8, 'b6': 8, 'aug5': 8,
		        '6': 9, 'M6': 9, 'maj6': 9,
		        'b7': 10, 'm7': 10, 'min7': 10, 'dom7': 10,
		        'M7': 11, 'maj7': 11,
		        '8': 12, 'octave': 12
		      };
		    }
		  }, {
		    key: 'scales',
		    get: function get() {
		      return {
		        major: [2, 2, 1, 2, 2, 2, 1],
		        dorian: [2, 1, 2, 2, 2, 1, 2],
		        mixolydian: [2, 2, 1, 2, 2, 1, 2],
		        minor: [2, 1, 2, 2, 1, 2, 2]
		      };
		    }
		  }, {
		    key: 'scaleTypes',
		    get: function get() {
		      return {
		        'M': Music.scales.major,
		        'm': Music.scales.minor
		      };
		    }
		  }, {
		    key: 'accidentals',
		    get: function get() {
		      return ['bb', 'b', 'n', '#', '##'];
		    }
		  }, {
		    key: 'noteValues',
		    get: function get() {
		      return {
		        'c': { root_index: 0, int_val: 0 },
		        'cn': { root_index: 0, int_val: 0 },
		        'c#': { root_index: 0, int_val: 1 },
		        'c##': { root_index: 0, int_val: 2 },
		        'cb': { root_index: 0, int_val: 11 },
		        'cbb': { root_index: 0, int_val: 10 },
		        'd': { root_index: 1, int_val: 2 },
		        'dn': { root_index: 1, int_val: 2 },
		        'd#': { root_index: 1, int_val: 3 },
		        'd##': { root_index: 1, int_val: 4 },
		        'db': { root_index: 1, int_val: 1 },
		        'dbb': { root_index: 1, int_val: 0 },
		        'e': { root_index: 2, int_val: 4 },
		        'en': { root_index: 2, int_val: 4 },
		        'e#': { root_index: 2, int_val: 5 },
		        'e##': { root_index: 2, int_val: 6 },
		        'eb': { root_index: 2, int_val: 3 },
		        'ebb': { root_index: 2, int_val: 2 },
		        'f': { root_index: 3, int_val: 5 },
		        'fn': { root_index: 3, int_val: 5 },
		        'f#': { root_index: 3, int_val: 6 },
		        'f##': { root_index: 3, int_val: 7 },
		        'fb': { root_index: 3, int_val: 4 },
		        'fbb': { root_index: 3, int_val: 3 },
		        'g': { root_index: 4, int_val: 7 },
		        'gn': { root_index: 4, int_val: 7 },
		        'g#': { root_index: 4, int_val: 8 },
		        'g##': { root_index: 4, int_val: 9 },
		        'gb': { root_index: 4, int_val: 6 },
		        'gbb': { root_index: 4, int_val: 5 },
		        'a': { root_index: 5, int_val: 9 },
		        'an': { root_index: 5, int_val: 9 },
		        'a#': { root_index: 5, int_val: 10 },
		        'a##': { root_index: 5, int_val: 11 },
		        'ab': { root_index: 5, int_val: 8 },
		        'abb': { root_index: 5, int_val: 7 },
		        'b': { root_index: 6, int_val: 11 },
		        'bn': { root_index: 6, int_val: 11 },
		        'b#': { root_index: 6, int_val: 0 },
		        'b##': { root_index: 6, int_val: 1 },
		        'bb': { root_index: 6, int_val: 10 },
		        'bbb': { root_index: 6, int_val: 9 }
		      };
		    }
		  }]);

		  return Music;
		}();

	/***/ },
	/* 31 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.NoteSubGroup = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _modifier = __webpack_require__(25);
		
		var _formatter = __webpack_require__(14);
		
		var _voice = __webpack_require__(18);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author Taehoon Moon 2016
		//
		// ## Description
		//
		// This file implements `NoteSubGroup` which is used to format and
		// render notes as a `Modifier`
		// ex) ClefNote, TimeSigNote and BarNote.
		
		var NoteSubGroup = exports.NoteSubGroup = function (_Modifier) {
		  _inherits(NoteSubGroup, _Modifier);
		
		  _createClass(NoteSubGroup, null, [{
		    key: 'format',
		
		
		    // Arrange groups inside a `ModifierContext`
		    value: function format(groups, state) {
		      if (!groups || groups.length === 0) return false;
		
		      var width = 0;
		      for (var i = 0; i < groups.length; ++i) {
		        var group = groups[i];
		        group.preFormat();
		        width += group.getWidth();
		      }
		
		      state.left_shift += width;
		      return true;
		    }
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'notesubgroup';
		    }
		  }]);
		
		  function NoteSubGroup(subNotes) {
		    var _ret;
		
		    _classCallCheck(this, NoteSubGroup);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(NoteSubGroup).call(this));
		
		    _this.setAttribute('type', 'NoteSubGroup');
		
		    _this.note = null;
		    _this.index = null;
		    _this.position = _modifier.Modifier.Position.LEFT;
		    _this.subNotes = subNotes;
		    _this.subNotes.forEach(function (subNote) {
		      subNote.ignore_ticks = false;
		    });
		    _this.width = 0;
		    _this.preFormatted = false;
		
		    _this.formatter = new _formatter.Formatter();
		    _this.voice = new _voice.Voice({
		      num_beats: 4,
		      beat_value: 4,
		      resolution: _tables.Flow.RESOLUTION
		    }).setStrict(false);
		
		    _this.voice.addTickables(_this.subNotes);
		
		    return _ret = _this, _possibleConstructorReturn(_this, _ret);
		  }
		
		  _createClass(NoteSubGroup, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return NoteSubGroup.CATEGORY;
		    }
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      if (this.preFormatted) return;
		
		      this.formatter.joinVoices([this.voice]).format([this.voice], 0);
		      this.setWidth(this.formatter.getMinTotalWidth());
		      this.preFormatted = true;
		    }
		  }, {
		    key: 'setNote',
		    value: function setNote(note) {
		      this.note = note;
		    }
		  }, {
		    key: 'setWidth',
		    value: function setWidth(width) {
		      this.width = width;
		    }
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      return this.width;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var _this2 = this;
		
		      this.checkContext();
		
		      var note = this.getNote();
		
		      if (!(note && this.index !== null)) {
		        throw new _vex.Vex.RuntimeError('NoAttachedNote', "Can't draw notes without a parent note and parent note index.");
		      }
		
		      this.setRendered();
		      var alignSubNotesWithNote = function alignSubNotesWithNote(subNotes, note) {
		        // Shift over the tick contexts of each note
		        var tickContext = note.getTickContext();
		        var extraPx = tickContext.getExtraPx();
		        var x = tickContext.getX() - extraPx.left - extraPx.extraLeft + _this2.getSpacingFromNextModifier();
		
		        subNotes.forEach(function (subNote) {
		          var tick_context = subNote.getTickContext();
		          var x_offset = tick_context.getX();
		          subNote.setStave(note.stave);
		          tick_context.setX(x + x_offset);
		        });
		      };
		
		      alignSubNotesWithNote(this.subNotes, note, this.width);
		
		      // Draw notes
		      this.subNotes.forEach(function (subNote) {
		        return subNote.setContext(_this2.context).draw();
		      });
		    }
		  }]);

		  return NoteSubGroup;
		}(_modifier.Modifier);

	/***/ },
	/* 32 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.GraceNoteGroup = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _modifier = __webpack_require__(25);
		
		var _formatter = __webpack_require__(14);
		
		var _voice = __webpack_require__(18);
		
		var _beam = __webpack_require__(15);
		
		var _stavetie = __webpack_require__(33);
		
		var _tabtie = __webpack_require__(34);
		
		var _stavenote = __webpack_require__(20);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This file implements `GraceNoteGroup` which is used to format and
		// render grace notes.
		
		// To enable logging for this class. Set `Vex.Flow.GraceNoteGroup.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (GraceNoteGroup.DEBUG) _vex.Vex.L('Vex.Flow.GraceNoteGroup', args);
		}
		
		var GraceNoteGroup = exports.GraceNoteGroup = function (_Modifier) {
		  _inherits(GraceNoteGroup, _Modifier);
		
		  _createClass(GraceNoteGroup, null, [{
		    key: 'format',
		
		
		    // Arrange groups inside a `ModifierContext`
		    value: function format(gracenote_groups, state) {
		      var group_spacing_stave = 4;
		      var group_spacing_tab = 0;
		
		      if (!gracenote_groups || gracenote_groups.length === 0) return false;
		
		      var group_list = [];
		      var prev_note = null;
		      var shiftL = 0;
		
		      for (var i = 0; i < gracenote_groups.length; ++i) {
		        var gracenote_group = gracenote_groups[i];
		        var note = gracenote_group.getNote();
		        var is_stavenote = note.getCategory() === _stavenote.StaveNote.CATEGORY;
		        var spacing = is_stavenote ? group_spacing_stave : group_spacing_tab;
		
		        if (is_stavenote && note !== prev_note) {
		          // Iterate through all notes to get the displaced pixels
		          for (var n = 0; n < note.keys.length; ++n) {
		            var props_tmp = note.getKeyProps()[n];
		            shiftL = props_tmp.displaced ? note.getExtraLeftPx() : shiftL;
		          }
		          prev_note = note;
		        }
		
		        group_list.push({ shift: shiftL, gracenote_group: gracenote_group, spacing: spacing });
		      }
		
		      // If first note left shift in case it is displaced
		      var group_shift = group_list[0].shift;
		      var formatWidth = void 0;
		      for (var _i = 0; _i < group_list.length; ++_i) {
		        var _gracenote_group = group_list[_i].gracenote_group;
		        _gracenote_group.preFormat();
		        formatWidth = _gracenote_group.getWidth() + group_list[_i].spacing;
		        group_shift = Math.max(formatWidth, group_shift);
		      }
		
		      for (var _i2 = 0; _i2 < group_list.length; ++_i2) {
		        var _gracenote_group2 = group_list[_i2].gracenote_group;
		        formatWidth = _gracenote_group2.getWidth() + group_list[_i2].spacing;
		        _gracenote_group2.setSpacingFromNextModifier(group_shift - Math.min(formatWidth, group_shift));
		      }
		
		      state.left_shift += group_shift;
		      return true;
		    }
		
		    // ## Prototype Methods
		    //
		    // `GraceNoteGroup` inherits from `Modifier` and is placed inside a
		    // `ModifierContext`.
		
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'gracenotegroups';
		    }
		  }]);
		
		  function GraceNoteGroup(grace_notes, show_slur) {
		    var _ret;
		
		    _classCallCheck(this, GraceNoteGroup);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(GraceNoteGroup).call(this));
		
		    _this.setAttribute('type', 'GraceNoteGroup');
		
		    _this.note = null;
		    _this.index = null;
		    _this.position = _modifier.Modifier.Position.LEFT;
		    _this.grace_notes = grace_notes;
		    _this.width = 0;
		
		    _this.preFormatted = false;
		
		    _this.show_slur = show_slur;
		    _this.slur = null;
		
		    _this.formatter = new _formatter.Formatter();
		    _this.voice = new _voice.Voice({
		      num_beats: 4,
		      beat_value: 4,
		      resolution: _tables.Flow.RESOLUTION
		    }).setStrict(false);
		
		    _this.render_options = {
		      slur_y_shift: 0
		    };
		
		    _this.voice.addTickables(_this.grace_notes);
		
		    return _ret = _this, _possibleConstructorReturn(_this, _ret);
		  }
		
		  _createClass(GraceNoteGroup, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return GraceNoteGroup.CATEGORY;
		    }
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      if (this.preFormatted) return;
		
		      this.formatter.joinVoices([this.voice]).format([this.voice], 0);
		      this.setWidth(this.formatter.getMinTotalWidth());
		      this.preFormatted = true;
		    }
		  }, {
		    key: 'beamNotes',
		    value: function beamNotes() {
		      if (this.grace_notes.length > 1) {
		        var beam = new _beam.Beam(this.grace_notes);
		
		        beam.render_options.beam_width = 3;
		        beam.render_options.partial_beam_length = 4;
		
		        this.beam = beam;
		      }
		
		      return this;
		    }
		  }, {
		    key: 'setNote',
		    value: function setNote(note) {
		      this.note = note;
		    }
		  }, {
		    key: 'setWidth',
		    value: function setWidth(width) {
		      this.width = width;
		    }
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      return this.width;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var _this2 = this;
		
		      this.checkContext();
		
		      var note = this.getNote();
		
		      L('Drawing grace note group for:', note);
		
		      if (!(note && this.index !== null)) {
		        throw new _vex.Vex.RuntimeError('NoAttachedNote', "Can't draw grace note without a parent note and parent note index.");
		      }
		
		      this.setRendered();
		      var that = this;
		      function alignGraceNotesWithNote(grace_notes, note) {
		        // Shift over the tick contexts of each note
		        // So that th aligned with the note
		        var tickContext = note.getTickContext();
		        var extraPx = tickContext.getExtraPx();
		        var x = tickContext.getX() - extraPx.left - extraPx.extraLeft + that.getSpacingFromNextModifier();
		
		        grace_notes.forEach(function (graceNote) {
		          var tick_context = graceNote.getTickContext();
		          var x_offset = tick_context.getX();
		          graceNote.setStave(note.stave);
		          tick_context.setX(x + x_offset);
		        });
		      }
		
		      alignGraceNotesWithNote(this.grace_notes, note, this.width);
		
		      // Draw notes
		      this.grace_notes.forEach(function (graceNote) {
		        graceNote.setContext(_this2.context).draw();
		      });
		
		      // Draw beam
		      if (this.beam) {
		        this.beam.setContext(this.context).draw();
		      }
		
		      if (this.show_slur) {
		        // Create and draw slur
		        var is_stavenote = this.getNote().getCategory() === _stavenote.StaveNote.CATEGORY;
		        var TieClass = is_stavenote ? _stavetie.StaveTie : _tabtie.TabTie;
		
		        this.slur = new TieClass({
		          last_note: this.grace_notes[0],
		          first_note: note,
		          first_indices: [0],
		          last_indices: [0]
		        });
		
		        this.slur.render_options.cp2 = 12;
		        this.slur.render_options.y_shift = (is_stavenote ? 7 : 5) + this.render_options.slur_y_shift;
		        this.slur.setContext(this.context).draw();
		      }
		    }
		  }]);

		  return GraceNoteGroup;
		}(_modifier.Modifier);

	/***/ },
	/* 33 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.StaveTie = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// This class implements varies types of ties between contiguous notes. The
		// ties include: regular ties, hammer ons, pull offs, and slides.
		
		var StaveTie = exports.StaveTie = function (_Element) {
		  _inherits(StaveTie, _Element);
		
		  function StaveTie(notes, text) {
		    _classCallCheck(this, StaveTie);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StaveTie).call(this));
		    /**
		     * Notes is a struct that has:
		     *
		     *  {
		     *    first_note: Note,
		     *    last_note: Note,
		     *    first_indices: [n1, n2, n3],
		     *    last_indices: [n1, n2, n3]
		     *  }
		     *
		     **/
		
		
		    _this.setAttribute('type', 'StaveTie');
		    _this.notes = notes;
		    _this.context = null;
		    _this.text = text;
		    _this.direction = null;
		
		    _this.render_options = {
		      cp1: 8, // Curve control point 1
		      cp2: 12, // Curve control point 2
		      text_shift_x: 0,
		      first_x_shift: 0,
		      last_x_shift: 0,
		      y_shift: 7,
		      tie_spacing: 0,
		      font: { family: 'Arial', size: 10, style: '' }
		    };
		
		    _this.font = _this.render_options.font;
		    _this.setNotes(notes);
		    return _this;
		  }
		
		  _createClass(StaveTie, [{
		    key: 'setFont',
		    value: function setFont(font) {
		      this.font = font;return this;
		    }
		  }, {
		    key: 'setDirection',
		    value: function setDirection(direction) {
		      this.direction = direction;return this;
		    }
		
		    /**
		     * Set the notes to attach this tie to.
		     *
		     * @param {!Object} notes The notes to tie up.
		     */
		
		  }, {
		    key: 'setNotes',
		    value: function setNotes(notes) {
		      if (!notes.first_note && !notes.last_note) {
		        throw new _vex.Vex.RuntimeError('BadArguments', 'Tie needs to have either first_note or last_note set.');
		      }
		
		      if (!notes.first_indices) notes.first_indices = [0];
		      if (!notes.last_indices) notes.last_indices = [0];
		
		      if (notes.first_indices.length !== notes.last_indices.length) {
		        throw new _vex.Vex.RuntimeError('BadArguments', 'Tied notes must have similar index sizes');
		      }
		
		      // Success. Lets grab 'em notes.
		      this.first_note = notes.first_note;
		      this.first_indices = notes.first_indices;
		      this.last_note = notes.last_note;
		      this.last_indices = notes.last_indices;
		      return this;
		    }
		
		    /**
		     * @return {boolean} Returns true if this is a partial bar.
		     */
		
		  }, {
		    key: 'isPartial',
		    value: function isPartial() {
		      return !this.first_note || !this.last_note;
		    }
		  }, {
		    key: 'renderTie',
		    value: function renderTie(params) {
		      if (params.first_ys.length === 0 || params.last_ys.length === 0) {
		        throw new _vex.Vex.RERR('BadArguments', 'No Y-values to render');
		      }
		
		      var ctx = this.context;
		      var cp1 = this.render_options.cp1;
		      var cp2 = this.render_options.cp2;
		
		      if (Math.abs(params.last_x_px - params.first_x_px) < 10) {
		        cp1 = 2;cp2 = 8;
		      }
		
		      var first_x_shift = this.render_options.first_x_shift;
		      var last_x_shift = this.render_options.last_x_shift;
		      var y_shift = this.render_options.y_shift * params.direction;
		
		      for (var i = 0; i < this.first_indices.length; ++i) {
		        var cp_x = (params.last_x_px + last_x_shift + (params.first_x_px + first_x_shift)) / 2;
		        var first_y_px = params.first_ys[this.first_indices[i]] + y_shift;
		        var last_y_px = params.last_ys[this.last_indices[i]] + y_shift;
		
		        if (isNaN(first_y_px) || isNaN(last_y_px)) {
		          throw new _vex.Vex.RERR('BadArguments', 'Bad indices for tie rendering.');
		        }
		
		        var top_cp_y = (first_y_px + last_y_px) / 2 + cp1 * params.direction;
		        var bottom_cp_y = (first_y_px + last_y_px) / 2 + cp2 * params.direction;
		
		        ctx.beginPath();
		        ctx.moveTo(params.first_x_px + first_x_shift, first_y_px);
		        ctx.quadraticCurveTo(cp_x, top_cp_y, params.last_x_px + last_x_shift, last_y_px);
		        ctx.quadraticCurveTo(cp_x, bottom_cp_y, params.first_x_px + first_x_shift, first_y_px);
		        ctx.closePath();
		        ctx.fill();
		      }
		    }
		  }, {
		    key: 'renderText',
		    value: function renderText(first_x_px, last_x_px) {
		      if (!this.text) return;
		      var center_x = (first_x_px + last_x_px) / 2;
		      center_x -= this.context.measureText(this.text).width / 2;
		
		      this.context.save();
		      this.context.setFont(this.font.family, this.font.size, this.font.style);
		      this.context.fillText(this.text, center_x + this.render_options.text_shift_x, (this.first_note || this.last_note).getStave().getYForTopText() - 1);
		      this.context.restore();
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      this.setRendered();
		
		      var first_note = this.first_note;
		      var last_note = this.last_note;
		
		      var first_x_px = void 0;
		      var last_x_px = void 0;
		      var first_ys = void 0;
		      var last_ys = void 0;
		      var stem_direction = void 0;
		      if (first_note) {
		        first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;
		        stem_direction = first_note.getStemDirection();
		        first_ys = first_note.getYs();
		      } else {
		        first_x_px = last_note.getStave().getTieStartX();
		        first_ys = last_note.getYs();
		        this.first_indices = this.last_indices;
		      }
		
		      if (last_note) {
		        last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;
		        stem_direction = last_note.getStemDirection();
		        last_ys = last_note.getYs();
		      } else {
		        last_x_px = first_note.getStave().getTieEndX();
		        last_ys = first_note.getYs();
		        this.last_indices = this.first_indices;
		      }
		
		      if (this.direction) {
		        stem_direction = this.direction;
		      }
		
		      this.renderTie({
		        first_x_px: first_x_px,
		        last_x_px: last_x_px,
		        first_ys: first_ys,
		        last_ys: last_ys,
		        direction: stem_direction
		      });
		
		      this.renderText(first_x_px, last_x_px);
		      return true;
		    }
		  }]);

		  return StaveTie;
		}(_element.Element);

	/***/ },
	/* 34 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.TabTie = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _stavetie = __webpack_require__(33);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // / [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// This class implements varies types of ties between contiguous notes. The
		// ties include: regular ties, hammer ons, pull offs, and slides.
		
		var TabTie = exports.TabTie = function (_StaveTie) {
		  _inherits(TabTie, _StaveTie);
		
		  _createClass(TabTie, null, [{
		    key: 'createHammeron',
		    value: function createHammeron(notes) {
		      return new TabTie(notes, 'H');
		    }
		  }, {
		    key: 'createPulloff',
		    value: function createPulloff(notes) {
		      return new TabTie(notes, 'P');
		    }
		  }]);
		
		  function TabTie(notes, text) {
		    _classCallCheck(this, TabTie);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TabTie).call(this, notes, text));
		    /**
		     * Notes is a struct that has:
		     *
		     *  {
		     *    first_note: Note,
		     *    last_note: Note,
		     *    first_indices: [n1, n2, n3],
		     *    last_indices: [n1, n2, n3]
		     *  }
		     *
		     **/
		
		
		    _this.setAttribute('type', 'TabTie');
		
		    _this.render_options.cp1 = 9;
		    _this.render_options.cp2 = 11;
		    _this.render_options.y_shift = 3;
		
		    _this.setNotes(notes);
		    return _this;
		  }
		
		  _createClass(TabTie, [{
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      this.setRendered();
		
		      var first_note = this.first_note;
		      var last_note = this.last_note;
		      var first_x_px = void 0;
		      var last_x_px = void 0;
		      var first_ys = void 0;
		      var last_ys = void 0;
		
		      if (first_note) {
		        first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;
		        first_ys = first_note.getYs();
		      } else {
		        first_x_px = last_note.getStave().getTieStartX();
		        first_ys = last_note.getYs();
		        this.first_indices = this.last_indices;
		      }
		
		      if (last_note) {
		        last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;
		        last_ys = last_note.getYs();
		      } else {
		        last_x_px = first_note.getStave().getTieEndX();
		        last_ys = first_note.getYs();
		        this.last_indices = this.first_indices;
		      }
		
		      this.renderTie({
		        first_x_px: first_x_px,
		        last_x_px: last_x_px,
		        first_ys: first_ys,
		        last_ys: last_ys,
		        direction: -1 });
		
		      this.renderText(first_x_px, last_x_px);
		      return true;
		    }
		  }]);

		  return TabTie;
		}(_stavetie.StaveTie);

	/***/ },
	/* 35 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Stroke = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _modifier = __webpack_require__(25);
		
		var _stavenote = __webpack_require__(20);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author: Larry Kuhns
		//
		// ## Description
		// This file implements the `Stroke` class which renders chord strokes
		// that can be arpeggiated, brushed, rasquedo, etc.
		
		var Stroke = exports.Stroke = function (_Modifier) {
		  _inherits(Stroke, _Modifier);
		
		  _createClass(Stroke, null, [{
		    key: 'format',
		
		
		    // Arrange strokes inside `ModifierContext`
		    value: function format(strokes, state) {
		      var left_shift = state.left_shift;
		      var stroke_spacing = 0;
		
		      if (!strokes || strokes.length === 0) return this;
		
		      var strokeList = strokes.map(function (stroke) {
		        var note = stroke.getNote();
		        if (note instanceof _stavenote.StaveNote) {
		          var _note$getKeyProps$str = note.getKeyProps()[stroke.getIndex()];
		          var line = _note$getKeyProps$str.line;
		          var displaced = _note$getKeyProps$str.displaced;
		
		          var shift = displaced ? note.getExtraLeftPx() : 0;
		          return { line: line, shift: shift, stroke: stroke };
		        } else {
		          var string = note.getPositions()[stroke.getIndex()].str;
		
		          return { line: string, shift: 0, stroke: stroke };
		        }
		      });
		
		      var strokeShift = left_shift;
		
		      // There can only be one stroke .. if more than one, they overlay each other
		      var xShift = strokeList.reduce(function (xShift, _ref) {
		        var stroke = _ref.stroke;
		        var shift = _ref.shift;
		
		        stroke.setXShift(strokeShift + shift);
		        return Math.max(stroke.getWidth() + stroke_spacing, xShift);
		      }, 0);
		
		      state.left_shift += xShift;
		      return true;
		    }
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'strokes';
		    }
		  }, {
		    key: 'Type',
		    get: function get() {
		      return {
		        BRUSH_DOWN: 1,
		        BRUSH_UP: 2,
		        ROLL_DOWN: 3, // Arpegiated chord
		        ROLL_UP: 4, // Arpegiated chord
		        RASQUEDO_DOWN: 5,
		        RASQUEDO_UP: 6
		      };
		    }
		  }]);
		
		  function Stroke(type, options) {
		    _classCallCheck(this, Stroke);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Stroke).call(this));
		
		    _this.setAttribute('type', 'Stroke');
		
		    _this.note = null;
		    _this.options = _vex.Vex.Merge({}, options);
		
		    // multi voice - span stroke across all voices if true
		    _this.all_voices = 'all_voices' in _this.options ? _this.options.all_voices : true;
		
		    // multi voice - end note of stroke, set in draw()
		    _this.note_end = null;
		    _this.index = null;
		    _this.type = type;
		    _this.position = _modifier.Modifier.Position.LEFT;
		
		    _this.render_options = {
		      font_scale: 38,
		      stroke_px: 3,
		      stroke_spacing: 10
		    };
		
		    _this.font = {
		      family: 'serif',
		      size: 10,
		      weight: 'bold italic'
		    };
		
		    _this.setXShift(0);
		    _this.setWidth(10);
		    return _this;
		  }
		
		  _createClass(Stroke, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Stroke.CATEGORY;
		    }
		  }, {
		    key: 'getPosition',
		    value: function getPosition() {
		      return this.position;
		    }
		  }, {
		    key: 'addEndNote',
		    value: function addEndNote(note) {
		      this.note_end = note;return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      this.setRendered();
		
		      if (!(this.note && this.index != null)) {
		        throw new _vex.Vex.RERR('NoAttachedNote', "Can't draw stroke without a note and index.");
		      }
		
		      var start = this.note.getModifierStartXY(this.position, this.index);
		      var ys = this.note.getYs();
		      var topY = start.y;
		      var botY = start.y;
		      var x = start.x - 5;
		      var line_space = this.note.stave.options.spacing_between_lines_px;
		
		      var notes = this.getModifierContext().getModifiers(this.note.getCategory());
		      for (var i = 0; i < notes.length; i++) {
		        ys = notes[i].getYs();
		        for (var n = 0; n < ys.length; n++) {
		          if (this.note === notes[i] || this.all_voices) {
		            topY = _vex.Vex.Min(topY, ys[n]);
		            botY = _vex.Vex.Max(botY, ys[n]);
		          }
		        }
		      }
		
		      var arrow = void 0;
		      var arrow_shift_x = void 0;
		      var arrow_y = void 0;
		      var text_shift_x = void 0;
		      var text_y = void 0;
		      switch (this.type) {
		        case Stroke.Type.BRUSH_DOWN:
		          arrow = 'vc3';
		          arrow_shift_x = -3;
		          arrow_y = topY - line_space / 2 + 10;
		          botY += line_space / 2;
		          break;
		        case Stroke.Type.BRUSH_UP:
		          arrow = 'v11';
		          arrow_shift_x = 0.5;
		          arrow_y = botY + line_space / 2;
		          topY -= line_space / 2;
		          break;
		        case Stroke.Type.ROLL_DOWN:
		        case Stroke.Type.RASQUEDO_DOWN:
		          arrow = 'vc3';
		          arrow_shift_x = -3;
		          text_shift_x = this.x_shift + arrow_shift_x - 2;
		          if (this.note instanceof _stavenote.StaveNote) {
		            topY += 1.5 * line_space;
		            if ((botY - topY) % 2 !== 0) {
		              botY += 0.5 * line_space;
		            } else {
		              botY += line_space;
		            }
		            arrow_y = topY - line_space;
		            text_y = botY + line_space + 2;
		          } else {
		            topY += 1.5 * line_space;
		            botY += line_space;
		            arrow_y = topY - 0.75 * line_space;
		            text_y = botY + 0.25 * line_space;
		          }
		          break;
		        case Stroke.Type.ROLL_UP:
		        case Stroke.Type.RASQUEDO_UP:
		          arrow = 'v52';
		          arrow_shift_x = -4;
		          text_shift_x = this.x_shift + arrow_shift_x - 1;
		          if (this.note instanceof _stavenote.StaveNote) {
		            arrow_y = line_space / 2;
		            topY += 0.5 * line_space;
		            if ((botY - topY) % 2 === 0) {
		              botY += line_space / 2;
		            }
		            arrow_y = botY + 0.5 * line_space;
		            text_y = topY - 1.25 * line_space;
		          } else {
		            topY += 0.25 * line_space;
		            botY += 0.5 * line_space;
		            arrow_y = botY + 0.25 * line_space;
		            text_y = topY - line_space;
		          }
		          break;
		        default:
		          throw new _vex.Vex.RERR('InvalidType', 'The stroke type ' + this.type + ' does not exist');
		      }
		
		      // Draw the stroke
		      if (this.type === Stroke.Type.BRUSH_DOWN || this.type === Stroke.Type.BRUSH_UP) {
		        this.context.fillRect(x + this.x_shift, topY, 1, botY - topY);
		      } else {
		        if (this.note instanceof _stavenote.StaveNote) {
		          for (var _i = topY; _i <= botY; _i += line_space) {
		            _glyph.Glyph.renderGlyph(this.context, x + this.x_shift - 4, _i, this.render_options.font_scale, 'va3');
		          }
		        } else {
		          var _i2 = void 0;
		          for (_i2 = topY; _i2 <= botY; _i2 += 10) {
		            _glyph.Glyph.renderGlyph(this.context, x + this.x_shift - 4, _i2, this.render_options.font_scale, 'va3');
		          }
		          if (this.type === Stroke.Type.RASQUEDO_DOWN) {
		            text_y = _i2 + 0.25 * line_space;
		          }
		        }
		      }
		
		      // Draw the arrow head
		      _glyph.Glyph.renderGlyph(this.context, x + this.x_shift + arrow_shift_x, arrow_y, this.render_options.font_scale, arrow);
		
		      // Draw the rasquedo "R"
		      if (this.type === Stroke.Type.RASQUEDO_DOWN || this.type === Stroke.Type.RASQUEDO_UP) {
		        this.context.save();
		        this.context.setFont(this.font.family, this.font.size, this.font.weight);
		        this.context.fillText('R', x + text_shift_x, text_y);
		        this.context.restore();
		      }
		    }
		  }]);

		  return Stroke;
		}(_modifier.Modifier);

	/***/ },
	/* 36 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.StringNumber = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _modifier = __webpack_require__(25);
		
		var _renderer = __webpack_require__(10);
		
		var _stavenote = __webpack_require__(20);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author: Larry Kuhns
		//
		// ## Description
		// This file implements the `StringNumber` class which renders string
		// number annotations beside notes.
		
		var StringNumber = exports.StringNumber = function (_Modifier) {
		  _inherits(StringNumber, _Modifier);
		
		  _createClass(StringNumber, null, [{
		    key: 'format',
		
		
		    // ## Static Methods
		    // Arrange string numbers inside a `ModifierContext`
		    value: function format(nums, state) {
		      var left_shift = state.left_shift;
		      var right_shift = state.right_shift;
		      var num_spacing = 1;
		
		      if (!nums || nums.length === 0) return this;
		
		      var nums_list = [];
		      var prev_note = null;
		      var shift_left = 0;
		      var shift_right = 0;
		
		      var i = void 0;
		      var num = void 0;
		      var note = void 0;
		      var pos = void 0;
		      var props_tmp = void 0;
		      for (i = 0; i < nums.length; ++i) {
		        num = nums[i];
		        note = num.getNote();
		
		        for (i = 0; i < nums.length; ++i) {
		          num = nums[i];
		          note = num.getNote();
		          pos = num.getPosition();
		          var props = note.getKeyProps()[num.getIndex()];
		
		          if (note !== prev_note) {
		            for (var n = 0; n < note.keys.length; ++n) {
		              props_tmp = note.getKeyProps()[n];
		              if (left_shift === 0) {
		                shift_left = props_tmp.displaced ? note.getExtraLeftPx() : shift_left;
		              }
		              if (right_shift === 0) {
		                shift_right = props_tmp.displaced ? note.getExtraRightPx() : shift_right;
		              }
		            }
		            prev_note = note;
		          }
		
		          nums_list.push({
		            pos: pos,
		            note: note,
		            num: num,
		            line: props.line,
		            shiftL: shift_left,
		            shiftR: shift_right
		          });
		        }
		      }
		
		      // Sort string numbers by line number.
		      nums_list.sort(function (a, b) {
		        return b.line - a.line;
		      });
		
		      // TODO: This variable never gets assigned to anything. Is that a bug or can this be removed?
		      var num_shiftL = 0; // eslint-disable-line
		      var num_shiftR = 0;
		      var x_widthL = 0;
		      var x_widthR = 0;
		      var last_line = null;
		      var last_note = null;
		      for (i = 0; i < nums_list.length; ++i) {
		        var num_shift = 0;
		        note = nums_list[i].note;
		        pos = nums_list[i].pos;
		        num = nums_list[i].num;
		        var line = nums_list[i].line;
		        var shiftL = nums_list[i].shiftL;
		        var shiftR = nums_list[i].shiftR;
		
		        // Reset the position of the string number every line.
		        if (line !== last_line || note !== last_note) {
		          num_shiftL = left_shift + shiftL;
		          num_shiftR = right_shift + shiftR;
		        }
		
		        var num_width = num.getWidth() + num_spacing;
		        if (pos === _modifier.Modifier.Position.LEFT) {
		          num.setXShift(left_shift);
		          num_shift = shift_left + num_width; // spacing
		          x_widthL = num_shift > x_widthL ? num_shift : x_widthL;
		        } else if (pos === _modifier.Modifier.Position.RIGHT) {
		          num.setXShift(num_shiftR);
		          num_shift += num_width; // spacing
		          x_widthR = num_shift > x_widthR ? num_shift : x_widthR;
		        }
		        last_line = line;
		        last_note = note;
		      }
		
		      state.left_shift += x_widthL;
		      state.right_shift += x_widthR;
		      return true;
		    }
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'stringnumber';
		    }
		  }]);
		
		  function StringNumber(number) {
		    _classCallCheck(this, StringNumber);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StringNumber).call(this));
		
		    _this.setAttribute('type', 'StringNumber');
		
		    _this.note = null;
		    _this.last_note = null;
		    _this.index = null;
		    _this.string_number = number;
		    _this.setWidth(20); // ???
		    _this.position = _modifier.Modifier.Position.ABOVE; // Default position above stem or note head
		    _this.x_shift = 0;
		    _this.y_shift = 0;
		    _this.x_offset = 0; // Horizontal offset from default
		    _this.y_offset = 0; // Vertical offset from default
		    _this.dashed = true; // true - draw dashed extension  false - no extension
		    _this.leg = _renderer.Renderer.LineEndType.NONE; // draw upward/downward leg at the of extension line
		    _this.radius = 8;
		    _this.font = {
		      family: 'sans-serif',
		      size: 10,
		      weight: 'bold'
		    };
		    return _this;
		  }
		
		  _createClass(StringNumber, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return StringNumber.CATEGORY;
		    }
		  }, {
		    key: 'getNote',
		    value: function getNote() {
		      return this.note;
		    }
		  }, {
		    key: 'setNote',
		    value: function setNote(note) {
		      this.note = note;return this;
		    }
		  }, {
		    key: 'getIndex',
		    value: function getIndex() {
		      return this.index;
		    }
		  }, {
		    key: 'setIndex',
		    value: function setIndex(index) {
		      this.index = index;return this;
		    }
		  }, {
		    key: 'setLineEndType',
		    value: function setLineEndType(leg) {
		      if (leg >= _renderer.Renderer.LineEndType.NONE && leg <= _renderer.Renderer.LineEndType.DOWN) {
		        this.leg = leg;
		      }
		      return this;
		    }
		  }, {
		    key: 'getPosition',
		    value: function getPosition() {
		      return this.position;
		    }
		  }, {
		    key: 'setPosition',
		    value: function setPosition(position) {
		      if (position >= _modifier.Modifier.Position.LEFT && position <= _modifier.Modifier.Position.BELOW) {
		        this.position = position;
		      }
		      return this;
		    }
		  }, {
		    key: 'setStringNumber',
		    value: function setStringNumber(number) {
		      this.string_number = number;return this;
		    }
		  }, {
		    key: 'setOffsetX',
		    value: function setOffsetX(x) {
		      this.x_offset = x;return this;
		    }
		  }, {
		    key: 'setOffsetY',
		    value: function setOffsetY(y) {
		      this.y_offset = y;return this;
		    }
		  }, {
		    key: 'setLastNote',
		    value: function setLastNote(note) {
		      this.last_note = note;return this;
		    }
		  }, {
		    key: 'setDashed',
		    value: function setDashed(dashed) {
		      this.dashed = dashed;return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var ctx = this.checkContext();
		      if (!(this.note && this.index != null)) {
		        throw new _vex.Vex.RERR('NoAttachedNote', "Can't draw string number without a note and index.");
		      }
		      this.setRendered();
		
		      var line_space = this.note.stave.options.spacing_between_lines_px;
		
		      var start = this.note.getModifierStartXY(this.position, this.index);
		      var dot_x = start.x + this.x_shift + this.x_offset;
		      var dot_y = start.y + this.y_shift + this.y_offset;
		
		      switch (this.position) {
		        case _modifier.Modifier.Position.ABOVE:
		        case _modifier.Modifier.Position.BELOW:
		          {
		            var stem_ext = this.note.getStemExtents();
		            var top = stem_ext.topY;
		            var bottom = stem_ext.baseY + 2;
		
		            if (this.note.stem_direction === _stavenote.StaveNote.STEM_DOWN) {
		              top = stem_ext.baseY;
		              bottom = stem_ext.topY - 2;
		            }
		
		            if (this.position === _modifier.Modifier.Position.ABOVE) {
		              dot_y = this.note.hasStem() ? top - line_space * 1.75 : start.y - line_space * 1.75;
		            } else {
		              dot_y = this.note.hasStem() ? bottom + line_space * 1.5 : start.y + line_space * 1.75;
		            }
		
		            dot_y += this.y_shift + this.y_offset;
		
		            break;
		          }case _modifier.Modifier.Position.LEFT:
		          dot_x -= this.radius / 2 + 5;
		          break;
		        case _modifier.Modifier.Position.RIGHT:
		          dot_x += this.radius / 2 + 6;
		          break;
		        default:
		          throw new _vex.Vex.RERR('InvalidPosition', 'The position ' + this.position + ' is invalid');
		      }
		
		      ctx.save();
		      ctx.beginPath();
		      ctx.arc(dot_x, dot_y, this.radius, 0, Math.PI * 2, false);
		      ctx.lineWidth = 1.5;
		      ctx.stroke();
		      ctx.setFont(this.font.family, this.font.size, this.font.weight);
		      var x = dot_x - ctx.measureText(this.string_number).width / 2;
		      ctx.fillText('' + this.string_number, x, dot_y + 4.5);
		
		      if (this.last_note != null) {
		        var end = this.last_note.getStemX() - this.note.getX() + 5;
		        ctx.strokeStyle = '#000000';
		        ctx.lineCap = 'round';
		        ctx.lineWidth = 0.6;
		        if (this.dashed) {
		          _renderer.Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 3]);
		        } else {
		          _renderer.Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 0]);
		        }
		
		        var len = void 0;
		        var pattern = void 0;
		        switch (this.leg) {
		          case _renderer.Renderer.LineEndType.UP:
		            len = -10;
		            pattern = this.dashed ? [3, 3] : [3, 0];
		            _renderer.Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);
		            break;
		          case _renderer.Renderer.LineEndType.DOWN:
		            len = 10;
		            pattern = this.dashed ? [3, 3] : [3, 0];
		            _renderer.Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);
		            break;
		          default:
		            break;
		        }
		      }
		
		      ctx.restore();
		    }
		  }]);

		  return StringNumber;
		}(_modifier.Modifier);

	/***/ },
	/* 37 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Articulation = undefined;
		
		var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _modifier = __webpack_require__(25);
		
		var _glyph = __webpack_require__(4);
		
		var _stem = __webpack_require__(17);
		
		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
		
		function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author: Larry Kuhns.
		//
		// ## Description
		//
		// This file implements articulations and accents as modifiers that can be
		// attached to notes. The complete list of articulations is available in
		// `tables.js` under `Vex.Flow.articulationCodes`.
		//
		// See `tests/articulation_tests.js` for usage examples.
		
		// To enable logging for this class. Set `Vex.Flow.Articulation.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (Articulation.DEBUG) _vex.Vex.L('Vex.Flow.Articulation', args);
		}
		
		var _Modifier$Position = _modifier.Modifier.Position;
		var ABOVE = _Modifier$Position.ABOVE;
		var BELOW = _Modifier$Position.BELOW;
		
		
		var roundToNearestHalf = function roundToNearestHalf(mathFn, value) {
		  return mathFn(value / 0.5) * 0.5;
		};
		
		// This includes both staff and ledger lines
		var isWithinLines = function isWithinLines(line, position) {
		  return position === ABOVE ? line <= 5 : line >= 1;
		};
		
		var getRoundingFunction = function getRoundingFunction(line, position) {
		  if (isWithinLines(line, position)) {
		    if (position === ABOVE) {
		      return Math.ceil;
		    } else {
		      return Math.floor;
		    }
		  } else {
		    return Math.round;
		  }
		};
		
		var snapLineToStaff = function snapLineToStaff(canSitBetweenLines, line, position, offsetDirection) {
		  // Initially, snap to nearest staff line or space
		  var snappedLine = roundToNearestHalf(getRoundingFunction(line, position), line);
		  var canSnapToStaffSpace = canSitBetweenLines && isWithinLines(snappedLine, position);
		  var onStaffLine = snappedLine % 1 === 0;
		
		  if (canSnapToStaffSpace && onStaffLine) {
		    var HALF_STAFF_SPACE = 0.5;
		    return snappedLine + HALF_STAFF_SPACE * -offsetDirection;
		  } else {
		    return snappedLine;
		  }
		};
		
		var getTopY = function getTopY(note, textLine) {
		  var stave = note.getStave();
		  var stemDirection = note.getStemDirection();
		
		  var _note$getStemExtents = note.getStemExtents();
		
		  var stemTipY = _note$getStemExtents.topY;
		  var stemBaseY = _note$getStemExtents.baseY;
		
		
		  if (note.getCategory() === 'stavenotes') {
		    if (note.hasStem()) {
		      if (stemDirection === _stem.Stem.UP) {
		        return stemTipY;
		      } else {
		        return stemBaseY;
		      }
		    } else {
		      return Math.min.apply(Math, _toConsumableArray(note.getYs()));
		    }
		  } else if (note.getCategory() === 'tabnotes') {
		    if (note.hasStem()) {
		      if (stemDirection === _stem.Stem.UP) {
		        return stemTipY;
		      } else {
		        return stave.getYForTopText(textLine);
		      }
		    } else {
		      return stave.getYForTopText(textLine);
		    }
		  } else {
		    throw new _vex.Vex.RERR('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');
		  }
		};
		
		var getBottomY = function getBottomY(note, textLine) {
		  var stave = note.getStave();
		  var stemDirection = note.getStemDirection();
		
		  var _note$getStemExtents2 = note.getStemExtents();
		
		  var stemTipY = _note$getStemExtents2.topY;
		  var stemBaseY = _note$getStemExtents2.baseY;
		
		
		  if (note.getCategory() === 'stavenotes') {
		    if (note.hasStem()) {
		      if (stemDirection === _stem.Stem.UP) {
		        return stemBaseY;
		      } else {
		        return stemTipY;
		      }
		    } else {
		      return Math.max.apply(Math, _toConsumableArray(note.getYs()));
		    }
		  } else if (note.getCategory() === 'tabnotes') {
		    if (note.hasStem()) {
		      if (stemDirection === _stem.Stem.UP) {
		        return stave.getYForBottomText(textLine);
		      } else {
		        return stemTipY;
		      }
		    } else {
		      return stave.getYForBottomText(textLine);
		    }
		  } else {
		    throw new _vex.Vex.RERR('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');
		  }
		};
		
		// Gets the initial offset of the articulation from the y value of the starting position.
		// This is required because the top/bottom text positions already have spacing applied to
		// provide a "visually pleasent" default position. However the y values provided from
		// the stavenote's top/bottom do *not* have any pre-applied spacing. This function
		// normalizes this asymmetry.
		var getInitialOffset = function getInitialOffset(note, position) {
		  var isOnStemTip = position === ABOVE && note.getStemDirection() === _stem.Stem.UP || position === BELOW && note.getStemDirection() === _stem.Stem.DOWN;
		
		  if (note.getCategory() === 'stavenotes') {
		    if (note.hasStem() && isOnStemTip) {
		      return 0.5;
		    } else {
		      // this amount is larger than the stem-tip offset because we start from
		      // the center of the notehead
		      return 1;
		    }
		  } else {
		    if (note.hasStem() && isOnStemTip) {
		      return 1;
		    } else {
		      return 0;
		    }
		  }
		};
		
		var Articulation = exports.Articulation = function (_Modifier) {
		  _inherits(Articulation, _Modifier);
		
		  _createClass(Articulation, null, [{
		    key: 'format',
		
		
		    // FIXME:
		    // Most of the complex formatting logic (ie: snapping to space) is
		    // actually done in .render(). But that logic belongs in this method.
		    //
		    // Unfortunately, this isn't possible because, by this point, stem lengths
		    // have not yet been finalized. Finalized stem lengths are required to determine the
		    // initial position of any stem-side articulation.
		    //
		    // This indicates that all objects should have their stave set before being
		    // formatted. It can't be an optional if you want accurate vertical positioning.
		    // Consistently positioned articulations that play nice with other modifiers
		    // won't be possible until we stop relying on render-time formatting.
		    //
		    // Ideally, when this function has completed, the vertical articulation positions
		    // should be ready to render without further adjustment. But the current state
		    // is far from this ideal.
		    value: function format(articulations, state) {
		      if (!articulations || articulations.length === 0) return false;
		
		      var isAbove = function isAbove(artic) {
		        return artic.getPosition() === ABOVE;
		      };
		      var isBelow = function isBelow(artic) {
		        return artic.getPosition() === BELOW;
		      };
		      var margin = 0.5;
		      var getIncrement = function getIncrement(articulation, line, position) {
		        return roundToNearestHalf(getRoundingFunction(line, position), articulation.glyph.getMetrics().height / 10 + margin);
		      };
		
		      articulations.filter(isAbove).forEach(function (articulation) {
		        articulation.setTextLine(state.top_text_line);
		        state.top_text_line += getIncrement(articulation, state.top_text_line, ABOVE);
		      });
		
		      articulations.filter(isBelow).forEach(function (articulation) {
		        articulation.setTextLine(state.text_line);
		        state.text_line += getIncrement(articulation, state.text_line, BELOW);
		      });
		
		      var width = articulations.map(function (articulation) {
		        return articulation.getWidth();
		      }).reduce(function (maxWidth, articWidth) {
		        return Math.max(articWidth, maxWidth);
		      });
		
		      state.left_shift += width / 2;
		      state.right_shift += width / 2;
		      return true;
		    }
		  }, {
		    key: 'easyScoreHook',
		    value: function easyScoreHook(_ref, note, builder) {
		      var articulations = _ref.articulations;
		
		      if (!articulations) return;
		
		      var articNameToCode = {
		        staccato: 'a.',
		        tenuto: 'a-'
		      };
		
		      articulations.split(',').map(function (articString) {
		        return articString.trim().split('.');
		      }).map(function (_ref2) {
		        var _ref3 = _slicedToArray(_ref2, 2);
		
		        var name = _ref3[0];
		        var position = _ref3[1];
		
		        var artic = { type: articNameToCode[name] };
		        if (position) artic.position = _modifier.Modifier.PositionString[position];
		        return builder.getFactory().Articulation(artic);
		      }).map(function (artic) {
		        return note.addModifier(0, artic);
		      });
		    }
		
		    // Create a new articulation of type `type`, which is an entry in
		    // `Vex.Flow.articulationCodes` in `tables.js`.
		
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'articulations';
		    }
		  }, {
		    key: 'INITIAL_OFFSET',
		    get: function get() {
		      return -0.5;
		    }
		  }]);
		
		  function Articulation(type) {
		    _classCallCheck(this, Articulation);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Articulation).call(this));
		
		    _this.setAttribute('type', 'Articulation');
		
		    _this.note = null;
		    _this.index = null;
		    _this.type = type;
		    _this.position = BELOW;
		    _this.render_options = {
		      font_scale: 38
		    };
		
		    _this.articulation = _tables.Flow.articulationCodes(_this.type);
		    if (!_this.articulation) {
		      throw new _vex.Vex.RERR('ArgumentError', 'Articulation not found: ' + _this.type);
		    }
		
		    _this.glyph = new _glyph.Glyph(_this.articulation.code, _this.render_options.font_scale);
		
		    _this.setWidth(_this.glyph.getMetrics().width);
		    return _this;
		  }
		
		  _createClass(Articulation, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Articulation.CATEGORY;
		    }
		
		    // Render articulation in position next to note.
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var _ABOVE$BELOW$position;
		
		      var note = this.note;
		      var index = this.index;
		      var position = this.position;
		      var glyph = this.glyph;
		      var canSitBetweenLines = this.articulation.between_lines;
		      var textLine = this.text_line;
		      var ctx = this.context;
		
		
		      this.checkContext();
		
		      if (!note || index == null) {
		        throw new _vex.Vex.RERR('NoAttachedNote', "Can't draw Articulation without a note and index.");
		      }
		
		      this.setRendered();
		
		      var stave = note.getStave();
		      var staffSpace = stave.getSpacingBetweenLines();
		      var isTab = note.getCategory() === 'tabnotes';
		
		      // Articulations are centered over/under the note head.
		
		      var _note$getModifierStar = note.getModifierStartXY(position, index);
		
		      var x = _note$getModifierStar.x;
		
		      var shouldSitOutsideStaff = !canSitBetweenLines || isTab;
		
		      var initialOffset = getInitialOffset(note, position);
		
		      var y = (_ABOVE$BELOW$position = {}, _defineProperty(_ABOVE$BELOW$position, ABOVE, function () {
		        glyph.setOrigin(0.5, 1);
		        var y = getTopY(note, textLine) - (textLine + initialOffset) * staffSpace;
		        return shouldSitOutsideStaff ? Math.min(stave.getYForTopText(Articulation.INITIAL_OFFSET), y) : y;
		      }), _defineProperty(_ABOVE$BELOW$position, BELOW, function () {
		        glyph.setOrigin(0.5, 0);
		        var y = getBottomY(note, textLine) + (textLine + initialOffset) * staffSpace;
		        return shouldSitOutsideStaff ? Math.max(stave.getYForBottomText(Articulation.INITIAL_OFFSET), y) : y;
		      }), _ABOVE$BELOW$position)[position]();
		
		      if (!isTab) {
		        var offsetDirection = position === ABOVE ? -1 : +1;
		        var noteLine = isTab ? note.positions[index].str : note.getKeyProps()[index].line;
		        var distanceFromNote = (note.getYs()[index] - y) / staffSpace;
		        var articLine = distanceFromNote + noteLine;
		        var snappedLine = snapLineToStaff(canSitBetweenLines, articLine, position, offsetDirection);
		
		        if (isWithinLines(snappedLine, position)) glyph.setOrigin(0.5, 0.5);
		
		        y += Math.abs(snappedLine - articLine) * staffSpace * offsetDirection;
		      }
		
		      L('Rendering articulation at (x: ' + x + ', y: ' + y + ')');
		
		      glyph.render(ctx, x, y);
		    }
		  }]);

		  return Articulation;
		}(_modifier.Modifier);

	/***/ },
	/* 38 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Ornament = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _modifier = __webpack_require__(25);
		
		var _tickcontext = __webpack_require__(39);
		
		var _stavenote = __webpack_require__(20);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author: Cyril Silverman
		//
		// ## Description
		//
		// This file implements ornaments as modifiers that can be
		// attached to notes. The complete list of ornaments is available in
		// `tables.js` under `Vex.Flow.ornamentCodes`.
		//
		// See `tests/ornament_tests.js` for usage examples.
		
		// To enable logging for this class. Set `Vex.Flow.Ornament.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (Ornament.DEBUG) _vex.Vex.L('Vex.Flow.Ornament', args);
		}
		
		var Ornament = exports.Ornament = function (_Modifier) {
		  _inherits(Ornament, _Modifier);
		
		  _createClass(Ornament, null, [{
		    key: 'format',
		
		
		    // ## Static Methods
		    // Arrange ornaments inside `ModifierContext`
		    value: function format(ornaments, state) {
		      if (!ornaments || ornaments.length === 0) return false;
		
		      var width = 0;
		      for (var i = 0; i < ornaments.length; ++i) {
		        var ornament = ornaments[i];
		        var increment = 2;
		
		        width = Math.max(ornament.getWidth(), width);
		
		        if (ornament.getPosition() === _modifier.Modifier.Position.ABOVE) {
		          ornament.setTextLine(state.top_text_line);
		          state.top_text_line += increment;
		        } else {
		          ornament.setTextLine(state.text_line);
		          state.text_line += increment;
		        }
		      }
		
		      state.left_shift += width / 2;
		      state.right_shift += width / 2;
		      return true;
		    }
		
		    // Create a new ornament of type `type`, which is an entry in
		    // `Vex.Flow.ornamentCodes` in `tables.js`.
		
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'ornaments';
		    }
		  }]);
		
		  function Ornament(type) {
		    _classCallCheck(this, Ornament);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Ornament).call(this));
		
		    _this.setAttribute('type', 'Ornament');
		
		    _this.note = null;
		    _this.index = null;
		    _this.type = type;
		    _this.position = _modifier.Modifier.Position.ABOVE;
		    _this.delayed = false;
		
		    _this.accidentalUpper = null;
		    _this.accidentalLower = null;
		
		    _this.render_options = {
		      font_scale: 38,
		      accidentalLowerPadding: 3,
		      accidentalUpperPadding: 3
		    };
		
		    _this.ornament = _tables.Flow.ornamentCodes(_this.type);
		    if (!_this.ornament) {
		      throw new _vex.Vex.RERR('ArgumentError', 'Ornament not found: \'' + _this.type + '\'');
		    }
		
		    _this.glyph = new _glyph.Glyph(_this.ornament.code, _this.render_options.font_scale);
		    _this.glyph.setOrigin(0.5, 1.0); // FIXME: SMuFL won't require a vertical origin shift
		    return _this;
		  }
		
		  _createClass(Ornament, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Ornament.CATEGORY;
		    }
		
		    // Set whether the ornament is to be delayed
		
		  }, {
		    key: 'setDelayed',
		    value: function setDelayed(delayed) {
		      this.delayed = delayed;return this;
		    }
		
		    // Set the upper accidental for the ornament
		
		  }, {
		    key: 'setUpperAccidental',
		    value: function setUpperAccidental(accid) {
		      var scale = this.render_options.font_scale / 1.3;
		      this.accidentalUpper = new _glyph.Glyph(_tables.Flow.accidentalCodes(accid).code, scale);
		      this.accidentalUpper.setOrigin(0.5, 1.0);
		      return this;
		    }
		
		    // Set the lower accidental for the ornament
		
		  }, {
		    key: 'setLowerAccidental',
		    value: function setLowerAccidental(accid) {
		      var scale = this.render_options.font_scale / 1.3;
		      this.accidentalLower = new _glyph.Glyph(_tables.Flow.accidentalCodes(accid).code, scale);
		      this.accidentalLower.setOrigin(0.5, 1.0);
		      return this;
		    }
		
		    // Render ornament in position next to note.
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		
		      if (!this.note || this.index == null) {
		        throw new _vex.Vex.RERR('NoAttachedNote', "Can't draw Ornament without a note and index.");
		      }
		
		      this.setRendered();
		
		      var ctx = this.context;
		      var stemDir = this.note.getStemDirection();
		      var stave = this.note.getStave();
		
		      // Get stem extents
		      var stemExtents = this.note.getStem().getExtents();
		      var y = stemDir === _stavenote.StaveNote.STEM_DOWN ? stemExtents.baseY : stemExtents.topY;
		
		      // TabNotes don't have stems attached to them. Tab stems are rendered
		      // outside the stave.
		      if (this.note.getCategory() === 'tabnotes') {
		        if (this.note.hasStem()) {
		          if (stemDir === _stavenote.StaveNote.STEM_DOWN) {
		            y = stave.getYForTopText(this.text_line);
		          }
		        } else {
		          // Without a stem
		          y = stave.getYForTopText(this.text_line);
		        }
		      }
		
		      var isPlacedOnNoteheadSide = stemDir === _stavenote.StaveNote.STEM_DOWN;
		      var spacing = stave.getSpacingBetweenLines();
		      var lineSpacing = 1;
		
		      // Beamed stems are longer than quarter note stems, adjust accordingly
		      if (!isPlacedOnNoteheadSide && this.note.beam) {
		        lineSpacing += 0.5;
		      }
		
		      var totalSpacing = spacing * (this.text_line + lineSpacing);
		      var glyphYBetweenLines = y - totalSpacing;
		
		      // Get initial coordinates for the modifier position
		      var start = this.note.getModifierStartXY(this.position, this.index);
		      var glyphX = start.x;
		      var glyphY = Math.min(stave.getYForTopText(this.text_line), glyphYBetweenLines);
		      glyphY += this.y_shift;
		
		      // Ajdust x position if ornament is delayed
		      if (this.delayed) {
		        glyphX += this.glyph.getMetrics().width;
		        var nextContext = _tickcontext.TickContext.getNextContext(this.note.getTickContext());
		        if (nextContext) {
		          glyphX += (nextContext.getX() - glyphX) * 0.5;
		        } else {
		          glyphX += (stave.x + stave.width - glyphX) * 0.5;
		        }
		      }
		
		      L('Rendering ornament: ', this.ornament, glyphX, glyphY);
		
		      if (this.accidentalLower) {
		        this.accidentalLower.render(ctx, glyphX, glyphY);
		        glyphY -= this.accidentalLower.getMetrics().height;
		        glyphY -= this.render_options.accidentalLowerPadding;
		      }
		
		      this.glyph.render(ctx, glyphX, glyphY);
		      glyphY -= this.glyph.getMetrics().height;
		
		      if (this.accidentalUpper) {
		        glyphY -= this.render_options.accidentalUpperPadding;
		        this.accidentalUpper.render(ctx, glyphX, glyphY);
		      }
		    }
		  }]);

		  return Ornament;
		}(_modifier.Modifier);

	/***/ },
	/* 39 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.TickContext = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tickable = __webpack_require__(23);
		
		var _fraction = __webpack_require__(3);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// A formatter for abstract tickable objects, such as notes, chords,
		// tabs, etc.
		
		var TickContext = exports.TickContext = function (_Tickable) {
		  _inherits(TickContext, _Tickable);
		
		  _createClass(TickContext, null, [{
		    key: 'getNextContext',
		    value: function getNextContext(tContext) {
		      var contexts = tContext.tContexts;
		      var index = contexts.indexOf(tContext);
		
		      return contexts[index + 1];
		    }
		  }]);
		
		  function TickContext() {
		    _classCallCheck(this, TickContext);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TickContext).call(this));
		
		    _this.setAttribute('type', 'TickContext');
		    _this.currentTick = new _fraction.Fraction(0, 1);
		    _this.maxTicks = new _fraction.Fraction(0, 1);
		    _this.minTicks = null;
		    _this.padding = 3; // padding on each side (width += padding * 2)
		    _this.x = 0;
		    _this.tickables = []; // Notes, tabs, chords, lyrics.
		    _this.notePx = 0; // width of widest note in this context
		    _this.extraLeftPx = 0; // Extra left pixels for modifers & displace notes
		    _this.extraRightPx = 0; // Extra right pixels for modifers & displace notes
		    _this.tContexts = []; // Parent array of tick contexts
		    return _this;
		  }
		
		  _createClass(TickContext, [{
		    key: 'getX',
		    value: function getX() {
		      return this.x;
		    }
		  }, {
		    key: 'setX',
		    value: function setX(x) {
		      this.x = x;return this;
		    }
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      return this.width + this.padding * 2;
		    }
		  }, {
		    key: 'setPadding',
		    value: function setPadding(padding) {
		      this.padding = padding;return this;
		    }
		  }, {
		    key: 'getMaxTicks',
		    value: function getMaxTicks() {
		      return this.maxTicks;
		    }
		  }, {
		    key: 'getMinTicks',
		    value: function getMinTicks() {
		      return this.minTicks;
		    }
		  }, {
		    key: 'getTickables',
		    value: function getTickables() {
		      return this.tickables;
		    }
		  }, {
		    key: 'getCenterAlignedTickables',
		    value: function getCenterAlignedTickables() {
		      return this.tickables.filter(function (tickable) {
		        return tickable.isCenterAligned();
		      });
		    }
		
		    // Get widths context, note and left/right modifiers for formatting
		
		  }, {
		    key: 'getMetrics',
		    value: function getMetrics() {
		      return { width: this.width, notePx: this.notePx,
		        extraLeftPx: this.extraLeftPx, extraRightPx: this.extraRightPx };
		    }
		  }, {
		    key: 'getCurrentTick',
		    value: function getCurrentTick() {
		      return this.currentTick;
		    }
		  }, {
		    key: 'setCurrentTick',
		    value: function setCurrentTick(tick) {
		      this.currentTick = tick;
		      this.preFormatted = false;
		    }
		
		    // ### DEPRECATED ###
		    // Get left & right pixels used for modifiers. THIS METHOD IS DEPRECATED. Use
		    // the getMetrics() method instead!
		
		  }, {
		    key: 'getExtraPx',
		    value: function getExtraPx() {
		      var left_shift = 0;
		      var right_shift = 0;
		      var extraLeftPx = 0;
		      var extraRightPx = 0;
		      for (var i = 0; i < this.tickables.length; i++) {
		        extraLeftPx = Math.max(this.tickables[i].extraLeftPx || 0, extraLeftPx);
		        extraRightPx = Math.max(this.tickables[i].extraRightPx || 0, extraRightPx);
		        var mContext = this.tickables[i].modifierContext;
		        if (mContext && mContext != null) {
		          left_shift = Math.max(left_shift, mContext.state.left_shift);
		          right_shift = Math.max(right_shift, mContext.state.right_shift);
		        }
		      }
		      return {
		        left: left_shift,
		        right: right_shift,
		        extraLeft: extraLeftPx,
		        extraRight: extraRightPx
		      };
		    }
		  }, {
		    key: 'addTickable',
		    value: function addTickable(tickable) {
		      if (!tickable) {
		        throw new _vex.Vex.RERR('BadArgument', 'Invalid tickable added.');
		      }
		
		      if (!tickable.shouldIgnoreTicks()) {
		        this.ignore_ticks = false;
		
		        var ticks = tickable.getTicks();
		
		        if (ticks.greaterThan(this.maxTicks)) {
		          this.maxTicks = ticks.clone();
		        }
		
		        if (this.minTicks == null) {
		          this.minTicks = ticks.clone();
		        } else if (ticks.lessThan(this.minTicks)) {
		          this.minTicks = ticks.clone();
		        }
		      }
		
		      tickable.setTickContext(this);
		      this.tickables.push(tickable);
		      this.preFormatted = false;
		      return this;
		    }
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      if (this.preFormatted) return this;
		
		      for (var i = 0; i < this.tickables.length; ++i) {
		        var tickable = this.tickables[i];
		        tickable.preFormat();
		        var metrics = tickable.getMetrics();
		
		        // Maintain max extra pixels from all tickables in the context
		        this.extraLeftPx = Math.max(this.extraLeftPx, metrics.extraLeftPx + metrics.modLeftPx);
		        this.extraRightPx = Math.max(this.extraRightPx, metrics.extraRightPx + metrics.modRightPx);
		
		        // Maintain the widest note for all tickables in the context
		        this.notePx = Math.max(this.notePx, metrics.noteWidth);
		
		        // Recalculate the tick context total width
		        this.width = this.notePx + this.extraLeftPx + this.extraRightPx;
		      }
		
		      return this;
		    }
		  }, {
		    key: 'postFormat',
		    value: function postFormat() {
		      if (this.postFormatted) return this;
		      this.postFormatted = true;
		      return this;
		    }
		  }]);

		  return TickContext;
		}(_tickable.Tickable);

	/***/ },
	/* 40 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Annotation = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _modifier = __webpack_require__(25);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This file implements text annotations as modifiers that can be attached to
		// notes.
		//
		// See `tests/annotation_tests.js` for usage examples.
		
		// To enable logging for this class. Set `Vex.Flow.Annotation.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (Annotation.DEBUG) _vex.Vex.L('Vex.Flow.Annotation', args);
		}
		
		var Annotation = exports.Annotation = function (_Modifier) {
		  _inherits(Annotation, _Modifier);
		
		  _createClass(Annotation, null, [{
		    key: 'format',
		
		
		    // Arrange annotations within a `ModifierContext`
		    value: function format(annotations, state) {
		      if (!annotations || annotations.length === 0) return false;
		
		      var width = 0;
		      for (var i = 0; i < annotations.length; ++i) {
		        var annotation = annotations[i];
		        width = Math.max(annotation.getWidth(), width);
		        if (annotation.getPosition() === _modifier.Modifier.Position.ABOVE) {
		          annotation.setTextLine(state.top_text_line);
		          state.top_text_line++;
		        } else {
		          annotation.setTextLine(state.text_line);
		          state.text_line++;
		        }
		      }
		
		      state.left_shift += width / 2;
		      state.right_shift += width / 2;
		      return true;
		    }
		
		    // ## Prototype Methods
		    //
		    // Annotations inherit from `Modifier` and is positioned correctly when
		    // in a `ModifierContext`.
		    // Create a new `Annotation` with the string `text`.
		
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'annotations';
		    }
		
		    // Text annotations can be positioned and justified relative to the note.
		
		  }, {
		    key: 'Justify',
		    get: function get() {
		      return {
		        LEFT: 1,
		        CENTER: 2,
		        RIGHT: 3,
		        CENTER_STEM: 4
		      };
		    }
		  }, {
		    key: 'JustifyString',
		    get: function get() {
		      return {
		        left: Annotation.Justify.LEFT,
		        right: Annotation.Justify.RIGHT,
		        center: Annotation.Justify.CENTER,
		        centerStem: Annotation.Justify.CENTER_STEM
		      };
		    }
		  }, {
		    key: 'VerticalJustify',
		    get: function get() {
		      return {
		        TOP: 1,
		        CENTER: 2,
		        BOTTOM: 3,
		        CENTER_STEM: 4
		      };
		    }
		  }, {
		    key: 'VerticalJustifyString',
		    get: function get() {
		      return {
		        above: Annotation.VerticalJustify.TOP,
		        top: Annotation.VerticalJustify.TOP,
		        below: Annotation.VerticalJustify.BOTTOM,
		        bottom: Annotation.VerticalJustify.BOTTOM,
		        center: Annotation.VerticalJustify.CENTER,
		        centerStem: Annotation.VerticalJustify.CENTER_STEM
		      };
		    }
		  }]);
		
		  function Annotation(text) {
		    _classCallCheck(this, Annotation);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Annotation).call(this));
		
		    _this.setAttribute('type', 'Annotation');
		
		    _this.note = null;
		    _this.index = null;
		    _this.text = text;
		    _this.justification = Annotation.Justify.CENTER;
		    _this.vert_justification = Annotation.VerticalJustify.TOP;
		    _this.font = {
		      family: 'Arial',
		      size: 10,
		      weight: ''
		    };
		
		    // The default width is calculated from the text.
		    _this.setWidth(_tables.Flow.textWidth(text));
		    return _this;
		  }
		
		  _createClass(Annotation, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Annotation.CATEGORY;
		    }
		
		    // Set font family, size, and weight. E.g., `Arial`, `10pt`, `Bold`.
		
		  }, {
		    key: 'setFont',
		    value: function setFont(family, size, weight) {
		      this.font = { family: family, size: size, weight: weight };
		      return this;
		    }
		
		    // Set vertical position of text (above or below stave). `just` must be
		    // a value in `Annotation.VerticalJustify`.
		
		  }, {
		    key: 'setVerticalJustification',
		    value: function setVerticalJustification(just) {
		      this.vert_justification = typeof just === 'string' ? Annotation.VerticalJustifyString[just] : just;
		      return this;
		    }
		
		    // Get and set horizontal justification. `justification` is a value in
		    // `Annotation.Justify`.
		
		  }, {
		    key: 'getJustification',
		    value: function getJustification() {
		      return this.justification;
		    }
		  }, {
		    key: 'setJustification',
		    value: function setJustification(just) {
		      this.justification = typeof just === 'string' ? Annotation.JustifyString[just] : just;
		      return this;
		    }
		
		    // Render text beside the note.
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		
		      if (!this.note) {
		        throw new _vex.Vex.RERR('NoNoteForAnnotation', "Can't draw text annotation without an attached note.");
		      }
		
		      this.setRendered();
		      var start = this.note.getModifierStartXY(_modifier.Modifier.Position.ABOVE, this.index);
		
		      // We're changing context parameters. Save current state.
		      this.context.save();
		      this.context.setFont(this.font.family, this.font.size, this.font.weight);
		      var text_width = this.context.measureText(this.text).width;
		
		      // Estimate text height to be the same as the width of an 'm'.
		      //
		      // This is a hack to work around the inability to measure text height
		      // in HTML5 Canvas (and SVG).
		      var text_height = this.context.measureText('m').width;
		      var x = void 0;
		      var y = void 0;
		
		      if (this.justification === Annotation.Justify.LEFT) {
		        x = start.x;
		      } else if (this.justification === Annotation.Justify.RIGHT) {
		        x = start.x - text_width;
		      } else if (this.justification === Annotation.Justify.CENTER) {
		        x = start.x - text_width / 2;
		      } else /* CENTER_STEM */{
		          x = this.note.getStemX() - text_width / 2;
		        }
		
		      var stem_ext = void 0;
		      var spacing = void 0;
		      var has_stem = this.note.hasStem();
		      var stave = this.note.getStave();
		
		      // The position of the text varies based on whether or not the note
		      // has a stem.
		      if (has_stem) {
		        stem_ext = this.note.getStem().getExtents();
		        spacing = stave.getSpacingBetweenLines();
		      }
		
		      if (this.vert_justification === Annotation.VerticalJustify.BOTTOM) {
		        // HACK: We need to compensate for the text's height since its origin
		        // is bottom-right.
		        y = stave.getYForBottomText(this.text_line + _tables.Flow.TEXT_HEIGHT_OFFSET_HACK);
		        if (has_stem) {
		          var stem_base = this.note.getStemDirection() === 1 ? stem_ext.baseY : stem_ext.topY;
		          y = Math.max(y, stem_base + spacing * (this.text_line + 2));
		        }
		      } else if (this.vert_justification === Annotation.VerticalJustify.CENTER) {
		        var yt = this.note.getYForTopText(this.text_line) - 1;
		        var yb = stave.getYForBottomText(this.text_line);
		        y = yt + (yb - yt) / 2 + text_height / 2;
		      } else if (this.vert_justification === Annotation.VerticalJustify.TOP) {
		        y = Math.min(stave.getYForTopText(this.text_line), this.note.getYs()[0] - 10);
		        if (has_stem) {
		          y = Math.min(y, stem_ext.topY - 5 - spacing * this.text_line);
		        }
		      } else /* CENTER_STEM */{
		          var extents = this.note.getStemExtents();
		          y = extents.topY + (extents.baseY - extents.topY) / 2 + text_height / 2;
		        }
		
		      L('Rendering annotation: ', this.text, x, y);
		      this.context.fillText(this.text, x, y);
		      this.context.restore();
		    }
		  }]);

		  return Annotation;
		}(_modifier.Modifier);

	/***/ },
	/* 41 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Bend = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _modifier = __webpack_require__(25);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This file implements tablature bends.
		
		/**
		   @param text Text for bend ("Full", "Half", etc.) (DEPRECATED)
		   @param release If true, render a release. (DEPRECATED)
		   @param phrase If set, ignore "text" and "release", and use the more
		                 sophisticated phrase specified.
		
		   Example of a phrase:
		
		     [{
		       type: UP,
		       text: "whole"
		       width: 8;
		     },
		     {
		       type: DOWN,
		       text: "whole"
		       width: 8;
		     },
		     {
		       type: UP,
		       text: "half"
		       width: 8;
		     },
		     {
		       type: UP,
		       text: "whole"
		       width: 8;
		     },
		     {
		       type: DOWN,
		       text: "1 1/2"
		       width: 8;
		     }]
		 */
		var Bend = exports.Bend = function (_Modifier) {
		  _inherits(Bend, _Modifier);
		
		  _createClass(Bend, null, [{
		    key: 'format',
		
		
		    // ## Static Methods
		    // Arrange bends in `ModifierContext`
		    value: function format(bends, state) {
		      if (!bends || bends.length === 0) return false;
		
		      var last_width = 0;
		      // Bends are always on top.
		      var text_line = state.top_text_line;
		
		      // Format Bends
		      for (var i = 0; i < bends.length; ++i) {
		        var bend = bends[i];
		        bend.setXShift(last_width);
		        last_width = bend.getWidth();
		        bend.setTextLine(text_line);
		      }
		
		      state.right_shift += last_width;
		      state.top_text_line += 1;
		      return true;
		    }
		
		    // ## Prototype Methods
		
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'bends';
		    }
		  }, {
		    key: 'UP',
		    get: function get() {
		      return 0;
		    }
		  }, {
		    key: 'DOWN',
		    get: function get() {
		      return 1;
		    }
		  }]);
		
		  function Bend(text, release, phrase) {
		    _classCallCheck(this, Bend);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Bend).call(this));
		
		    _this.setAttribute('type', 'Bend');
		
		    _this.text = text;
		    _this.x_shift = 0;
		    _this.release = release || false;
		    _this.font = '10pt Arial';
		    _this.render_options = {
		      line_width: 1.5,
		      line_style: '#777777',
		      bend_width: 8,
		      release_width: 8
		    };
		
		    if (phrase) {
		      _this.phrase = phrase;
		    } else {
		      // Backward compatibility
		      _this.phrase = [{ type: Bend.UP, text: _this.text }];
		      if (_this.release) _this.phrase.push({ type: Bend.DOWN, text: '' });
		    }
		
		    _this.updateWidth();
		    return _this;
		  }
		
		  _createClass(Bend, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Bend.CATEGORY;
		    }
		  }, {
		    key: 'setXShift',
		    value: function setXShift(value) {
		      this.x_shift = value;
		      this.updateWidth();
		    }
		  }, {
		    key: 'setFont',
		    value: function setFont(font) {
		      this.font = font;return this;
		    }
		  }, {
		    key: 'getText',
		    value: function getText() {
		      return this.text;
		    }
		  }, {
		    key: 'updateWidth',
		    value: function updateWidth() {
		      var that = this;
		
		      function measure_text(text) {
		        var text_width = void 0;
		        if (that.context) {
		          text_width = that.context.measureText(text).width;
		        } else {
		          text_width = _tables.Flow.textWidth(text);
		        }
		
		        return text_width;
		      }
		
		      var total_width = 0;
		      for (var i = 0; i < this.phrase.length; ++i) {
		        var bend = this.phrase[i];
		        if ('width' in bend) {
		          total_width += bend.width;
		        } else {
		          var additional_width = bend.type === Bend.UP ? this.render_options.bend_width : this.render_options.release_width;
		
		          bend.width = _vex.Vex.Max(additional_width, measure_text(bend.text)) + 3;
		          bend.draw_width = bend.width / 2;
		          total_width += bend.width;
		        }
		      }
		
		      this.setWidth(total_width + this.x_shift);
		      return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      if (!(this.note && this.index != null)) {
		        throw new _vex.Vex.RERR('NoNoteForBend', "Can't draw bend without a note or index.");
		      }
		
		      this.setRendered();
		
		      var start = this.note.getModifierStartXY(_modifier.Modifier.Position.RIGHT, this.index);
		      start.x += 3;
		      start.y += 0.5;
		      var x_shift = this.x_shift;
		
		      var ctx = this.context;
		      var bend_height = this.note.getStave().getYForTopText(this.text_line) + 3;
		      var annotation_y = this.note.getStave().getYForTopText(this.text_line) - 1;
		      var that = this;
		
		      function renderBend(x, y, width, height) {
		        var cp_x = x + width;
		        var cp_y = y;
		
		        ctx.save();
		        ctx.beginPath();
		        ctx.setLineWidth(that.render_options.line_width);
		        ctx.setStrokeStyle(that.render_options.line_style);
		        ctx.setFillStyle(that.render_options.line_style);
		        ctx.moveTo(x, y);
		        ctx.quadraticCurveTo(cp_x, cp_y, x + width, height);
		        ctx.stroke();
		        ctx.restore();
		      }
		
		      function renderRelease(x, y, width, height) {
		        ctx.save();
		        ctx.beginPath();
		        ctx.setLineWidth(that.render_options.line_width);
		        ctx.setStrokeStyle(that.render_options.line_style);
		        ctx.setFillStyle(that.render_options.line_style);
		        ctx.moveTo(x, height);
		        ctx.quadraticCurveTo(x + width, height, x + width, y);
		        ctx.stroke();
		        ctx.restore();
		      }
		
		      function renderArrowHead(x, y, direction) {
		        var width = 4;
		        var dir = direction || 1;
		
		        ctx.beginPath();
		        ctx.moveTo(x, y);
		        ctx.lineTo(x - width, y + width * dir);
		        ctx.lineTo(x + width, y + width * dir);
		        ctx.closePath();
		        ctx.fill();
		      }
		
		      function renderText(x, text) {
		        ctx.save();
		        ctx.setRawFont(that.font);
		        var render_x = x - ctx.measureText(text).width / 2;
		        ctx.fillText(text, render_x, annotation_y);
		        ctx.restore();
		      }
		
		      var last_bend = null;
		      var last_drawn_width = 0;
		      for (var i = 0; i < this.phrase.length; ++i) {
		        var bend = this.phrase[i];
		        if (i === 0) bend.draw_width += x_shift;
		
		        last_drawn_width = bend.draw_width + (last_bend ? last_bend.draw_width : 0) - (i === 1 ? x_shift : 0);
		        if (bend.type === Bend.UP) {
		          if (last_bend && last_bend.type === Bend.UP) {
		            renderArrowHead(start.x, bend_height);
		          }
		
		          renderBend(start.x, start.y, last_drawn_width, bend_height);
		        }
		
		        if (bend.type === Bend.DOWN) {
		          if (last_bend && last_bend.type === Bend.UP) {
		            renderRelease(start.x, start.y, last_drawn_width, bend_height);
		          }
		
		          if (last_bend && last_bend.type === Bend.DOWN) {
		            renderArrowHead(start.x, start.y, -1);
		            renderRelease(start.x, start.y, last_drawn_width, bend_height);
		          }
		
		          if (last_bend === null) {
		            last_drawn_width = bend.draw_width;
		            renderRelease(start.x, start.y, last_drawn_width, bend_height);
		          }
		        }
		
		        renderText(start.x + last_drawn_width, bend.text);
		        last_bend = bend;
		        last_bend.x = start.x;
		
		        start.x += last_drawn_width;
		      }
		
		      // Final arrowhead and text
		      if (last_bend.type === Bend.UP) {
		        renderArrowHead(last_bend.x + last_drawn_width, bend_height);
		      } else if (last_bend.type === Bend.DOWN) {
		        renderArrowHead(last_bend.x + last_drawn_width, start.y, -1);
		      }
		    }
		  }]);

		  return Bend;
		}(_modifier.Modifier);

	/***/ },
	/* 42 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Vibrato = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _modifier = __webpack_require__(25);
		
		var _bend = __webpack_require__(41);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// This class implements vibratos.
		
		var Vibrato = exports.Vibrato = function (_Modifier) {
		  _inherits(Vibrato, _Modifier);
		
		  _createClass(Vibrato, null, [{
		    key: 'format',
		
		
		    // ## Static Methods
		    // Arrange vibratos inside a `ModifierContext`.
		    value: function format(vibratos, state, context) {
		      if (!vibratos || vibratos.length === 0) return false;
		
		      // Vibratos are always on top.
		      var text_line = state.top_text_line;
		      var width = 0;
		      var shift = state.right_shift - 7;
		
		      // If there's a bend, drop the text line
		      var bends = context.getModifiers(_bend.Bend.CATEGORY);
		      if (bends && bends.length > 0) {
		        text_line--;
		      }
		
		      // Format Vibratos
		      for (var i = 0; i < vibratos.length; ++i) {
		        var vibrato = vibratos[i];
		        vibrato.setXShift(shift);
		        vibrato.setTextLine(text_line);
		        width += vibrato.getWidth();
		        shift += width;
		      }
		
		      state.right_shift += width;
		      state.top_text_line += 1;
		      return true;
		    }
		
		    // ## Prototype Methods
		
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'vibratos';
		    }
		  }]);
		
		  function Vibrato() {
		    _classCallCheck(this, Vibrato);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Vibrato).call(this));
		
		    _this.setAttribute('type', 'Vibrato');
		
		    _this.position = _modifier.Modifier.Position.RIGHT;
		    _this.render_options = {
		      harsh: false,
		      vibrato_width: 20,
		      wave_height: 6,
		      wave_width: 4,
		      wave_girth: 2
		    };
		
		    _this.setVibratoWidth(_this.render_options.vibrato_width);
		    return _this;
		  }
		
		  _createClass(Vibrato, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Vibrato.CATEGORY;
		    }
		  }, {
		    key: 'setHarsh',
		    value: function setHarsh(harsh) {
		      this.render_options.harsh = harsh;return this;
		    }
		  }, {
		    key: 'setVibratoWidth',
		    value: function setVibratoWidth(width) {
		      this.render_options.vibrato_width = width;
		      this.setWidth(width);
		      return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var ctx = this.checkContext();
		
		      if (!this.note) {
		        throw new _vex.Vex.RERR('NoNoteForVibrato', "Can't draw vibrato without an attached note.");
		      }
		
		      this.setRendered();
		      var start = this.note.getModifierStartXY(_modifier.Modifier.Position.RIGHT, this.index);
		
		      var vx = start.x + this.x_shift;
		      var vy = this.note.getYForTopText(this.text_line) + 2;
		
		      Vibrato.renderVibrato(ctx, vx, vy, this.render_options);
		    }
		
		    // Static rendering method that can be called from
		    // other classes (e.g. VibratoBracket)
		
		  }], [{
		    key: 'renderVibrato',
		    value: function renderVibrato(ctx, x, y, opts) {
		      var harsh = opts.harsh;
		      var vibrato_width = opts.vibrato_width;
		      var wave_width = opts.wave_width;
		      var wave_girth = opts.wave_girth;
		      var wave_height = opts.wave_height;
		
		      var num_waves = vibrato_width / wave_width;
		
		      ctx.beginPath();
		
		      var i = void 0;
		      if (harsh) {
		        ctx.moveTo(x, y + wave_girth + 1);
		        for (i = 0; i < num_waves / 2; ++i) {
		          ctx.lineTo(x + wave_width, y - wave_height / 2);
		          x += wave_width;
		          ctx.lineTo(x + wave_width, y + wave_height / 2);
		          x += wave_width;
		        }
		        for (i = 0; i < num_waves / 2; ++i) {
		          ctx.lineTo(x - wave_width, y - wave_height / 2 + wave_girth + 1);
		          x -= wave_width;
		          ctx.lineTo(x - wave_width, y + wave_height / 2 + wave_girth + 1);
		          x -= wave_width;
		        }
		        ctx.fill();
		      } else {
		        ctx.moveTo(x, y + wave_girth);
		        for (i = 0; i < num_waves / 2; ++i) {
		          ctx.quadraticCurveTo(x + wave_width / 2, y - wave_height / 2, x + wave_width, y);
		          x += wave_width;
		          ctx.quadraticCurveTo(x + wave_width / 2, y + wave_height / 2, x + wave_width, y);
		          x += wave_width;
		        }
		
		        for (i = 0; i < num_waves / 2; ++i) {
		          ctx.quadraticCurveTo(x - wave_width / 2, y + wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);
		          x -= wave_width;
		          ctx.quadraticCurveTo(x - wave_width / 2, y - wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);
		          x -= wave_width;
		        }
		        ctx.fill();
		      }
		    }
		  }]);

		  return Vibrato;
		}(_modifier.Modifier);

	/***/ },
	/* 43 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Stave = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		var _tables = __webpack_require__(2);
		
		var _stavebarline = __webpack_require__(44);
		
		var _stavemodifier = __webpack_require__(45);
		
		var _staverepetition = __webpack_require__(46);
		
		var _stavesection = __webpack_require__(47);
		
		var _stavetempo = __webpack_require__(48);
		
		var _stavetext = __webpack_require__(49);
		
		var _boundingbox = __webpack_require__(8);
		
		var _clef = __webpack_require__(51);
		
		var _keysignature = __webpack_require__(52);
		
		var _timesignature = __webpack_require__(53);
		
		var _stavevolta = __webpack_require__(54);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		
		var Stave = exports.Stave = function (_Element) {
		  _inherits(Stave, _Element);
		
		  function Stave(x, y, width, options) {
		    _classCallCheck(this, Stave);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Stave).call(this));
		
		    _this.setAttribute('type', 'Stave');
		
		    _this.x = x;
		    _this.y = y;
		    _this.width = width;
		    _this.formatted = false;
		    _this.start_x = x + 5;
		    _this.end_x = x + width;
		    _this.modifiers = []; // stave modifiers (clef, key, time, barlines, coda, segno, etc.)
		    _this.measure = 0;
		    _this.clef = 'treble';
		    _this.font = {
		      family: 'sans-serif',
		      size: 8,
		      weight: ''
		    };
		    _this.options = {
		      vertical_bar_width: 10, // Width around vertical bar end-marker
		      glyph_spacing_px: 10,
		      num_lines: 5,
		      fill_style: '#999999',
		      left_bar: true, // draw vertical bar on left
		      right_bar: true, // draw vertical bar on right
		      spacing_between_lines_px: 10, // in pixels
		      space_above_staff_ln: 4, // in staff lines
		      space_below_staff_ln: 4, // in staff lines
		      top_text_position: 1 };
		    _this.bounds = { x: _this.x, y: _this.y, w: _this.width, h: 0 };
		    _vex.Vex.Merge(_this.options, options);
		
		    _this.resetLines();
		
		    var BARTYPE = _stavebarline.Barline.type;
		    // beg bar
		    _this.addModifier(new _stavebarline.Barline(_this.options.left_bar ? BARTYPE.SINGLE : BARTYPE.NONE));
		    // end bar
		    _this.addEndModifier(new _stavebarline.Barline(_this.options.right_bar ? BARTYPE.SINGLE : BARTYPE.NONE));
		    return _this;
		  }
		
		  _createClass(Stave, [{
		    key: 'space',
		    value: function space(spacing) {
		      return this.options.spacing_between_lines_px * spacing;
		    }
		  }, {
		    key: 'resetLines',
		    value: function resetLines() {
		      this.options.line_config = [];
		      for (var i = 0; i < this.options.num_lines; i++) {
		        this.options.line_config.push({ visible: true });
		      }
		      this.height = (this.options.num_lines + this.options.space_above_staff_ln) * this.options.spacing_between_lines_px;
		      this.options.bottom_text_position = this.options.num_lines;
		    }
		  }, {
		    key: 'getOptions',
		    value: function getOptions() {
		      return this.options;
		    }
		  }, {
		    key: 'setNoteStartX',
		    value: function setNoteStartX(x) {
		      if (!this.formatted) this.format();
		
		      this.start_x = x;
		      return this;
		    }
		  }, {
		    key: 'getNoteStartX',
		    value: function getNoteStartX() {
		      if (!this.formatted) this.format();
		
		      return this.start_x;
		    }
		  }, {
		    key: 'getNoteEndX',
		    value: function getNoteEndX() {
		      if (!this.formatted) this.format();
		
		      return this.end_x;
		    }
		  }, {
		    key: 'getTieStartX',
		    value: function getTieStartX() {
		      return this.start_x;
		    }
		  }, {
		    key: 'getTieEndX',
		    value: function getTieEndX() {
		      return this.x + this.width;
		    }
		  }, {
		    key: 'getX',
		    value: function getX() {
		      return this.x;
		    }
		  }, {
		    key: 'getNumLines',
		    value: function getNumLines() {
		      return this.options.num_lines;
		    }
		  }, {
		    key: 'setNumLines',
		    value: function setNumLines(lines) {
		      this.options.num_lines = parseInt(lines, 10);
		      this.resetLines();
		      return this;
		    }
		  }, {
		    key: 'setY',
		    value: function setY(y) {
		      this.y = y;return this;
		    }
		  }, {
		    key: 'getTopLineTopY',
		    value: function getTopLineTopY() {
		      return this.getYForLine(0) - _tables.Flow.STAVE_LINE_THICKNESS / 2;
		    }
		  }, {
		    key: 'getBottomLineBottomY',
		    value: function getBottomLineBottomY() {
		      return this.getYForLine(this.getNumLines() - 1) + _tables.Flow.STAVE_LINE_THICKNESS / 2;
		    }
		  }, {
		    key: 'setX',
		    value: function setX(x) {
		      var shift = x - this.x;
		      this.formatted = false;
		      this.x = x;
		      this.start_x += shift;
		      this.end_x += shift;
		      for (var i = 0; i < this.modifiers.length; i++) {
		        var mod = this.modifiers[i];
		        if (mod.x !== undefined) {
		          mod.x += shift;
		        }
		      }
		      return this;
		    }
		  }, {
		    key: 'setWidth',
		    value: function setWidth(width) {
		      this.formatted = false;
		      this.width = width;
		      this.end_x = this.x + width;
		
		      // reset the x position of the end barline (TODO(0xfe): This makes no sense)
		      // this.modifiers[1].setX(this.end_x);
		      return this;
		    }
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      return this.width;
		    }
		  }, {
		    key: 'setMeasure',
		    value: function setMeasure(measure) {
		      this.measure = measure;return this;
		    }
		
		    /**
		     * Gets the pixels to shift from the beginning of the stave
		     * following the modifier at the provided index
		     * @param  {Number} index The index from which to determine the shift
		     * @return {Number}       The amount of pixels shifted
		     */
		
		  }, {
		    key: 'getModifierXShift',
		    value: function getModifierXShift() {
		      var index = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
		
		      if (typeof index !== 'number') {
		        throw new _vex.Vex.RERR('InvalidIndex', 'Must be of number type');
		      }
		
		      if (!this.formatted) this.format();
		
		      if (this.getModifiers(_stavemodifier.StaveModifier.Position.BEGIN).length === 1) {
		        return 0;
		      }
		
		      var start_x = this.start_x - this.x;
		      var begBarline = this.modifiers[0];
		      if (begBarline.getType() === _stavebarline.Barline.type.REPEAT_BEGIN && start_x > begBarline.getWidth()) {
		        start_x -= begBarline.getWidth();
		      }
		
		      return start_x;
		    }
		
		    // Coda & Segno Symbol functions
		
		  }, {
		    key: 'setRepetitionTypeLeft',
		    value: function setRepetitionTypeLeft(type, y) {
		      this.modifiers.push(new _staverepetition.Repetition(type, this.x, y));
		      return this;
		    }
		  }, {
		    key: 'setRepetitionTypeRight',
		    value: function setRepetitionTypeRight(type, y) {
		      this.modifiers.push(new _staverepetition.Repetition(type, this.x, y));
		      return this;
		    }
		
		    // Volta functions
		
		  }, {
		    key: 'setVoltaType',
		    value: function setVoltaType(type, number_t, y) {
		      this.modifiers.push(new _stavevolta.Volta(type, number_t, this.x, y));
		      return this;
		    }
		
		    // Section functions
		
		  }, {
		    key: 'setSection',
		    value: function setSection(section, y) {
		      this.modifiers.push(new _stavesection.StaveSection(section, this.x, y));
		      return this;
		    }
		
		    // Tempo functions
		
		  }, {
		    key: 'setTempo',
		    value: function setTempo(tempo, y) {
		      this.modifiers.push(new _stavetempo.StaveTempo(tempo, this.x, y));
		      return this;
		    }
		
		    // Text functions
		
		  }, {
		    key: 'setText',
		    value: function setText(text, position, options) {
		      this.modifiers.push(new _stavetext.StaveText(text, position, options));
		      return this;
		    }
		  }, {
		    key: 'getHeight',
		    value: function getHeight() {
		      return this.height;
		    }
		  }, {
		    key: 'getSpacingBetweenLines',
		    value: function getSpacingBetweenLines() {
		      return this.options.spacing_between_lines_px;
		    }
		  }, {
		    key: 'getBoundingBox',
		    value: function getBoundingBox() {
		      return new _boundingbox.BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);
		    }
		  }, {
		    key: 'getBottomY',
		    value: function getBottomY() {
		      var options = this.options;
		      var spacing = options.spacing_between_lines_px;
		      var score_bottom = this.getYForLine(options.num_lines) + options.space_below_staff_ln * spacing;
		
		      return score_bottom;
		    }
		  }, {
		    key: 'getBottomLineY',
		    value: function getBottomLineY() {
		      return this.getYForLine(this.options.num_lines);
		    }
		
		    // This returns the y for the *center* of a staff line
		
		  }, {
		    key: 'getYForLine',
		    value: function getYForLine(line) {
		      var options = this.options;
		      var spacing = options.spacing_between_lines_px;
		      var headroom = options.space_above_staff_ln;
		
		      var y = this.y + line * spacing + headroom * spacing;
		
		      return y;
		    }
		  }, {
		    key: 'getLineForY',
		    value: function getLineForY(y) {
		      // Does the reverse of getYForLine - somewhat dumb and just calls
		      // getYForLine until the right value is reaches
		
		      var options = this.options;
		      var spacing = options.spacing_between_lines_px;
		      var headroom = options.space_above_staff_ln;
		      return (y - this.y) / spacing - headroom;
		    }
		  }, {
		    key: 'getYForTopText',
		    value: function getYForTopText(line) {
		      var l = line || 0;
		      return this.getYForLine(-l - this.options.top_text_position);
		    }
		  }, {
		    key: 'getYForBottomText',
		    value: function getYForBottomText(line) {
		      var l = line || 0;
		      return this.getYForLine(this.options.bottom_text_position + l);
		    }
		  }, {
		    key: 'getYForNote',
		    value: function getYForNote(line) {
		      var options = this.options;
		      var spacing = options.spacing_between_lines_px;
		      var headroom = options.space_above_staff_ln;
		      var y = this.y + headroom * spacing + 5 * spacing - line * spacing;
		
		      return y;
		    }
		  }, {
		    key: 'getYForGlyphs',
		    value: function getYForGlyphs() {
		      return this.getYForLine(3);
		    }
		  }, {
		    key: 'addModifier',
		    value: function addModifier(modifier, position) {
		      if (position !== undefined) {
		        modifier.setPosition(position);
		      }
		
		      modifier.setStave(this);
		      this.formatted = false;
		      this.modifiers.push(modifier);
		      return this;
		    }
		  }, {
		    key: 'addEndModifier',
		    value: function addEndModifier(modifier) {
		      this.addModifier(modifier, _stavemodifier.StaveModifier.Position.END);
		      return this;
		    }
		
		    // Bar Line functions
		
		  }, {
		    key: 'setBegBarType',
		    value: function setBegBarType(type) {
		      // Only valid bar types at beginning of stave is none, single or begin repeat
		      var _Barline$type = _stavebarline.Barline.type;
		      var SINGLE = _Barline$type.SINGLE;
		      var REPEAT_BEGIN = _Barline$type.REPEAT_BEGIN;
		      var NONE = _Barline$type.NONE;
		
		      if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {
		        this.modifiers[0].setType(type);
		        this.formatted = false;
		      }
		      return this;
		    }
		  }, {
		    key: 'setEndBarType',
		    value: function setEndBarType(type) {
		      // Repeat end not valid at end of stave
		      if (type !== _stavebarline.Barline.type.REPEAT_BEGIN) {
		        this.modifiers[1].setType(type);
		        this.formatted = false;
		      }
		      return this;
		    }
		  }, {
		    key: 'setClef',
		    value: function setClef(clefSpec, size, annotation, position) {
		      if (position === undefined) {
		        position = _stavemodifier.StaveModifier.Position.BEGIN;
		      }
		
		      this.clef = clefSpec;
		      var clefs = this.getModifiers(position, _clef.Clef.CATEGORY);
		      if (clefs.length === 0) {
		        this.addClef(clefSpec, size, annotation, position);
		      } else {
		        clefs[0].setType(clefSpec, size, annotation);
		      }
		
		      return this;
		    }
		  }, {
		    key: 'setEndClef',
		    value: function setEndClef(clefSpec, size, annotation) {
		      this.setClef(clefSpec, size, annotation, _stavemodifier.StaveModifier.Position.END);
		      return this;
		    }
		  }, {
		    key: 'setKeySignature',
		    value: function setKeySignature(keySpec, cancelKeySpec, position) {
		      if (position === undefined) {
		        position = _stavemodifier.StaveModifier.Position.BEGIN;
		      }
		
		      var keySignatures = this.getModifiers(position, _keysignature.KeySignature.CATEGORY);
		      if (keySignatures.length === 0) {
		        this.addKeySignature(keySpec, cancelKeySpec, position);
		      } else {
		        keySignatures[0].setKeySig(keySpec, cancelKeySpec);
		      }
		
		      return this;
		    }
		  }, {
		    key: 'setEndKeySignature',
		    value: function setEndKeySignature(keySpec, cancelKeySpec) {
		      this.setKeySignature(keySpec, cancelKeySpec, _stavemodifier.StaveModifier.Position.END);
		      return this;
		    }
		  }, {
		    key: 'setTimeSignature',
		    value: function setTimeSignature(timeSpec, customPadding, position) {
		      if (position === undefined) {
		        position = _stavemodifier.StaveModifier.Position.BEGIN;
		      }
		
		      var timeSignatures = this.getModifiers(position, _timesignature.TimeSignature.CATEGORY);
		      if (timeSignatures.length === 0) {
		        this.addTimeSignature(timeSpec, customPadding, position);
		      } else {
		        timeSignatures[0].setTimeSig(timeSpec);
		      }
		
		      return this;
		    }
		  }, {
		    key: 'setEndTimeSignature',
		    value: function setEndTimeSignature(timeSpec, customPadding) {
		      this.setTimeSignature(timeSpec, customPadding, _stavemodifier.StaveModifier.Position.END);
		      return this;
		    }
		  }, {
		    key: 'addKeySignature',
		    value: function addKeySignature(keySpec, cancelKeySpec, position) {
		      this.addModifier(new _keysignature.KeySignature(keySpec, cancelKeySpec), position);
		      return this;
		    }
		  }, {
		    key: 'addClef',
		    value: function addClef(clef, size, annotation, position) {
		      if (position === undefined || position === _stavemodifier.StaveModifier.Position.BEGIN) {
		        this.clef = clef;
		      }
		
		      this.addModifier(new _clef.Clef(clef, size, annotation), position);
		      return this;
		    }
		  }, {
		    key: 'addEndClef',
		    value: function addEndClef(clef, size, annotation) {
		      this.addClef(clef, size, annotation, _stavemodifier.StaveModifier.Position.END);
		      return this;
		    }
		  }, {
		    key: 'addTimeSignature',
		    value: function addTimeSignature(timeSpec, customPadding, position) {
		      this.addModifier(new _timesignature.TimeSignature(timeSpec, customPadding), position);
		      return this;
		    }
		  }, {
		    key: 'addEndTimeSignature',
		    value: function addEndTimeSignature(timeSpec, customPadding) {
		      this.addTimeSignature(timeSpec, customPadding, _stavemodifier.StaveModifier.Position.END);
		      return this;
		    }
		
		    // Deprecated
		
		  }, {
		    key: 'addTrebleGlyph',
		    value: function addTrebleGlyph() {
		      this.addClef('treble');
		      return this;
		    }
		  }, {
		    key: 'getModifiers',
		    value: function getModifiers(position, category) {
		      if (position === undefined) return this.modifiers;
		
		      return this.modifiers.filter(function (modifier) {
		        return position === modifier.getPosition() && (category === undefined || category === modifier.getCategory());
		      });
		    }
		  }, {
		    key: 'sortByCategory',
		    value: function sortByCategory(items, order) {
		      for (var i = items.length - 1; i >= 0; i--) {
		        for (var j = 0; j < i; j++) {
		          if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {
		            var temp = items[j];
		            items[j] = items[j + 1];
		            items[j + 1] = temp;
		          }
		        }
		      }
		    }
		  }, {
		    key: 'format',
		    value: function format() {
		      var begBarline = this.modifiers[0];
		      var endBarline = this.modifiers[1];
		
		      var begModifiers = this.getModifiers(_stavemodifier.StaveModifier.Position.BEGIN);
		      var endModifiers = this.getModifiers(_stavemodifier.StaveModifier.Position.END);
		
		      this.sortByCategory(begModifiers, {
		        barlines: 0, clefs: 1, keysignatures: 2, timesignatures: 3
		      });
		
		      this.sortByCategory(endModifiers, {
		        timesignatures: 0, keysignatures: 1, barlines: 2, clefs: 3
		      });
		
		      if (begModifiers.length > 1 && begBarline.getType() === _stavebarline.Barline.type.REPEAT_BEGIN) {
		        begModifiers.push(begModifiers.splice(0, 1)[0]);
		        begModifiers.splice(0, 0, new _stavebarline.Barline(_stavebarline.Barline.type.SINGLE));
		      }
		
		      if (endModifiers.indexOf(endBarline) > 0) {
		        endModifiers.splice(0, 0, new _stavebarline.Barline(_stavebarline.Barline.type.NONE));
		      }
		
		      var width = void 0;
		      var padding = void 0;
		      var modifier = void 0;
		      var offset = 0;
		      var x = this.x;
		      for (var i = 0; i < begModifiers.length; i++) {
		        modifier = begModifiers[i];
		        padding = modifier.getPadding(i + offset);
		        width = modifier.getWidth();
		
		        x += padding;
		        modifier.setX(x);
		        x += width;
		
		        if (padding + width === 0) offset--;
		      }
		
		      this.start_x = x;
		      x = this.x + this.width;
		
		      for (var _i = 0; _i < endModifiers.length; _i++) {
		        modifier = endModifiers[_i];
		        x -= modifier.getPadding(_i);
		        if (_i !== 0) {
		          x -= modifier.getWidth();
		        }
		
		        modifier.setX(x);
		
		        if (_i === 0) {
		          x -= modifier.getWidth();
		        }
		      }
		
		      this.end_x = endModifiers.length === 1 ? this.x + this.width : x;
		      this.formatted = true;
		    }
		
		    /**
		     * All drawing functions below need the context to be set.
		     */
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      this.setRendered();
		
		      if (!this.formatted) this.format();
		
		      var num_lines = this.options.num_lines;
		      var width = this.width;
		      var x = this.x;
		      var y = void 0;
		
		      // Render lines
		      for (var line = 0; line < num_lines; line++) {
		        y = this.getYForLine(line);
		
		        this.context.save();
		        this.context.setFillStyle(this.options.fill_style);
		        this.context.setStrokeStyle(this.options.fill_style);
		        this.context.setLineWidth(_tables.Flow.STAVE_LINE_THICKNESS);
		        if (this.options.line_config[line].visible) {
		          this.context.beginPath();
		          this.context.moveTo(x, y);
		          this.context.lineTo(x + width, y);
		          this.context.stroke();
		        }
		        this.context.restore();
		      }
		
		      // Draw the modifiers (bar lines, coda, segno, repeat brackets, etc.)
		      for (var i = 0; i < this.modifiers.length; i++) {
		        // Only draw modifier if it has a draw function
		        if (typeof this.modifiers[i].draw === 'function') {
		          this.modifiers[i].draw(this, this.getModifierXShift(i));
		        }
		      }
		
		      // Render measure numbers
		      if (this.measure > 0) {
		        this.context.save();
		        this.context.setFont(this.font.family, this.font.size, this.font.weight);
		        var text_width = this.context.measureText('' + this.measure).width;
		        y = this.getYForTopText(0) + 3;
		        this.context.fillText('' + this.measure, this.x - text_width / 2, y);
		        this.context.restore();
		      }
		
		      return this;
		    }
		
		    // Draw Simple barlines for backward compatability
		    // Do not delete - draws the beginning bar of the stave
		
		  }, {
		    key: 'drawVertical',
		    value: function drawVertical(x, isDouble) {
		      this.drawVerticalFixed(this.x + x, isDouble);
		    }
		  }, {
		    key: 'drawVerticalFixed',
		    value: function drawVerticalFixed(x, isDouble) {
		      this.checkContext();
		
		      var top_line = this.getYForLine(0);
		      var bottom_line = this.getYForLine(this.options.num_lines - 1);
		      if (isDouble) {
		        this.context.fillRect(x - 3, top_line, 1, bottom_line - top_line + 1);
		      }
		      this.context.fillRect(x, top_line, 1, bottom_line - top_line + 1);
		    }
		  }, {
		    key: 'drawVerticalBar',
		    value: function drawVerticalBar(x) {
		      this.drawVerticalBarFixed(this.x + x, false);
		    }
		  }, {
		    key: 'drawVerticalBarFixed',
		    value: function drawVerticalBarFixed(x) {
		      this.checkContext();
		
		      var top_line = this.getYForLine(0);
		      var bottom_line = this.getYForLine(this.options.num_lines - 1);
		      this.context.fillRect(x, top_line, 1, bottom_line - top_line + 1);
		    }
		
		    /**
		     * Get the current configuration for the Stave.
		     * @return {Array} An array of configuration objects.
		     */
		
		  }, {
		    key: 'getConfigForLines',
		    value: function getConfigForLines() {
		      return this.options.line_config;
		    }
		
		    /**
		     * Configure properties of the lines in the Stave
		     * @param line_number The index of the line to configure.
		     * @param line_config An configuration object for the specified line.
		     * @throws Vex.RERR "StaveConfigError" When the specified line number is out of
		     *   range of the number of lines specified in the constructor.
		     */
		
		  }, {
		    key: 'setConfigForLine',
		    value: function setConfigForLine(line_number, line_config) {
		      if (line_number >= this.options.num_lines || line_number < 0) {
		        throw new _vex.Vex.RERR('StaveConfigError', 'The line number must be within the range of the number of lines in the Stave.');
		      }
		
		      if (line_config.visible === undefined) {
		        throw new _vex.Vex.RERR('StaveConfigError', "The line configuration object is missing the 'visible' property.");
		      }
		
		      if (typeof line_config.visible !== 'boolean') {
		        throw new _vex.Vex.RERR('StaveConfigError', "The line configuration objects 'visible' property must be true or false.");
		      }
		
		      this.options.line_config[line_number] = line_config;
		
		      return this;
		    }
		
		    /**
		     * Set the staff line configuration array for all of the lines at once.
		     * @param lines_configuration An array of line configuration objects.  These objects
		     *   are of the same format as the single one passed in to setLineConfiguration().
		     *   The caller can set null for any line config entry if it is desired that the default be used
		     * @throws Vex.RERR "StaveConfigError" When the lines_configuration array does not have
		     *   exactly the same number of elements as the num_lines configuration object set in
		     *   the constructor.
		     */
		
		  }, {
		    key: 'setConfigForLines',
		    value: function setConfigForLines(lines_configuration) {
		      if (lines_configuration.length !== this.options.num_lines) {
		        throw new _vex.Vex.RERR('StaveConfigError', 'The length of the lines configuration array must match the number of lines in the Stave');
		      }
		
		      // Make sure the defaults are present in case an incomplete set of
		      //  configuration options were supplied.
		      for (var line_config in lines_configuration) {
		        // Allow 'null' to be used if the caller just wants the default for a particular node.
		        if (!lines_configuration[line_config]) {
		          lines_configuration[line_config] = this.options.line_config[line_config];
		        }
		        _vex.Vex.Merge(this.options.line_config[line_config], lines_configuration[line_config]);
		      }
		
		      this.options.line_config = lines_configuration;
		
		      return this;
		    }
		  }]);

		  return Stave;
		}(_element.Element);

	/***/ },
	/* 44 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Barline = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _tables = __webpack_require__(2);
		
		var _stavemodifier = __webpack_require__(45);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// Author Larry Kuhns 2011
		
		var Barline = exports.Barline = function (_StaveModifier) {
		  _inherits(Barline, _StaveModifier);
		
		  _createClass(Barline, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'barlines';
		    }
		  }, {
		    key: 'type',
		    get: function get() {
		      return {
		        SINGLE: 1,
		        DOUBLE: 2,
		        END: 3,
		        REPEAT_BEGIN: 4,
		        REPEAT_END: 5,
		        REPEAT_BOTH: 6,
		        NONE: 7
		      };
		    }
		
		    /**
		     * @constructor
		     */
		
		  }]);
		
		  function Barline(type) {
		    _classCallCheck(this, Barline);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Barline).call(this));
		
		    _this.setAttribute('type', 'Barline');
		    _this.thickness = _tables.Flow.STAVE_LINE_THICKNESS;
		
		    var TYPE = Barline.type;
		    _this.widths = {};
		    _this.widths[TYPE.SINGLE] = 5;
		    _this.widths[TYPE.DOUBLE] = 5;
		    _this.widths[TYPE.END] = 5;
		    _this.widths[TYPE.REPEAT_BEGIN] = 5;
		    _this.widths[TYPE.REPEAT_END] = 5;
		    _this.widths[TYPE.REPEAT_BOTH] = 5;
		    _this.widths[TYPE.NONE] = 5;
		
		    _this.paddings = {};
		    _this.paddings[TYPE.SINGLE] = 0;
		    _this.paddings[TYPE.DOUBLE] = 0;
		    _this.paddings[TYPE.END] = 0;
		    _this.paddings[TYPE.REPEAT_BEGIN] = 15;
		    _this.paddings[TYPE.REPEAT_END] = 15;
		    _this.paddings[TYPE.REPEAT_BOTH] = 15;
		    _this.paddings[TYPE.NONE] = 0;
		
		    _this.setPosition(_stavemodifier.StaveModifier.Position.BEGIN);
		    _this.setType(type);
		    return _this;
		  }
		
		  _createClass(Barline, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Barline.CATEGORY;
		    }
		  }, {
		    key: 'getType',
		    value: function getType() {
		      return this.type;
		    }
		  }, {
		    key: 'setType',
		    value: function setType(type) {
		      this.type = type;
		      this.setWidth(this.widths[this.type]);
		      this.setPadding(this.paddings[this.type]);
		      return this;
		    }
		
		    // Draw barlines
		
		  }, {
		    key: 'draw',
		    value: function draw(stave) {
		      stave.checkContext();
		      this.setRendered();
		
		      switch (this.type) {
		        case Barline.type.SINGLE:
		          this.drawVerticalBar(stave, this.x, false);
		          break;
		        case Barline.type.DOUBLE:
		          this.drawVerticalBar(stave, this.x, true);
		          break;
		        case Barline.type.END:
		          this.drawVerticalEndBar(stave, this.x);
		          break;
		        case Barline.type.REPEAT_BEGIN:
		          // If the barline is shifted over (in front of clef/time/key)
		          // Draw vertical bar at the beginning.
		          this.drawRepeatBar(stave, this.x, true);
		          if (stave.getX() !== this.x) {
		            this.drawVerticalBar(stave, stave.getX());
		          }
		
		          break;
		        case Barline.type.REPEAT_END:
		          this.drawRepeatBar(stave, this.x, false);
		          break;
		        case Barline.type.REPEAT_BOTH:
		          this.drawRepeatBar(stave, this.x, false);
		          this.drawRepeatBar(stave, this.x, true);
		          break;
		        default:
		          // Default is NONE, so nothing to draw
		          break;
		      }
		    }
		  }, {
		    key: 'drawVerticalBar',
		    value: function drawVerticalBar(stave, x, double_bar) {
		      stave.checkContext();
		      var topY = stave.getTopLineTopY();
		      var botY = stave.getBottomLineBottomY();
		      if (double_bar) {
		        stave.context.fillRect(x - 3, topY, 1, botY - topY);
		      }
		      stave.context.fillRect(x, topY, 1, botY - topY);
		    }
		  }, {
		    key: 'drawVerticalEndBar',
		    value: function drawVerticalEndBar(stave, x) {
		      stave.checkContext();
		      var topY = stave.getTopLineTopY();
		      var botY = stave.getBottomLineBottomY();
		      stave.context.fillRect(x - 5, topY, 1, botY - topY);
		      stave.context.fillRect(x - 2, topY, 3, botY - topY);
		    }
		  }, {
		    key: 'drawRepeatBar',
		    value: function drawRepeatBar(stave, x, begin) {
		      stave.checkContext();
		
		      var topY = stave.getTopLineTopY();
		      var botY = stave.getBottomLineBottomY();
		      var x_shift = 3;
		
		      if (!begin) {
		        x_shift = -5;
		      }
		
		      stave.context.fillRect(x + x_shift, topY, 1, botY - topY);
		      stave.context.fillRect(x - 2, topY, 3, botY - topY);
		
		      var dot_radius = 2;
		
		      // Shift dots left or right
		      if (begin) {
		        x_shift += 4;
		      } else {
		        x_shift -= 4;
		      }
		
		      var dot_x = x + x_shift + dot_radius / 2;
		
		      // calculate the y offset based on number of stave lines
		      var y_offset = (stave.getNumLines() - 1) * stave.getSpacingBetweenLines();
		      y_offset = y_offset / 2 - stave.getSpacingBetweenLines() / 2;
		      var dot_y = topY + y_offset + dot_radius / 2;
		
		      // draw the top repeat dot
		      stave.context.beginPath();
		      stave.context.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);
		      stave.context.fill();
		
		      // draw the bottom repeat dot
		      dot_y += stave.getSpacingBetweenLines();
		      stave.context.beginPath();
		      stave.context.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);
		      stave.context.fill();
		    }
		  }]);

		  return Barline;
		}(_stavemodifier.StaveModifier);

	/***/ },
	/* 45 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.StaveModifier = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _element = __webpack_require__(5);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// A base class for stave modifiers (e.g. clefs, key signatures)
		
		var StaveModifier = exports.StaveModifier = function (_Element) {
		  _inherits(StaveModifier, _Element);
		
		  _createClass(StaveModifier, null, [{
		    key: 'Position',
		    get: function get() {
		      return {
		        LEFT: 1,
		        RIGHT: 2,
		        ABOVE: 3,
		        BELOW: 4,
		        BEGIN: 5,
		        END: 6
		      };
		    }
		  }]);
		
		  function StaveModifier() {
		    _classCallCheck(this, StaveModifier);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StaveModifier).call(this));
		
		    _this.setAttribute('type', 'StaveModifier');
		
		    _this.padding = 10;
		    _this.position = StaveModifier.Position.ABOVE;
		    return _this;
		  }
		
		  _createClass(StaveModifier, [{
		    key: 'getPosition',
		    value: function getPosition() {
		      return this.position;
		    }
		  }, {
		    key: 'setPosition',
		    value: function setPosition(position) {
		      this.position = position;return this;
		    }
		  }, {
		    key: 'getStave',
		    value: function getStave() {
		      return this.stave;
		    }
		  }, {
		    key: 'setStave',
		    value: function setStave(stave) {
		      this.stave = stave;return this;
		    }
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      return this.width;
		    }
		  }, {
		    key: 'setWidth',
		    value: function setWidth(width) {
		      this.width = width;return this;
		    }
		  }, {
		    key: 'getX',
		    value: function getX() {
		      return this.x;
		    }
		  }, {
		    key: 'setX',
		    value: function setX(x) {
		      this.x = x;return this;
		    }
		  }, {
		    key: 'getCategory',
		    value: function getCategory() {
		      return '';
		    }
		  }, {
		    key: 'makeSpacer',
		    value: function makeSpacer(padding) {
		      // TODO(0xfe): Return an instance of type `Spacer` based on `GhostNote`
		      // instead of this hack.
		
		      return {
		        getContext: function getContext() {
		          return true;
		        },
		        setStave: function setStave() {},
		        renderToStave: function renderToStave() {},
		        getMetrics: function getMetrics() {
		          return { width: padding };
		        }
		      };
		    }
		  }, {
		    key: 'placeGlyphOnLine',
		    value: function placeGlyphOnLine(glyph, stave, line) {
		      glyph.setYShift(stave.getYForLine(line) - stave.getYForGlyphs());
		    }
		  }, {
		    key: 'getPadding',
		    value: function getPadding(index) {
		      return index !== undefined && index < 2 ? 0 : this.padding;
		    }
		  }, {
		    key: 'setPadding',
		    value: function setPadding(padding) {
		      this.padding = padding;return this;
		    }
		  }]);

		  return StaveModifier;
		}(_element.Element);

	/***/ },
	/* 46 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Repetition = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _stavemodifier = __webpack_require__(45);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author Larry Kuhns 2011
		
		var Repetition = exports.Repetition = function (_StaveModifier) {
		  _inherits(Repetition, _StaveModifier);
		
		  _createClass(Repetition, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'repetitions';
		    }
		  }, {
		    key: 'type',
		    get: function get() {
		      return {
		        NONE: 1, // no coda or segno
		        CODA_LEFT: 2, // coda at beginning of stave
		        CODA_RIGHT: 3, // coda at end of stave
		        SEGNO_LEFT: 4, // segno at beginning of stave
		        SEGNO_RIGHT: 5, // segno at end of stave
		        DC: 6, // D.C. at end of stave
		        DC_AL_CODA: 7, // D.C. al coda at end of stave
		        DC_AL_FINE: 8, // D.C. al Fine end of stave
		        DS: 9, // D.S. at end of stave
		        DS_AL_CODA: 10, // D.S. al coda at end of stave
		        DS_AL_FINE: 11, // D.S. al Fine at end of stave
		        FINE: 12 };
		    }
		  }]);
		
		  function Repetition(type, x, y_shift) {
		    _classCallCheck(this, Repetition);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Repetition).call(this));
		
		    _this.setAttribute('type', 'Repetition');
		
		    _this.symbol_type = type;
		    _this.x = x;
		    _this.x_shift = 0;
		    _this.y_shift = y_shift;
		    _this.font = {
		      family: 'times',
		      size: 12,
		      weight: 'bold italic'
		    };
		    return _this;
		  }
		
		  _createClass(Repetition, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Repetition.CATEGORY;
		    }
		  }, {
		    key: 'setShiftX',
		    value: function setShiftX(x) {
		      this.x_shift = x;return this;
		    }
		  }, {
		    key: 'setShiftY',
		    value: function setShiftY(y) {
		      this.y_shift = y;return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw(stave, x) {
		      this.setRendered();
		
		      switch (this.symbol_type) {
		        case Repetition.type.CODA_RIGHT:
		          this.drawCodaFixed(stave, x + stave.width);
		          break;
		        case Repetition.type.CODA_LEFT:
		          this.drawSymbolText(stave, x, 'Coda', true);
		          break;
		        case Repetition.type.SEGNO_LEFT:
		          this.drawSignoFixed(stave, x);
		          break;
		        case Repetition.type.SEGNO_RIGHT:
		          this.drawSignoFixed(stave, x + stave.width);
		          break;
		        case Repetition.type.DC:
		          this.drawSymbolText(stave, x, 'D.C.', false);
		          break;
		        case Repetition.type.DC_AL_CODA:
		          this.drawSymbolText(stave, x, 'D.C. al', true);
		          break;
		        case Repetition.type.DC_AL_FINE:
		          this.drawSymbolText(stave, x, 'D.C. al Fine', false);
		          break;
		        case Repetition.type.DS:
		          this.drawSymbolText(stave, x, 'D.S.', false);
		          break;
		        case Repetition.type.DS_AL_CODA:
		          this.drawSymbolText(stave, x, 'D.S. al', true);
		          break;
		        case Repetition.type.DS_AL_FINE:
		          this.drawSymbolText(stave, x, 'D.S. al Fine', false);
		          break;
		        case Repetition.type.FINE:
		          this.drawSymbolText(stave, x, 'Fine', false);
		          break;
		        default:
		          break;
		      }
		
		      return this;
		    }
		  }, {
		    key: 'drawCodaFixed',
		    value: function drawCodaFixed(stave, x) {
		      var y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;
		      _glyph.Glyph.renderGlyph(stave.context, this.x + x + this.x_shift, y + 25, 40, 'v4d', true);
		      return this;
		    }
		  }, {
		    key: 'drawSignoFixed',
		    value: function drawSignoFixed(stave, x) {
		      var y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;
		      _glyph.Glyph.renderGlyph(stave.context, this.x + x + this.x_shift, y + 25, 30, 'v8c', true);
		      return this;
		    }
		  }, {
		    key: 'drawSymbolText',
		    value: function drawSymbolText(stave, x, text, draw_coda) {
		      var ctx = stave.checkContext();
		
		      ctx.save();
		      ctx.setFont(this.font.family, this.font.size, this.font.weight);
		      // Default to right symbol
		      var text_x = 0 + this.x_shift;
		      var symbol_x = x + this.x_shift;
		      if (this.symbol_type === Repetition.type.CODA_LEFT) {
		        // Offset Coda text to right of stave beginning
		        text_x = this.x + stave.options.vertical_bar_width;
		        symbol_x = text_x + ctx.measureText(text).width + 12;
		      } else {
		        // Offset Signo text to left stave end
		        symbol_x = this.x + x + stave.width - 5 + this.x_shift;
		        text_x = symbol_x - +ctx.measureText(text).width - 12;
		      }
		
		      var y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;
		      if (draw_coda) {
		        _glyph.Glyph.renderGlyph(ctx, symbol_x, y, 40, 'v4d', true);
		      }
		
		      ctx.fillText(text, text_x, y + 5);
		      ctx.restore();
		
		      return this;
		    }
		  }]);

		  return Repetition;
		}(_stavemodifier.StaveModifier);

	/***/ },
	/* 47 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.StaveSection = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _stavemodifier = __webpack_require__(45);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author Larry Kuhns 2011
		
		var StaveSection = exports.StaveSection = function (_StaveModifier) {
		  _inherits(StaveSection, _StaveModifier);
		
		  _createClass(StaveSection, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'stavesection';
		    }
		  }]);
		
		  function StaveSection(section, x, shift_y) {
		    _classCallCheck(this, StaveSection);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StaveSection).call(this));
		
		    _this.setAttribute('type', 'StaveSection');
		
		    _this.setWidth(16);
		    _this.section = section;
		    _this.x = x;
		    _this.shift_x = 0;
		    _this.shift_y = shift_y;
		    _this.font = {
		      family: 'sans-serif',
		      size: 12,
		      weight: 'bold'
		    };
		    return _this;
		  }
		
		  _createClass(StaveSection, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return StaveSection.CATEGORY;
		    }
		  }, {
		    key: 'setStaveSection',
		    value: function setStaveSection(section) {
		      this.section = section;return this;
		    }
		  }, {
		    key: 'setShiftX',
		    value: function setShiftX(x) {
		      this.shift_x = x;return this;
		    }
		  }, {
		    key: 'setShiftY',
		    value: function setShiftY(y) {
		      this.shift_y = y;return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw(stave, shift_x) {
		      var ctx = stave.checkContext();
		      this.setRendered();
		
		      ctx.save();
		      ctx.lineWidth = 2;
		      ctx.setFont(this.font.family, this.font.size, this.font.weight);
		      var text_width = ctx.measureText('' + this.section).width;
		      var width = text_width + 6; // add left & right padding
		      if (width < 18) width = 18;
		      var height = 20;
		      //  Seems to be a good default y
		      var y = stave.getYForTopText(3) + this.shift_y;
		      var x = this.x + shift_x;
		      ctx.beginPath();
		      ctx.lineWidth = 2;
		      ctx.rect(x, y, width, height);
		      ctx.stroke();
		      x += (width - text_width) / 2;
		      ctx.fillText('' + this.section, x, y + 16);
		      ctx.restore();
		      return this;
		    }
		  }]);

		  return StaveSection;
		}(_stavemodifier.StaveModifier);

	/***/ },
	/* 48 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.StaveTempo = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _tables = __webpack_require__(2);
		
		var _modifier = __webpack_require__(25);
		
		var _stavemodifier = __webpack_require__(45);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author Radosaw Eichler 2012
		
		var StaveTempo = exports.StaveTempo = function (_StaveModifier) {
		  _inherits(StaveTempo, _StaveModifier);
		
		  _createClass(StaveTempo, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'stavetempo';
		    }
		  }]);
		
		  function StaveTempo(tempo, x, shift_y) {
		    _classCallCheck(this, StaveTempo);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StaveTempo).call(this));
		
		    _this.setAttribute('type', 'StaveTempo');
		
		    _this.tempo = tempo;
		    _this.position = _modifier.Modifier.Position.ABOVE;
		    _this.x = x;
		    _this.shift_x = 10;
		    _this.shift_y = shift_y;
		    _this.font = {
		      family: 'times',
		      size: 14,
		      weight: 'bold'
		    };
		    _this.render_options = {
		      glyph_font_scale: 30 };
		    return _this;
		  }
		
		  _createClass(StaveTempo, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return StaveTempo.CATEGORY;
		    }
		  }, {
		    key: 'setTempo',
		    value: function setTempo(tempo) {
		      this.tempo = tempo;return this;
		    }
		  }, {
		    key: 'setShiftX',
		    value: function setShiftX(x) {
		      this.shift_x = x;return this;
		    }
		  }, {
		    key: 'setShiftY',
		    value: function setShiftY(y) {
		      this.shift_y = y;return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw(stave, shift_x) {
		      var ctx = stave.checkContext();
		      this.setRendered();
		
		      var options = this.render_options;
		      // FIXME: What does the '38' mean? Why 38? Is that supposed to
		      // be the default font size for standard notation?
		      var scale = options.glyph_font_scale / 38;
		      var name = this.tempo.name;
		      var duration = this.tempo.duration;
		      var dots = this.tempo.dots;
		      var bpm = this.tempo.bpm;
		      var font = this.font;
		      var x = this.x + this.shift_x + shift_x;
		      var y = stave.getYForTopText(1) + this.shift_y;
		
		      ctx.save();
		
		      if (name) {
		        ctx.setFont(font.family, font.size, font.weight);
		        ctx.fillText(name, x, y);
		        x += ctx.measureText(name).width;
		      }
		
		      if (duration && bpm) {
		        ctx.setFont(font.family, font.size, 'normal');
		
		        if (name) {
		          x += ctx.measureText(' ').width;
		          ctx.fillText('(', x, y);
		          x += ctx.measureText('(').width;
		        }
		
		        var code = _tables.Flow.durationToGlyph(duration);
		
		        x += 3 * scale;
		        _glyph.Glyph.renderGlyph(ctx, x, y, options.glyph_font_scale, code.code_head);
		        x += code.getWidth() * scale;
		
		        // Draw stem and flags
		        if (code.stem) {
		          var stem_height = 30;
		
		          if (code.beam_count) stem_height += 3 * (code.beam_count - 1);
		
		          stem_height *= scale;
		
		          var y_top = y - stem_height;
		          ctx.fillRect(x - scale, y_top, scale, stem_height);
		
		          if (code.flag) {
		            _glyph.Glyph.renderGlyph(ctx, x, y_top, options.glyph_font_scale, code.code_flag_upstem);
		
		            if (!dots) x += 6 * scale;
		          }
		        }
		
		        // Draw dot
		        for (var i = 0; i < dots; i++) {
		          x += 6 * scale;
		          ctx.beginPath();
		          ctx.arc(x, y + 2 * scale, 2 * scale, 0, Math.PI * 2, false);
		          ctx.fill();
		        }
		
		        ctx.fillText(' = ' + bpm + (name ? ')' : ''), x + 3 * scale, y);
		      }
		
		      ctx.restore();
		      return this;
		    }
		  }]);

		  return StaveTempo;
		}(_stavemodifier.StaveModifier);

	/***/ },
	/* 49 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.StaveText = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _stavemodifier = __webpack_require__(45);
		
		var _textnote = __webpack_require__(50);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author Taehoon Moon 2014
		
		var StaveText = exports.StaveText = function (_StaveModifier) {
		  _inherits(StaveText, _StaveModifier);
		
		  _createClass(StaveText, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'stavetext';
		    }
		  }]);
		
		  function StaveText(text, position, options) {
		    _classCallCheck(this, StaveText);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StaveText).call(this));
		
		    _this.setAttribute('type', 'StaveText');
		
		    _this.setWidth(16);
		    _this.text = text;
		    _this.position = position;
		    _this.options = {
		      shift_x: 0,
		      shift_y: 0,
		      justification: _textnote.TextNote.Justification.CENTER
		    };
		    _vex.Vex.Merge(_this.options, options);
		
		    _this.font = {
		      family: 'times',
		      size: 16,
		      weight: 'normal'
		    };
		    return _this;
		  }
		
		  _createClass(StaveText, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return StaveText.CATEGORY;
		    }
		  }, {
		    key: 'setStaveText',
		    value: function setStaveText(text) {
		      this.text = text;return this;
		    }
		  }, {
		    key: 'setShiftX',
		    value: function setShiftX(x) {
		      this.shift_x = x;return this;
		    }
		  }, {
		    key: 'setShiftY',
		    value: function setShiftY(y) {
		      this.shift_y = y;return this;
		    }
		  }, {
		    key: 'setFont',
		    value: function setFont(font) {
		      _vex.Vex.Merge(this.font, font);
		    }
		  }, {
		    key: 'setText',
		    value: function setText(text) {
		      this.text = text;
		    }
		  }, {
		    key: 'draw',
		    value: function draw(stave) {
		      var ctx = stave.checkContext();
		      this.setRendered();
		
		      ctx.save();
		      ctx.lineWidth = 2;
		      ctx.setFont(this.font.family, this.font.size, this.font.weight);
		      var text_width = ctx.measureText('' + this.text).width;
		
		      var x = void 0;
		      var y = void 0;
		      var Position = _stavemodifier.StaveModifier.Position;
		      var Justification = _textnote.TextNote.Justification;
		      switch (this.position) {
		        case Position.LEFT:
		        case Position.RIGHT:
		          y = (stave.getYForLine(0) + stave.getBottomLineY()) / 2 + this.options.shift_y;
		          if (this.position === Position.LEFT) {
		            x = stave.getX() - text_width - 24 + this.options.shift_x;
		          } else {
		            x = stave.getX() + stave.getWidth() + 24 + this.options.shift_x;
		          }
		          break;
		        case Position.ABOVE:
		        case Position.BELOW:
		          x = stave.getX() + this.options.shift_x;
		          if (this.options.justification === Justification.CENTER) {
		            x += stave.getWidth() / 2 - text_width / 2;
		          } else if (this.options.justification === Justification.RIGHT) {
		            x += stave.getWidth() - text_width;
		          }
		
		          if (this.position === Position.ABOVE) {
		            y = stave.getYForTopText(2) + this.options.shift_y;
		          } else {
		            y = stave.getYForBottomText(2) + this.options.shift_y;
		          }
		          break;
		        default:
		          throw new _vex.Vex.RERR('InvalidPosition', 'Value Must be in Modifier.Position.');
		      }
		
		      ctx.fillText('' + this.text, x, y + 4);
		      ctx.restore();
		      return this;
		    }
		  }]);

		  return StaveText;
		}(_stavemodifier.StaveModifier);

	/***/ },
	/* 50 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.TextNote = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _note = __webpack_require__(22);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// `TextNote` is a notation element that is positioned in time. Generally
		// meant for objects that sit above/below the staff and inline with each other.
		// Examples of this would be such as dynamics, lyrics, chord changes, etc.
		
		var TextNote = exports.TextNote = function (_Note) {
		  _inherits(TextNote, _Note);
		
		  _createClass(TextNote, null, [{
		    key: 'Justification',
		    get: function get() {
		      return {
		        LEFT: 1,
		        CENTER: 2,
		        RIGHT: 3
		      };
		    }
		
		    // Glyph data
		
		  }, {
		    key: 'GLYPHS',
		    get: function get() {
		      return {
		        'segno': {
		          code: 'v8c',
		          point: 40,
		          x_shift: 0,
		          y_shift: -10
		        },
		        'tr': {
		          code: 'v1f',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		        'mordent_upper': {
		          code: 'v1e',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		        'mordent_lower': {
		          code: 'v45',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		        'f': {
		          code: 'vba',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		        'p': {
		          code: 'vbf',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		        'm': {
		          code: 'v62',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		        's': {
		          code: 'v4a',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		        'z': {
		          code: 'v80',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		        'coda': {
		          code: 'v4d',
		          point: 40,
		          x_shift: 0,
		          y_shift: -8
		        },
		        'pedal_open': {
		          code: 'v36',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		        'pedal_close': {
		          code: 'v5d',
		          point: 40,
		          x_shift: 0,
		          y_shift: 3
		        },
		        'caesura_straight': {
		          code: 'v34',
		          point: 40,
		          x_shift: 0,
		          y_shift: 2
		        },
		        'caesura_curved': {
		          code: 'v4b',
		          point: 40,
		          x_shift: 0,
		          y_shift: 2
		        },
		        'breath': {
		          code: 'v6c',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		        'tick': {
		          code: 'v6f',
		          point: 50,
		          x_shift: 0,
		          y_shift: 0
		        },
		        'turn': {
		          code: 'v72',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		        'turn_inverted': {
		          code: 'v33',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		
		        // DEPRECATED - please use "mordent_upper" or "mordent_lower"
		        'mordent': {
		          code: 'v1e',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        }
		      };
		    }
		  }]);
		
		  function TextNote(text_struct) {
		    _classCallCheck(this, TextNote);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TextNote).call(this, text_struct));
		
		    _this.setAttribute('type', 'TextNote');
		
		    // Note properties
		    _this.text = text_struct.text;
		    _this.superscript = text_struct.superscript;
		    _this.subscript = text_struct.subscript;
		    _this.glyph_type = text_struct.glyph;
		    _this.glyph = null;
		    _this.font = {
		      family: 'Arial',
		      size: 12,
		      weight: ''
		    };
		
		    // Set font
		    if (text_struct.font) _this.font = text_struct.font;
		
		    // Determine and set initial note width. Note that the text width is
		    // an approximation and isn't very accurate. The only way to accurately
		    // measure the length of text is with `canvasmeasureText()`
		    if (_this.glyph_type) {
		      var struct = TextNote.GLYPHS[_this.glyph_type];
		      if (!struct) throw new _vex.Vex.RERR('Invalid glyph type: ' + _this.glyph_type);
		
		      _this.glyph = new _glyph.Glyph(struct.code, struct.point, { cache: false });
		
		      if (struct.width) {
		        _this.setWidth(struct.width);
		      } else {
		        _this.setWidth(_this.glyph.getMetrics().width);
		      }
		
		      _this.glyph_struct = struct;
		    } else {
		      _this.setWidth(_tables.Flow.textWidth(_this.text));
		    }
		    _this.line = text_struct.line || 0;
		    _this.smooth = text_struct.smooth || false;
		    _this.ignore_ticks = text_struct.ignore_ticks || false;
		    _this.justification = TextNote.Justification.LEFT;
		    return _this;
		  }
		
		  // Set the horizontal justification of the TextNote
		
		
		  _createClass(TextNote, [{
		    key: 'setJustification',
		    value: function setJustification(just) {
		      this.justification = just;
		      return this;
		    }
		
		    // Set the Stave line on which the note should be placed
		
		  }, {
		    key: 'setLine',
		    value: function setLine(line) {
		      this.line = line;
		      return this;
		    }
		
		    // Pre-render formatting
		
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      this.checkContext();
		
		      if (this.preFormatted) return;
		
		      if (this.smooth) {
		        this.setWidth(0);
		      } else {
		        if (this.glyph) {
		          // Width already set.
		        } else {
		          this.setWidth(this.context.measureText(this.text).width);
		        }
		      }
		
		      if (this.justification === TextNote.Justification.CENTER) {
		        this.extraLeftPx = this.width / 2;
		      } else if (this.justification === TextNote.Justification.RIGHT) {
		        this.extraLeftPx = this.width;
		      }
		
		      this.setPreFormatted(true);
		    }
		
		    // Renders the TextNote
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		
		      if (!this.stave) {
		        throw new _vex.Vex.RERR('NoStave', "Can't draw without a stave.");
		      }
		
		      this.setRendered();
		      var ctx = this.context;
		      var x = this.getAbsoluteX();
		      if (this.justification === TextNote.Justification.CENTER) {
		        x -= this.getWidth() / 2;
		      } else if (this.justification === TextNote.Justification.RIGHT) {
		        x -= this.getWidth();
		      }
		
		      var y = void 0;
		      if (this.glyph) {
		        y = this.stave.getYForLine(this.line + -3);
		        this.glyph.render(this.context, x + this.glyph_struct.x_shift, y + this.glyph_struct.y_shift);
		      } else {
		        y = this.stave.getYForLine(this.line + -3);
		        ctx.save();
		        ctx.setFont(this.font.family, this.font.size, this.font.weight);
		        ctx.fillText(this.text, x, y);
		
		        // Width of the letter M gives us the approximate height of the text
		        var height = ctx.measureText('M').width;
		        // Get accurate width of text
		        var width = ctx.measureText(this.text).width;
		
		        // Write superscript
		        if (this.superscript) {
		          ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);
		          ctx.fillText(this.superscript, x + width + 2, y - height / 2.2);
		        }
		
		        // Write subscript
		        if (this.subscript) {
		          ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);
		          ctx.fillText(this.subscript, x + width + 2, y + height / 2.2 - 1);
		        }
		
		        ctx.restore();
		      }
		    }
		  }]);

		  return TextNote;
		}(_note.Note);

	/***/ },
	/* 51 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Clef = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _stavemodifier = __webpack_require__(45);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna Cheppudira 2013.
		// Co-author: Benjamin W. Bohl
		//
		// ## Description
		//
		// This file implements various types of clefs that can be rendered on a stave.
		//
		// See `tests/clef_tests.js` for usage examples.
		
		// To enable logging for this class, set `Vex.Flow.Clef.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (Clef.DEBUG) _vex.Vex.L('Vex.Flow.Clef', args);
		}
		
		var Clef = exports.Clef = function (_StaveModifier) {
		  _inherits(Clef, _StaveModifier);
		
		  _createClass(Clef, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'clefs';
		    }
		
		    // Every clef name is associated with a glyph code from the font file
		    // and a default stave line number.
		
		  }, {
		    key: 'types',
		    get: function get() {
		      return {
		        'treble': {
		          code: 'v83',
		          line: 3
		        },
		        'bass': {
		          code: 'v79',
		          line: 1
		        },
		        'alto': {
		          code: 'vad',
		          line: 2
		        },
		        'tenor': {
		          code: 'vad',
		          line: 1
		        },
		        'percussion': {
		          code: 'v59',
		          line: 2
		        },
		        'soprano': {
		          code: 'vad',
		          line: 4
		        },
		        'mezzo-soprano': {
		          code: 'vad',
		          line: 3
		        },
		        'baritone-c': {
		          code: 'vad',
		          line: 0
		        },
		        'baritone-f': {
		          code: 'v79',
		          line: 2
		        },
		        'subbass': {
		          code: 'v79',
		          line: 0
		        },
		        'french': {
		          code: 'v83',
		          line: 4
		        },
		        'tab': {
		          code: 'v2f'
		        }
		      };
		    }
		
		    // Sizes affect the point-size of the clef.
		
		  }, {
		    key: 'sizes',
		    get: function get() {
		      return {
		        'default': 40,
		        'small': 32
		      };
		    }
		
		    // Annotations attach to clefs -- such as "8" for octave up or down.
		
		  }, {
		    key: 'annotations',
		    get: function get() {
		      return {
		        '8va': {
		          code: 'v8',
		          sizes: {
		            'default': {
		              point: 20,
		              attachments: {
		                'treble': {
		                  line: -1.2,
		                  x_shift: 11
		                }
		              }
		            },
		            'small': {
		              point: 18,
		              attachments: {
		                'treble': {
		                  line: -0.4,
		                  x_shift: 8
		                }
		              }
		            }
		          }
		        },
		        '8vb': {
		          code: 'v8',
		          sizes: {
		            'default': {
		              point: 20,
		              attachments: {
		                'treble': {
		                  line: 6.3,
		                  x_shift: 10
		                },
		                'bass': {
		                  line: 4,
		                  x_shift: 1
		                }
		              }
		            },
		            'small': {
		              point: 18,
		              attachments: {
		                'treble': {
		                  line: 5.8,
		                  x_shift: 6
		                },
		                'bass': {
		                  line: 3.5,
		                  x_shift: 0.5
		                }
		              }
		            }
		          }
		        }
		      };
		    }
		
		    // Create a new clef. The parameter `clef` must be a key from
		    // `Clef.types`.
		
		  }]);
		
		  function Clef(type, size, annotation) {
		    _classCallCheck(this, Clef);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Clef).call(this));
		
		    _this.setAttribute('type', 'Clef');
		
		    _this.setPosition(_stavemodifier.StaveModifier.Position.BEGIN);
		    _this.setType(type, size, annotation);
		    _this.setWidth(_this.glyph.getMetrics().width);
		    L('Creating clef:', type);
		    return _this;
		  }
		
		  _createClass(Clef, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Clef.CATEGORY;
		    }
		  }, {
		    key: 'setType',
		    value: function setType(type, size, annotation) {
		      this.type = type;
		      this.clef = Clef.types[type];
		      if (size === undefined) {
		        this.size = 'default';
		      } else {
		        this.size = size;
		      }
		      this.clef.point = Clef.sizes[this.size];
		      this.glyph = new _glyph.Glyph(this.clef.code, this.clef.point);
		
		      // If an annotation, such as 8va, is specified, add it to the Clef object.
		      if (annotation !== undefined) {
		        var anno_dict = Clef.annotations[annotation];
		        this.annotation = {
		          code: anno_dict.code,
		          point: anno_dict.sizes[this.size].point,
		          line: anno_dict.sizes[this.size].attachments[this.type].line,
		          x_shift: anno_dict.sizes[this.size].attachments[this.type].x_shift
		        };
		
		        this.attachment = new _glyph.Glyph(this.annotation.code, this.annotation.point);
		        this.attachment.metrics.x_max = 0;
		        this.attachment.setXShift(this.annotation.x_shift);
		      } else {
		        this.annotation = undefined;
		      }
		
		      return this;
		    }
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      if (this.type === 'tab' && !this.stave) {
		        throw new _vex.Vex.RERR('ClefError', "Can't get width without stave.");
		      }
		
		      return this.width;
		    }
		  }, {
		    key: 'setStave',
		    value: function setStave(stave) {
		      this.stave = stave;
		
		      if (this.type !== 'tab') return this;
		
		      var glyphScale = void 0;
		      var glyphOffset = void 0;
		      var numLines = this.stave.getOptions().num_lines;
		      switch (numLines) {
		        case 8:
		          glyphScale = 55;
		          glyphOffset = 14;
		          break;
		        case 7:
		          glyphScale = 47;
		          glyphOffset = 8;
		          break;
		        case 6:
		          glyphScale = 40;
		          glyphOffset = 1;
		          break;
		        case 5:
		          glyphScale = 30;
		          glyphOffset = -6;
		          break;
		        case 4:
		          glyphScale = 23;
		          glyphOffset = -12;
		          break;
		        default:
		          throw new _vex.Vex.RERR('ClefError', 'Invalid number of lines: ' + numLines);
		      }
		
		      this.glyph.setPoint(glyphScale);
		      this.glyph.setYShift(glyphOffset);
		
		      return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      if (!this.x) throw new _vex.Vex.RERR('ClefError', "Can't draw clef without x.");
		      if (!this.stave) throw new _vex.Vex.RERR('ClefError', "Can't draw clef without stave.");
		      this.setRendered();
		
		      this.glyph.setStave(this.stave);
		      this.glyph.setContext(this.stave.context);
		      if (this.clef.line !== undefined) {
		        this.placeGlyphOnLine(this.glyph, this.stave, this.clef.line);
		      }
		
		      this.glyph.renderToStave(this.x);
		
		      if (this.annotation !== undefined) {
		        this.placeGlyphOnLine(this.attachment, this.stave, this.annotation.line);
		        this.attachment.setStave(this.stave);
		        this.attachment.setContext(this.stave.context);
		        this.attachment.renderToStave(this.x);
		      }
		    }
		  }]);

		  return Clef;
		}(_stavemodifier.StaveModifier);

	/***/ },
	/* 52 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.KeySignature = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _stavemodifier = __webpack_require__(45);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author: Cyril Silverman
		//
		// ## Description
		//
		// This file implements key signatures. A key signature sits on a stave
		// and indicates the notes with implicit accidentals.
		
		var KeySignature = exports.KeySignature = function (_StaveModifier) {
		  _inherits(KeySignature, _StaveModifier);
		
		  _createClass(KeySignature, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'keysignatures';
		    }
		
		    // Space between natural and following accidental depending
		    // on vertical position
		
		  }, {
		    key: 'accidentalSpacing',
		    get: function get() {
		      return {
		        '#': {
		          above: 6,
		          below: 4
		        },
		        'b': {
		          above: 4,
		          below: 7
		        },
		        'n': {
		          above: 4,
		          below: 1
		        },
		        '##': {
		          above: 6,
		          below: 4
		        },
		        'bb': {
		          above: 4,
		          below: 7
		        },
		        'db': {
		          above: 4,
		          below: 7
		        },
		        'd': {
		          above: 4,
		          below: 7
		        },
		        'bbs': {
		          above: 4,
		          below: 7
		        },
		        '++': {
		          above: 6,
		          below: 4
		        },
		        '+': {
		          above: 6,
		          below: 4
		        },
		        '+-': {
		          above: 6,
		          below: 4
		        },
		        '++-': {
		          above: 6,
		          below: 4
		        },
		        'bs': {
		          above: 4,
		          below: 10
		        },
		        'bss': {
		          above: 4,
		          below: 10
		        }
		      };
		    }
		
		    // Create a new Key Signature based on a `key_spec`
		
		  }]);
		
		  function KeySignature(keySpec, cancelKeySpec, alterKeySpec) {
		    _classCallCheck(this, KeySignature);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(KeySignature).call(this));
		
		    _this.setAttribute('type', 'KeySignature');
		
		    _this.setKeySig(keySpec, cancelKeySpec, alterKeySpec);
		    _this.setPosition(_stavemodifier.StaveModifier.Position.BEGIN);
		    _this.glyphFontScale = 38; // TODO(0xFE): Should this match StaveNote?
		    _this.glyphs = [];
		    _this.xPositions = []; // relative to this.x
		    _this.paddingForced = false;
		    return _this;
		  }
		
		  _createClass(KeySignature, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return KeySignature.CATEGORY;
		    }
		
		    // Add an accidental glyph to the `KeySignature` instance which represents
		    // the provided `acc`. If `nextAcc` is also provided, the appropriate
		    // spacing will be included in the glyph's position
		
		  }, {
		    key: 'convertToGlyph',
		    value: function convertToGlyph(acc, nextAcc) {
		      var accGlyphData = _tables.Flow.accidentalCodes(acc.type);
		      var glyph = new _glyph.Glyph(accGlyphData.code, this.glyphFontScale);
		
		      // Determine spacing between current accidental and the next accidental
		      var extraWidth = 1;
		      if (acc.type === 'n' && nextAcc) {
		        var spacing = KeySignature.accidentalSpacing[nextAcc.type];
		        if (spacing) {
		          var isAbove = nextAcc.line >= acc.line;
		          extraWidth = isAbove ? spacing.above : spacing.below;
		        }
		      }
		
		      // Place the glyph on the stave
		      this.placeGlyphOnLine(glyph, this.stave, acc.line);
		      this.glyphs.push(glyph);
		
		      var xPosition = this.xPositions[this.xPositions.length - 1];
		      var glyphWidth = glyph.getMetrics().width + extraWidth;
		      // Store the next accidental's x position
		      this.xPositions.push(xPosition + glyphWidth);
		      // Expand size of key signature
		      this.width += glyphWidth;
		    }
		
		    // Cancel out a key signature provided in the `spec` parameter. This will
		    // place appropriate natural accidentals before the key signature.
		
		  }, {
		    key: 'cancelKey',
		    value: function cancelKey(spec) {
		      this.formatted = false;
		      this.cancelKeySpec = spec;
		
		      return this;
		    }
		  }, {
		    key: 'convertToCancelAccList',
		    value: function convertToCancelAccList(spec) {
		      // Get the accidental list for the cancelled key signature
		      var cancel_accList = _tables.Flow.keySignature(spec);
		
		      // If the cancelled key has a different accidental type, ie: # vs b
		      var different_types = this.accList.length > 0 && cancel_accList.length > 0 && cancel_accList[0].type !== this.accList[0].type;
		
		      // Determine how many naturals needed to add
		      var naturals = different_types ? cancel_accList.length : cancel_accList.length - this.accList.length;
		
		      // Return if no naturals needed
		      if (naturals < 1) return;
		
		      // Get the line position for each natural
		      var cancelled = [];
		      for (var i = 0; i < naturals; i++) {
		        var index = i;
		        if (!different_types) {
		          index = cancel_accList.length - naturals + i;
		        }
		
		        var acc = cancel_accList[index];
		        cancelled.push({ type: 'n', line: acc.line });
		      }
		
		      // Combine naturals with main accidental list for the key signature
		      this.accList = cancelled.concat(this.accList);
		    }
		
		    // Deprecated
		
		  }, {
		    key: 'addToStave',
		    value: function addToStave(stave) {
		      this.paddingForced = true;
		      stave.addModifier(this);
		
		      return this;
		    }
		
		    // Apply the accidental staff line placement based on the `clef` and
		    // the  accidental `type` for the key signature ('# or 'b').
		
		  }, {
		    key: 'convertAccLines',
		    value: function convertAccLines(clef, type) {
		      var offset = 0.0; // if clef === "treble"
		      var customLines = void 0; // when clef doesn't follow treble key sig shape
		
		      switch (clef) {
		        // Treble & Subbass both have offsets of 0, so are not included.
		        case 'soprano':
		          if (type === '#') customLines = [2.5, 0.5, 2, 0, 1.5, -0.5, 1];else offset = -1;
		          break;
		        case 'mezzo-soprano':
		          if (type === 'b') customLines = [0, 2, 0.5, 2.5, 1, 3, 1.5];else offset = 1.5;
		          break;
		        case 'alto':
		          offset = 0.5;
		          break;
		        case 'tenor':
		          if (type === '#') customLines = [3, 1, 2.5, 0.5, 2, 0, 1.5];else offset = -0.5;
		          break;
		        case 'baritone-f':
		        case 'baritone-c':
		          if (type === 'b') customLines = [0.5, 2.5, 1, 3, 1.5, 3.5, 2];else offset = 2;
		          break;
		        case 'bass':
		        case 'french':
		          offset = 1;
		          break;
		        default:
		          break;
		      }
		
		      // If there's a special case, assign those lines/spaces:
		      var i = void 0;
		      if (typeof customLines !== 'undefined') {
		        for (i = 0; i < this.accList.length; ++i) {
		          this.accList[i].line = customLines[i];
		        }
		      } else if (offset !== 0) {
		        for (i = 0; i < this.accList.length; ++i) {
		          this.accList[i].line += offset;
		        }
		      }
		    }
		  }, {
		    key: 'getPadding',
		    value: function getPadding(index) {
		      if (!this.formatted) this.format();
		
		      return this.glyphs.length === 0 || !this.paddingForced && index < 2 ? 0 : this.padding;
		    }
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      if (!this.formatted) this.format();
		
		      return this.width;
		    }
		  }, {
		    key: 'setKeySig',
		    value: function setKeySig(keySpec, cancelKeySpec, alterKeySpec) {
		      this.formatted = false;
		      this.keySpec = keySpec;
		      this.cancelKeySpec = cancelKeySpec;
		      this.alterKeySpec = alterKeySpec;
		
		      return this;
		    }
		
		    // Alter the accidentals of a key spec one by one.
		    // Each alteration is a new accidental that replaces the
		    // original accidental (or the canceled one).
		
		  }, {
		    key: 'alterKey',
		    value: function alterKey(alterKeySpec) {
		      this.formatted = false;
		      this.alterKeySpec = alterKeySpec;
		
		      return this;
		    }
		  }, {
		    key: 'convertToAlterAccList',
		    value: function convertToAlterAccList(alterKeySpec) {
		      var max = Math.min(alterKeySpec.length, this.accList.length);
		      for (var i = 0; i < max; ++i) {
		        if (alterKeySpec[i]) {
		          this.accList[i].type = alterKeySpec[i];
		        }
		      }
		    }
		  }, {
		    key: 'format',
		    value: function format() {
		      if (!this.stave) {
		        throw new _vex.Vex.RERR('KeySignatureError', "Can't draw key signature without stave.");
		      }
		
		      this.width = 0;
		      this.glyphs = [];
		      this.xPositions = [0]; // initialize with initial x position
		      this.accList = _tables.Flow.keySignature(this.keySpec);
		      if (this.cancelKeySpec) {
		        this.convertToCancelAccList(this.cancelKeySpec);
		      }
		      var firstAccidentalType = this.accList.length > 0 ? this.accList[0].type : null;
		      if (this.alterKeySpec) {
		        this.convertToAlterAccList(this.alterKeySpec);
		      }
		
		      if (this.accList.length > 0) {
		        this.convertAccLines(this.stave.clef, firstAccidentalType);
		        for (var i = 0; i < this.accList.length; ++i) {
		          this.convertToGlyph(this.accList[i], this.accList[i + 1]);
		        }
		      }
		
		      this.formatted = true;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      if (!this.x) {
		        throw new _vex.Vex.RERR('KeySignatureError', "Can't draw key signature without x.");
		      }
		
		      if (!this.stave) {
		        throw new _vex.Vex.RERR('KeySignatureError', "Can't draw key signature without stave.");
		      }
		
		      if (!this.formatted) this.format();
		      this.setRendered();
		
		      for (var i = 0; i < this.glyphs.length; i++) {
		        var glyph = this.glyphs[i];
		        var x = this.x + this.xPositions[i];
		        glyph.setStave(this.stave);
		        glyph.setContext(this.stave.context);
		        glyph.renderToStave(x);
		      }
		    }
		  }]);

		  return KeySignature;
		}(_stavemodifier.StaveModifier);

	/***/ },
	/* 53 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.TimeSignature = undefined;
		
		var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _glyph3 = __webpack_require__(4);
		
		var _stavemodifier = __webpack_require__(45);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// Implements time signatures glyphs for staffs
		// See tables.js for the internal time signatures
		// representation
		
		var assertIsValidFraction = function assertIsValidFraction(timeSpec) {
		  var numbers = timeSpec.split('/').filter(function (number) {
		    return number !== '';
		  });
		
		  if (numbers.length !== 2) {
		    throw new _vex.Vex.RERR('BadTimeSignature', 'Invalid time spec: ' + timeSpec + '. Must be in the form "<numerator>/<denominator>"');
		  }
		
		  numbers.forEach(function (number) {
		    if (isNaN(Number(number))) {
		      throw new _vex.Vex.RERR('BadTimeSignature', 'Invalid time spec: ' + timeSpec + '. Must contain two valid numbers.');
		    }
		  });
		};
		
		var TimeSignature = exports.TimeSignature = function (_StaveModifier) {
		  _inherits(TimeSignature, _StaveModifier);
		
		  _createClass(TimeSignature, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'timesignatures';
		    }
		  }, {
		    key: 'glyphs',
		    get: function get() {
		      return {
		        'C': {
		          code: 'v41',
		          point: 40,
		          line: 2
		        },
		        'C|': {
		          code: 'vb6',
		          point: 40,
		          line: 2
		        }
		      };
		    }
		  }]);
		
		  function TimeSignature() {
		    var timeSpec = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];
		    var customPadding = arguments.length <= 1 || arguments[1] === undefined ? 15 : arguments[1];
		
		    _classCallCheck(this, TimeSignature);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TimeSignature).call(this));
		
		    _this.setAttribute('type', 'TimeSignature');
		
		    if (timeSpec === null) return _possibleConstructorReturn(_this);
		
		    var padding = customPadding;
		
		    _this.point = 40;
		    _this.topLine = 2;
		    _this.bottomLine = 4;
		    _this.setPosition(_stavemodifier.StaveModifier.Position.BEGIN);
		    _this.setTimeSig(timeSpec);
		    _this.setWidth(_this.timeSig.glyph.getMetrics().width);
		    _this.setPadding(padding);
		    return _this;
		  }
		
		  _createClass(TimeSignature, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return TimeSignature.CATEGORY;
		    }
		  }, {
		    key: 'parseTimeSpec',
		    value: function parseTimeSpec(timeSpec) {
		      if (timeSpec === 'C' || timeSpec === 'C|') {
		        var _TimeSignature$glyphs = TimeSignature.glyphs[timeSpec];
		        var line = _TimeSignature$glyphs.line;
		        var code = _TimeSignature$glyphs.code;
		        var point = _TimeSignature$glyphs.point;
		
		        return {
		          line: line,
		          num: false,
		          glyph: new _glyph3.Glyph(code, point)
		        };
		      }
		
		      assertIsValidFraction(timeSpec);
		
		      var _timeSpec$split$map = timeSpec.split('/').map(function (number) {
		        return number.split('');
		      });
		
		      var _timeSpec$split$map2 = _slicedToArray(_timeSpec$split$map, 2);
		
		      var topDigits = _timeSpec$split$map2[0];
		      var botDigits = _timeSpec$split$map2[1];
		
		
		      return {
		        num: true,
		        glyph: this.makeTimeSignatureGlyph(topDigits, botDigits)
		      };
		    }
		  }, {
		    key: 'makeTimeSignatureGlyph',
		    value: function makeTimeSignatureGlyph(topDigits, botDigits) {
		      var glyph = new _glyph3.Glyph('v0', this.point);
		      glyph.topGlyphs = [];
		      glyph.botGlyphs = [];
		
		      var topWidth = 0;
		      for (var i = 0; i < topDigits.length; ++i) {
		        var num = topDigits[i];
		        var topGlyph = new _glyph3.Glyph('v' + num, this.point);
		
		        glyph.topGlyphs.push(topGlyph);
		        topWidth += topGlyph.getMetrics().width;
		      }
		
		      var botWidth = 0;
		      for (var _i = 0; _i < botDigits.length; ++_i) {
		        var _num = botDigits[_i];
		        var botGlyph = new _glyph3.Glyph('v' + _num, this.point);
		
		        glyph.botGlyphs.push(botGlyph);
		        botWidth += botGlyph.getMetrics().width;
		      }
		
		      var width = topWidth > botWidth ? topWidth : botWidth;
		      var xMin = glyph.getMetrics().x_min;
		
		      glyph.getMetrics = function () {
		        return {
		          x_min: xMin,
		          x_max: xMin + width,
		          width: width
		        };
		      };
		
		      var topStartX = (width - topWidth) / 2.0;
		      var botStartX = (width - botWidth) / 2.0;
		
		      var that = this;
		      glyph.renderToStave = function renderToStave(x) {
		        var start_x = x + topStartX;
		        for (var _i2 = 0; _i2 < this.topGlyphs.length; ++_i2) {
		          var _glyph = this.topGlyphs[_i2];
		          _glyph3.Glyph.renderOutline(this.context, _glyph.metrics.outline, _glyph.scale, start_x + _glyph.x_shift, this.stave.getYForLine(that.topLine) + 1);
		          start_x += _glyph.getMetrics().width;
		        }
		
		        start_x = x + botStartX;
		        for (var _i3 = 0; _i3 < this.botGlyphs.length; ++_i3) {
		          var _glyph2 = this.botGlyphs[_i3];
		          that.placeGlyphOnLine(_glyph2, this.stave, _glyph2.line);
		          _glyph3.Glyph.renderOutline(this.context, _glyph2.metrics.outline, _glyph2.scale, start_x + _glyph2.x_shift, this.stave.getYForLine(that.bottomLine) + 1);
		          start_x += _glyph2.getMetrics().width;
		        }
		      };
		
		      return glyph;
		    }
		  }, {
		    key: 'getTimeSig',
		    value: function getTimeSig() {
		      return this.timeSig;
		    }
		  }, {
		    key: 'setTimeSig',
		    value: function setTimeSig(timeSpec) {
		      this.timeSig = this.parseTimeSpec(timeSpec);
		      return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      if (!this.x) {
		        throw new _vex.Vex.RERR('TimeSignatureError', "Can't draw time signature without x.");
		      }
		
		      if (!this.stave) {
		        throw new _vex.Vex.RERR('TimeSignatureError', "Can't draw time signature without stave.");
		      }
		
		      this.setRendered();
		      this.timeSig.glyph.setStave(this.stave);
		      this.timeSig.glyph.setContext(this.stave.context);
		      this.placeGlyphOnLine(this.timeSig.glyph, this.stave, this.timeSig.line);
		      this.timeSig.glyph.renderToStave(this.x);
		    }
		  }]);

		  return TimeSignature;
		}(_stavemodifier.StaveModifier);

	/***/ },
	/* 54 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Volta = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _stavemodifier = __webpack_require__(45);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author Larry Kuhns 2011
		
		var Volta = exports.Volta = function (_StaveModifier) {
		  _inherits(Volta, _StaveModifier);
		
		  _createClass(Volta, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'voltas';
		    }
		  }, {
		    key: 'type',
		    get: function get() {
		      return {
		        NONE: 1,
		        BEGIN: 2,
		        MID: 3,
		        END: 4,
		        BEGIN_END: 5
		      };
		    }
		  }]);
		
		  function Volta(type, number, x, y_shift) {
		    _classCallCheck(this, Volta);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Volta).call(this));
		
		    _this.setAttribute('type', 'Volta');
		    _this.volta = type;
		    _this.x = x;
		    _this.y_shift = y_shift;
		    _this.number = number;
		    _this.font = {
		      family: 'sans-serif',
		      size: 9,
		      weight: 'bold'
		    };
		    return _this;
		  }
		
		  _createClass(Volta, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Volta.CATEGORY;
		    }
		  }, {
		    key: 'setShiftY',
		    value: function setShiftY(y) {
		      this.y_shift = y;return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw(stave, x) {
		      var ctx = stave.checkContext();
		      this.setRendered();
		
		      var width = stave.width;
		      var top_y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;
		      var vert_height = 1.5 * stave.options.spacing_between_lines_px;
		      switch (this.volta) {
		        case Volta.type.BEGIN:
		          ctx.fillRect(this.x + x, top_y, 1, vert_height);
		          break;
		        case Volta.type.END:
		          width -= 5;
		          ctx.fillRect(this.x + x + width, top_y, 1, vert_height);
		          break;
		        case Volta.type.BEGIN_END:
		          width -= 3;
		          ctx.fillRect(this.x + x, top_y, 1, vert_height);
		          ctx.fillRect(this.x + x + width, top_y, 1, vert_height);
		          break;
		        default:
		          break;
		      }
		      // If the beginning of a volta, draw measure number
		      if (this.volta === Volta.type.BEGIN || this.volta === Volta.type.BEGIN_END) {
		        ctx.save();
		        ctx.setFont(this.font.family, this.font.size, this.font.weight);
		        ctx.fillText(this.number, this.x + x + 5, top_y + 15);
		        ctx.restore();
		      }
		
		      ctx.fillRect(this.x + x, top_y, width, 1);
		      return this;
		    }
		  }]);

		  return Volta;
		}(_stavemodifier.StaveModifier);

	/***/ },
	/* 55 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.TabStave = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _stave = __webpack_require__(43);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		
		var TabStave = exports.TabStave = function (_Stave) {
		  _inherits(TabStave, _Stave);
		
		  function TabStave(x, y, width, options) {
		    _classCallCheck(this, TabStave);
		
		    var tab_options = {
		      spacing_between_lines_px: 13,
		      num_lines: 6,
		      top_text_position: 1
		    };
		
		    _vex.Vex.Merge(tab_options, options);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TabStave).call(this, x, y, width, tab_options));
		
		    _this.setAttribute('type', 'TabStave');
		    return _this;
		  }
		
		  _createClass(TabStave, [{
		    key: 'getYForGlyphs',
		    value: function getYForGlyphs() {
		      return this.getYForLine(2.5);
		    }
		
		    // Deprecated
		
		  }, {
		    key: 'addTabGlyph',
		    value: function addTabGlyph() {
		      this.addClef('tab');
		      return this;
		    }
		  }]);

		  return TabStave;
		}(_stave.Stave);

	/***/ },
	/* 56 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.TabNote = undefined;
		
		var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _modifier = __webpack_require__(25);
		
		var _stem = __webpack_require__(17);
		
		var _stemmablenote = __webpack_require__(24);
		
		var _dot = __webpack_require__(26);
		
		var _glyph2 = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// The file implements notes for Tablature notation. This consists of one or
		// more fret positions, and can either be drawn with or without stems.
		//
		// See `tests/tabnote_tests.js` for usage examples
		
		// Gets the unused strings grouped together if consecutive.
		//
		// Parameters:
		// * num_lines - The number of lines
		// * strings_used - An array of numbers representing which strings have fret positions
		function getUnusedStringGroups(num_lines, strings_used) {
		  var stem_through = [];
		  var group = [];
		  for (var string = 1; string <= num_lines; string++) {
		    var is_used = strings_used.indexOf(string) > -1;
		
		    if (!is_used) {
		      group.push(string);
		    } else {
		      stem_through.push(group);
		      group = [];
		    }
		  }
		  if (group.length > 0) stem_through.push(group);
		
		  return stem_through;
		}
		
		// Gets groups of points that outline the partial stem lines
		// between fret positions
		//
		// Parameters:
		// * stem_Y - The `y` coordinate the stem is located on
		// * unused_strings - An array of groups of unused strings
		// * stave - The stave to use for reference
		// * stem_direction - The direction of the stem
		function getPartialStemLines(stem_y, unused_strings, stave, stem_direction) {
		  var up_stem = stem_direction !== 1;
		  var down_stem = stem_direction !== -1;
		
		  var line_spacing = stave.getSpacingBetweenLines();
		  var total_lines = stave.getNumLines();
		
		  var stem_lines = [];
		
		  unused_strings.forEach(function (strings) {
		    var containsLastString = strings.indexOf(total_lines) > -1;
		    var containsFirstString = strings.indexOf(1) > -1;
		
		    if (up_stem && containsFirstString || down_stem && containsLastString) {
		      return;
		    }
		
		    // If there's only one string in the group, push a duplicate value.
		    // We do this because we need 2 strings to convert into upper/lower y
		    // values.
		    if (strings.length === 1) {
		      strings.push(strings[0]);
		    }
		
		    var line_ys = [];
		    // Iterate through each group string and store it's y position
		    strings.forEach(function (string, index, strings) {
		      var isTopBound = string === 1;
		      var isBottomBound = string === total_lines;
		
		      // Get the y value for the appropriate staff line,
		      // we adjust for a 0 index array, since string numbers are index 1
		      var y = stave.getYForLine(string - 1);
		
		      // Unless the string is the first or last, add padding to each side
		      // of the line
		      if (index === 0 && !isTopBound) {
		        y -= line_spacing / 2 - 1;
		      } else if (index === strings.length - 1 && !isBottomBound) {
		        y += line_spacing / 2 - 1;
		      }
		
		      // Store the y value
		      line_ys.push(y);
		
		      // Store a subsequent y value connecting this group to the main
		      // stem above/below the stave if it's the top/bottom string
		      if (stem_direction === 1 && isTopBound) {
		        line_ys.push(stem_y - 2);
		      } else if (stem_direction === -1 && isBottomBound) {
		        line_ys.push(stem_y + 2);
		      }
		    });
		
		    // Add the sorted y values to the
		    stem_lines.push(line_ys.sort(function (a, b) {
		      return a - b;
		    }));
		  });
		
		  return stem_lines;
		}
		
		var TabNote = exports.TabNote = function (_StemmableNote) {
		  _inherits(TabNote, _StemmableNote);
		
		  _createClass(TabNote, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'tabnotes';
		    }
		
		    // Initialize the TabNote with a `tab_struct` full of properties
		    // and whether to `draw_stem` when rendering the note
		
		  }]);
		
		  function TabNote(tab_struct, draw_stem) {
		    _classCallCheck(this, TabNote);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TabNote).call(this, tab_struct));
		
		    _this.setAttribute('type', 'TabNote');
		
		    _this.ghost = false; // Renders parenthesis around notes
		    // Note properties
		    //
		    // The fret positions in the note. An array of `{ str: X, fret: X }`
		    _this.positions = tab_struct.positions;
		
		    // Render Options
		    _vex.Vex.Merge(_this.render_options, {
		      // font size for note heads and rests
		      glyph_font_scale: _tables.Flow.DEFAULT_TABLATURE_FONT_SCALE,
		      // Flag to draw a stem
		      draw_stem: draw_stem,
		      // Flag to draw dot modifiers
		      draw_dots: draw_stem,
		      // Flag to extend the main stem through the stave and fret positions
		      draw_stem_through_stave: false,
		      // vertical shift from stave line
		      y_shift: 0,
		      // normal glyph scale
		      scale: 1.0,
		      // default tablature font
		      font: '10pt Arial'
		    });
		
		    _this.glyph = _tables.Flow.durationToGlyph(_this.duration, _this.noteType);
		
		    if (!_this.glyph) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'Invalid note initialization data (No glyph found): ' + JSON.stringify(tab_struct));
		    }
		
		    _this.buildStem();
		
		    if (tab_struct.stem_direction) {
		      _this.setStemDirection(tab_struct.stem_direction);
		    } else {
		      _this.setStemDirection(_stem.Stem.UP);
		    }
		
		    // Renders parenthesis around notes
		    _this.ghost = false;
		    _this.updateWidth();
		    return _this;
		  }
		
		  // The ModifierContext category
		
		
		  _createClass(TabNote, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return TabNote.CATEGORY;
		    }
		
		    // Set as ghost `TabNote`, surrounds the fret positions with parenthesis.
		    // Often used for indicating frets that are being bent to
		
		  }, {
		    key: 'setGhost',
		    value: function setGhost(ghost) {
		      this.ghost = ghost;
		      this.updateWidth();
		      return this;
		    }
		
		    // Determine if the note has a stem
		
		  }, {
		    key: 'hasStem',
		    value: function hasStem() {
		      return this.render_options.draw_stem;
		    }
		
		    // Get the default stem extension for the note
		
		  }, {
		    key: 'getStemExtension',
		    value: function getStemExtension() {
		      var glyph = this.getGlyph();
		
		      if (this.stem_extension_override != null) {
		        return this.stem_extension_override;
		      }
		
		      if (glyph) {
		        return this.getStemDirection() === 1 ? glyph.tabnote_stem_up_extension : glyph.tabnote_stem_down_extension;
		      }
		
		      return 0;
		    }
		
		    // Add a dot to the note
		
		  }, {
		    key: 'addDot',
		    value: function addDot() {
		      var dot = new _dot.Dot();
		      this.dots += 1;
		      return this.addModifier(dot, 0);
		    }
		
		    // Calculate and store the width of the note
		
		  }, {
		    key: 'updateWidth',
		    value: function updateWidth() {
		      var _this2 = this;
		
		      this.glyphs = [];
		      this.width = 0;
		      for (var i = 0; i < this.positions.length; ++i) {
		        var fret = this.positions[i].fret;
		        if (this.ghost) fret = '(' + fret + ')';
		        var glyph = _tables.Flow.tabToGlyph(fret, this.render_options.scale);
		        this.glyphs.push(glyph);
		        this.width = Math.max(glyph.getWidth(), this.width);
		      }
		      // For some reason we associate a notehead glyph with a TabNote, and this
		      // glyph is used for certain width calculations. Of course, this is totally
		      // incorrect since a notehead is a poor approximation for the dimensions of
		      // a fret number which can have multiple digits. As a result, we must
		      // overwrite getWidth() to return the correct width
		      this.glyph.getWidth = function () {
		        return _this2.width;
		      };
		    }
		
		    // Set the `stave` to the note
		
		  }, {
		    key: 'setStave',
		    value: function setStave(stave) {
		      var _this3 = this;
		
		      _get(Object.getPrototypeOf(TabNote.prototype), 'setStave', this).call(this, stave);
		      this.context = stave.context;
		
		      // Calculate the fret number width based on font used
		      var i = void 0;
		      if (this.context) {
		        var ctx = this.context;
		        this.width = 0;
		
		        var _loop = function _loop() {
		          var glyph = _this3.glyphs[i];
		          var text = '' + glyph.text;
		          if (text.toUpperCase() !== 'X') {
		            ctx.save();
		            ctx.setRawFont(_this3.render_options.font);
		            glyph.width = ctx.measureText(text).width;
		            ctx.restore();
		            glyph.getWidth = function () {
		              return glyph.width;
		            };
		          }
		          _this3.width = Math.max(glyph.getWidth(), _this3.width);
		        };
		
		        for (i = 0; i < this.glyphs.length; ++i) {
		          _loop();
		        }
		        this.glyph.getWidth = function () {
		          return _this3.width;
		        };
		      }
		
		      // we subtract 1 from `line` because getYForLine expects a 0-based index,
		      // while the position.str is a 1-based index
		      var ys = this.positions.map(function (_ref) {
		        var line = _ref.str;
		        return stave.getYForLine(line - 1);
		      });
		
		      this.setYs(ys);
		
		      if (this.stem) {
		        this.stem.setYBounds(this.getStemY(), this.getStemY());
		      }
		
		      return this;
		    }
		
		    // Get the fret positions for the note
		
		  }, {
		    key: 'getPositions',
		    value: function getPositions() {
		      return this.positions;
		    }
		
		    // Add self to the provided modifier context `mc`
		
		  }, {
		    key: 'addToModifierContext',
		    value: function addToModifierContext(mc) {
		      this.setModifierContext(mc);
		      for (var i = 0; i < this.modifiers.length; ++i) {
		        this.modifierContext.addModifier(this.modifiers[i]);
		      }
		      this.modifierContext.addModifier(this);
		      this.preFormatted = false;
		      return this;
		    }
		
		    // Get the `x` coordinate to the right of the note
		
		  }, {
		    key: 'getTieRightX',
		    value: function getTieRightX() {
		      var tieStartX = this.getAbsoluteX();
		      var note_glyph_width = this.glyph.getWidth();
		      tieStartX += note_glyph_width / 2;
		      tieStartX += -this.width / 2 + this.width + 2;
		
		      return tieStartX;
		    }
		
		    // Get the `x` coordinate to the left of the note
		
		  }, {
		    key: 'getTieLeftX',
		    value: function getTieLeftX() {
		      var tieEndX = this.getAbsoluteX();
		      var note_glyph_width = this.glyph.getWidth();
		      tieEndX += note_glyph_width / 2;
		      tieEndX -= this.width / 2 + 2;
		
		      return tieEndX;
		    }
		
		    // Get the default `x` and `y` coordinates for a modifier at a specific
		    // `position` at a fret position `index`
		
		  }, {
		    key: 'getModifierStartXY',
		    value: function getModifierStartXY(position, index) {
		      if (!this.preFormatted) {
		        throw new _vex.Vex.RERR('UnformattedNote', "Can't call GetModifierStartXY on an unformatted note");
		      }
		
		      if (this.ys.length === 0) {
		        throw new _vex.Vex.RERR('NoYValues', 'No Y-Values calculated for this note.');
		      }
		
		      var x = 0;
		      if (position === _modifier.Modifier.Position.LEFT) {
		        x = -1 * 2; // extra_left_px
		      } else if (position === _modifier.Modifier.Position.RIGHT) {
		        x = this.width + 2; // extra_right_px
		      } else if (position === _modifier.Modifier.Position.BELOW || position === _modifier.Modifier.Position.ABOVE) {
		        var note_glyph_width = this.glyph.getWidth();
		        x = note_glyph_width / 2;
		      }
		
		      return {
		        x: this.getAbsoluteX() + x,
		        y: this.ys[index]
		      };
		    }
		
		    // Get the default line for rest
		
		  }, {
		    key: 'getLineForRest',
		    value: function getLineForRest() {
		      return this.positions[0].str;
		    }
		
		    // Pre-render formatting
		
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      if (this.preFormatted) return;
		      if (this.modifierContext) this.modifierContext.preFormat();
		      // width is already set during init()
		      this.setPreFormatted(true);
		    }
		
		    // Get the x position for the stem
		
		  }, {
		    key: 'getStemX',
		    value: function getStemX() {
		      return this.getCenterGlyphX();
		    }
		
		    // Get the y position for the stem
		
		  }, {
		    key: 'getStemY',
		    value: function getStemY() {
		      var num_lines = this.stave.getNumLines();
		
		      // The decimal staff line amounts provide optimal spacing between the
		      // fret number and the stem
		      var stemUpLine = -0.5;
		      var stemDownLine = num_lines - 0.5;
		      var stemStartLine = _stem.Stem.UP === this.stem_direction ? stemUpLine : stemDownLine;
		
		      return this.stave.getYForLine(stemStartLine);
		    }
		
		    // Get the stem extents for the tabnote
		
		  }, {
		    key: 'getStemExtents',
		    value: function getStemExtents() {
		      return this.stem.getExtents();
		    }
		
		    // Draw the fal onto the context
		
		  }, {
		    key: 'drawFlag',
		    value: function drawFlag() {
		      var beam = this.beam;
		      var glyph = this.glyph;
		      var context = this.context;
		      var stem = this.stem;
		      var stem_direction = this.stem_direction;
		      var _render_options = this.render_options;
		      var draw_stem = _render_options.draw_stem;
		      var glyph_font_scale = _render_options.glyph_font_scale;
		
		
		      var shouldDrawFlag = beam == null && draw_stem;
		
		      // Now it's the flag's turn.
		      if (glyph.flag && shouldDrawFlag) {
		        var flag_x = this.getStemX() + 1;
		        var flag_y = this.getStemY() - stem.getHeight();
		
		        var flag_code = stem_direction === _stem.Stem.DOWN ? glyph.code_flag_downstem // Down stems have flags on the left.
		        : glyph.code_flag_upstem;
		
		        // Draw the Flag
		        _glyph2.Glyph.renderGlyph(context, flag_x, flag_y, glyph_font_scale, flag_code);
		      }
		    }
		
		    // Render the modifiers onto the context
		
		  }, {
		    key: 'drawModifiers',
		    value: function drawModifiers() {
		      var _this4 = this;
		
		      // Draw the modifiers
		      this.modifiers.forEach(function (modifier) {
		        // Only draw the dots if enabled
		        if (modifier.getCategory() === 'dots' && !_this4.render_options.draw_dots) return;
		
		        modifier.setContext(_this4.context);
		        modifier.draw();
		      });
		    }
		
		    // Render the stem extension through the fret positions
		
		  }, {
		    key: 'drawStemThrough',
		    value: function drawStemThrough() {
		      var stem_x = this.getStemX();
		      var stem_y = this.getStemY();
		      var ctx = this.context;
		
		      var stem_through = this.render_options.draw_stem_through_stave;
		      var draw_stem = this.render_options.draw_stem;
		      if (draw_stem && stem_through) {
		        var total_lines = this.stave.getNumLines();
		        var strings_used = this.positions.map(function (position) {
		          return position.str;
		        });
		
		        var unused_strings = getUnusedStringGroups(total_lines, strings_used);
		        var stem_lines = getPartialStemLines(stem_y, unused_strings, this.getStave(), this.getStemDirection());
		
		        ctx.save();
		        ctx.setLineWidth(_stem.Stem.WIDTH);
		        stem_lines.forEach(function (bounds) {
		          if (bounds.length === 0) return;
		
		          ctx.beginPath();
		          ctx.moveTo(stem_x, bounds[0]);
		          ctx.lineTo(stem_x, bounds[bounds.length - 1]);
		          ctx.stroke();
		          ctx.closePath();
		        });
		        ctx.restore();
		      }
		    }
		
		    // Render the fret positions onto the context
		
		  }, {
		    key: 'drawPositions',
		    value: function drawPositions() {
		      var ctx = this.context;
		      var x = this.getAbsoluteX();
		      var ys = this.ys;
		      for (var i = 0; i < this.positions.length; ++i) {
		        var y = ys[i] + this.render_options.y_shift;
		        var _glyph = this.glyphs[i];
		
		        // Center the fret text beneath the notation note head
		        var note_glyph_width = this.glyph.getWidth();
		        var tab_x = x + note_glyph_width / 2 - _glyph.getWidth() / 2;
		
		        // FIXME: Magic numbers.
		        ctx.clearRect(tab_x - 2, y - 3, _glyph.getWidth() + 4, 6);
		
		        if (_glyph.code) {
		          _glyph2.Glyph.renderGlyph(ctx, tab_x, y, this.render_options.glyph_font_scale * this.render_options.scale, _glyph.code);
		        } else {
		          ctx.save();
		          ctx.setRawFont(this.render_options.font);
		          var _text = _glyph.text.toString();
		          ctx.fillText(_text, tab_x, y + 5 * this.render_options.scale);
		          ctx.restore();
		        }
		      }
		    }
		
		    // The main rendering function for the entire note
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		
		      if (!this.stave) {
		        throw new _vex.Vex.RERR('NoStave', "Can't draw without a stave.");
		      }
		
		      if (this.ys.length === 0) {
		        throw new _vex.Vex.RERR('NoYValues', "Can't draw note without Y values.");
		      }
		
		      this.setRendered();
		      var render_stem = this.beam == null && this.render_options.draw_stem;
		
		      this.drawPositions();
		      this.drawStemThrough();
		
		      var stem_x = this.getStemX();
		
		      this.stem.setNoteHeadXBounds(stem_x, stem_x);
		
		      if (render_stem) {
		        this.context.openGroup('stem', null, { pointerBBox: true });
		        this.stem.setContext(this.context).draw();
		        this.context.closeGroup();
		      }
		
		      this.drawFlag();
		      this.drawModifiers();
		    }
		  }]);

		  return TabNote;
		}(_stemmablenote.StemmableNote);

	/***/ },
	/* 57 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.VibratoBracket = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		var _vibrato = __webpack_require__(42);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author: Balazs Forian-Szabo
		//
		// ## Description
		//
		// This file implements `VibratoBrackets`
		// that renders vibrato effect between two notes.
		
		// To enable logging for this class. Set `Vex.Flow.VibratoBracket.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (VibratoBracket.DEBUG) _vex.Vex.L('Vex.Flow.VibratoBracket', args);
		}
		
		var VibratoBracket = exports.VibratoBracket = function (_Element) {
		  _inherits(VibratoBracket, _Element);
		
		  // bracket_data = {
		  //   start: Vex.Flow.Note (optional)
		  //   stop: Vex.Flow.Note (optional)
		  // };
		  // Either the stop or start note must be set, or both of them.
		  // A null value for the start or stop note indicates that the vibrato
		  // is drawn from the beginning or until the end of the stave accordingly.
		  function VibratoBracket(bracket_data) {
		    _classCallCheck(this, VibratoBracket);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(VibratoBracket).call(this));
		
		    _this.setAttribute('type', 'VibratoBracket');
		
		    _this.start = bracket_data.start;
		    _this.stop = bracket_data.stop;
		
		    _this.line = 1;
		
		    _this.render_options = {
		      harsh: false,
		      wave_height: 6,
		      wave_width: 4,
		      wave_girth: 2
		    };
		    return _this;
		  }
		
		  // Set line position of the vibrato bracket
		
		
		  _createClass(VibratoBracket, [{
		    key: 'setLine',
		    value: function setLine(line) {
		      this.line = line;return this;
		    }
		  }, {
		    key: 'setHarsh',
		    value: function setHarsh(harsh) {
		      this.render_options.harsh = harsh;return this;
		    }
		
		    // Draw the vibrato bracket on the rendering context
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var ctx = this.context;
		      this.setRendered();
		
		      var y = this.start ? this.start.getStave().getYForTopText(this.line) : this.stop.getStave().getYForTopText(this.line);
		
		      // If start note is not set then vibrato will be drawn
		      // from the beginning of the stave
		      var start_x = this.start ? this.start.getAbsoluteX() : this.stop.getStave().getTieStartX();
		
		      // If stop note is not set then vibrato will be drawn
		      // until the end of the stave
		      var stop_x = this.stop ? this.stop.getAbsoluteX() - this.stop.getWidth() - 5 : this.start.getStave().getTieEndX() - 10;
		
		      this.render_options.vibrato_width = stop_x - start_x;
		
		      L('Rendering VibratoBracket: start_x:', start_x, 'stop_x:', stop_x, 'y:', y);
		
		      _vibrato.Vibrato.renderVibrato(ctx, start_x, y, this.render_options);
		    }
		  }]);

		  return VibratoBracket;
		}(_element.Element);

	/***/ },
	/* 58 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.ClefNote = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _boundingbox = __webpack_require__(8);
		
		var _note = __webpack_require__(22);
		
		var _clef = __webpack_require__(51);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Copyright Mohit Muthanna 2010
		//
		// Author Taehoon Moon 2014
		
		/** @constructor */
		var ClefNote = exports.ClefNote = function (_Note) {
		  _inherits(ClefNote, _Note);
		
		  _createClass(ClefNote, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'clefnote';
		    }
		  }]);
		
		  function ClefNote(type, size, annotation) {
		    _classCallCheck(this, ClefNote);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ClefNote).call(this, { duration: 'b' }));
		
		    _this.setAttribute('type', 'ClefNote');
		
		    _this.setType(type, size, annotation);
		
		    // Note properties
		    _this.ignore_ticks = true;
		    return _this;
		  }
		
		  _createClass(ClefNote, [{
		    key: 'setType',
		    value: function setType(type, size, annotation) {
		      this.type = type;
		      this.clef_obj = new _clef.Clef(type, size, annotation);
		      this.clef = this.clef_obj.clef;
		      this.glyph = new _glyph.Glyph(this.clef.code, this.clef.point);
		      this.setWidth(this.glyph.getMetrics().width);
		      return this;
		    }
		  }, {
		    key: 'getClef',
		    value: function getClef() {
		      return this.clef;
		    }
		  }, {
		    key: 'setContext',
		    value: function setContext(context) {
		      this.context = context;
		      this.glyph.setContext(this.context);
		      return this;
		    }
		  }, {
		    key: 'getBoundingBox',
		    value: function getBoundingBox() {
		      return new _boundingbox.BoundingBox(0, 0, 0, 0);
		    }
		  }, {
		    key: 'addToModifierContext',
		    value: function addToModifierContext() {
		      /* overridden to ignore */
		      return this;
		    }
		  }, {
		    key: 'getCategory',
		    value: function getCategory() {
		      return ClefNote.CATEGORY;
		    }
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      this.setPreFormatted(true);
		      return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      if (!this.stave) throw new _vex.Vex.RERR('NoStave', "Can't draw without a stave.");
		
		      if (!this.glyph.getContext()) {
		        this.glyph.setContext(this.context);
		      }
		
		      this.setRendered();
		      var abs_x = this.getAbsoluteX();
		
		      this.glyph.setStave(this.stave);
		      this.glyph.setYShift(this.stave.getYForLine(this.clef.line) - this.stave.getYForGlyphs());
		      this.glyph.renderToStave(abs_x);
		
		      // If the Vex.Flow.Clef has an annotation, such as 8va, draw it.
		      if (this.clef_obj.annotation !== undefined) {
		        var attachment = new _glyph.Glyph(this.clef_obj.annotation.code, this.clef_obj.annotation.point);
		        if (!attachment.getContext()) {
		          attachment.setContext(this.context);
		        }
		        attachment.setStave(this.stave);
		        attachment.setYShift(this.stave.getYForLine(this.clef_obj.annotation.line) - this.stave.getYForGlyphs());
		        attachment.setXShift(this.clef_obj.annotation.x_shift);
		        attachment.renderToStave(abs_x);
		      }
		    }
		  }]);

		  return ClefNote;
		}(_note.Note);

	/***/ },
	/* 59 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.TimeSigNote = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _boundingbox = __webpack_require__(8);
		
		var _note = __webpack_require__(22);
		
		var _timesignature = __webpack_require__(53);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author Taehoon Moon 2014
		
		var TimeSigNote = exports.TimeSigNote = function (_Note) {
		  _inherits(TimeSigNote, _Note);
		
		  function TimeSigNote(timeSpec, customPadding) {
		    _classCallCheck(this, TimeSigNote);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TimeSigNote).call(this, { duration: 'b' }));
		
		    _this.setAttribute('type', 'TimeSigNote');
		
		    var timeSignature = new _timesignature.TimeSignature(timeSpec, customPadding);
		    _this.timeSig = timeSignature.getTimeSig();
		    _this.setWidth(_this.timeSig.glyph.getMetrics().width);
		
		    // Note properties
		    _this.ignore_ticks = true;
		    return _this;
		  }
		
		  _createClass(TimeSigNote, [{
		    key: 'getBoundingBox',
		    value: function getBoundingBox() {
		      return new _boundingbox.BoundingBox(0, 0, 0, 0);
		    }
		  }, {
		    key: 'addToModifierContext',
		    value: function addToModifierContext() {
		      /* overridden to ignore */
		      return this;
		    }
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      this.setPreFormatted(true);
		      return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.stave.checkContext();
		      this.setRendered();
		
		      if (!this.timeSig.glyph.getContext()) {
		        this.timeSig.glyph.setContext(this.context);
		      }
		
		      this.timeSig.glyph.setStave(this.stave);
		      this.timeSig.glyph.setYShift(this.stave.getYForLine(this.timeSig.line) - this.stave.getYForGlyphs());
		      this.timeSig.glyph.renderToStave(this.getAbsoluteX());
		    }
		  }]);

		  return TimeSigNote;
		}(_note.Note);

	/***/ },
	/* 60 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.TabSlide = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tabtie = __webpack_require__(34);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// This class implements varies types of ties between contiguous notes. The
		// ties include: regular ties, hammer ons, pull offs, and slides.
		
		var TabSlide = exports.TabSlide = function (_TabTie) {
		  _inherits(TabSlide, _TabTie);
		
		  _createClass(TabSlide, null, [{
		    key: 'createSlideUp',
		    value: function createSlideUp(notes) {
		      return new TabSlide(notes, TabSlide.SLIDE_UP);
		    }
		  }, {
		    key: 'createSlideDown',
		    value: function createSlideDown(notes) {
		      return new TabSlide(notes, TabSlide.SLIDE_DOWN);
		    }
		  }, {
		    key: 'SLIDE_UP',
		    get: function get() {
		      return 1;
		    }
		  }, {
		    key: 'SLIDE_DOWN',
		    get: function get() {
		      return -1;
		    }
		  }]);
		
		  function TabSlide(notes, direction) {
		    _classCallCheck(this, TabSlide);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TabSlide).call(this, notes, 'sl.'));
		    /**
		     * Notes is a struct that has:
		     *
		     *  {
		     *    first_note: Note,
		     *    last_note: Note,
		     *    first_indices: [n1, n2, n3],
		     *    last_indices: [n1, n2, n3]
		     *  }
		     *
		     **/
		
		
		    _this.setAttribute('type', 'TabSlide');
		
		    if (!direction) {
		      var first_fret = notes.first_note.getPositions()[0].fret;
		      var last_fret = notes.last_note.getPositions()[0].fret;
		
		      direction = parseInt(first_fret, 10) > parseInt(last_fret, 10) ? TabSlide.SLIDE_DOWN : TabSlide.SLIDE_UP;
		    }
		
		    _this.slide_direction = direction;
		    _this.render_options.cp1 = 11;
		    _this.render_options.cp2 = 14;
		    _this.render_options.y_shift = 0.5;
		
		    _this.setFont({ font: 'Times', size: 10, style: 'bold italic' });
		    _this.setNotes(notes);
		    return _this;
		  }
		
		  _createClass(TabSlide, [{
		    key: 'renderTie',
		    value: function renderTie(params) {
		      if (params.first_ys.length === 0 || params.last_ys.length === 0) {
		        throw new _vex.Vex.RERR('BadArguments', 'No Y-values to render');
		      }
		
		      var ctx = this.context;
		      var first_x_px = params.first_x_px;
		      var first_ys = params.first_ys;
		      var last_x_px = params.last_x_px;
		
		      var direction = this.slide_direction;
		      if (direction !== TabSlide.SLIDE_UP && direction !== TabSlide.SLIDE_DOWN) {
		        throw new _vex.Vex.RERR('BadSlide', 'Invalid slide direction');
		      }
		
		      for (var i = 0; i < this.first_indices.length; ++i) {
		        var slide_y = first_ys[this.first_indices[i]] + this.render_options.y_shift;
		
		        if (isNaN(slide_y)) {
		          throw new _vex.Vex.RERR('BadArguments', 'Bad indices for slide rendering.');
		        }
		
		        ctx.beginPath();
		        ctx.moveTo(first_x_px, slide_y + 3 * direction);
		        ctx.lineTo(last_x_px, slide_y - 3 * direction);
		        ctx.closePath();
		        ctx.stroke();
		      }
		
		      this.setRendered();
		    }
		  }]);

		  return TabSlide;
		}(_tabtie.TabTie);

	/***/ },
	/* 61 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.GraceNote = undefined;
		
		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
		
		var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _stavenote = __webpack_require__(20);
		
		var _tables = __webpack_require__(2);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		
		var GraceNote = exports.GraceNote = function (_StaveNote) {
		  _inherits(GraceNote, _StaveNote);
		
		  _createClass(GraceNote, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'gracenotes';
		    }
		  }, {
		    key: 'LEDGER_LINE_OFFSET',
		    get: function get() {
		      return 2;
		    }
		  }, {
		    key: 'SCALE',
		    get: function get() {
		      return 0.66;
		    }
		  }]);
		
		  function GraceNote(note_struct) {
		    _classCallCheck(this, GraceNote);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(GraceNote).call(this, _extends(note_struct, {
		      glyph_font_scale: _tables.Flow.DEFAULT_NOTATION_FONT_SCALE * GraceNote.SCALE,
		      stroke_px: GraceNote.LEDGER_LINE_OFFSET
		    })));
		
		    _this.setAttribute('type', 'GraceNote');
		
		    _this.slash = note_struct.slash;
		    _this.slur = true;
		
		    _this.buildNoteHeads();
		
		    _this.width = 3;
		    return _this;
		  }
		
		  _createClass(GraceNote, [{
		    key: 'getStemExtension',
		    value: function getStemExtension() {
		      var glyph = this.getGlyph();
		
		      if (this.stem_extension_override != null) {
		        return this.stem_extension_override;
		      }
		
		      if (glyph) {
		        return this.getStemDirection() === 1 ? glyph.gracenote_stem_up_extension : glyph.gracenote_stem_down_extension;
		      }
		
		      return 0;
		    }
		  }, {
		    key: 'getCategory',
		    value: function getCategory() {
		      return GraceNote.CATEGORY;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      _get(Object.getPrototypeOf(GraceNote.prototype), 'draw', this).call(this);
		      this.setRendered();
		      var ctx = this.context;
		      var stem_direction = this.getStemDirection();
		
		      if (this.slash) {
		        ctx.beginPath();
		
		        var x = this.getAbsoluteX();
		        var y = this.getYs()[0] - this.stem.getHeight() / 2.8;
		        if (stem_direction === 1) {
		          x += 1;
		          ctx.moveTo(x, y);
		          ctx.lineTo(x + 13, y - 9);
		        } else if (stem_direction === -1) {
		          x -= 4;
		          y += 1;
		          ctx.moveTo(x, y);
		          ctx.lineTo(x + 13, y + 9);
		        }
		
		        ctx.closePath();
		        ctx.stroke();
		      }
		    }
		  }]);

		  return GraceNote;
		}(_stavenote.StaveNote);

	/***/ },
	/* 62 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.GraceTabNote = undefined;
		
		var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tabnote = __webpack_require__(56);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// @author Balazs Forian-Szabo
		//
		// ## Description
		//
		// A basic implementation of grace notes
		// to be rendered on a tab stave.
		//
		// See `tests/gracetabnote_tests.js` for usage examples.
		
		var GraceTabNote = exports.GraceTabNote = function (_TabNote) {
		  _inherits(GraceTabNote, _TabNote);
		
		  _createClass(GraceTabNote, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'gracetabnotes';
		    }
		  }]);
		
		  function GraceTabNote(note_struct) {
		    _classCallCheck(this, GraceTabNote);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(GraceTabNote).call(this, note_struct, false));
		
		    _this.setAttribute('type', 'GraceTabNote');
		
		    _vex.Vex.Merge(_this.render_options, {
		      // vertical shift from stave line
		      y_shift: 0.3,
		      // grace glyph scale
		      scale: 0.6,
		      // grace tablature font
		      font: '7.5pt Arial'
		    });
		
		    _this.updateWidth();
		    return _this;
		  }
		
		  _createClass(GraceTabNote, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return GraceTabNote.CATEGORY;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      _get(Object.getPrototypeOf(GraceTabNote.prototype), 'draw', this).call(this);
		      this.setRendered();
		    }
		  }]);

		  return GraceTabNote;
		}(_tabnote.TabNote);

	/***/ },
	/* 63 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Tuning = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// This class implements varies types of tunings for tablature.
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var Tuning = exports.Tuning = function () {
		  _createClass(Tuning, null, [{
		    key: 'names',
		    get: function get() {
		      return {
		        'standard': 'E/5,B/4,G/4,D/4,A/3,E/3',
		        'dagdad': 'D/5,A/4,G/4,D/4,A/3,D/3',
		        'dropd': 'E/5,B/4,G/4,D/4,A/3,D/3',
		        'eb': 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',
		        'standardBanjo': 'D/5,B/4,G/4,D/4,G/5'
		      };
		    }
		  }]);
		
		  function Tuning() {
		    var tuningString = arguments.length <= 0 || arguments[0] === undefined ? 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2' : arguments[0];
		
		    _classCallCheck(this, Tuning);
		
		    // Default to standard tuning.
		    this.setTuning(tuningString);
		  }
		
		  _createClass(Tuning, [{
		    key: 'noteToInteger',
		    value: function noteToInteger(noteString) {
		      return _tables.Flow.keyProperties(noteString).int_value;
		    }
		  }, {
		    key: 'setTuning',
		    value: function setTuning(noteString) {
		      if (Tuning.names[noteString]) {
		        noteString = Tuning.names[noteString];
		      }
		
		      this.tuningString = noteString;
		      this.tuningValues = [];
		      this.numStrings = 0;
		
		      var keys = noteString.split(/\s*,\s*/);
		      if (keys.length === 0) {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid tuning string: ' + noteString);
		      }
		
		      this.numStrings = keys.length;
		      for (var i = 0; i < this.numStrings; ++i) {
		        this.tuningValues[i] = this.noteToInteger(keys[i]);
		      }
		    }
		  }, {
		    key: 'getValueForString',
		    value: function getValueForString(stringNum) {
		      var s = parseInt(stringNum, 10);
		      if (s < 1 || s > this.numStrings) {
		        throw new _vex.Vex.RERR('BadArguments', 'String number must be between 1 and ' + this.numStrings + ':' + stringNum);
		      }
		
		      return this.tuningValues[s - 1];
		    }
		  }, {
		    key: 'getValueForFret',
		    value: function getValueForFret(fretNum, stringNum) {
		      var stringValue = this.getValueForString(stringNum);
		      var f = parseInt(fretNum, 10);
		
		      if (f < 0) {
		        throw new _vex.Vex.RERR('BadArguments', 'Fret number must be 0 or higher: ' + fretNum);
		      }
		
		      return stringValue + f;
		    }
		  }, {
		    key: 'getNoteForFret',
		    value: function getNoteForFret(fretNum, stringNum) {
		      var noteValue = this.getValueForFret(fretNum, stringNum);
		
		      var octave = Math.floor(noteValue / 12);
		      var value = noteValue % 12;
		
		      return _tables.Flow.integerToNote(value) + '/' + octave;
		    }
		  }]);

		  return Tuning;
		}();

	/***/ },
	/* 64 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.KeyManager = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This class implements diatonic key management.
		
		var _vex = __webpack_require__(1);
		
		var _music = __webpack_require__(30);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var KeyManager = exports.KeyManager = function () {
		  function KeyManager(key) {
		    _classCallCheck(this, KeyManager);
		
		    this.music = new _music.Music();
		    this.setKey(key);
		  }
		
		  _createClass(KeyManager, [{
		    key: 'setKey',
		    value: function setKey(key) {
		      this.key = key;
		      this.reset();
		      return this;
		    }
		  }, {
		    key: 'getKey',
		    value: function getKey() {
		      return this.key;
		    }
		  }, {
		    key: 'reset',
		    value: function reset() {
		      this.keyParts = this.music.getKeyParts(this.key);
		
		      this.keyString = this.keyParts.root;
		      if (this.keyParts.accidental) this.keyString += this.keyParts.accidental;
		
		      var is_supported_type = _music.Music.scaleTypes[this.keyParts.type];
		      if (!is_supported_type) {
		        throw new _vex.Vex.RERR('BadArguments', 'Unsupported key type: ' + this.key);
		      }
		
		      this.scale = this.music.getScaleTones(this.music.getNoteValue(this.keyString), _music.Music.scaleTypes[this.keyParts.type]);
		
		      this.scaleMap = {};
		      this.scaleMapByValue = {};
		      this.originalScaleMapByValue = {};
		
		      var noteLocation = _music.Music.root_indices[this.keyParts.root];
		
		      for (var i = 0; i < _music.Music.roots.length; ++i) {
		        var index = (noteLocation + i) % _music.Music.roots.length;
		        var rootName = _music.Music.roots[index];
		
		        var noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);
		        this.scaleMap[rootName] = noteName;
		        this.scaleMapByValue[this.scale[i]] = noteName;
		        this.originalScaleMapByValue[this.scale[i]] = noteName;
		      }
		
		      return this;
		    }
		  }, {
		    key: 'getAccidental',
		    value: function getAccidental(key) {
		      var root = this.music.getKeyParts(key).root;
		      var parts = this.music.getNoteParts(this.scaleMap[root]);
		
		      return {
		        note: this.scaleMap[root],
		        accidental: parts.accidental
		      };
		    }
		  }, {
		    key: 'selectNote',
		    value: function selectNote(note) {
		      note = note.toLowerCase();
		      var parts = this.music.getNoteParts(note);
		
		      // First look for matching note in our altered scale
		      var scaleNote = this.scaleMap[parts.root];
		      var modparts = this.music.getNoteParts(scaleNote);
		
		      if (scaleNote === note) {
		        return {
		          'note': scaleNote,
		          'accidental': parts.accidental,
		          'change': false
		        };
		      }
		
		      // Then search for a note of equivalent value in our altered scale
		      var valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];
		      if (valueNote != null) {
		        return {
		          'note': valueNote,
		          'accidental': this.music.getNoteParts(valueNote).accidental,
		          'change': false
		        };
		      }
		
		      // Then search for a note of equivalent value in the original scale
		      var originalValueNote = this.originalScaleMapByValue[this.music.getNoteValue(note)];
		      if (originalValueNote != null) {
		        this.scaleMap[modparts.root] = originalValueNote;
		        delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];
		        this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;
		        return {
		          'note': originalValueNote,
		          'accidental': this.music.getNoteParts(originalValueNote).accidental,
		          'change': true
		        };
		      }
		
		      // Then try to unmodify a currently modified note.
		      if (modparts.root === note) {
		        delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];
		        this.scaleMapByValue[this.music.getNoteValue(modparts.root)] = modparts.root;
		        this.scaleMap[modparts.root] = modparts.root;
		        return {
		          'note': modparts.root,
		          'accidental': null,
		          'change': true
		        };
		      }
		
		      // Last resort -- shitshoot
		      delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];
		      this.scaleMapByValue[this.music.getNoteValue(note)] = note;
		
		      delete this.scaleMap[modparts.root];
		      this.scaleMap[modparts.root] = note;
		
		      return {
		        note: note,
		        'accidental': parts.accidental,
		        'change': true
		      };
		    }
		  }]);

		  return KeyManager;
		}();

	/***/ },
	/* 65 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.StaveHairpin = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		var _modifier = __webpack_require__(25);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// This class by Raffaele Viglianti, 2012 http://itisnotsound.wordpress.com/
		//
		// This class implements hairpins between notes.
		// Hairpins can be either Crescendo or Descrescendo.
		
		var StaveHairpin = exports.StaveHairpin = function (_Element) {
		  _inherits(StaveHairpin, _Element);
		
		  _createClass(StaveHairpin, null, [{
		    key: 'FormatByTicksAndDraw',
		
		
		    /* Helper function to convert ticks into pixels.
		     * Requires a Formatter with voices joined and formatted (to
		     * get pixels per tick)
		     *
		     * options is struct that has:
		     *
		     *  {
		     *   height: px,
		     *   y_shift: px, //vertical offset
		     *   left_shift_ticks: 0, //left horizontal offset expressed in ticks
		     *   right_shift_ticks: 0 // right horizontal offset expressed in ticks
		     *  }
		     *
		     **/
		    value: function FormatByTicksAndDraw(ctx, formatter, notes, type, position, options) {
		      var ppt = formatter.pixelsPerTick;
		
		      if (ppt == null) {
		        throw new _vex.Vex.RuntimeError('BadArguments', 'A valid Formatter must be provide to draw offsets by ticks.');
		      }
		
		      var l_shift_px = ppt * options.left_shift_ticks;
		      var r_shift_px = ppt * options.right_shift_ticks;
		
		      var hairpin_options = {
		        height: options.height,
		        y_shift: options.y_shift,
		        left_shift_px: l_shift_px,
		        right_shift_px: r_shift_px };
		
		      new StaveHairpin({
		        first_note: notes.first_note,
		        last_note: notes.last_note
		      }, type).setContext(ctx).setRenderOptions(hairpin_options).setPosition(position).draw();
		    }
		
		    /**
		     * Create a new hairpin from the specified notes.
		     *
		     * @constructor
		     * @param {!Object} notes The notes to tie up.
		     * @param {!Object} type The type of hairpin
		     */
		
		  }, {
		    key: 'type',
		    get: function get() {
		      return {
		        CRESC: 1,
		        DECRESC: 2
		      };
		    }
		  }]);
		
		  function StaveHairpin(notes, type) {
		    _classCallCheck(this, StaveHairpin);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StaveHairpin).call(this));
		    /**
		     * Notes is a struct that has:
		     *
		     *  {
		     *    first_note: Note,
		     *    last_note: Note,
		     *  }
		     *
		     **/
		
		
		    _this.setAttribute('type', 'StaveHairpin');
		    _this.notes = notes;
		    _this.hairpin = type;
		    _this.position = _modifier.Modifier.Position.BELOW;
		
		    _this.render_options = {
		      height: 10,
		      y_shift: 0, // vertical offset
		      left_shift_px: 0, // left horizontal offset
		      right_shift_px: 0 };
		
		    _this.setNotes(notes);
		    return _this;
		  }
		
		  _createClass(StaveHairpin, [{
		    key: 'setPosition',
		    value: function setPosition(position) {
		      if (position === _modifier.Modifier.Position.ABOVE || position === _modifier.Modifier.Position.BELOW) {
		        this.position = position;
		      }
		      return this;
		    }
		  }, {
		    key: 'setRenderOptions',
		    value: function setRenderOptions(options) {
		      if (options.height != null && options.y_shift != null && options.left_shift_px != null && options.right_shift_px != null) {
		        this.render_options = options;
		      }
		      return this;
		    }
		
		    /**
		     * Set the notes to attach this hairpin to.
		     *
		     * @param {!Object} notes The start and end notes.
		     */
		
		  }, {
		    key: 'setNotes',
		    value: function setNotes(notes) {
		      if (!notes.first_note && !notes.last_note) {
		        throw new _vex.Vex.RuntimeError('BadArguments', 'Hairpin needs to have either first_note or last_note set.');
		      }
		
		      // Success. Lets grab 'em notes.
		      this.first_note = notes.first_note;
		      this.last_note = notes.last_note;
		      return this;
		    }
		  }, {
		    key: 'renderHairpin',
		    value: function renderHairpin(params) {
		      var ctx = this.checkContext();
		      var dis = this.render_options.y_shift + 20;
		      var y_shift = params.first_y;
		
		      if (this.position === _modifier.Modifier.Position.ABOVE) {
		        dis = -dis + 30;
		        y_shift = params.first_y - params.staff_height;
		      }
		
		      var l_shift = this.render_options.left_shift_px;
		      var r_shift = this.render_options.right_shift_px;
		
		      ctx.beginPath();
		
		      switch (this.hairpin) {
		        case StaveHairpin.type.CRESC:
		          ctx.moveTo(params.last_x + r_shift, y_shift + dis);
		          ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height / 2 + dis);
		          ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height + dis);
		          break;
		        case StaveHairpin.type.DECRESC:
		          ctx.moveTo(params.first_x + l_shift, y_shift + dis);
		          ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height / 2 + dis);
		          ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height + dis);
		          break;
		        default:
		          // Default is NONE, so nothing to draw
		          break;
		      }
		
		      ctx.stroke();
		      ctx.closePath();
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      this.setRendered();
		
		      var firstNote = this.first_note;
		      var lastNote = this.last_note;
		
		      var start = firstNote.getModifierStartXY(this.position, 0);
		      var end = lastNote.getModifierStartXY(this.position, 0);
		
		      this.renderHairpin({
		        first_x: start.x,
		        last_x: end.x,
		        first_y: firstNote.getStave().y + firstNote.getStave().height,
		        last_y: lastNote.getStave().y + lastNote.getStave().height,
		        staff_height: firstNote.getStave().height
		      });
		      return true;
		    }
		  }]);

		  return StaveHairpin;
		}(_element.Element);

	/***/ },
	/* 66 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Curve = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // VexFlow - Music Engraving for HTML5
		// Copyright Mohit Muthanna 2010
		//
		// This class implements curves (for slurs)
		
		var Curve = exports.Curve = function (_Element) {
		  _inherits(Curve, _Element);
		
		  _createClass(Curve, null, [{
		    key: 'Position',
		    get: function get() {
		      return {
		        NEAR_HEAD: 1,
		        NEAR_TOP: 2
		      };
		    }
		  }, {
		    key: 'PositionString',
		    get: function get() {
		      return {
		        nearHead: Curve.Position.NEAR_HEAD,
		        nearTop: Curve.Position.NEAR_TOP
		      };
		    }
		
		    // from: Start note
		    // to: End note
		    // options:
		    //    cps: List of control points
		    //    x_shift: pixels to shift
		    //    y_shift: pixels to shift
		
		  }]);
		
		  function Curve(from, to, options) {
		    _classCallCheck(this, Curve);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Curve).call(this));
		
		    _this.setAttribute('type', 'Curve');
		
		    _this.render_options = {
		      spacing: 2,
		      thickness: 2,
		      x_shift: 0,
		      y_shift: 10,
		      position: Curve.Position.NEAR_HEAD,
		      position_end: Curve.Position.NEAR_HEAD,
		      invert: false,
		      cps: [{ x: 0, y: 10 }, { x: 0, y: 10 }]
		    };
		
		    _vex.Vex.Merge(_this.render_options, options);
		    _this.setNotes(from, to);
		    return _this;
		  }
		
		  _createClass(Curve, [{
		    key: 'setNotes',
		    value: function setNotes(from, to) {
		      if (!from && !to) {
		        throw new _vex.Vex.RuntimeError('BadArguments', 'Curve needs to have either first_note or last_note set.');
		      }
		
		      this.from = from;
		      this.to = to;
		      return this;
		    }
		
		    /**
		     * @return {boolean} Returns true if this is a partial bar.
		     */
		
		  }, {
		    key: 'isPartial',
		    value: function isPartial() {
		      return !this.from || !this.to;
		    }
		  }, {
		    key: 'renderCurve',
		    value: function renderCurve(params) {
		      var ctx = this.context;
		      var cps = this.render_options.cps;
		
		      var x_shift = this.render_options.x_shift;
		      var y_shift = this.render_options.y_shift * params.direction;
		
		      var first_x = params.first_x + x_shift;
		      var first_y = params.first_y + y_shift;
		      var last_x = params.last_x - x_shift;
		      var last_y = params.last_y + y_shift;
		      var thickness = this.render_options.thickness;
		
		      var cp_spacing = (last_x - first_x) / (cps.length + 2);
		
		      ctx.beginPath();
		      ctx.moveTo(first_x, first_y);
		      ctx.bezierCurveTo(first_x + cp_spacing + cps[0].x, first_y + cps[0].y * params.direction, last_x - cp_spacing + cps[1].x, last_y + cps[1].y * params.direction, last_x, last_y);
		      ctx.bezierCurveTo(last_x - cp_spacing + cps[1].x, last_y + (cps[1].y + thickness) * params.direction, first_x + cp_spacing + cps[0].x, first_y + (cps[0].y + thickness) * params.direction, first_x, first_y);
		      ctx.stroke();
		      ctx.closePath();
		      ctx.fill();
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      this.setRendered();
		
		      var first_note = this.from;
		      var last_note = this.to;
		      var first_x = void 0;
		      var last_x = void 0;
		      var first_y = void 0;
		      var last_y = void 0;
		      var stem_direction = void 0;
		
		      var metric = 'baseY';
		      var end_metric = 'baseY';
		
		      function getPosition(position) {
		        return typeof position === 'string' ? Curve.PositionString[position] : position;
		      }
		      var position = getPosition(this.render_options.position);
		      var position_end = getPosition(this.render_options.position_end);
		
		      if (position === Curve.Position.NEAR_TOP) {
		        metric = 'topY';
		        end_metric = 'topY';
		      }
		
		      if (position_end === Curve.Position.NEAR_HEAD) {
		        end_metric = 'baseY';
		      } else if (position_end === Curve.Position.NEAR_TOP) {
		        end_metric = 'topY';
		      }
		
		      if (first_note) {
		        first_x = first_note.getTieRightX();
		        stem_direction = first_note.getStemDirection();
		        first_y = first_note.getStemExtents()[metric];
		      } else {
		        first_x = last_note.getStave().getTieStartX();
		        first_y = last_note.getStemExtents()[metric];
		      }
		
		      if (last_note) {
		        last_x = last_note.getTieLeftX();
		        stem_direction = last_note.getStemDirection();
		        last_y = last_note.getStemExtents()[end_metric];
		      } else {
		        last_x = first_note.getStave().getTieEndX();
		        last_y = first_note.getStemExtents()[end_metric];
		      }
		
		      this.renderCurve({
		        first_x: first_x,
		        last_x: last_x,
		        first_y: first_y,
		        last_y: last_y,
		        direction: stem_direction * (this.render_options.invert === true ? -1 : 1)
		      });
		      return true;
		    }
		  }]);

		  return Curve;
		}(_element.Element);

	/***/ },
	/* 67 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.TextDynamics = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _note = __webpack_require__(22);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// This file implements the `TextDynamics` which renders traditional
		// text dynamics markings, **ie: p, f, sfz, rfz, ppp**
		//
		// You can render any dynamics string that contains a combination of
		// the following letters:  P, M, F, Z, R, S
		
		// To enable logging for this class. Set `Vex.Flow.TextDynamics.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (TextDynamics.DEBUG) _vex.Vex.L('Vex.Flow.TextDynamics', args);
		}
		
		var TextDynamics = exports.TextDynamics = function (_Note) {
		  _inherits(TextDynamics, _Note);
		
		  _createClass(TextDynamics, null, [{
		    key: 'GLYPHS',
		
		    // The glyph data for each dynamics letter
		    get: function get() {
		      return {
		        'f': {
		          code: 'vba',
		          width: 12
		        },
		        'p': {
		          code: 'vbf',
		          width: 14
		        },
		        'm': {
		          code: 'v62',
		          width: 17
		        },
		        's': {
		          code: 'v4a',
		          width: 10
		        },
		        'z': {
		          code: 'v80',
		          width: 12
		        },
		        'r': {
		          code: 'vb1',
		          width: 12
		        }
		      };
		    }
		
		    // A `TextDynamics` object inherits from `Note` so that it can be formatted
		    // within a `Voice`.
		    // Create the dynamics marking. `text_struct` is an object
		    // that contains a `duration` property and a `sequence` of
		    // letters that represents the letters to render
		
		  }]);
		
		  function TextDynamics(text_struct) {
		    _classCallCheck(this, TextDynamics);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TextDynamics).call(this, text_struct));
		
		    _this.setAttribute('type', 'TextDynamics');
		
		    _this.sequence = text_struct.text.toLowerCase();
		    _this.line = text_struct.line || 0;
		    _this.glyphs = [];
		
		    _vex.Vex.Merge(_this.render_options, {
		      glyph_font_size: 40
		    });
		
		    L('New Dynamics Text: ', _this.sequence);
		    return _this;
		  }
		
		  // Set the Stave line on which the note should be placed
		
		
		  _createClass(TextDynamics, [{
		    key: 'setLine',
		    value: function setLine(line) {
		      this.line = line;
		      return this;
		    }
		
		    // Preformat the dynamics text
		
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      var _this2 = this;
		
		      var total_width = 0;
		      // Iterate through each letter
		      this.sequence.split('').forEach(function (letter) {
		        // Get the glyph data for the letter
		        var glyph_data = TextDynamics.GLYPHS[letter];
		        if (!glyph_data) throw new _vex.Vex.RERR('Invalid dynamics character: ' + letter);
		
		        var size = _this2.render_options.glyph_font_size;
		        var glyph = new _glyph.Glyph(glyph_data.code, size);
		
		        // Add the glyph
		        _this2.glyphs.push(glyph);
		
		        total_width += glyph_data.width;
		      });
		
		      // Store the width of the text
		      this.setWidth(total_width);
		      this.preFormatted = true;
		      return this;
		    }
		
		    // Draw the dynamics text on the rendering context
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var _this3 = this;
		
		      this.setRendered();
		      var x = this.getAbsoluteX();
		      var y = this.stave.getYForLine(this.line + -3);
		
		      L('Rendering Dynamics: ', this.sequence);
		
		      var letter_x = x;
		      this.glyphs.forEach(function (glyph, index) {
		        var current_letter = _this3.sequence[index];
		        glyph.render(_this3.context, letter_x, y);
		        letter_x += TextDynamics.GLYPHS[current_letter].width;
		      });
		    }
		  }]);

		  return TextDynamics;
		}(_note.Note);

	/***/ },
	/* 68 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.StaveLine = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		var _tables = __webpack_require__(2);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This file implements `StaveLine` which are simply lines that connect
		// two notes. This object is highly configurable, see the `render_options`.
		// A simple line is often used for notating glissando articulations, but you
		// can format a `StaveLine` with arrows or colors for more pedagogical
		// purposes, such as diagrams.
		
		
		// Attribution: Arrow rendering implementations based off of
		// Patrick Horgan's article, "Drawing lines and arcs with
		// arrow heads on  HTML5 Canvas"
		//
		// Draw an arrow head that connects between 3 coordinates
		function drawArrowHead(ctx, x0, y0, x1, y1, x2, y2) {
		  // all cases do this.
		  ctx.beginPath();
		  ctx.moveTo(x0, y0);
		  ctx.lineTo(x1, y1);
		  ctx.lineTo(x2, y2);
		  ctx.lineTo(x0, y0);
		  ctx.closePath();
		
		  ctx.fill();
		}
		
		// Helper function to draw a line with arrow heads
		function drawArrowLine(ctx, point1, point2, config) {
		  var both_arrows = config.draw_start_arrow && config.draw_end_arrow;
		
		  var x1 = point1.x;
		  var y1 = point1.y;
		  var x2 = point2.x;
		  var y2 = point2.y;
		
		  // For ends with arrow we actually want to stop before we get to the arrow
		  // so that wide lines won't put a flat end on the arrow.
		  var distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
		  var ratio = (distance - config.arrowhead_length / 3) / distance;
		  var end_x = void 0;
		  var end_y = void 0;
		  var start_x = void 0;
		  var start_y = void 0;
		  if (config.draw_end_arrow || both_arrows) {
		    end_x = Math.round(x1 + (x2 - x1) * ratio);
		    end_y = Math.round(y1 + (y2 - y1) * ratio);
		  } else {
		    end_x = x2;
		    end_y = y2;
		  }
		
		  if (config.draw_start_arrow || both_arrows) {
		    start_x = x1 + (x2 - x1) * (1 - ratio);
		    start_y = y1 + (y2 - y1) * (1 - ratio);
		  } else {
		    start_x = x1;
		    start_y = y1;
		  }
		
		  if (config.color) {
		    ctx.setStrokeStyle(config.color);
		    ctx.setFillStyle(config.color);
		  }
		
		  // Draw the shaft of the arrow
		  ctx.beginPath();
		  ctx.moveTo(start_x, start_y);
		  ctx.lineTo(end_x, end_y);
		  ctx.stroke();
		  ctx.closePath();
		
		  // calculate the angle of the line
		  var line_angle = Math.atan2(y2 - y1, x2 - x1);
		  // h is the line length of a side of the arrow head
		  var h = Math.abs(config.arrowhead_length / Math.cos(config.arrowhead_angle));
		
		  var angle1 = void 0;
		  var angle2 = void 0;
		  var top_x = void 0;
		  var top_y = void 0;
		  var bottom_x = void 0;
		  var bottom_y = void 0;
		
		  if (config.draw_end_arrow || both_arrows) {
		    angle1 = line_angle + Math.PI + config.arrowhead_angle;
		    top_x = x2 + Math.cos(angle1) * h;
		    top_y = y2 + Math.sin(angle1) * h;
		
		    angle2 = line_angle + Math.PI - config.arrowhead_angle;
		    bottom_x = x2 + Math.cos(angle2) * h;
		    bottom_y = y2 + Math.sin(angle2) * h;
		
		    drawArrowHead(ctx, top_x, top_y, x2, y2, bottom_x, bottom_y);
		  }
		
		  if (config.draw_start_arrow || both_arrows) {
		    angle1 = line_angle + config.arrowhead_angle;
		    top_x = x1 + Math.cos(angle1) * h;
		    top_y = y1 + Math.sin(angle1) * h;
		
		    angle2 = line_angle - config.arrowhead_angle;
		    bottom_x = x1 + Math.cos(angle2) * h;
		    bottom_y = y1 + Math.sin(angle2) * h;
		
		    drawArrowHead(ctx, top_x, top_y, x1, y1, bottom_x, bottom_y);
		  }
		}
		
		var StaveLine = exports.StaveLine = function (_Element) {
		  _inherits(StaveLine, _Element);
		
		  _createClass(StaveLine, null, [{
		    key: 'TextVerticalPosition',
		
		    // Text Positioning
		    get: function get() {
		      return {
		        TOP: 1,
		        BOTTOM: 2
		      };
		    }
		  }, {
		    key: 'TextJustification',
		    get: function get() {
		      return {
		        LEFT: 1,
		        CENTER: 2,
		        RIGHT: 3
		      };
		    }
		
		    // Initialize the StaveLine with the given `notes`.
		    //
		    // `notes` is a struct that has:
		    //
		    //  ```
		    //  {
		    //    first_note: Note,
		    //    last_note: Note,
		    //    first_indices: [n1, n2, n3],
		    //    last_indices: [n1, n2, n3]
		    //  }
		    //  ```
		
		  }]);
		
		  function StaveLine(notes) {
		    _classCallCheck(this, StaveLine);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StaveLine).call(this));
		
		    _this.setAttribute('type', 'StaveLine');
		
		    _this.notes = notes;
		
		    _this.text = '';
		
		    _this.font = {
		      family: 'Arial',
		      size: 10,
		      weight: ''
		    };
		
		    _this.render_options = {
		      // Space to add to the left or the right
		      padding_left: 4,
		      padding_right: 3,
		
		      // The width of the line in pixels
		      line_width: 1,
		      // An array of line/space lengths. Unsupported with Raphael (SVG)
		      line_dash: null,
		      // Can draw rounded line end, instead of a square. Unsupported with Raphael (SVG)
		      rounded_end: true,
		      // The color of the line and arrowheads
		      color: null,
		
		      // Flags to draw arrows on each end of the line
		      draw_start_arrow: false,
		      draw_end_arrow: false,
		
		      // The length of the arrowhead sides
		      arrowhead_length: 10,
		      // The angle of the arrowhead
		      arrowhead_angle: Math.PI / 8,
		
		      // The position of the text
		      text_position_vertical: StaveLine.TextVerticalPosition.TOP,
		      text_justification: StaveLine.TextJustification.CENTER
		    };
		
		    _this.setNotes(notes);
		    return _this;
		  }
		
		  // Set the font for the `StaveLine` text
		
		
		  _createClass(StaveLine, [{
		    key: 'setFont',
		    value: function setFont(font) {
		      this.font = font;return this;
		    }
		    // The the annotation for the `StaveLine`
		
		  }, {
		    key: 'setText',
		    value: function setText(text) {
		      this.text = text;return this;
		    }
		
		    // Set the notes for the `StaveLine`
		
		  }, {
		    key: 'setNotes',
		    value: function setNotes(notes) {
		      if (!notes.first_note && !notes.last_note) {
		        throw new _vex.Vex.RuntimeError('BadArguments', 'Notes needs to have either first_note or last_note set.');
		      }
		
		      if (!notes.first_indices) notes.first_indices = [0];
		      if (!notes.last_indices) notes.last_indices = [0];
		
		      if (notes.first_indices.length !== notes.last_indices.length) {
		        throw new _vex.Vex.RuntimeError('BadArguments', 'Connected notes must have similar index sizes');
		      }
		
		      // Success. Lets grab 'em notes.
		      this.first_note = notes.first_note;
		      this.first_indices = notes.first_indices;
		      this.last_note = notes.last_note;
		      this.last_indices = notes.last_indices;
		      return this;
		    }
		
		    // Apply the style of the `StaveLine` to the context
		
		  }, {
		    key: 'applyLineStyle',
		    value: function applyLineStyle() {
		      var ctx = this.checkContext();
		      var render_options = this.render_options;
		
		      if (render_options.line_dash) {
		        ctx.setLineDash(render_options.line_dash);
		      }
		
		      if (render_options.line_width) {
		        ctx.setLineWidth(render_options.line_width);
		      }
		
		      if (render_options.rounded_end) {
		        ctx.setLineCap('round');
		      } else {
		        ctx.setLineCap('square');
		      }
		    }
		
		    // Apply the text styling to the context
		
		  }, {
		    key: 'applyFontStyle',
		    value: function applyFontStyle() {
		      var ctx = this.checkContext();
		
		      if (this.font) {
		        ctx.setFont(this.font.family, this.font.size, this.font.weight);
		      }
		
		      if (this.render_options.color) {
		        ctx.setStrokeStyle(this.render_options.color);
		        ctx.setFillStyle(this.render_options.color);
		      }
		    }
		
		    // Renders the `StaveLine` on the context
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var _this2 = this;
		
		      var ctx = this.checkContext();
		      this.setRendered();
		
		      var first_note = this.first_note;
		      var last_note = this.last_note;
		      var render_options = this.render_options;
		
		      ctx.save();
		      this.applyLineStyle();
		
		      // Cycle through each set of indices and draw lines
		      var start_position = void 0;
		      var end_position = void 0;
		      this.first_indices.forEach(function (first_index, i) {
		        var last_index = _this2.last_indices[i];
		
		        // Get initial coordinates for the start/end of the line
		        start_position = first_note.getModifierStartXY(2, first_index);
		        end_position = last_note.getModifierStartXY(1, last_index);
		        var upwards_slope = start_position.y > end_position.y;
		
		        // Adjust `x` coordinates for modifiers
		        start_position.x += first_note.getMetrics().modRightPx + render_options.padding_left;
		        end_position.x -= last_note.getMetrics().modLeftPx + render_options.padding_right;
		
		        // Adjust first `x` coordinates for displacements
		        var notehead_width = first_note.getGlyph().getWidth();
		        var first_displaced = first_note.getKeyProps()[first_index].displaced;
		        if (first_displaced && first_note.getStemDirection() === 1) {
		          start_position.x += notehead_width + render_options.padding_left;
		        }
		
		        // Adjust last `x` coordinates for displacements
		        var last_displaced = last_note.getKeyProps()[last_index].displaced;
		        if (last_displaced && last_note.getStemDirection() === -1) {
		          end_position.x -= notehead_width + render_options.padding_right;
		        }
		
		        // Adjust y position better if it's not coming from the center of the note
		        start_position.y += upwards_slope ? -3 : 1;
		        end_position.y += upwards_slope ? 2 : 0;
		
		        drawArrowLine(ctx, start_position, end_position, _this2.render_options);
		      });
		
		      ctx.restore();
		
		      // Determine the x coordinate where to start the text
		      var text_width = ctx.measureText(this.text).width;
		      var justification = render_options.text_justification;
		      var x = 0;
		      if (justification === StaveLine.TextJustification.LEFT) {
		        x = start_position.x;
		      } else if (justification === StaveLine.TextJustification.CENTER) {
		        var delta_x = end_position.x - start_position.x;
		        var center_x = delta_x / 2 + start_position.x;
		        x = center_x - text_width / 2;
		      } else if (justification === StaveLine.TextJustification.RIGHT) {
		        x = end_position.x - text_width;
		      }
		
		      // Determine the y value to start the text
		      var y = void 0;
		      var vertical_position = render_options.text_position_vertical;
		      if (vertical_position === StaveLine.TextVerticalPosition.TOP) {
		        y = first_note.getStave().getYForTopText();
		      } else if (vertical_position === StaveLine.TextVerticalPosition.BOTTOM) {
		        y = first_note.getStave().getYForBottomText(_tables.Flow.TEXT_HEIGHT_OFFSET_HACK);
		      }
		
		      // Draw the text
		      ctx.save();
		      this.applyFontStyle();
		      ctx.fillText(this.text, x, y);
		      ctx.restore();
		
		      return this;
		    }
		  }]);

		  return StaveLine;
		}(_element.Element);

	/***/ },
	/* 69 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.PedalMarking = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This file implements different types of pedal markings. These notation
		// elements indicate to the performer when to depress and release the a pedal.
		//
		// In order to create "Sostenuto", and "una corda" markings, you must set
		// custom text for the release/depress pedal markings.
		
		// To enable logging for this class. Set `Vex.Flow.PedalMarking.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (PedalMarking.DEBUG) _vex.Vex.L('Vex.Flow.PedalMarking', args);
		}
		
		// Draws a pedal glyph with the provided `name` on a rendering `context`
		// at the coordinates `x` and `y. Takes into account the glyph data
		// coordinate shifts.
		function drawPedalGlyph(name, context, x, y, point) {
		  var glyph_data = PedalMarking.GLYPHS[name];
		  var glyph = new _glyph.Glyph(glyph_data.code, point);
		  glyph.render(context, x + glyph_data.x_shift, y + glyph_data.y_shift);
		}
		
		var PedalMarking = exports.PedalMarking = function (_Element) {
		  _inherits(PedalMarking, _Element);
		
		  _createClass(PedalMarking, null, [{
		    key: 'createSustain',
		
		
		    // Create a sustain pedal marking. Returns the defaults PedalMarking.
		    // Which uses the traditional "Ped" and "*"" markings.
		    value: function createSustain(notes) {
		      var pedal = new PedalMarking(notes);
		      return pedal;
		    }
		
		    // Create a sostenuto pedal marking
		
		  }, {
		    key: 'createSostenuto',
		    value: function createSostenuto(notes) {
		      var pedal = new PedalMarking(notes);
		      pedal.setStyle(PedalMarking.Styles.MIXED);
		      pedal.setCustomText('Sost. Ped.');
		      return pedal;
		    }
		
		    // Create an una corda pedal marking
		
		  }, {
		    key: 'createUnaCorda',
		    value: function createUnaCorda(notes) {
		      var pedal = new PedalMarking(notes);
		      pedal.setStyle(PedalMarking.Styles.TEXT);
		      pedal.setCustomText('una corda', 'tre corda');
		      return pedal;
		    }
		
		    // ## Prototype Methods
		
		  }, {
		    key: 'GLYPHS',
		
		    // Glyph data
		    get: function get() {
		      return {
		        'pedal_depress': {
		          code: 'v36',
		          x_shift: -10,
		          y_shift: 0
		        },
		        'pedal_release': {
		          code: 'v5d',
		          x_shift: -2,
		          y_shift: 3
		        }
		      };
		    }
		  }, {
		    key: 'Styles',
		    get: function get() {
		      return {
		        TEXT: 1,
		        BRACKET: 2,
		        MIXED: 3
		      };
		    }
		  }]);
		
		  function PedalMarking(notes) {
		    _classCallCheck(this, PedalMarking);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PedalMarking).call(this));
		
		    _this.setAttribute('type', 'PedalMarking');
		
		    _this.notes = notes;
		    _this.style = PedalMarking.TEXT;
		    _this.line = 0;
		
		    // Custom text for the release/depress markings
		    _this.custom_depress_text = '';
		    _this.custom_release_text = '';
		
		    _this.font = {
		      family: 'Times New Roman',
		      size: 12,
		      weight: 'italic bold'
		    };
		
		    _this.render_options = {
		      bracket_height: 10,
		      text_margin_right: 6,
		      bracket_line_width: 1,
		      glyph_point_size: 40,
		      color: 'black'
		    };
		    return _this;
		  }
		
		  // Set custom text for the `depress`/`release` pedal markings. No text is
		  // set if the parameter is falsy.
		
		
		  _createClass(PedalMarking, [{
		    key: 'setCustomText',
		    value: function setCustomText(depress, release) {
		      this.custom_depress_text = depress || '';
		      this.custom_release_text = release || '';
		      return this;
		    }
		
		    // Set the pedal marking style
		
		  }, {
		    key: 'setStyle',
		    value: function setStyle(style) {
		      if (style < 1 && style > 3) {
		        throw new _vex.Vex.RERR('InvalidParameter', 'The style must be one found in PedalMarking.Styles');
		      }
		
		      this.style = style;
		      return this;
		    }
		
		    // Set the staff line to render the markings on
		
		  }, {
		    key: 'setLine',
		    value: function setLine(line) {
		      this.line = line;return this;
		    }
		
		    // Draw the bracket based pedal markings
		
		  }, {
		    key: 'drawBracketed',
		    value: function drawBracketed() {
		      var ctx = this.context;
		      var is_pedal_depressed = false;
		      var prev_x = void 0;
		      var prev_y = void 0;
		      var pedal = this;
		
		      // Iterate through each note
		      this.notes.forEach(function (note, index, notes) {
		        // Each note triggers the opposite pedal action
		        is_pedal_depressed = !is_pedal_depressed;
		
		        // Get the initial coordinates for the note
		        var x = note.getAbsoluteX();
		        var y = note.getStave().getYForBottomText(pedal.line + 3);
		
		        // Throw if current note is positioned before the previous note
		        if (x < prev_x) {
		          throw new _vex.Vex.RERR('InvalidConfiguration', 'The notes provided must be in order of ascending x positions');
		        }
		
		        // Determine if the previous or next note are the same
		        // as the current note. We need to keep track of this for
		        // when adjustments are made for the release+depress action
		        var next_is_same = notes[index + 1] === note;
		        var prev_is_same = notes[index - 1] === note;
		
		        var x_shift = 0;
		        if (is_pedal_depressed) {
		          // Adjustment for release+depress
		          x_shift = prev_is_same ? 5 : 0;
		
		          if (pedal.style === PedalMarking.Styles.MIXED && !prev_is_same) {
		            // For MIXED style, start with text instead of bracket
		            if (pedal.custom_depress_text) {
		              // If we have custom text, use instead of the default "Ped" glyph
		              var text_width = ctx.measureText(pedal.custom_depress_text).width;
		              ctx.fillText(pedal.custom_depress_text, x - text_width / 2, y);
		              x_shift = text_width / 2 + pedal.render_options.text_margin_right;
		            } else {
		              // Render the Ped glyph in position
		              drawPedalGlyph('pedal_depress', ctx, x, y, pedal.render_options.glyph_point_size);
		              x_shift = 20 + pedal.render_options.text_margin_right;
		            }
		          } else {
		            // Draw start bracket
		            ctx.beginPath();
		            ctx.moveTo(x, y - pedal.render_options.bracket_height);
		            ctx.lineTo(x + x_shift, y);
		            ctx.stroke();
		            ctx.closePath();
		          }
		        } else {
		          // Adjustment for release+depress
		          x_shift = next_is_same ? -5 : 0;
		
		          // Draw end bracket
		          ctx.beginPath();
		          ctx.moveTo(prev_x, prev_y);
		          ctx.lineTo(x + x_shift, y);
		          ctx.lineTo(x, y - pedal.render_options.bracket_height);
		          ctx.stroke();
		          ctx.closePath();
		        }
		
		        // Store previous coordinates
		        prev_x = x + x_shift;
		        prev_y = y;
		      });
		    }
		
		    // Draw the text based pedal markings. This defaults to the traditional
		    // "Ped" and "*"" symbols if no custom text has been provided.
		
		  }, {
		    key: 'drawText',
		    value: function drawText() {
		      var ctx = this.context;
		      var is_pedal_depressed = false;
		      var pedal = this;
		
		      // The glyph point size
		      var point = pedal.render_options.glyph_point_size;
		
		      // Iterate through each note, placing glyphs or custom text accordingly
		      this.notes.forEach(function (note) {
		        is_pedal_depressed = !is_pedal_depressed;
		        var stave = note.getStave();
		        var x = note.getAbsoluteX();
		        var y = stave.getYForBottomText(pedal.line + 3);
		
		        var text_width = 0;
		        if (is_pedal_depressed) {
		          if (pedal.custom_depress_text) {
		            text_width = ctx.measureText(pedal.custom_depress_text).width;
		            ctx.fillText(pedal.custom_depress_text, x - text_width / 2, y);
		          } else {
		            drawPedalGlyph('pedal_depress', ctx, x, y, point);
		          }
		        } else {
		          if (pedal.custom_release_text) {
		            text_width = ctx.measureText(pedal.custom_release_text).width;
		            ctx.fillText(pedal.custom_release_text, x - text_width / 2, y);
		          } else {
		            drawPedalGlyph('pedal_release', ctx, x, y, point);
		          }
		        }
		      });
		    }
		
		    // Render the pedal marking in position on the rendering context
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var ctx = this.checkContext();
		      this.setRendered();
		
		      ctx.save();
		      ctx.setStrokeStyle(this.render_options.color);
		      ctx.setFillStyle(this.render_options.color);
		      ctx.setFont(this.font.family, this.font.size, this.font.weight);
		
		      L('Rendering Pedal Marking');
		
		      if (this.style === PedalMarking.Styles.BRACKET || this.style === PedalMarking.Styles.MIXED) {
		        ctx.setLineWidth(this.render_options.bracket_line_width);
		        this.drawBracketed();
		      } else if (this.style === PedalMarking.Styles.TEXT) {
		        this.drawText();
		      }
		
		      ctx.restore();
		    }
		  }]);

		  return PedalMarking;
		}(_element.Element);

	/***/ },
	/* 70 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.TextBracket = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _element = __webpack_require__(5);
		
		var _renderer = __webpack_require__(10);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author: Cyril Silverman
		//
		// ## Description
		//
		// This file implement `TextBrackets` which extend between two notes.
		// The octave transposition markings (8va, 8vb, 15va, 15vb) can be created
		// using this class.
		
		// To enable logging for this class. Set `Vex.Flow.TextBracket.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (TextBracket.DEBUG) _vex.Vex.L('Vex.Flow.TextBracket', args);
		}
		
		var TextBracket = exports.TextBracket = function (_Element) {
		  _inherits(TextBracket, _Element);
		
		  _createClass(TextBracket, null, [{
		    key: 'Positions',
		    get: function get() {
		      return {
		        TOP: 1,
		        BOTTOM: -1
		      };
		    }
		  }]);
		
		  function TextBracket(bracket_data) {
		    _classCallCheck(this, TextBracket);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TextBracket).call(this));
		
		    _this.setAttribute('type', 'TextBracket');
		
		    _this.start = bracket_data.start;
		    _this.stop = bracket_data.stop;
		
		    _this.text = bracket_data.text || '';
		    _this.superscript = bracket_data.superscript || '';
		
		    _this.position = bracket_data.position || TextBracket.Positions.TOP;
		    _this.line = 1;
		
		    _this.font = {
		      family: 'Serif',
		      size: 15,
		      weight: 'italic'
		    };
		
		    _this.render_options = {
		      dashed: true,
		      dash: [5],
		      color: 'black',
		      line_width: 1,
		      show_bracket: true,
		      bracket_height: 8,
		
		      // In the BOTTOM position, the bracket line can extend
		      // under the superscript.
		      underline_superscript: true
		    };
		    return _this;
		  }
		
		  // Apply the text backet styling to the provided `context`
		
		
		  _createClass(TextBracket, [{
		    key: 'applyStyle',
		    value: function applyStyle(context) {
		      // Apply style for the octave bracket
		      context.setFont(this.font.family, this.font.size, this.font.weight);
		      context.setStrokeStyle(this.render_options.color);
		      context.setFillStyle(this.render_options.color);
		      context.setLineWidth(this.render_options.line_width);
		
		      return this;
		    }
		
		    // Set whether the bracket line should be `dashed`. You can also
		    // optionally set the `dash` pattern by passing in an array of numbers
		
		  }, {
		    key: 'setDashed',
		    value: function setDashed(dashed, dash) {
		      this.render_options.dashed = dashed;
		      if (dash) this.render_options.dash = dash;
		      return this;
		    }
		
		    // Set the font for the text
		
		  }, {
		    key: 'setFont',
		    value: function setFont(font) {
		      this.font = font;return this;
		    }
		    // Set the rendering `context` for the octave bracket
		
		  }, {
		    key: 'setLine',
		    value: function setLine(line) {
		      this.line = line;return this;
		    }
		
		    // Draw the octave bracket on the rendering context
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var ctx = this.context;
		      this.setRendered();
		
		      var y = 0;
		      switch (this.position) {
		        case TextBracket.Positions.TOP:
		          y = this.start.getStave().getYForTopText(this.line);
		          break;
		        case TextBracket.Positions.BOTTOM:
		          y = this.start.getStave().getYForBottomText(this.line + _tables.Flow.TEXT_HEIGHT_OFFSET_HACK);
		          break;
		        default:
		          throw new _vex.Vex.RERR('InvalidPosition', 'The position ' + this.position + ' is invalid');
		      }
		
		      // Get the preliminary start and stop coordintates for the bracket
		      var start = { x: this.start.getAbsoluteX(), y: y };
		      var stop = { x: this.stop.getAbsoluteX(), y: y };
		
		      L('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);
		
		      var bracket_height = this.render_options.bracket_height * this.position;
		
		      ctx.save();
		      this.applyStyle(ctx);
		
		      // Draw text
		      ctx.fillText(this.text, start.x, start.y);
		
		      // Get the width and height for the octave number
		      var main_width = ctx.measureText(this.text).width;
		      var main_height = ctx.measureText('M').width;
		
		      // Calculate the y position for the super script
		      var super_y = start.y - main_height / 2.5;
		
		      // Draw the superscript
		      ctx.setFont(this.font.family, this.font.size / 1.4, this.font.weight);
		      ctx.fillText(this.superscript, start.x + main_width + 1, super_y);
		
		      // Determine width and height of the superscript
		      var superscript_width = ctx.measureText(this.superscript).width;
		      var super_height = ctx.measureText('M').width;
		
		      // Setup initial coordinates for the bracket line
		      var start_x = start.x;
		      var line_y = super_y;
		      var end_x = stop.x + this.stop.getGlyph().getWidth();
		
		      // Adjust x and y coordinates based on position
		      if (this.position === TextBracket.Positions.TOP) {
		        start_x += main_width + superscript_width + 5;
		        line_y -= super_height / 2.7;
		      } else if (this.position === TextBracket.Positions.BOTTOM) {
		        line_y += super_height / 2.7;
		        start_x += main_width + 2;
		
		        if (!this.render_options.underline_superscript) {
		          start_x += superscript_width;
		        }
		      }
		
		      if (this.render_options.dashed) {
		        // Main line
		        _renderer.Renderer.drawDashedLine(ctx, start_x, line_y, end_x, line_y, this.render_options.dash);
		        // Ending Bracket
		        if (this.render_options.show_bracket) {
		          _renderer.Renderer.drawDashedLine(ctx, end_x, line_y + 1 * this.position, end_x, line_y + bracket_height, this.render_options.dash);
		        }
		      } else {
		        ctx.beginPath();
		        ctx.moveTo(start_x, line_y);
		        // Main line
		        ctx.lineTo(end_x, line_y);
		        if (this.render_options.show_bracket) {
		          // Ending bracket
		          ctx.lineTo(end_x, line_y + bracket_height);
		        }
		        ctx.stroke();
		        ctx.closePath();
		      }
		
		      ctx.restore();
		    }
		  }]);

		  return TextBracket;
		}(_element.Element);

	/***/ },
	/* 71 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.BarNote = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _note = __webpack_require__(22);
		
		var _stavebarline = __webpack_require__(44);
		
		var _boundingbox = __webpack_require__(8);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// A `BarNote` is used to render bar lines (from `barline.js`). `BarNote`s can
		// be added to a voice and rendered in the middle of a stave. Since it has no
		// duration, it consumes no `tick`s, and is dealt with appropriately by the formatter.
		//
		// See `tests/barnote_tests.js` for usage examples.
		
		// To enable logging for this class. Set `Vex.Flow.BarNote.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (BarNote.DEBUG) _vex.Vex.L('Vex.Flow.BarNote', args);
		}
		
		var BarNote = exports.BarNote = function (_Note) {
		  _inherits(BarNote, _Note);
		
		  function BarNote(type) {
		    _classCallCheck(this, BarNote);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(BarNote).call(this, { duration: 'b' }));
		
		    _this.setAttribute('type', 'BarNote');
		
		    var TYPE = _stavebarline.Barline.type;
		    _this.metrics = {
		      widths: {}
		    };
		
		    // Defined this way to prevent lint errors.
		    _this.metrics.widths[TYPE.SINGLE] = 8;
		    _this.metrics.widths[TYPE.DOUBLE] = 12;
		    _this.metrics.widths[TYPE.END] = 15;
		    _this.metrics.widths[TYPE.REPEAT_BEGIN] = 14;
		    _this.metrics.widths[TYPE.REPEAT_END] = 14;
		    _this.metrics.widths[TYPE.REPEAT_BOTH] = 18;
		    _this.metrics.widths[TYPE.NONE] = 0;
		
		    // Tell the formatter that bar notes have no duration.
		    _this.ignore_ticks = true;
		    _this.type = type === undefined ? TYPE.SINGLE : type;
		
		    // Set width to width of relevant `Barline`.
		    _this.setWidth(_this.metrics.widths[_this.type]);
		    return _this;
		  }
		
		  // Get and set the type of Bar note. `type` must be one of `Vex.Flow.Barline.type`.
		
		
		  _createClass(BarNote, [{
		    key: 'getType',
		    value: function getType() {
		      return this.type;
		    }
		  }, {
		    key: 'setType',
		    value: function setType(type) {
		      this.type = type;
		      this.setWidth(this.metrics.widths[this.type]);
		      return this;
		    }
		  }, {
		    key: 'getBoundingBox',
		    value: function getBoundingBox() {
		      return new _boundingbox.BoundingBox(0, 0, 0, 0);
		    }
		  }, {
		    key: 'addToModifierContext',
		    value: function addToModifierContext() {
		      /* overridden to ignore */
		      return this;
		    }
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      /* overridden to ignore */
		      this.setPreFormatted(true);
		      return this;
		    }
		
		    // Render note to stave.
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      if (!this.stave) throw new _vex.Vex.RERR('NoStave', "Can't draw without a stave.");
		      L('Rendering bar line at: ', this.getAbsoluteX());
		      var barline = new _stavebarline.Barline(this.type);
		      barline.setX(this.getAbsoluteX());
		      barline.draw(this.stave);
		      this.setRendered();
		    }
		  }]);

		  return BarNote;
		}(_note.Note);

	/***/ },
	/* 72 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.GhostNote = undefined;
		
		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
		
		var _vex = __webpack_require__(1);
		
		var _stemmablenote = __webpack_require__(24);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		
		var GhostNote = exports.GhostNote = function (_StemmableNote) {
		  _inherits(GhostNote, _StemmableNote);
		
		  /** @constructor */
		  function GhostNote(parameter) {
		    _classCallCheck(this, GhostNote);
		
		    // Sanity check
		    if (!parameter) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'Ghost note must have valid initialization data to identify ' + 'duration.');
		    }
		
		    var note_struct = void 0;
		
		    // Preserve backwards-compatibility
		    if (typeof parameter === 'string') {
		      note_struct = { duration: parameter };
		    } else if ((typeof parameter === 'undefined' ? 'undefined' : _typeof(parameter)) === 'object') {
		      note_struct = parameter;
		    } else {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'Ghost note must have valid initialization data to identify ' + 'duration.');
		    }
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(GhostNote).call(this, note_struct));
		
		    _this.setAttribute('type', 'GhostNote');
		
		    // Note properties
		    _this.setWidth(0);
		    return _this;
		  }
		
		  _createClass(GhostNote, [{
		    key: 'isRest',
		    value: function isRest() {
		      return true;
		    }
		  }, {
		    key: 'setStave',
		    value: function setStave(stave) {
		      _get(Object.getPrototypeOf(GhostNote.prototype), 'setStave', this).call(this, stave);
		    }
		  }, {
		    key: 'addToModifierContext',
		    value: function addToModifierContext() {
		      /* intentionally overridden */return this;
		    }
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      this.setPreFormatted(true);
		      return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      if (!this.stave) throw new _vex.Vex.RERR('NoStave', "Can't draw without a stave.");
		
		      // Draw the modifiers
		      this.setRendered();
		      for (var i = 0; i < this.modifiers.length; ++i) {
		        var modifier = this.modifiers[i];
		        modifier.setContext(this.context);
		        modifier.draw();
		      }
		    }
		  }]);

		  return GhostNote;
		}(_stemmablenote.StemmableNote);

	/***/ },
	/* 73 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Tremolo = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _modifier = __webpack_require__(25);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author: Mike Corrigan <corrigan@gmail.com>
		//
		// This class implements tremolo notation.
		
		var Tremolo = exports.Tremolo = function (_Modifier) {
		  _inherits(Tremolo, _Modifier);
		
		  _createClass(Tremolo, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'tremolo';
		    }
		  }]);
		
		  function Tremolo(num) {
		    _classCallCheck(this, Tremolo);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Tremolo).call(this));
		
		    _this.setAttribute('type', 'Tremolo');
		
		    _this.num = num;
		    _this.note = null;
		    _this.index = null;
		    _this.position = _modifier.Modifier.Position.CENTER;
		    _this.code = 'v74';
		    _this.shift_right = -2;
		    _this.y_spacing = 4;
		
		    _this.render_options = {
		      font_scale: 35,
		      stroke_px: 3,
		      stroke_spacing: 10
		    };
		
		    _this.font = {
		      family: 'Arial',
		      size: 16,
		      weight: ''
		    };
		    return _this;
		  }
		
		  _createClass(Tremolo, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Tremolo.CATEGORY;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		
		      if (!(this.note && this.index != null)) {
		        throw new _vex.Vex.RERR('NoAttachedNote', "Can't draw Tremolo without a note and index.");
		      }
		
		      this.setRendered();
		      var start = this.note.getModifierStartXY(this.position, this.index);
		      var x = start.x;
		      var y = start.y;
		
		      x += this.shift_right;
		      for (var i = 0; i < this.num; ++i) {
		        _glyph.Glyph.renderGlyph(this.context, x, y, this.render_options.font_scale, this.code);
		        y += this.y_spacing;
		      }
		    }
		  }]);

		  return Tremolo;
		}(_modifier.Modifier);

	/***/ },
	/* 74 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Crescendo = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _note = __webpack_require__(22);
		
		var _tickcontext = __webpack_require__(39);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This file implements the `Crescendo` object which draws crescendos and
		// decrescendo dynamics markings. A `Crescendo` is initialized with a
		// duration and formatted as part of a `Voice` like any other `Note`
		// type in VexFlow. This object would most likely be formatted in a Voice
		// with `TextNotes` - which are used to represent other dynamics markings.
		
		// To enable logging for this class. Set `Vex.Flow.Crescendo.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (Crescendo.DEBUG) _vex.Vex.L('Vex.Flow.Crescendo', args);
		}
		
		// Private helper to draw the hairpin
		function renderHairpin(ctx, params) {
		  var begin_x = params.begin_x;
		  var end_x = params.end_x;
		  var y = params.y;
		  var half_height = params.height / 2;
		
		  ctx.beginPath();
		
		  if (params.reverse) {
		    ctx.moveTo(begin_x, y - half_height);
		    ctx.lineTo(end_x, y);
		    ctx.lineTo(begin_x, y + half_height);
		  } else {
		    ctx.moveTo(end_x, y - half_height);
		    ctx.lineTo(begin_x, y);
		    ctx.lineTo(end_x, y + half_height);
		  }
		
		  ctx.stroke();
		  ctx.closePath();
		}
		
		var Crescendo = exports.Crescendo = function (_Note) {
		  _inherits(Crescendo, _Note);
		
		  // Initialize the crescendo's properties
		  function Crescendo(note_struct) {
		    _classCallCheck(this, Crescendo);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Crescendo).call(this, note_struct));
		
		    _this.setAttribute('type', 'Crescendo');
		
		    // Whether the object is a decrescendo
		    _this.decrescendo = false;
		
		    // The staff line to be placed on
		    _this.line = note_struct.line || 0;
		
		    // The height at the open end of the cresc/decresc
		    _this.height = 15;
		
		    _vex.Vex.Merge(_this.render_options, {
		      // Extensions to the length of the crescendo on either side
		      extend_left: 0,
		      extend_right: 0,
		      // Vertical shift
		      y_shift: 0
		    });
		    return _this;
		  }
		
		  // Set the line to center the element on
		
		
		  _createClass(Crescendo, [{
		    key: 'setLine',
		    value: function setLine(line) {
		      this.line = line;return this;
		    }
		
		    // Set the full height at the open end
		
		  }, {
		    key: 'setHeight',
		    value: function setHeight(height) {
		      this.height = height;return this;
		    }
		
		    // Set whether the sign should be a descresendo by passing a bool
		    // to `decresc`
		
		  }, {
		    key: 'setDecrescendo',
		    value: function setDecrescendo(decresc) {
		      this.decrescendo = decresc;
		      return this;
		    }
		
		    // Preformat the note
		
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      this.preFormatted = true;return this;
		    }
		
		    // Render the Crescendo object onto the canvas
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      this.setRendered();
		
		      var tick_context = this.getTickContext();
		      var next_context = _tickcontext.TickContext.getNextContext(tick_context);
		
		      var begin_x = this.getAbsoluteX();
		      var end_x = next_context ? next_context.getX() : this.stave.x + this.stave.width;
		      var y = this.stave.getYForLine(this.line + -3) + 1;
		
		      L('Drawing ', this.decrescendo ? 'decrescendo ' : 'crescendo ', this.height, 'x', begin_x - end_x);
		
		      renderHairpin(this.context, {
		        begin_x: begin_x - this.render_options.extend_left,
		        end_x: end_x + this.render_options.extend_right,
		        y: y + this.render_options.y_shift,
		        height: this.height,
		        reverse: this.decrescendo
		      });
		    }
		  }]);

		  return Crescendo;
		}(_note.Note);

	/***/ },
	/* 75 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.System = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
		
		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// This class implements a musical system, which is a collection of staves,
		// each which can have one or more voices. All voices across all staves in
		// the system are formatted together.
		
		var _element = __webpack_require__(5);
		
		var _factory = __webpack_require__(76);
		
		var _formatter = __webpack_require__(14);
		
		var _note = __webpack_require__(22);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
		
		function setDefaults(params, defaults) {
		  var default_options = defaults.options;
		  params = _extends(defaults, params);
		  params.options = _extends(default_options, params.options);
		  return params;
		}
		
		var System = exports.System = function (_Element) {
		  _inherits(System, _Element);
		
		  function System() {
		    var params = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
		
		    _classCallCheck(this, System);
		
		    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(System).call(this));
		
		    _this.setAttribute('type', 'System');
		    _this.setOptions(params);
		    _this.parts = [];
		    return _this;
		  }
		
		  _createClass(System, [{
		    key: 'setOptions',
		    value: function setOptions() {
		      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
		
		      this.options = setDefaults(options, {
		        x: 10,
		        y: 10,
		        width: 500,
		        connector: null,
		        spaceBetweenStaves: 12, // stave spaces
		        factory: null,
		        debugFormatter: false,
		        formatIterations: 0, // number of formatter tuning steps
		        options: {}
		      });
		
		      this.factory = this.options.factory || new _factory.Factory({ renderer: { el: null } });
		    }
		  }, {
		    key: 'setContext',
		    value: function setContext(context) {
		      _get(Object.getPrototypeOf(System.prototype), 'setContext', this).call(this, context);
		      this.factory.setContext(context);
		      return this;
		    }
		  }, {
		    key: 'addConnector',
		    value: function addConnector() {
		      var type = arguments.length <= 0 || arguments[0] === undefined ? 'double' : arguments[0];
		
		      this.connector = this.factory.StaveConnector({
		        top_stave: this.parts[0].stave,
		        bottom_stave: this.parts[this.parts.length - 1].stave,
		        type: type
		      });
		      return this.connector;
		    }
		  }, {
		    key: 'addStave',
		    value: function addStave(params) {
		      var _this2 = this;
		
		      params = setDefaults(params, {
		        stave: null,
		        voices: [],
		        spaceAbove: 0, // stave spaces
		        spaceBelow: 0, // stave spaces
		        debugNoteMetrics: false,
		        options: {}
		      });
		
		      if (!params.stave) {
		        var options = { left_bar: false };
		        params.stave = this.factory.Stave({ x: this.options.x, y: this.options.y, width: this.options.width, options: options });
		      }
		
		      params.voices.forEach(function (voice) {
		        return voice.setContext(_this2.context).setStave(params.stave);
		      });
		      this.parts.push(params);
		      return params.stave;
		    }
		  }, {
		    key: 'format',
		    value: function format() {
		      var _this3 = this;
		
		      var formatter = new _formatter.Formatter();
		      this.formatter = formatter;
		
		      var y = this.options.y;
		      var startX = 0;
		      var allVoices = [];
		      var debugNoteMetricsYs = [];
		
		      // Join the voices for each stave.
		      this.parts.forEach(function (part) {
		        y = y + part.stave.space(part.spaceAbove);
		        part.stave.setY(y);
		        formatter.joinVoices(part.voices);
		        y = y + part.stave.space(part.spaceBelow);
		        y = y + part.stave.space(_this3.options.spaceBetweenStaves);
		        if (part.debugNoteMetrics) {
		          debugNoteMetricsYs.push({ y: y, voice: part.voices[0] });
		          y += 15;
		        }
		        allVoices = allVoices.concat(part.voices);
		
		        startX = Math.max(startX, part.stave.getNoteStartX());
		      });
		
		      // Update the start position of all staves.
		      this.parts.forEach(function (part) {
		        return part.stave.setNoteStartX(startX);
		      });
		      var justifyWidth = this.options.width - (startX - this.options.x) - _note.Note.STAVEPADDING;
		      formatter.format(allVoices, justifyWidth);
		
		      for (var i = 0; i < this.options.formatIterations; i++) {
		        formatter.tune();
		      }
		
		      this.startX = startX;
		      this.debugNoteMetricsYs = debugNoteMetricsYs;
		      this.lastY = y;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      // Render debugging information, if requested.
		      var ctx = this.checkContext();
		      this.setRendered();
		
		      if (this.options.debugFormatter) {
		        _formatter.Formatter.plotDebugging(ctx, this.formatter, this.startX, this.options.y, this.lastY);
		      }
		
		      this.debugNoteMetricsYs.forEach(function (d) {
		        d.voice.getTickables().forEach(function (note) {
		          return _note.Note.plotMetrics(ctx, note, d.y);
		        });
		      });
		    }
		  }]);

		  return System;
		}(_element.Element);

	/***/ },
	/* 76 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Factory = exports.X = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// @author Mohit Cheppudira
		//
		// ## Description
		//
		// This file implements a high level API around VexFlow. It will eventually
		// become the canonical way to use VexFlow.
		//
		// *This API is currently DRAFT*
		
		var _vex = __webpack_require__(1);
		
		var _accidental = __webpack_require__(29);
		
		var _articulation = __webpack_require__(37);
		
		var _annotation = __webpack_require__(40);
		
		var _formatter = __webpack_require__(14);
		
		var _frethandfinger = __webpack_require__(28);
		
		var _textdynamics = __webpack_require__(67);
		
		var _modifiercontext = __webpack_require__(27);
		
		var _renderer = __webpack_require__(10);
		
		var _stave = __webpack_require__(43);
		
		var _stavetie = __webpack_require__(33);
		
		var _stavenote = __webpack_require__(20);
		
		var _staveconnector = __webpack_require__(19);
		
		var _system = __webpack_require__(75);
		
		var _tickcontext = __webpack_require__(39);
		
		var _tuplet = __webpack_require__(16);
		
		var _voice = __webpack_require__(18);
		
		var _beam = __webpack_require__(15);
		
		var _curve = __webpack_require__(66);
		
		var _gracenote = __webpack_require__(61);
		
		var _gracenotegroup = __webpack_require__(32);
		
		var _easyscore = __webpack_require__(77);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		// To enable logging for this class. Set `Vex.Flow.Factory.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (Factory.DEBUG) _vex.Vex.L('Vex.Flow.Factory', args);
		}
		
		var X = exports.X = _vex.Vex.MakeException('FactoryError');
		
		function setDefaults() {
		  var params = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
		  var defaults = arguments[1];
		
		  var default_options = defaults.options;
		  params = _extends(defaults, params);
		  params.options = _extends(default_options, params.options);
		  return params;
		}
		
		var Factory = exports.Factory = function () {
		  function Factory(options) {
		    _classCallCheck(this, Factory);
		
		    L('New factory: ', options);
		    var defaults = {
		      stave: {
		        space: 10
		      },
		      renderer: {
		        context: null,
		        selector: '',
		        backend: _renderer.Renderer.Backends.SVG,
		        width: 500,
		        height: 200,
		        background: '#FFF'
		      },
		      font: {
		        face: 'Arial',
		        point: 10,
		        style: ''
		      }
		    };
		
		    this.options = defaults;
		    this.setOptions(options);
		  }
		
		  _createClass(Factory, [{
		    key: 'reset',
		    value: function reset() {
		      this.renderQ = [];
		      this.systems = [];
		      this.staves = [];
		      this.voices = [];
		      this.stave = null; // current stave
		    }
		  }, {
		    key: 'getOptions',
		    value: function getOptions() {
		      return this.options;
		    }
		  }, {
		    key: 'setOptions',
		    value: function setOptions(options) {
		      var _arr = ['stave', 'renderer', 'font'];
		
		      for (var _i = 0; _i < _arr.length; _i++) {
		        var key = _arr[_i];
		        _extends(this.options[key], options[key]);
		      }
		      if (this.options.renderer.selector !== null || this.options.renderer.context) {
		        this.initRenderer();
		      }
		
		      this.reset();
		    }
		  }, {
		    key: 'initRenderer',
		    value: function initRenderer() {
		      var _options$renderer = this.options.renderer;
		      var selector = _options$renderer.selector;
		      var backend = _options$renderer.backend;
		      var width = _options$renderer.width;
		      var height = _options$renderer.height;
		      var background = _options$renderer.background;
		
		      if (selector === '') {
		        throw new X('HTML DOM element not set in Factory');
		      }
		
		      this.context = _renderer.Renderer.buildContext(selector, backend, width, height, background);
		    }
		  }, {
		    key: 'getContext',
		    value: function getContext() {
		      return this.context;
		    }
		  }, {
		    key: 'setContext',
		    value: function setContext(context) {
		      this.context = context;return this;
		    }
		  }, {
		    key: 'getStave',
		    value: function getStave() {
		      return this.stave;
		    }
		
		    // Returns pixels from current stave spacing.
		
		  }, {
		    key: 'space',
		    value: function space(spacing) {
		      return this.options.stave.space * spacing;
		    }
		  }, {
		    key: 'Stave',
		    value: function Stave(params) {
		      params = setDefaults(params, {
		        x: 0,
		        y: 0,
		        width: this.options.renderer.width - this.space(1),
		        options: {
		          spacing_between_lines_px: this.options.stave.space
		        }
		      });
		
		      var stave = new _stave.Stave(params.x, params.y, params.width, params.options);
		      this.staves.push(stave);
		      stave.setContext(this.context);
		      this.stave = stave;
		      return stave;
		    }
		  }, {
		    key: 'StaveNote',
		    value: function StaveNote(noteStruct) {
		      var note = new _stavenote.StaveNote(noteStruct);
		      if (this.stave) note.setStave(this.stave);
		      note.setContext(this.context);
		      this.renderQ.push(note);
		      return note;
		    }
		  }, {
		    key: 'GraceNote',
		    value: function GraceNote(noteStruct) {
		      var note = new _gracenote.GraceNote(noteStruct);
		      if (this.stave) note.setStave(this.stave);
		      note.setContext(this.context);
		      return note;
		    }
		  }, {
		    key: 'GraceNoteGroup',
		    value: function GraceNoteGroup(params) {
		      var group = new _gracenotegroup.GraceNoteGroup(params.notes, params.slur);
		      group.setContext(this.context);
		      return group;
		    }
		  }, {
		    key: 'Accidental',
		    value: function Accidental(params) {
		      params = setDefaults(params, {
		        type: null,
		        options: {}
		      });
		
		      var accid = new _accidental.Accidental(params.type);
		      accid.setContext(this.context);
		      return accid;
		    }
		  }, {
		    key: 'Annotation',
		    value: function Annotation(params) {
		      params = setDefaults(params, {
		        text: 'p',
		        vJustify: 'below',
		        hJustify: 'center',
		        fontFamily: 'Times',
		        fontSize: 14,
		        fontWeight: 'bold italic',
		        options: {}
		      });
		
		      var annotation = new _annotation.Annotation(params.text);
		      annotation.setJustification(params.hJustify);
		      annotation.setVerticalJustification(params.vJustify);
		      annotation.setFont(params.fontFamily, params.fontSize, params.fontWeight);
		      annotation.setContext(this.context);
		      return annotation;
		    }
		  }, {
		    key: 'Articulation',
		    value: function Articulation(params) {
		      params = setDefaults(params, {
		        type: 'a.',
		        position: 'above',
		        options: {}
		      });
		
		      var articulation = new _articulation.Articulation(params.type);
		      articulation.setPosition(params.position);
		      articulation.setContext(this.context);
		      return articulation;
		    }
		  }, {
		    key: 'TextDynamics',
		    value: function TextDynamics(params) {
		      params = setDefaults(params, {
		        text: 'p',
		        duration: 'q',
		        dots: 0,
		        line: 0,
		        options: {}
		      });
		
		      var text = new _textdynamics.TextDynamics({
		        text: params.text,
		        line: params.line,
		        duration: params.duration,
		        dots: params.dots
		      });
		      text.setContext(this.context);
		      return text;
		    }
		  }, {
		    key: 'Fingering',
		    value: function Fingering(params) {
		      params = setDefaults(params, {
		        number: '0',
		        position: 'left',
		        options: {}
		      });
		
		      var fingering = new _frethandfinger.FretHandFinger(params.number);
		      fingering.setPosition(params.position);
		      fingering.setContext(this.context);
		      return fingering;
		    }
		  }, {
		    key: 'TickContext',
		    value: function TickContext() {
		      return new _tickcontext.TickContext().setContext(this.context);
		    }
		  }, {
		    key: 'ModifierContext',
		    value: function ModifierContext() {
		      return new _modifiercontext.ModifierContext();
		    }
		  }, {
		    key: 'Voice',
		    value: function Voice(params) {
		      params = setDefaults(params, {
		        time: '4/4',
		        options: {}
		      });
		      var voice = new _voice.Voice(params.time);
		      this.voices.push(voice);
		      return voice;
		    }
		  }, {
		    key: 'StaveConnector',
		    value: function StaveConnector(params) {
		      params = setDefaults(params, {
		        top_stave: null,
		        bottom_stave: null,
		        type: 'double',
		        options: {}
		      });
		      var connector = new _staveconnector.StaveConnector(params.top_stave, params.bottom_stave);
		      connector.setType(params.type).setContext(this.context);
		      this.renderQ.push(connector);
		      return connector;
		    }
		  }, {
		    key: 'Formatter',
		    value: function Formatter() {
		      return new _formatter.Formatter();
		    }
		  }, {
		    key: 'Tuplet',
		    value: function Tuplet(params) {
		      params = setDefaults(params, {
		        notes: [],
		        options: {}
		      });
		
		      var tuplet = new _tuplet.Tuplet(params.notes, params.options).setContext(this.context);
		      this.renderQ.push(tuplet);
		      return tuplet;
		    }
		  }, {
		    key: 'Beam',
		    value: function Beam(params) {
		      params = setDefaults(params, {
		        notes: [],
		        options: {
		          autoStem: false
		        }
		      });
		
		      var beam = new _beam.Beam(params.notes, params.options.autoStem).setContext(this.context);
		      this.renderQ.push(beam);
		      return beam;
		    }
		  }, {
		    key: 'Curve',
		    value: function Curve(params) {
		      params = setDefaults(params, {
		        from: null,
		        to: null,
		        options: {}
		      });
		
		      var curve = new _curve.Curve(params.from, params.to, params.options).setContext(this.context);
		      this.renderQ.push(curve);
		      return curve;
		    }
		  }, {
		    key: 'StaveTie',
		    value: function StaveTie(params) {
		      params = setDefaults(params, {
		        from: null,
		        to: null,
		        first_indices: [0],
		        last_indices: [0],
		        text: null,
		        options: {}
		      });
		
		      var tie = new _stavetie.StaveTie({
		        first_note: params.from,
		        last_note: params.to,
		        first_indices: params.first_indices,
		        last_indices: params.last_indices
		      }, params.text).setContext(this.context);
		      this.renderQ.push(tie);
		      return tie;
		    }
		  }, {
		    key: 'System',
		    value: function System() {
		      var params = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
		
		      params.factory = this;
		      var system = new _system.System(params).setContext(this.context);
		      this.systems.push(system);
		      return system;
		    }
		  }, {
		    key: 'EasyScore',
		    value: function EasyScore() {
		      var params = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
		
		      params.factory = this;
		      return new _easyscore.EasyScore(params);
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var _this = this;
		
		      this.systems.forEach(function (i) {
		        return i.setContext(_this.context).format();
		      });
		      this.staves.forEach(function (i) {
		        return i.setContext(_this.context).draw();
		      });
		      this.voices.forEach(function (i) {
		        return i.setContext(_this.context).draw();
		      });
		      this.renderQ.forEach(function (i) {
		        if (!i.isRendered()) i.setContext(_this.context).draw();
		      });
		      this.systems.forEach(function (i) {
		        return i.setContext(_this.context).draw();
		      });
		      this.reset();
		    }
		  }], [{
		    key: 'newFromSelector',
		    value: function newFromSelector(selector) {
		      var width = arguments.length <= 1 || arguments[1] === undefined ? 500 : arguments[1];
		      var height = arguments.length <= 2 || arguments[2] === undefined ? 200 : arguments[2];
		
		      return new Factory({ renderer: { selector: selector, width: width, height: height } });
		    }
		  }]);

		  return Factory;
		}();

	/***/ },
	/* 77 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.EasyScore = exports.X = undefined;
		
		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
		
		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// This class implements a parser for a simple language to generate
		// VexFlow objects.
		
		var _vex = __webpack_require__(1);
		
		var _stavenote = __webpack_require__(20);
		
		var _parser = __webpack_require__(78);
		
		var _articulation = __webpack_require__(37);
		
		function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		// To enable logging for this class. Set `Vex.Flow.EasyScore.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (EasyScore.DEBUG) _vex.Vex.L('Vex.Flow.EasyScore', args);
		}
		
		var X = exports.X = _vex.Vex.MakeException('EasyScoreError');
		
		var Grammar = function () {
		  function Grammar(builder) {
		    _classCallCheck(this, Grammar);
		
		    this.builder = builder;
		  }
		
		  _createClass(Grammar, [{
		    key: 'begin',
		    value: function begin() {
		      return this.LINE;
		    }
		  }, {
		    key: 'LINE',
		    value: function LINE() {
		      return {
		        expect: [this.PIECE, this.PIECES, this.EOL]
		      };
		    }
		  }, {
		    key: 'PIECE',
		    value: function PIECE() {
		      var _this = this;
		
		      return {
		        expect: [this.CHORDORNOTE, this.PARAMS],
		        run: function run() {
		          return _this.builder.commitPiece();
		        }
		      };
		    }
		  }, {
		    key: 'PIECES',
		    value: function PIECES() {
		      return {
		        expect: [this.COMMA, this.PIECE],
		        zeroOrMore: true
		      };
		    }
		  }, {
		    key: 'PARAMS',
		    value: function PARAMS() {
		      return {
		        expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS]
		      };
		    }
		  }, {
		    key: 'CHORDORNOTE',
		    value: function CHORDORNOTE() {
		      return {
		        expect: [this.CHORD, this.SINGLENOTE],
		        or: true
		      };
		    }
		  }, {
		    key: 'CHORD',
		    value: function CHORD() {
		      var _this2 = this;
		
		      return {
		        expect: [this.LPAREN, this.NOTES, this.RPAREN],
		        run: function run(state) {
		          return _this2.builder.addChord(state.matches[1]);
		        }
		      };
		    }
		  }, {
		    key: 'NOTES',
		    value: function NOTES() {
		      return {
		        expect: [this.NOTE],
		        oneOrMore: true
		      };
		    }
		  }, {
		    key: 'NOTE',
		    value: function NOTE() {
		      return {
		        expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE]
		      };
		    }
		  }, {
		    key: 'SINGLENOTE',
		    value: function SINGLENOTE() {
		      var _this3 = this;
		
		      return {
		        expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],
		        run: function run(state) {
		          return _this3.builder.addSingleNote(state.matches[0], state.matches[1], state.matches[2]);
		        }
		      };
		    }
		  }, {
		    key: 'ACCIDENTAL',
		    value: function ACCIDENTAL() {
		      return {
		        expect: [this.ACCIDENTALS],
		        maybe: true
		      };
		    }
		  }, {
		    key: 'DOTS',
		    value: function DOTS() {
		      var _this4 = this;
		
		      return {
		        expect: [this.DOT],
		        zeroOrMore: true,
		        run: function run(state) {
		          return _this4.builder.setNoteDots(state.matches[0]);
		        }
		      };
		    }
		  }, {
		    key: 'TYPE',
		    value: function TYPE() {
		      var _this5 = this;
		
		      return {
		        expect: [this.SLASH, this.MAYBESLASH, this.TYPES],
		        maybe: true,
		        run: function run(state) {
		          return _this5.builder.setNoteType(state.matches[2]);
		        }
		      };
		    }
		  }, {
		    key: 'DURATION',
		    value: function DURATION() {
		      var _this6 = this;
		
		      return {
		        expect: [this.SLASH, this.DURATIONS],
		        maybe: true,
		        run: function run(state) {
		          return _this6.builder.setNoteDuration(state.matches[1]);
		        }
		      };
		    }
		  }, {
		    key: 'OPTS',
		    value: function OPTS() {
		      return {
		        expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET],
		        maybe: true
		      };
		    }
		  }, {
		    key: 'KEYVALS',
		    value: function KEYVALS() {
		      return {
		        expect: [this.COMMA, this.KEYVAL],
		        zeroOrMore: true
		      };
		    }
		  }, {
		    key: 'KEYVAL',
		    value: function KEYVAL() {
		      var _this7 = this;
		
		      var unquote = function unquote(str) {
		        return str.slice(1, -1);
		      };
		
		      return {
		        expect: [this.KEY, this.EQUALS, this.VAL],
		        run: function run(state) {
		          return _this7.builder.addNoteOption(state.matches[0], unquote(state.matches[2]));
		        }
		      };
		    }
		  }, {
		    key: 'VAL',
		    value: function VAL() {
		      return {
		        expect: [this.SVAL, this.DVAL],
		        or: true
		      };
		    }
		  }, {
		    key: 'KEY',
		    value: function KEY() {
		      return { token: '[a-zA-Z][a-zA-Z0-9]*' };
		    }
		  }, {
		    key: 'DVAL',
		    value: function DVAL() {
		      return { token: '["][^"]*["]' };
		    }
		  }, {
		    key: 'SVAL',
		    value: function SVAL() {
		      return { token: "['][^']*[']" };
		    }
		  }, {
		    key: 'NOTENAME',
		    value: function NOTENAME() {
		      return { token: '[a-gA-G]' };
		    }
		  }, {
		    key: 'OCTAVE',
		    value: function OCTAVE() {
		      return { token: '[0-9]+' };
		    }
		  }, {
		    key: 'ACCIDENTALS',
		    value: function ACCIDENTALS() {
		      return { token: 'bbs|bb|bss|bs|b|db|d|##|#|n|\\+\\+-|\\+-|\\+\\+|\\+' };
		    }
		  }, {
		    key: 'DURATIONS',
		    value: function DURATIONS() {
		      return { token: '[0-9whq]+' };
		    }
		  }, {
		    key: 'TYPES',
		    value: function TYPES() {
		      return { token: '[rRsSxX]' };
		    }
		  }, {
		    key: 'LPAREN',
		    value: function LPAREN() {
		      return { token: '[(]' };
		    }
		  }, {
		    key: 'RPAREN',
		    value: function RPAREN() {
		      return { token: '[)]' };
		    }
		  }, {
		    key: 'COMMA',
		    value: function COMMA() {
		      return { token: '[,]' };
		    }
		  }, {
		    key: 'DOT',
		    value: function DOT() {
		      return { token: '[.]' };
		    }
		  }, {
		    key: 'SLASH',
		    value: function SLASH() {
		      return { token: '[/]' };
		    }
		  }, {
		    key: 'MAYBESLASH',
		    value: function MAYBESLASH() {
		      return { token: '[/]?' };
		    }
		  }, {
		    key: 'EQUALS',
		    value: function EQUALS() {
		      return { token: '[=]' };
		    }
		  }, {
		    key: 'LBRACKET',
		    value: function LBRACKET() {
		      return { token: '\\[' };
		    }
		  }, {
		    key: 'RBRACKET',
		    value: function RBRACKET() {
		      return { token: '\\]' };
		    }
		  }, {
		    key: 'EOL',
		    value: function EOL() {
		      return { token: '$' };
		    }
		  }]);
		
		  return Grammar;
		}();
		
		var Builder = function () {
		  function Builder(factory) {
		    _classCallCheck(this, Builder);
		
		    this.factory = factory;
		    this.commitHooks = [];
		    this.reset();
		  }
		
		  _createClass(Builder, [{
		    key: 'reset',
		    value: function reset() {
		      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
		
		      this.options = {
		        stem: 'auto',
		        clef: 'treble'
		      };
		      this.elements = {
		        notes: [],
		        accidentals: []
		      };
		      this.rollingDuration = '8';
		      this.resetPiece();
		      _extends(this.options, options);
		    }
		  }, {
		    key: 'getFactory',
		    value: function getFactory() {
		      return this.factory;
		    }
		  }, {
		    key: 'getElements',
		    value: function getElements() {
		      return this.elements;
		    }
		  }, {
		    key: 'addCommitHook',
		    value: function addCommitHook(commitHook) {
		      this.commitHooks.push(commitHook);
		    }
		  }, {
		    key: 'resetPiece',
		    value: function resetPiece() {
		      L('resetPiece');
		      this.piece = {
		        chord: [],
		        duration: this.rollingDuration,
		        dots: 0,
		        type: undefined,
		        options: {}
		      };
		    }
		  }, {
		    key: 'setNoteDots',
		    value: function setNoteDots(dots) {
		      L('setNoteDots:', dots);
		      if (dots) this.piece.dots = dots.length;
		    }
		  }, {
		    key: 'setNoteDuration',
		    value: function setNoteDuration(duration) {
		      L('setNoteDuration:', duration);
		      this.rollingDuration = this.piece.duration = duration || this.rollingDuration;
		    }
		  }, {
		    key: 'setNoteType',
		    value: function setNoteType(type) {
		      L('setNoteType:', type);
		      if (type) this.piece.type = type;
		    }
		  }, {
		    key: 'addNoteOption',
		    value: function addNoteOption(key, value) {
		      L('addNoteOption: key:', key, 'value:', value);
		      this.piece.options[key] = value;
		    }
		  }, {
		    key: 'addNote',
		    value: function addNote(key, accid, octave) {
		      L('addNote:', key, accid, octave);
		      this.piece.chord.push({ key: key, accid: accid, octave: octave });
		    }
		  }, {
		    key: 'addSingleNote',
		    value: function addSingleNote(key, accid, octave) {
		      L('addSingleNote:', key, accid, octave);
		      this.addNote(key, accid, octave);
		    }
		  }, {
		    key: 'addChord',
		    value: function addChord(notes) {
		      var _this8 = this;
		
		      L('startChord');
		      if (_typeof(notes[0]) !== 'object') {
		        this.addSingleNote(notes[0]);
		      } else {
		        notes.forEach(function (n) {
		          if (n) _this8.addNote.apply(_this8, _toConsumableArray(n));
		        });
		      }
		      L('endChord');
		    }
		  }, {
		    key: 'commitPiece',
		    value: function commitPiece() {
		      var _this9 = this;
		
		      L('commitPiece');
		      var factory = this.factory;
		
		
		      if (!factory) return;
		
		      var options = _extends({}, this.options, this.piece.options);
		      var stem = options.stem;
		      var clef = options.clef;
		
		      var autoStem = stem.toLowerCase() === 'auto';
		      var stemDirection = !autoStem && stem.toLowerCase() === 'up' ? _stavenote.StaveNote.STEM_UP : _stavenote.StaveNote.STEM_DOWN;
		
		      // Build StaveNotes.
		      var _piece = this.piece;
		      var chord = _piece.chord;
		      var duration = _piece.duration;
		      var dots = _piece.dots;
		      var type = _piece.type;
		
		      var keys = chord.map(function (note) {
		        return note.key + '/' + note.octave;
		      });
		      var note = factory.StaveNote({
		        keys: keys,
		        duration: duration,
		        dots: dots,
		        type: type,
		        clef: clef,
		        auto_stem: autoStem
		      });
		      if (!autoStem) note.setStemDirection(stemDirection);
		
		      // Attach accidentals.
		      var accids = chord.map(function (note) {
		        return note.accid || null;
		      });
		      accids.forEach(function (accid, i) {
		        if (accid) note.addAccidental(i, factory.Accidental({ type: accid }));
		      });
		
		      // Attach dots.
		      for (var i = 0; i < dots; i++) {
		        note.addDotToAll();
		      }this.commitHooks.forEach(function (fn) {
		        return fn(options, note, _this9);
		      });
		
		      this.elements.notes.push(note);
		      this.elements.accidentals.concat(accids);
		      this.resetPiece();
		    }
		  }]);
		
		  return Builder;
		}();
		
		function setId(_ref, note) {
		  var id = _ref.id;
		
		  if (id === undefined) return;
		
		  note.setAttribute('id', id);
		}
		
		function setClass(options, note) {
		  if (!options.class) return;
		
		  var commaSeparatedRegex = /\s*,\s*/;
		
		  options.class.split(commaSeparatedRegex).forEach(function (className) {
		    return note.addClass(className);
		  });
		}
		
		var EasyScore = exports.EasyScore = function () {
		  function EasyScore() {
		    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
		
		    _classCallCheck(this, EasyScore);
		
		    this.setOptions(options);
		    this.defaults = {
		      clef: 'treble',
		      time: '4/4',
		      stem: 'auto'
		    };
		  }
		
		  _createClass(EasyScore, [{
		    key: 'set',
		    value: function set(defaults) {
		      _extends(this.defaults, defaults);
		      return this;
		    }
		  }, {
		    key: 'setOptions',
		    value: function setOptions(options) {
		      var _this10 = this;
		
		      this.options = _extends({
		        factory: null,
		        builder: null,
		        commitHooks: [setId, setClass, _articulation.Articulation.easyScoreHook],
		        throwOnError: false
		      }, options);
		
		      this.factory = this.options.factory;
		      this.builder = this.options.builder || new Builder(this.factory);
		      this.grammar = new Grammar(this.builder);
		      this.parser = new _parser.Parser(this.grammar);
		      this.options.commitHooks.forEach(function (commitHook) {
		        return _this10.addCommitHook(commitHook);
		      });
		      return this;
		    }
		  }, {
		    key: 'setContext',
		    value: function setContext(context) {
		      if (this.factory) this.factory.setContext(context);
		      return this;
		    }
		  }, {
		    key: 'parse',
		    value: function parse(line) {
		      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
		
		      this.builder.reset(options);
		      var result = this.parser.parse(line);
		      if (!result.success && this.options.throwOnError) {
		        throw new X('Error parsing line: ' + line, result);
		      }
		      return result;
		    }
		  }, {
		    key: 'beam',
		    value: function beam(notes) {
		      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
		
		      this.factory.Beam({ notes: notes, options: options });
		      return notes;
		    }
		  }, {
		    key: 'tuplet',
		    value: function tuplet(notes) {
		      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
		
		      this.factory.Tuplet({ notes: notes, options: options });
		      return notes;
		    }
		  }, {
		    key: 'notes',
		    value: function notes(line) {
		      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
		
		      options = _extends({ clef: this.defaults.clef, stem: this.defaults.stem }, options);
		      this.parse(line, options);
		      return this.builder.getElements().notes;
		    }
		  }, {
		    key: 'voice',
		    value: function voice(notes, voiceOptions) {
		      voiceOptions = _extends({ time: this.defaults.time }, voiceOptions);
		      return this.factory.Voice(voiceOptions).addTickables(notes);
		    }
		  }, {
		    key: 'addCommitHook',
		    value: function addCommitHook(commitHook) {
		      return this.builder.addCommitHook(commitHook);
		    }
		  }]);

		  return EasyScore;
		}();

	/***/ },
	/* 78 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Parser = exports.X = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// A generic text parsing class for VexFlow.
		
		var _vex = __webpack_require__(1);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		// To enable logging for this class. Set `Vex.Flow.Parser.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (Parser.DEBUG) _vex.Vex.L('Vex.Flow.Parser', args);
		}
		
		var X = exports.X = _vex.Vex.MakeException('ParserError');
		
		// Converts parser results into an easy to reference list that can be
		// used in triggers.
		function flattenMatches(results) {
		  if (results.matchedString !== undefined) return results.matchedString;
		  if (results.results) return flattenMatches(results.results);
		  if (results.length === 1) return flattenMatches(results[0]);
		  if (results.length === 0) return null;
		  return results.map(flattenMatches);
		}
		
		// This is the base parser class. Given an arbitrary context-free grammar, it
		// can parse any line and execute code when specific rules are met (e.g.,
		// when a string is terminated.)
		
		var Parser = exports.Parser = function () {
		  // For an example of a simple grammar, take a look at tests/parser_tests.js or
		  // the EasyScore grammar in easyscore.js.
		  function Parser(grammar) {
		    _classCallCheck(this, Parser);
		
		    this.grammar = grammar;
		  }
		
		  // Parse `line` using current grammar. Returns {success: true} if the
		  // line parsed correctly, otherwise returns `{success: false, errorPos: N}`
		  // where `errorPos` is the location of the error in the string.
		
		
		  _createClass(Parser, [{
		    key: 'parse',
		    value: function parse(line) {
		      this.line = line;
		      this.pos = 0;
		      this.errorPos = -1;
		      var results = this.expect(this.grammar.begin());
		      results.errorPos = this.errorPos;
		      return results;
		    }
		  }, {
		    key: 'matchFail',
		    value: function matchFail(returnPos) {
		      if (this.errorPos === -1) this.errorPos = this.pos;
		      this.pos = returnPos;
		    }
		  }, {
		    key: 'matchSuccess',
		    value: function matchSuccess() {
		      this.errorPos = -1;
		    }
		
		    // Look for `token` in this.line[this.pos], and return success
		    // if one is found. `token` is specified as a regular expression.
		
		  }, {
		    key: 'matchToken',
		    value: function matchToken(token) {
		      var noSpace = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
		
		      var regexp = noSpace ? new RegExp('^((' + token + '))') : new RegExp('^((' + token + ')\\s*)');
		      var workingLine = this.line.slice(this.pos);
		      var result = workingLine.match(regexp);
		      if (result !== null) {
		        return {
		          success: true,
		          matchedString: result[2],
		          incrementPos: result[1].length,
		          pos: this.pos
		        };
		      } else {
		        return {
		          success: false,
		          pos: this.pos
		        };
		      }
		    }
		
		    // Execute rule to match a sequence of tokens (or rules). If `maybe` is
		    // set, then return success even if the token is not found, but reset
		    // the position before exiting.
		
		  }, {
		    key: 'expectOne',
		    value: function expectOne(rule) {
		      var maybe = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
		
		      var results = [];
		      var pos = this.pos;
		
		      var allMatches = true;
		      var oneMatch = false;
		      maybe = maybe === true || rule.maybe === true;
		
		      // Execute all sub rules in sequence.
		      for (var i = 0; i < rule.expect.length; i++) {
		        var next = rule.expect[i];
		        var localPos = this.pos;
		        var result = this.expect(next);
		
		        // If `rule.or` is set, then return success if any one
		        // of the subrules match, else all subrules must match.
		        if (result.success) {
		          results.push(result);
		          oneMatch = true;
		          if (rule.or) break;
		        } else {
		          allMatches = false;
		          if (!rule.or) {
		            this.pos = localPos;
		            break;
		          }
		        }
		      }
		
		      var gotOne = rule.or && oneMatch || allMatches;
		      var success = gotOne || maybe === true;
		      if (maybe && !gotOne) this.pos = pos;
		      if (success) this.matchSuccess();else this.matchFail(pos);
		      return { success: success, results: results, numMatches: gotOne ? 1 : 0 };
		    }
		
		    // Try to match multiple (one or more) instances of the rule. If `maybe` is set,
		    // then a failed match is also a success (but the position is reset).
		
		  }, {
		    key: 'expectOneOrMore',
		    value: function expectOneOrMore(rule) {
		      var maybe = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
		
		      var results = [];
		      var pos = this.pos;
		      var numMatches = 0;
		      var more = true;
		
		      do {
		        var result = this.expectOne(rule);
		        if (result.success) {
		          numMatches++;
		          results.push(result.results);
		        } else {
		          more = false;
		        }
		      } while (more);
		
		      var success = numMatches > 0 || maybe === true;
		      if (maybe && !(numMatches > 0)) this.pos = pos;
		      if (success) this.matchSuccess();else this.matchFail(pos);
		      return { success: success, results: results, numMatches: numMatches };
		    }
		
		    // Match zero or more instances of `rule`. Offloads to `expectOneOrMore`.
		
		  }, {
		    key: 'expectZeroOrMore',
		    value: function expectZeroOrMore(rule) {
		      return this.expectOneOrMore(rule, true);
		    }
		
		    // Execute the rule produced by the provided the `rules` function. This
		    // ofloads to one of the above matchers and consolidates the results. It is also
		    // responsible for executing any code triggered by the rule (in `rule.run`.)
		
		  }, {
		    key: 'expect',
		    value: function expect(rules) {
		      L('Evaluating rules:', rules);
		      var result = void 0;
		      if (!rules) {
		        throw new X('Invalid Rule: ' + rules, rules);
		      }
		
		      // Get rule from Grammar class.
		      var rule = rules.bind(this.grammar)();
		
		      if (rule.token) {
		        // Base case: parse the regex and throw an error if the
		        // line doesn't match.
		        result = this.matchToken(rule.token, rule.noSpace === true);
		        if (result.success) {
		          // Token match! Update position and throw away parsed portion
		          // of string.
		          this.pos += result.incrementPos;
		        }
		      } else if (rule.expect) {
		        if (rule.oneOrMore) {
		          result = this.expectOneOrMore(rule);
		        } else if (rule.zeroOrMore) {
		          result = this.expectZeroOrMore(rule);
		        } else {
		          result = this.expectOne(rule);
		        }
		      } else {
		        throw new X('Bad grammar! No `token` or `expect` property', rule);
		      }
		
		      // If there's a trigger attached to this rule, then pull it.
		      result.matches = [];
		      if (result.results) result.results.forEach(function (r) {
		        return result.matches.push(flattenMatches(r));
		      });
		      if (rule.run && result.success) rule.run(result);
		      return result;
		    }
		  }]);

		  return Parser;
		}();

	/***/ }
	/******/ ])
	});
	;
	//# sourceMappingURL=vexflow-debug.js.map

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Header = __webpack_require__(246);

	var _Header2 = _interopRequireDefault(_Header);

	var _reactRouter = __webpack_require__(179);

	var _reactStormpath = __webpack_require__(234);

	var _reactDocumentTitle = __webpack_require__(240);

	var _reactDocumentTitle2 = _interopRequireDefault(_reactDocumentTitle);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Exersices = function (_React$Component) {
		_inherits(Exersices, _React$Component);

		function Exersices() {
			_classCallCheck(this, Exersices);

			return _possibleConstructorReturn(this, (Exersices.__proto__ || Object.getPrototypeOf(Exersices)).apply(this, arguments));
		}

		_createClass(Exersices, [{
			key: 'render',
			value: function render() {
				return _react2.default.createElement(
					_reactDocumentTitle2.default,
					{ title: 'Voicercise / Exersices' },
					_react2.default.createElement(
						'div',
						null,
						_react2.default.createElement(
							'h1',
							null,
							'Exersices'
						),
						_react2.default.createElement(
							_reactRouter.Link,
							{ to: '/range' },
							'Vocal Range Test'
						),
						_react2.default.createElement(
							_reactRouter.Link,
							{ to: '#' },
							'Exercise #'
						),
						_react2.default.createElement(
							_reactRouter.Link,
							{ to: '#' },
							'Exercise #'
						),
						_react2.default.createElement(
							_reactRouter.Link,
							{ to: '#' },
							'Exercise #'
						),
						_react2.default.createElement(
							_reactRouter.Link,
							{ to: '#' },
							'Exercise #'
						),
						_react2.default.createElement(
							_reactRouter.Link,
							{ to: '#' },
							'Exercise #'
						)
					)
				);
			}
		}]);

		return Exersices;
	}(_react2.default.Component);

	exports.default = Exersices;

/***/ }
/******/ ]);